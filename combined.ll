; ModuleID = 'header.cpp'
source_filename = "header.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%class.hamt = type { [7 x %class.KV], i64 }
%class.KV = type { %"union.KV<key, key, 0>::Key", %"union.KV<key, key, 0>::Val" }
%"union.KV<key, key, 0>::Key" = type { i64 }
%"union.KV<key, key, 0>::Val" = type { %class.KV.0* }
%class.KV.0 = type { %"union.KV<key, key, 1>::Key", %"union.KV<key, key, 1>::Val" }
%"union.KV<key, key, 1>::Key" = type { i64 }
%"union.KV<key, key, 1>::Val" = type { %class.KV.1* }
%class.KV.1 = type { %"union.KV<key, key, 2>::Key", %"union.KV<key, key, 2>::Val" }
%"union.KV<key, key, 2>::Key" = type { i64 }
%"union.KV<key, key, 2>::Val" = type { %class.KV.2* }
%class.KV.2 = type { %"union.KV<key, key, 3>::Key", %"union.KV<key, key, 3>::Val" }
%"union.KV<key, key, 3>::Key" = type { i64 }
%"union.KV<key, key, 3>::Val" = type { %class.KV.3* }
%class.KV.3 = type { %"union.KV<key, key, 4>::Key", %"union.KV<key, key, 4>::Val" }
%"union.KV<key, key, 4>::Key" = type { i64 }
%"union.KV<key, key, 4>::Val" = type { %class.KV.4* }
%class.KV.4 = type { %"union.KV<key, key, 5>::Key", %"union.KV<key, key, 5>::Val" }
%"union.KV<key, key, 5>::Key" = type { i64 }
%"union.KV<key, key, 5>::Val" = type { %class.KV.5* }
%class.KV.5 = type { %"union.KV<key, key, 6>::Key", %"union.KV<key, key, 6>::Val" }
%"union.KV<key, key, 6>::Key" = type { i64 }
%"union.KV<key, key, 6>::Val" = type { %class.KV.6* }
%class.KV.6 = type { %"union.KV<key, key, 7>::Key", %"union.KV<key, key, 7>::Val" }
%"union.KV<key, key, 7>::Key" = type { i64 }
%"union.KV<key, key, 7>::Val" = type { %class.KV.7* }
%class.KV.7 = type { %"union.KV<key, key, 8>::Key", %"union.KV<key, key, 8>::Val" }
%"union.KV<key, key, 8>::Key" = type { i64 }
%"union.KV<key, key, 8>::Val" = type { %class.KV.8* }
%class.KV.8 = type { %"union.KV<key, key, 9>::Key", %"union.KV<key, key, 9>::Val" }
%"union.KV<key, key, 9>::Key" = type { i64 }
%"union.KV<key, key, 9>::Val" = type { %class.KV.9* }
%class.KV.9 = type { %"union.KV<key, key, 10>::Key", %"union.KV<key, key, 10>::Val" }
%"union.KV<key, key, 10>::Key" = type { i64 }
%"union.KV<key, key, 10>::Val" = type { %class.LL* }
%class.LL = type { %class.key*, %class.key*, %class.LL* }
%class.key = type { i64 }

$_ZN4hamtI3keyS0_EC2Ev = comdat any

$_ZN3keyC2Em = comdat any

$_ZNK4hamtI3keyS0_E6insertEPKS0_S3_ = comdat any

$_ZNK4hamtI3keyS0_E3getEPKS0_ = comdat any

$_ZNK4hamtI3keyS0_E6removeEPKS0_ = comdat any

$_ZN2KVI3keyS0_Lj0EEC2Ev = comdat any

$_ZN2KVI3keyS0_Lj0EE3KeyC2Em = comdat any

$_ZN2KVI3keyS0_Lj0EE3ValC2EPKS0_ = comdat any

$_ZNK3key4hashEv = comdat any

$_ZN2KVI3keyS0_Lj0EEC2EPKS0_S3_ = comdat any

$_ZNK3keyeqERKS_ = comdat any

$_ZN2KVI3keyS0_Lj0EE14new_inner_nodeEmPKS0_S3_mS3_S3_ = comdat any

$_ZN2KVI3keyS0_Lj0EE12insert_innerERKS1_mPKS0_S5_Pm = comdat any

$_ZN2KVI3keyS0_Lj0EE3KeyC2EPKS0_ = comdat any

$_ZN2KVI3keyS0_Lj1EE14new_inner_nodeEmPKS0_S3_mS3_S3_ = comdat any

$_ZN2KVI3keyS0_Lj1EEC2ERKS1_ = comdat any

$_ZN2KVI3keyS0_Lj0EEC2EmPKS_IS0_S0_Lj1EE = comdat any

$_ZN2KVI3keyS0_Lj1EEC2EPKS0_S3_ = comdat any

$_ZN2KVI3keyS0_Lj2EE14new_inner_nodeEmPKS0_S3_mS3_S3_ = comdat any

$_ZN2KVI3keyS0_Lj2EEC2ERKS1_ = comdat any

$_ZN2KVI3keyS0_Lj1EEC2EmPKS_IS0_S0_Lj2EE = comdat any

$_ZN2KVI3keyS0_Lj2EEC2EPKS0_S3_ = comdat any

$_ZN2KVI3keyS0_Lj3EE14new_inner_nodeEmPKS0_S3_mS3_S3_ = comdat any

$_ZN2KVI3keyS0_Lj3EEC2ERKS1_ = comdat any

$_ZN2KVI3keyS0_Lj2EEC2EmPKS_IS0_S0_Lj3EE = comdat any

$_ZN2KVI3keyS0_Lj3EEC2EPKS0_S3_ = comdat any

$_ZN2KVI3keyS0_Lj4EE14new_inner_nodeEmPKS0_S3_mS3_S3_ = comdat any

$_ZN2KVI3keyS0_Lj4EEC2ERKS1_ = comdat any

$_ZN2KVI3keyS0_Lj3EEC2EmPKS_IS0_S0_Lj4EE = comdat any

$_ZN2KVI3keyS0_Lj4EEC2EPKS0_S3_ = comdat any

$_ZN2KVI3keyS0_Lj5EE14new_inner_nodeEmPKS0_S3_mS3_S3_ = comdat any

$_ZN2KVI3keyS0_Lj5EEC2ERKS1_ = comdat any

$_ZN2KVI3keyS0_Lj4EEC2EmPKS_IS0_S0_Lj5EE = comdat any

$_ZN2KVI3keyS0_Lj5EEC2EPKS0_S3_ = comdat any

$_ZN2KVI3keyS0_Lj6EE14new_inner_nodeEmPKS0_S3_mS3_S3_ = comdat any

$_ZN2KVI3keyS0_Lj6EEC2ERKS1_ = comdat any

$_ZN2KVI3keyS0_Lj5EEC2EmPKS_IS0_S0_Lj6EE = comdat any

$_ZN2KVI3keyS0_Lj6EEC2EPKS0_S3_ = comdat any

$_ZN2KVI3keyS0_Lj7EE14new_inner_nodeEmPKS0_S3_mS3_S3_ = comdat any

$_ZN2KVI3keyS0_Lj7EEC2ERKS1_ = comdat any

$_ZN2KVI3keyS0_Lj6EEC2EmPKS_IS0_S0_Lj7EE = comdat any

$_ZN2KVI3keyS0_Lj7EEC2EPKS0_S3_ = comdat any

$_ZN2KVI3keyS0_Lj8EE14new_inner_nodeEmPKS0_S3_mS3_S3_ = comdat any

$_ZN2KVI3keyS0_Lj8EEC2ERKS1_ = comdat any

$_ZN2KVI3keyS0_Lj7EEC2EmPKS_IS0_S0_Lj8EE = comdat any

$_ZN2KVI3keyS0_Lj8EEC2EPKS0_S3_ = comdat any

$_ZN2KVI3keyS0_Lj9EE14new_inner_nodeEmPKS0_S3_mS3_S3_ = comdat any

$_ZN2KVI3keyS0_Lj9EEC2ERKS1_ = comdat any

$_ZN2KVI3keyS0_Lj8EEC2EmPKS_IS0_S0_Lj9EE = comdat any

$_ZN2KVI3keyS0_Lj9EEC2EPKS0_S3_ = comdat any

$_ZN2KVI3keyS0_Lj10EE14new_inner_nodeEmPKS0_S3_mS3_S3_ = comdat any

$_ZN2KVI3keyS0_Lj10EEC2ERKS1_ = comdat any

$_ZN2KVI3keyS0_Lj9EEC2EmPKS_IS0_S0_Lj10EE = comdat any

$_ZN2KVI3keyS0_Lj10EEC2EPKS0_S3_ = comdat any

$_ZN2LLI3keyS0_EC2EPKS0_S3_PKS1_ = comdat any

$_ZN2KVI3keyS0_Lj10EEC2EmPK2LLIS0_S0_E = comdat any

$_ZN2KVI3keyS0_Lj10EE3KeyC2Em = comdat any

$_ZN2KVI3keyS0_Lj10EE3ValC2EPK2LLIS0_S0_E = comdat any

$_ZN2KVI3keyS0_Lj9EE3KeyC2Em = comdat any

$_ZN2KVI3keyS0_Lj9EE3ValC2EPKS_IS0_S0_Lj10EE = comdat any

$_ZN2KVI3keyS0_Lj10EE3KeyC2EPKS0_ = comdat any

$_ZN2KVI3keyS0_Lj10EE3ValC2EPKS0_ = comdat any

$_ZN2KVI3keyS0_Lj8EE3KeyC2Em = comdat any

$_ZN2KVI3keyS0_Lj8EE3ValC2EPKS_IS0_S0_Lj9EE = comdat any

$_ZN2KVI3keyS0_Lj9EE3KeyC2EPKS0_ = comdat any

$_ZN2KVI3keyS0_Lj9EE3ValC2EPKS0_ = comdat any

$_ZN2KVI3keyS0_Lj7EE3KeyC2Em = comdat any

$_ZN2KVI3keyS0_Lj7EE3ValC2EPKS_IS0_S0_Lj8EE = comdat any

$_ZN2KVI3keyS0_Lj8EE3KeyC2EPKS0_ = comdat any

$_ZN2KVI3keyS0_Lj8EE3ValC2EPKS0_ = comdat any

$_ZN2KVI3keyS0_Lj6EE3KeyC2Em = comdat any

$_ZN2KVI3keyS0_Lj6EE3ValC2EPKS_IS0_S0_Lj7EE = comdat any

$_ZN2KVI3keyS0_Lj7EE3KeyC2EPKS0_ = comdat any

$_ZN2KVI3keyS0_Lj7EE3ValC2EPKS0_ = comdat any

$_ZN2KVI3keyS0_Lj5EE3KeyC2Em = comdat any

$_ZN2KVI3keyS0_Lj5EE3ValC2EPKS_IS0_S0_Lj6EE = comdat any

$_ZN2KVI3keyS0_Lj6EE3KeyC2EPKS0_ = comdat any

$_ZN2KVI3keyS0_Lj6EE3ValC2EPKS0_ = comdat any

$_ZN2KVI3keyS0_Lj4EE3KeyC2Em = comdat any

$_ZN2KVI3keyS0_Lj4EE3ValC2EPKS_IS0_S0_Lj5EE = comdat any

$_ZN2KVI3keyS0_Lj5EE3KeyC2EPKS0_ = comdat any

$_ZN2KVI3keyS0_Lj5EE3ValC2EPKS0_ = comdat any

$_ZN2KVI3keyS0_Lj3EE3KeyC2Em = comdat any

$_ZN2KVI3keyS0_Lj3EE3ValC2EPKS_IS0_S0_Lj4EE = comdat any

$_ZN2KVI3keyS0_Lj4EE3KeyC2EPKS0_ = comdat any

$_ZN2KVI3keyS0_Lj4EE3ValC2EPKS0_ = comdat any

$_ZN2KVI3keyS0_Lj2EE3KeyC2Em = comdat any

$_ZN2KVI3keyS0_Lj2EE3ValC2EPKS_IS0_S0_Lj3EE = comdat any

$_ZN2KVI3keyS0_Lj3EE3KeyC2EPKS0_ = comdat any

$_ZN2KVI3keyS0_Lj3EE3ValC2EPKS0_ = comdat any

$_ZN2KVI3keyS0_Lj1EE3KeyC2Em = comdat any

$_ZN2KVI3keyS0_Lj1EE3ValC2EPKS_IS0_S0_Lj2EE = comdat any

$_ZN2KVI3keyS0_Lj2EE3KeyC2EPKS0_ = comdat any

$_ZN2KVI3keyS0_Lj2EE3ValC2EPKS0_ = comdat any

$_ZN2KVI3keyS0_Lj0EE3ValC2EPKS_IS0_S0_Lj1EE = comdat any

$_ZN2KVI3keyS0_Lj1EE3KeyC2EPKS0_ = comdat any

$_ZN2KVI3keyS0_Lj1EE3ValC2EPKS0_ = comdat any

$_ZN2KVI3keyS0_Lj1EE11update_nodeEPKS1_jjRS2_ = comdat any

$_ZN2KVI3keyS0_Lj1EE12insert_innerERKS1_mPKS0_S5_Pm = comdat any

$_ZN2KVI3keyS0_Lj2EE11update_nodeEPKS1_jjRS2_ = comdat any

$_ZN2KVI3keyS0_Lj2EE12insert_innerERKS1_mPKS0_S5_Pm = comdat any

$_ZN2KVI3keyS0_Lj3EE11update_nodeEPKS1_jjRS2_ = comdat any

$_ZN2KVI3keyS0_Lj3EE12insert_innerERKS1_mPKS0_S5_Pm = comdat any

$_ZN2KVI3keyS0_Lj4EE11update_nodeEPKS1_jjRS2_ = comdat any

$_ZN2KVI3keyS0_Lj4EE12insert_innerERKS1_mPKS0_S5_Pm = comdat any

$_ZN2KVI3keyS0_Lj5EE11update_nodeEPKS1_jjRS2_ = comdat any

$_ZN2KVI3keyS0_Lj5EE12insert_innerERKS1_mPKS0_S5_Pm = comdat any

$_ZN2KVI3keyS0_Lj6EE11update_nodeEPKS1_jjRS2_ = comdat any

$_ZN2KVI3keyS0_Lj6EE12insert_innerERKS1_mPKS0_S5_Pm = comdat any

$_ZN2KVI3keyS0_Lj7EE11update_nodeEPKS1_jjRS2_ = comdat any

$_ZN2KVI3keyS0_Lj7EE12insert_innerERKS1_mPKS0_S5_Pm = comdat any

$_ZN2KVI3keyS0_Lj8EE11update_nodeEPKS1_jjRS2_ = comdat any

$_ZN2KVI3keyS0_Lj8EE12insert_innerERKS1_mPKS0_S5_Pm = comdat any

$_ZN2KVI3keyS0_Lj9EE11update_nodeEPKS1_jjRS2_ = comdat any

$_ZN2KVI3keyS0_Lj9EE12insert_innerERKS1_mPKS0_S5_Pm = comdat any

$_ZN2KVI3keyS0_Lj10EE11update_nodeEPKS1_jjRS2_ = comdat any

$_ZN2KVI3keyS0_Lj10EE12insert_innerERKS1_mPKS0_S5_Pm = comdat any

$_ZNK2LLI3keyS0_E6insertEPKS0_S3_Pm = comdat any

$_ZN2KVI3keyS0_Lj0EE10inner_findERKS1_mPKS0_ = comdat any

$_ZN2KVI3keyS0_Lj1EE10inner_findERKS1_mPKS0_ = comdat any

$_ZN2KVI3keyS0_Lj2EE10inner_findERKS1_mPKS0_ = comdat any

$_ZN2KVI3keyS0_Lj3EE10inner_findERKS1_mPKS0_ = comdat any

$_ZN2KVI3keyS0_Lj4EE10inner_findERKS1_mPKS0_ = comdat any

$_ZN2KVI3keyS0_Lj5EE10inner_findERKS1_mPKS0_ = comdat any

$_ZN2KVI3keyS0_Lj6EE10inner_findERKS1_mPKS0_ = comdat any

$_ZN2KVI3keyS0_Lj7EE10inner_findERKS1_mPKS0_ = comdat any

$_ZN2KVI3keyS0_Lj8EE10inner_findERKS1_mPKS0_ = comdat any

$_ZN2KVI3keyS0_Lj9EE10inner_findERKS1_mPKS0_ = comdat any

$_ZN2KVI3keyS0_Lj10EE10inner_findERKS1_mPKS0_ = comdat any

$_ZNK2LLI3keyS0_E4findEPKS0_ = comdat any

$_ZN2KVI3keyS0_Lj0EE12remove_innerERKS1_mPKS0_Pm = comdat any

$_ZNK2KVI3keyS0_Lj0EEeqERKS1_ = comdat any

$_ZN2KVI3keyS0_Lj0EEC2ERKS1_ = comdat any

$_ZN2KVI3keyS0_Lj1EE12remove_innerERKS1_mPKS0_Pm = comdat any

$_ZNK2KVI3keyS0_Lj1EEeqERKS1_ = comdat any

$_ZN2KVI3keyS0_Lj2EE12remove_innerERKS1_mPKS0_Pm = comdat any

$_ZNK2KVI3keyS0_Lj2EEeqERKS1_ = comdat any

$_ZN2KVI3keyS0_Lj3EE12remove_innerERKS1_mPKS0_Pm = comdat any

$_ZNK2KVI3keyS0_Lj3EEeqERKS1_ = comdat any

$_ZN2KVI3keyS0_Lj4EE12remove_innerERKS1_mPKS0_Pm = comdat any

$_ZNK2KVI3keyS0_Lj4EEeqERKS1_ = comdat any

$_ZN2KVI3keyS0_Lj5EE12remove_innerERKS1_mPKS0_Pm = comdat any

$_ZNK2KVI3keyS0_Lj5EEeqERKS1_ = comdat any

$_ZN2KVI3keyS0_Lj6EE12remove_innerERKS1_mPKS0_Pm = comdat any

$_ZNK2KVI3keyS0_Lj6EEeqERKS1_ = comdat any

$_ZN2KVI3keyS0_Lj7EE12remove_innerERKS1_mPKS0_Pm = comdat any

$_ZNK2KVI3keyS0_Lj7EEeqERKS1_ = comdat any

$_ZN2KVI3keyS0_Lj8EE12remove_innerERKS1_mPKS0_Pm = comdat any

$_ZNK2KVI3keyS0_Lj8EEeqERKS1_ = comdat any

$_ZN2KVI3keyS0_Lj9EE12remove_innerERKS1_mPKS0_Pm = comdat any

$_ZNK2KVI3keyS0_Lj9EEeqERKS1_ = comdat any

$_ZN2KVI3keyS0_Lj10EE12remove_innerERKS1_mPKS0_Pm = comdat any

$_ZNK2KVI3keyS0_Lj10EEeqERKS1_ = comdat any

$_ZNK2LLI3keyS0_E6removeEPKS0_Pm = comdat any

@.str = private unnamed_addr constant [25 x i8] c"library run-time error: \00", align 1
@.str.1 = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@.str.2 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.3 = private unnamed_addr constant [5 x i8] c"%lu\0A\00", align 1
@.str.4 = private unnamed_addr constant [68 x i8] c"Expected value: null (in expect_args0). Prim cannot take arguments.\00", align 1
@.str.5 = private unnamed_addr constant [79 x i8] c"Expected cons value (in expect_args1). Prim applied on an empty argument list.\00", align 1
@.str.6 = private unnamed_addr constant [70 x i8] c"Expected null value (in expect_args1). Prim can only take 1 argument.\00", align 1
@.str.7 = private unnamed_addr constant [37 x i8] c"Expected a cons value. (expect_cons)\00", align 1
@.str.8 = private unnamed_addr constant [51 x i8] c"Expected a vector or special value. (expect_other)\00", align 1
@.str.9 = private unnamed_addr constant [27 x i8] c"'\22Error: Key not in hash.\22\00", align 1
@.str.10 = private unnamed_addr constant [3 x i8] c"()\00", align 1
@.str.11 = private unnamed_addr constant [13 x i8] c"#<procedure>\00", align 1
@.str.12 = private unnamed_addr constant [2 x i8] c"(\00", align 1
@.str.13 = private unnamed_addr constant [4 x i8] c" . \00", align 1
@.str.14 = private unnamed_addr constant [2 x i8] c")\00", align 1
@.str.15 = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@.str.16 = private unnamed_addr constant [5 x i8] c"\22%s\22\00", align 1
@.str.17 = private unnamed_addr constant [3 x i8] c"#(\00", align 1
@.str.18 = private unnamed_addr constant [2 x i8] c",\00", align 1
@.str.19 = private unnamed_addr constant [36 x i8] c"(print.. v); unrecognized value %lu\00", align 1
@.str.20 = private unnamed_addr constant [4 x i8] c"'()\00", align 1
@.str.21 = private unnamed_addr constant [3 x i8] c"#t\00", align 1
@.str.22 = private unnamed_addr constant [3 x i8] c"#f\00", align 1
@.str.23 = private unnamed_addr constant [8 x i8] c"#<void>\00", align 1
@.str.24 = private unnamed_addr constant [3 x i8] c"'(\00", align 1
@.str.25 = private unnamed_addr constant [4 x i8] c"'%s\00", align 1
@.str.26 = private unnamed_addr constant [34 x i8] c"(print v); unrecognized value %lu\00", align 1
@.str.27 = private unnamed_addr constant [49 x i8] c"first argument to make-vector must be an integer\00", align 1
@.str.28 = private unnamed_addr constant [39 x i8] c"prim applied on more than 2 arguments.\00", align 1
@.str.29 = private unnamed_addr constant [49 x i8] c"second argument to vector-ref must be an integer\00", align 1
@.str.30 = private unnamed_addr constant [46 x i8] c"first argument to vector-ref must be a vector\00", align 1
@.str.31 = private unnamed_addr constant [46 x i8] c"vector-ref not given a properly formed vector\00", align 1
@.str.32 = private unnamed_addr constant [48 x i8] c"first argument to vector-ref must be an integer\00", align 1
@.str.33 = private unnamed_addr constant [34 x i8] c"(prim + a b); a is not an integer\00", align 1
@.str.34 = private unnamed_addr constant [34 x i8] c"(prim + a b); b is not an integer\00", align 1
@.str.35 = private unnamed_addr constant [36 x i8] c"Tried to apply + on non list value.\00", align 1
@.str.36 = private unnamed_addr constant [34 x i8] c"(prim - a b); b is not an integer\00", align 1
@.str.37 = private unnamed_addr constant [34 x i8] c"(prim * a b); a is not an integer\00", align 1
@.str.38 = private unnamed_addr constant [34 x i8] c"(prim * a b); b is not an integer\00", align 1
@.str.39 = private unnamed_addr constant [34 x i8] c"(prim / a b); a is not an integer\00", align 1
@.str.40 = private unnamed_addr constant [34 x i8] c"(prim / a b); b is not an integer\00", align 1
@.str.41 = private unnamed_addr constant [34 x i8] c"(prim = a b); a is not an integer\00", align 1
@.str.42 = private unnamed_addr constant [34 x i8] c"(prim = a b); b is not an integer\00", align 1
@.str.43 = private unnamed_addr constant [34 x i8] c"(prim < a b); a is not an integer\00", align 1
@.str.44 = private unnamed_addr constant [34 x i8] c"(prim < a b); b is not an integer\00", align 1
@.str.45 = private unnamed_addr constant [35 x i8] c"(prim <= a b); a is not an integer\00", align 1
@.str.46 = private unnamed_addr constant [35 x i8] c"(prim <= a b); b is not an integer\00", align 1

; Function Attrs: noinline nounwind optnone sspstrong uwtable
define i64* @alloc(i64) #0 {
  %2 = alloca i64, align 8
  store i64 %0, i64* %2, align 8
  %3 = load i64, i64* %2, align 8
  %4 = call noalias i8* @malloc(i64 %3) #8
  %5 = bitcast i8* %4 to i64*
  ret i64* %5
}

; Function Attrs: nounwind
declare noalias i8* @malloc(i64) #1

; Function Attrs: noinline optnone sspstrong uwtable
define void @fatal_err(i8*) #2 {
  %2 = alloca i8*, align 8
  store i8* %0, i8** %2, align 8
  %3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str, i32 0, i32 0))
  %4 = load i8*, i8** %2, align 8
  %5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i32 0, i32 0), i8* %4)
  %6 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i32 0, i32 0))
  call void @exit(i32 1) #9
  unreachable
                                                  ; No predecessors!
  ret void
}

declare i32 @printf(i8*, ...) #3

; Function Attrs: noreturn nounwind
declare void @exit(i32) #4

; Function Attrs: noinline optnone sspstrong uwtable
define void @print_u64(i64) #2 {
  %2 = alloca i64, align 8
  store i64 %0, i64* %2, align 8
  %3 = load i64, i64* %2, align 8
  %4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.3, i32 0, i32 0), i64 %3)
  ret void
}

; Function Attrs: noinline optnone sspstrong uwtable
define i64 @expect_args0(i64) #2 {
  %2 = alloca i64, align 8
  store i64 %0, i64* %2, align 8
  %3 = load i64, i64* %2, align 8
  %4 = icmp ne i64 %3, 0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %1
  call void @fatal_err(i8* getelementptr inbounds ([68 x i8], [68 x i8]* @.str.4, i32 0, i32 0))
  br label %6

; <label>:6:                                      ; preds = %5, %1
  ret i64 0
}

; Function Attrs: noinline optnone sspstrong uwtable
define i64 @expect_args1(i64) #2 {
  %2 = alloca i64, align 8
  %3 = alloca i64*, align 8
  store i64 %0, i64* %2, align 8
  %4 = load i64, i64* %2, align 8
  %5 = and i64 %4, 7
  %6 = icmp ne i64 %5, 1
  br i1 %6, label %7, label %8

; <label>:7:                                      ; preds = %1
  call void @fatal_err(i8* getelementptr inbounds ([79 x i8], [79 x i8]* @.str.5, i32 0, i32 0))
  br label %8

; <label>:8:                                      ; preds = %7, %1
  %9 = load i64, i64* %2, align 8
  %10 = and i64 %9, -8
  %11 = inttoptr i64 %10 to i64*
  store i64* %11, i64** %3, align 8
  %12 = load i64*, i64** %3, align 8
  %13 = getelementptr inbounds i64, i64* %12, i64 1
  %14 = load i64, i64* %13, align 8
  %15 = icmp ne i64 %14, 0
  br i1 %15, label %16, label %17

; <label>:16:                                     ; preds = %8
  call void @fatal_err(i8* getelementptr inbounds ([70 x i8], [70 x i8]* @.str.6, i32 0, i32 0))
  br label %17

; <label>:17:                                     ; preds = %16, %8
  %18 = load i64*, i64** %3, align 8
  %19 = getelementptr inbounds i64, i64* %18, i64 0
  %20 = load i64, i64* %19, align 8
  ret i64 %20
}

; Function Attrs: noinline optnone sspstrong uwtable
define i64 @expect_cons(i64, i64*) #2 {
  %3 = alloca i64, align 8
  %4 = alloca i64*, align 8
  %5 = alloca i64*, align 8
  store i64 %0, i64* %3, align 8
  store i64* %1, i64** %4, align 8
  %6 = load i64, i64* %3, align 8
  %7 = and i64 %6, 7
  %8 = icmp ne i64 %7, 1
  br i1 %8, label %9, label %10

; <label>:9:                                      ; preds = %2
  call void @fatal_err(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.7, i32 0, i32 0))
  br label %10

; <label>:10:                                     ; preds = %9, %2
  %11 = load i64, i64* %3, align 8
  %12 = and i64 %11, -8
  %13 = inttoptr i64 %12 to i64*
  store i64* %13, i64** %5, align 8
  %14 = load i64*, i64** %5, align 8
  %15 = getelementptr inbounds i64, i64* %14, i64 1
  %16 = load i64, i64* %15, align 8
  %17 = load i64*, i64** %4, align 8
  store i64 %16, i64* %17, align 8
  %18 = load i64*, i64** %5, align 8
  %19 = getelementptr inbounds i64, i64* %18, i64 0
  %20 = load i64, i64* %19, align 8
  ret i64 %20
}

; Function Attrs: noinline optnone sspstrong uwtable
define i64 @expect_other(i64, i64*) #2 {
  %3 = alloca i64, align 8
  %4 = alloca i64*, align 8
  %5 = alloca i64*, align 8
  store i64 %0, i64* %3, align 8
  store i64* %1, i64** %4, align 8
  %6 = load i64, i64* %3, align 8
  %7 = and i64 %6, 7
  %8 = icmp ne i64 %7, 6
  br i1 %8, label %9, label %10

; <label>:9:                                      ; preds = %2
  call void @fatal_err(i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.8, i32 0, i32 0))
  br label %10

; <label>:10:                                     ; preds = %9, %2
  %11 = load i64, i64* %3, align 8
  %12 = and i64 %11, -8
  %13 = inttoptr i64 %12 to i64*
  store i64* %13, i64** %5, align 8
  %14 = load i64*, i64** %5, align 8
  %15 = getelementptr inbounds i64, i64* %14, i64 1
  %16 = load i64, i64* %15, align 8
  %17 = load i64*, i64** %4, align 8
  store i64 %16, i64* %17, align 8
  %18 = load i64*, i64** %5, align 8
  %19 = getelementptr inbounds i64, i64* %18, i64 0
  %20 = load i64, i64* %19, align 8
  ret i64 %20
}

; Function Attrs: noinline nounwind optnone sspstrong uwtable
define i64 @const_init_int(i64) #0 {
  %2 = alloca i64, align 8
  store i64 %0, i64* %2, align 8
  %3 = load i64, i64* %2, align 8
  %4 = trunc i64 %3 to i32
  %5 = zext i32 %4 to i64
  %6 = shl i64 %5, 32
  %7 = or i64 %6, 2
  ret i64 %7
}

; Function Attrs: noinline nounwind optnone sspstrong uwtable
define i64 @const_init_void() #0 {
  ret i64 39
}

; Function Attrs: noinline nounwind optnone sspstrong uwtable
define i64 @const_init_null() #0 {
  ret i64 0
}

; Function Attrs: noinline nounwind optnone sspstrong uwtable
define i64 @const_init_true() #0 {
  ret i64 31
}

; Function Attrs: noinline nounwind optnone sspstrong uwtable
define i64 @const_init_false() #0 {
  ret i64 15
}

; Function Attrs: noinline nounwind optnone sspstrong uwtable
define i64 @const_init_string(i8*) #0 {
  %2 = alloca i8*, align 8
  store i8* %0, i8** %2, align 8
  %3 = load i8*, i8** %2, align 8
  %4 = ptrtoint i8* %3 to i64
  %5 = or i64 %4, 3
  ret i64 %5
}

; Function Attrs: noinline nounwind optnone sspstrong uwtable
define i64 @const_init_symbol(i8*) #0 {
  %2 = alloca i8*, align 8
  store i8* %0, i8** %2, align 8
  %3 = load i8*, i8** %2, align 8
  %4 = ptrtoint i8* %3 to i64
  %5 = or i64 %4, 4
  ret i64 %5
}

; Function Attrs: noinline optnone sspstrong uwtable
define i64 @prim_set() #2 {
  %1 = alloca %class.hamt*, align 8
  %2 = call noalias i8* @malloc(i64 120) #8
  %3 = bitcast i8* %2 to %class.hamt*
  %4 = bitcast %class.hamt* %3 to i8*
  %5 = bitcast i8* %4 to %class.hamt*
  call void @_ZN4hamtI3keyS0_EC2Ev(%class.hamt* %5)
  store %class.hamt* %5, %class.hamt** %1, align 8
  %6 = load %class.hamt*, %class.hamt** %1, align 8
  %7 = bitcast %class.hamt* %6 to i64*
  %8 = ptrtoint i64* %7 to i64
  %9 = or i64 %8, 6
  ret i64 %9
}

; Function Attrs: noinline optnone sspstrong uwtable
define linkonce_odr void @_ZN4hamtI3keyS0_EC2Ev(%class.hamt*) unnamed_addr #2 comdat align 2 {
  %2 = alloca %class.hamt*, align 8
  store %class.hamt* %0, %class.hamt** %2, align 8
  %3 = load %class.hamt*, %class.hamt** %2, align 8
  %4 = getelementptr inbounds %class.hamt, %class.hamt* %3, i32 0, i32 0
  %5 = getelementptr inbounds [7 x %class.KV], [7 x %class.KV]* %4, i64 0, i64 0
  %6 = getelementptr inbounds %class.KV, %class.KV* %5, i64 7
  br label %7

; <label>:7:                                      ; preds = %7, %1
  %8 = phi %class.KV* [ %5, %1 ], [ %9, %7 ]
  call void @_ZN2KVI3keyS0_Lj0EEC2Ev(%class.KV* %8)
  %9 = getelementptr inbounds %class.KV, %class.KV* %8, i64 1
  %10 = icmp eq %class.KV* %9, %6
  br i1 %10, label %11, label %7

; <label>:11:                                     ; preds = %7
  %12 = getelementptr inbounds %class.hamt, %class.hamt* %3, i32 0, i32 1
  store i64 0, i64* %12, align 8
  ret void
}

; Function Attrs: noinline optnone sspstrong uwtable
define i64 @prim_set_45add(i64, i64) #2 {
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  %5 = alloca %class.hamt*, align 8
  %6 = alloca %class.key*, align 8
  store i64 %0, i64* %3, align 8
  store i64 %1, i64* %4, align 8
  %7 = load i64, i64* %3, align 8
  %8 = and i64 %7, -8
  %9 = inttoptr i64 %8 to i64*
  %10 = bitcast i64* %9 to %class.hamt*
  store %class.hamt* %10, %class.hamt** %5, align 8
  %11 = call noalias i8* @malloc(i64 8) #8
  %12 = bitcast i8* %11 to %class.key*
  %13 = bitcast %class.key* %12 to i8*
  %14 = bitcast i8* %13 to %class.key*
  %15 = load i64, i64* %4, align 8
  call void @_ZN3keyC2Em(%class.key* %14, i64 %15)
  store %class.key* %14, %class.key** %6, align 8
  %16 = load %class.hamt*, %class.hamt** %5, align 8
  %17 = load %class.key*, %class.key** %6, align 8
  %18 = load %class.key*, %class.key** %6, align 8
  %19 = call %class.hamt* @_ZNK4hamtI3keyS0_E6insertEPKS0_S3_(%class.hamt* %16, %class.key* %17, %class.key* %18)
  %20 = ptrtoint %class.hamt* %19 to i64
  %21 = or i64 %20, 6
  ret i64 %21
}

; Function Attrs: noinline nounwind optnone sspstrong uwtable
define linkonce_odr void @_ZN3keyC2Em(%class.key*, i64) unnamed_addr #0 comdat align 2 {
  %3 = alloca %class.key*, align 8
  %4 = alloca i64, align 8
  store %class.key* %0, %class.key** %3, align 8
  store i64 %1, i64* %4, align 8
  %5 = load %class.key*, %class.key** %3, align 8
  %6 = getelementptr inbounds %class.key, %class.key* %5, i32 0, i32 0
  %7 = load i64, i64* %4, align 8
  store i64 %7, i64* %6, align 8
  ret void
}

; Function Attrs: noinline optnone sspstrong uwtable
define linkonce_odr %class.hamt* @_ZNK4hamtI3keyS0_E6insertEPKS0_S3_(%class.hamt*, %class.key*, %class.key*) #2 comdat align 2 {
  %4 = alloca %class.hamt*, align 8
  %5 = alloca %class.key*, align 8
  %6 = alloca %class.key*, align 8
  %7 = alloca i64, align 8
  %8 = alloca i64, align 8
  %9 = alloca %class.hamt*, align 8
  store %class.hamt* %0, %class.hamt** %4, align 8
  store %class.key* %1, %class.key** %5, align 8
  store %class.key* %2, %class.key** %6, align 8
  %10 = load %class.hamt*, %class.hamt** %4, align 8
  %11 = load %class.key*, %class.key** %5, align 8
  %12 = call i64 @_ZNK3key4hashEv(%class.key* %11)
  store i64 %12, i64* %7, align 8
  %13 = load i64, i64* %7, align 8
  %14 = and i64 %13, 15
  %15 = urem i64 %14, 7
  store i64 %15, i64* %8, align 8
  %16 = call noalias i8* @malloc(i64 120) #8
  %17 = bitcast i8* %16 to %class.hamt*
  store %class.hamt* %17, %class.hamt** %9, align 8
  %18 = load %class.hamt*, %class.hamt** %9, align 8
  %19 = bitcast %class.hamt* %18 to i8*
  %20 = bitcast %class.hamt* %10 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %19, i8* %20, i64 120, i32 8, i1 false)
  %21 = getelementptr inbounds %class.hamt, %class.hamt* %10, i32 0, i32 0
  %22 = load i64, i64* %8, align 8
  %23 = getelementptr inbounds [7 x %class.KV], [7 x %class.KV]* %21, i64 0, i64 %22
  %24 = getelementptr inbounds %class.KV, %class.KV* %23, i32 0, i32 0
  %25 = bitcast %"union.KV<key, key, 0>::Key"* %24 to i64*
  %26 = load i64, i64* %25, align 8
  %27 = icmp eq i64 %26, 0
  br i1 %27, label %28, label %41

; <label>:28:                                     ; preds = %3
  %29 = load %class.hamt*, %class.hamt** %9, align 8
  %30 = getelementptr inbounds %class.hamt, %class.hamt* %29, i32 0, i32 0
  %31 = load i64, i64* %8, align 8
  %32 = getelementptr inbounds [7 x %class.KV], [7 x %class.KV]* %30, i64 0, i64 %31
  %33 = bitcast %class.KV* %32 to i8*
  %34 = bitcast i8* %33 to %class.KV*
  %35 = load %class.key*, %class.key** %5, align 8
  %36 = load %class.key*, %class.key** %6, align 8
  call void @_ZN2KVI3keyS0_Lj0EEC2EPKS0_S3_(%class.KV* %34, %class.key* %35, %class.key* %36)
  %37 = load %class.hamt*, %class.hamt** %9, align 8
  %38 = getelementptr inbounds %class.hamt, %class.hamt* %37, i32 0, i32 1
  %39 = load i64, i64* %38, align 8
  %40 = add i64 %39, 1
  store i64 %40, i64* %38, align 8
  br label %121

; <label>:41:                                     ; preds = %3
  %42 = getelementptr inbounds %class.hamt, %class.hamt* %10, i32 0, i32 0
  %43 = load i64, i64* %8, align 8
  %44 = getelementptr inbounds [7 x %class.KV], [7 x %class.KV]* %42, i64 0, i64 %43
  %45 = getelementptr inbounds %class.KV, %class.KV* %44, i32 0, i32 0
  %46 = bitcast %"union.KV<key, key, 0>::Key"* %45 to i64*
  %47 = load i64, i64* %46, align 8
  %48 = and i64 %47, 1
  %49 = icmp eq i64 %48, 0
  br i1 %49, label %50, label %104

; <label>:50:                                     ; preds = %41
  %51 = getelementptr inbounds %class.hamt, %class.hamt* %10, i32 0, i32 0
  %52 = load i64, i64* %8, align 8
  %53 = getelementptr inbounds [7 x %class.KV], [7 x %class.KV]* %51, i64 0, i64 %52
  %54 = getelementptr inbounds %class.KV, %class.KV* %53, i32 0, i32 0
  %55 = bitcast %"union.KV<key, key, 0>::Key"* %54 to %class.key**
  %56 = load %class.key*, %class.key** %55, align 8
  %57 = load %class.key*, %class.key** %5, align 8
  %58 = call zeroext i1 @_ZNK3keyeqERKS_(%class.key* %56, %class.key* dereferenceable(8) %57)
  br i1 %58, label %59, label %68

; <label>:59:                                     ; preds = %50
  %60 = load %class.hamt*, %class.hamt** %9, align 8
  %61 = getelementptr inbounds %class.hamt, %class.hamt* %60, i32 0, i32 0
  %62 = load i64, i64* %8, align 8
  %63 = getelementptr inbounds [7 x %class.KV], [7 x %class.KV]* %61, i64 0, i64 %62
  %64 = bitcast %class.KV* %63 to i8*
  %65 = bitcast i8* %64 to %class.KV*
  %66 = load %class.key*, %class.key** %5, align 8
  %67 = load %class.key*, %class.key** %6, align 8
  call void @_ZN2KVI3keyS0_Lj0EEC2EPKS0_S3_(%class.KV* %65, %class.key* %66, %class.key* %67)
  br label %103

; <label>:68:                                     ; preds = %50
  %69 = load %class.hamt*, %class.hamt** %9, align 8
  %70 = getelementptr inbounds %class.hamt, %class.hamt* %69, i32 0, i32 1
  %71 = load i64, i64* %70, align 8
  %72 = add i64 %71, 1
  store i64 %72, i64* %70, align 8
  %73 = load %class.hamt*, %class.hamt** %9, align 8
  %74 = getelementptr inbounds %class.hamt, %class.hamt* %73, i32 0, i32 0
  %75 = load i64, i64* %8, align 8
  %76 = getelementptr inbounds [7 x %class.KV], [7 x %class.KV]* %74, i64 0, i64 %75
  %77 = bitcast %class.KV* %76 to i8*
  %78 = bitcast i8* %77 to %class.KV*
  %79 = getelementptr inbounds %class.hamt, %class.hamt* %10, i32 0, i32 0
  %80 = load i64, i64* %8, align 8
  %81 = getelementptr inbounds [7 x %class.KV], [7 x %class.KV]* %79, i64 0, i64 %80
  %82 = getelementptr inbounds %class.KV, %class.KV* %81, i32 0, i32 0
  %83 = bitcast %"union.KV<key, key, 0>::Key"* %82 to %class.key**
  %84 = load %class.key*, %class.key** %83, align 8
  %85 = call i64 @_ZNK3key4hashEv(%class.key* %84)
  %86 = lshr i64 %85, 4
  %87 = getelementptr inbounds %class.hamt, %class.hamt* %10, i32 0, i32 0
  %88 = load i64, i64* %8, align 8
  %89 = getelementptr inbounds [7 x %class.KV], [7 x %class.KV]* %87, i64 0, i64 %88
  %90 = getelementptr inbounds %class.KV, %class.KV* %89, i32 0, i32 0
  %91 = bitcast %"union.KV<key, key, 0>::Key"* %90 to %class.key**
  %92 = load %class.key*, %class.key** %91, align 8
  %93 = getelementptr inbounds %class.hamt, %class.hamt* %10, i32 0, i32 0
  %94 = load i64, i64* %8, align 8
  %95 = getelementptr inbounds [7 x %class.KV], [7 x %class.KV]* %93, i64 0, i64 %94
  %96 = getelementptr inbounds %class.KV, %class.KV* %95, i32 0, i32 1
  %97 = bitcast %"union.KV<key, key, 0>::Val"* %96 to %class.key**
  %98 = load %class.key*, %class.key** %97, align 8
  %99 = load i64, i64* %7, align 8
  %100 = lshr i64 %99, 4
  %101 = load %class.key*, %class.key** %5, align 8
  %102 = load %class.key*, %class.key** %6, align 8
  call void @_ZN2KVI3keyS0_Lj0EE14new_inner_nodeEmPKS0_S3_mS3_S3_(%class.KV* sret %78, i64 %86, %class.key* %92, %class.key* %98, i64 %100, %class.key* %101, %class.key* %102)
  br label %103

; <label>:103:                                    ; preds = %68, %59
  br label %120

; <label>:104:                                    ; preds = %41
  %105 = load %class.hamt*, %class.hamt** %9, align 8
  %106 = getelementptr inbounds %class.hamt, %class.hamt* %105, i32 0, i32 0
  %107 = load i64, i64* %8, align 8
  %108 = getelementptr inbounds [7 x %class.KV], [7 x %class.KV]* %106, i64 0, i64 %107
  %109 = bitcast %class.KV* %108 to i8*
  %110 = bitcast i8* %109 to %class.KV*
  %111 = getelementptr inbounds %class.hamt, %class.hamt* %10, i32 0, i32 0
  %112 = load i64, i64* %8, align 8
  %113 = getelementptr inbounds [7 x %class.KV], [7 x %class.KV]* %111, i64 0, i64 %112
  %114 = load i64, i64* %7, align 8
  %115 = lshr i64 %114, 4
  %116 = load %class.key*, %class.key** %5, align 8
  %117 = load %class.key*, %class.key** %6, align 8
  %118 = load %class.hamt*, %class.hamt** %9, align 8
  %119 = getelementptr inbounds %class.hamt, %class.hamt* %118, i32 0, i32 1
  call void @_ZN2KVI3keyS0_Lj0EE12insert_innerERKS1_mPKS0_S5_Pm(%class.KV* sret %110, %class.KV* dereferenceable(16) %113, i64 %115, %class.key* %116, %class.key* %117, i64* %119)
  br label %120

; <label>:120:                                    ; preds = %104, %103
  br label %121

; <label>:121:                                    ; preds = %120, %28
  %122 = load %class.hamt*, %class.hamt** %9, align 8
  ret %class.hamt* %122
}

; Function Attrs: noinline optnone sspstrong uwtable
define i64 @prim_set_45remove(i64, i64) #2 {
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  %5 = alloca %class.hamt*, align 8
  %6 = alloca %class.key*, align 8
  store i64 %0, i64* %3, align 8
  store i64 %1, i64* %4, align 8
  %7 = load i64, i64* %3, align 8
  %8 = and i64 %7, -8
  %9 = inttoptr i64 %8 to i64*
  %10 = bitcast i64* %9 to %class.hamt*
  store %class.hamt* %10, %class.hamt** %5, align 8
  %11 = call noalias i8* @malloc(i64 8) #8
  %12 = bitcast i8* %11 to %class.key*
  %13 = bitcast %class.key* %12 to i8*
  %14 = bitcast i8* %13 to %class.key*
  %15 = load i64, i64* %4, align 8
  call void @_ZN3keyC2Em(%class.key* %14, i64 %15)
  store %class.key* %14, %class.key** %6, align 8
  %16 = load %class.hamt*, %class.hamt** %5, align 8
  %17 = load %class.key*, %class.key** %6, align 8
  %18 = call %class.hamt* @_ZNK4hamtI3keyS0_E6insertEPKS0_S3_(%class.hamt* %16, %class.key* %17, %class.key* null)
  %19 = bitcast %class.hamt* %18 to i64*
  %20 = ptrtoint i64* %19 to i64
  %21 = or i64 %20, 6
  ret i64 %21
}

; Function Attrs: noinline optnone sspstrong uwtable
define i64 @prim_set_45member_63(i64, i64) #2 {
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  %5 = alloca i64, align 8
  %6 = alloca %class.hamt*, align 8
  %7 = alloca %class.key*, align 8
  %8 = alloca %class.key*, align 8
  store i64 %0, i64* %4, align 8
  store i64 %1, i64* %5, align 8
  %9 = load i64, i64* %4, align 8
  %10 = and i64 %9, -8
  %11 = inttoptr i64 %10 to i64*
  %12 = bitcast i64* %11 to %class.hamt*
  store %class.hamt* %12, %class.hamt** %6, align 8
  %13 = call noalias i8* @malloc(i64 8) #8
  %14 = bitcast i8* %13 to %class.key*
  %15 = bitcast %class.key* %14 to i8*
  %16 = bitcast i8* %15 to %class.key*
  %17 = load i64, i64* %5, align 8
  call void @_ZN3keyC2Em(%class.key* %16, i64 %17)
  store %class.key* %16, %class.key** %7, align 8
  %18 = load %class.hamt*, %class.hamt** %6, align 8
  %19 = load %class.key*, %class.key** %7, align 8
  %20 = call %class.key* @_ZNK4hamtI3keyS0_E3getEPKS0_(%class.hamt* %18, %class.key* %19)
  store %class.key* %20, %class.key** %8, align 8
  %21 = load %class.key*, %class.key** %8, align 8
  %22 = icmp ne %class.key* %21, null
  br i1 %22, label %23, label %24

; <label>:23:                                     ; preds = %2
  store i64 31, i64* %3, align 8
  br label %25

; <label>:24:                                     ; preds = %2
  store i64 15, i64* %3, align 8
  br label %25

; <label>:25:                                     ; preds = %24, %23
  %26 = load i64, i64* %3, align 8
  ret i64 %26
}

; Function Attrs: noinline optnone sspstrong uwtable
define linkonce_odr %class.key* @_ZNK4hamtI3keyS0_E3getEPKS0_(%class.hamt*, %class.key*) #2 comdat align 2 {
  %3 = alloca %class.key*, align 8
  %4 = alloca %class.hamt*, align 8
  %5 = alloca %class.key*, align 8
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  store %class.hamt* %0, %class.hamt** %4, align 8
  store %class.key* %1, %class.key** %5, align 8
  %8 = load %class.hamt*, %class.hamt** %4, align 8
  %9 = load %class.key*, %class.key** %5, align 8
  %10 = call i64 @_ZNK3key4hashEv(%class.key* %9)
  store i64 %10, i64* %6, align 8
  %11 = load i64, i64* %6, align 8
  %12 = and i64 %11, 15
  %13 = urem i64 %12, 7
  store i64 %13, i64* %7, align 8
  %14 = getelementptr inbounds %class.hamt, %class.hamt* %8, i32 0, i32 0
  %15 = load i64, i64* %7, align 8
  %16 = getelementptr inbounds [7 x %class.KV], [7 x %class.KV]* %14, i64 0, i64 %15
  %17 = getelementptr inbounds %class.KV, %class.KV* %16, i32 0, i32 0
  %18 = bitcast %"union.KV<key, key, 0>::Key"* %17 to i64*
  %19 = load i64, i64* %18, align 8
  %20 = icmp eq i64 %19, 0
  br i1 %20, label %21, label %22

; <label>:21:                                     ; preds = %2
  store %class.key* null, %class.key** %3, align 8
  br label %56

; <label>:22:                                     ; preds = %2
  %23 = getelementptr inbounds %class.hamt, %class.hamt* %8, i32 0, i32 0
  %24 = load i64, i64* %7, align 8
  %25 = getelementptr inbounds [7 x %class.KV], [7 x %class.KV]* %23, i64 0, i64 %24
  %26 = getelementptr inbounds %class.KV, %class.KV* %25, i32 0, i32 0
  %27 = bitcast %"union.KV<key, key, 0>::Key"* %26 to i64*
  %28 = load i64, i64* %27, align 8
  %29 = and i64 %28, 1
  %30 = icmp eq i64 %29, 0
  br i1 %30, label %31, label %48

; <label>:31:                                     ; preds = %22
  %32 = getelementptr inbounds %class.hamt, %class.hamt* %8, i32 0, i32 0
  %33 = load i64, i64* %7, align 8
  %34 = getelementptr inbounds [7 x %class.KV], [7 x %class.KV]* %32, i64 0, i64 %33
  %35 = getelementptr inbounds %class.KV, %class.KV* %34, i32 0, i32 0
  %36 = bitcast %"union.KV<key, key, 0>::Key"* %35 to %class.key**
  %37 = load %class.key*, %class.key** %36, align 8
  %38 = load %class.key*, %class.key** %5, align 8
  %39 = call zeroext i1 @_ZNK3keyeqERKS_(%class.key* %37, %class.key* dereferenceable(8) %38)
  br i1 %39, label %40, label %47

; <label>:40:                                     ; preds = %31
  %41 = getelementptr inbounds %class.hamt, %class.hamt* %8, i32 0, i32 0
  %42 = load i64, i64* %7, align 8
  %43 = getelementptr inbounds [7 x %class.KV], [7 x %class.KV]* %41, i64 0, i64 %42
  %44 = getelementptr inbounds %class.KV, %class.KV* %43, i32 0, i32 1
  %45 = bitcast %"union.KV<key, key, 0>::Val"* %44 to %class.key**
  %46 = load %class.key*, %class.key** %45, align 8
  store %class.key* %46, %class.key** %3, align 8
  br label %56

; <label>:47:                                     ; preds = %31
  store %class.key* null, %class.key** %3, align 8
  br label %56

; <label>:48:                                     ; preds = %22
  %49 = getelementptr inbounds %class.hamt, %class.hamt* %8, i32 0, i32 0
  %50 = load i64, i64* %7, align 8
  %51 = getelementptr inbounds [7 x %class.KV], [7 x %class.KV]* %49, i64 0, i64 %50
  %52 = load i64, i64* %6, align 8
  %53 = lshr i64 %52, 4
  %54 = load %class.key*, %class.key** %5, align 8
  %55 = call %class.key* @_ZN2KVI3keyS0_Lj0EE10inner_findERKS1_mPKS0_(%class.KV* dereferenceable(16) %51, i64 %53, %class.key* %54)
  store %class.key* %55, %class.key** %3, align 8
  br label %56

; <label>:56:                                     ; preds = %48, %47, %40, %21
  %57 = load %class.key*, %class.key** %3, align 8
  ret %class.key* %57
}

; Function Attrs: noinline optnone sspstrong uwtable
define i64 @prim_hash() #2 {
  %1 = alloca %class.hamt*, align 8
  %2 = call noalias i8* @malloc(i64 120) #8
  %3 = bitcast i8* %2 to %class.hamt*
  %4 = bitcast %class.hamt* %3 to i8*
  %5 = bitcast i8* %4 to %class.hamt*
  call void @_ZN4hamtI3keyS0_EC2Ev(%class.hamt* %5)
  store %class.hamt* %5, %class.hamt** %1, align 8
  %6 = load %class.hamt*, %class.hamt** %1, align 8
  %7 = bitcast %class.hamt* %6 to i64*
  %8 = ptrtoint i64* %7 to i64
  %9 = or i64 %8, 6
  ret i64 %9
}

; Function Attrs: noinline optnone sspstrong uwtable
define i64 @prim_hash_45ref(i64, i64) #2 {
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  %5 = alloca %class.hamt*, align 8
  %6 = alloca %class.key*, align 8
  %7 = alloca %class.key*, align 8
  store i64 %0, i64* %3, align 8
  store i64 %1, i64* %4, align 8
  %8 = load i64, i64* %3, align 8
  %9 = and i64 %8, -8
  %10 = inttoptr i64 %9 to i64*
  %11 = bitcast i64* %10 to %class.hamt*
  store %class.hamt* %11, %class.hamt** %5, align 8
  %12 = call noalias i8* @malloc(i64 8) #8
  %13 = bitcast i8* %12 to %class.key*
  %14 = bitcast %class.key* %13 to i8*
  %15 = bitcast i8* %14 to %class.key*
  %16 = load i64, i64* %4, align 8
  call void @_ZN3keyC2Em(%class.key* %15, i64 %16)
  store %class.key* %15, %class.key** %6, align 8
  %17 = load %class.hamt*, %class.hamt** %5, align 8
  %18 = load %class.key*, %class.key** %6, align 8
  %19 = call %class.key* @_ZNK4hamtI3keyS0_E3getEPKS0_(%class.hamt* %17, %class.key* %18)
  store %class.key* %19, %class.key** %7, align 8
  %20 = load %class.key*, %class.key** %7, align 8
  %21 = icmp eq %class.key* %20, null
  br i1 %21, label %22, label %25

; <label>:22:                                     ; preds = %2
  %23 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.9, i32 0, i32 0))
  %24 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i32 0, i32 0))
  call void @exit(i32 0) #9
  unreachable

; <label>:25:                                     ; preds = %2
  %26 = load %class.key*, %class.key** %7, align 8
  %27 = getelementptr inbounds %class.key, %class.key* %26, i32 0, i32 0
  %28 = load i64, i64* %27, align 8
  ret i64 %28
}

; Function Attrs: noinline optnone sspstrong uwtable
define i64 @prim_hash_45set(i64, i64, i64) #2 {
  %4 = alloca i64, align 8
  %5 = alloca i64, align 8
  %6 = alloca i64, align 8
  %7 = alloca %class.hamt*, align 8
  %8 = alloca %class.key*, align 8
  %9 = alloca %class.key*, align 8
  %10 = alloca %class.hamt*, align 8
  store i64 %0, i64* %4, align 8
  store i64 %1, i64* %5, align 8
  store i64 %2, i64* %6, align 8
  %11 = load i64, i64* %4, align 8
  %12 = and i64 %11, -8
  %13 = inttoptr i64 %12 to i64*
  %14 = bitcast i64* %13 to %class.hamt*
  store %class.hamt* %14, %class.hamt** %7, align 8
  %15 = call noalias i8* @malloc(i64 8) #8
  %16 = bitcast i8* %15 to %class.key*
  %17 = bitcast %class.key* %16 to i8*
  %18 = bitcast i8* %17 to %class.key*
  %19 = load i64, i64* %5, align 8
  call void @_ZN3keyC2Em(%class.key* %18, i64 %19)
  store %class.key* %18, %class.key** %8, align 8
  %20 = call noalias i8* @malloc(i64 8) #8
  %21 = bitcast i8* %20 to %class.key*
  %22 = bitcast %class.key* %21 to i8*
  %23 = bitcast i8* %22 to %class.key*
  %24 = load i64, i64* %6, align 8
  call void @_ZN3keyC2Em(%class.key* %23, i64 %24)
  store %class.key* %23, %class.key** %9, align 8
  %25 = load %class.hamt*, %class.hamt** %7, align 8
  %26 = load %class.key*, %class.key** %8, align 8
  %27 = load %class.key*, %class.key** %9, align 8
  %28 = call %class.hamt* @_ZNK4hamtI3keyS0_E6insertEPKS0_S3_(%class.hamt* %25, %class.key* %26, %class.key* %27)
  store %class.hamt* %28, %class.hamt** %10, align 8
  %29 = load %class.hamt*, %class.hamt** %10, align 8
  %30 = bitcast %class.hamt* %29 to i64*
  %31 = ptrtoint i64* %30 to i64
  %32 = or i64 %31, 6
  ret i64 %32
}

; Function Attrs: noinline optnone sspstrong uwtable
define i64 @prim_hash_45remove(i64, i64) #2 {
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  %5 = alloca %class.hamt*, align 8
  %6 = alloca %class.key*, align 8
  store i64 %0, i64* %3, align 8
  store i64 %1, i64* %4, align 8
  %7 = load i64, i64* %3, align 8
  %8 = and i64 %7, -8
  %9 = inttoptr i64 %8 to i64*
  %10 = bitcast i64* %9 to %class.hamt*
  store %class.hamt* %10, %class.hamt** %5, align 8
  %11 = call noalias i8* @malloc(i64 8) #8
  %12 = bitcast i8* %11 to %class.key*
  %13 = bitcast %class.key* %12 to i8*
  %14 = bitcast i8* %13 to %class.key*
  %15 = load i64, i64* %4, align 8
  call void @_ZN3keyC2Em(%class.key* %14, i64 %15)
  store %class.key* %14, %class.key** %6, align 8
  %16 = load %class.hamt*, %class.hamt** %5, align 8
  %17 = load %class.key*, %class.key** %6, align 8
  %18 = call %class.hamt* @_ZNK4hamtI3keyS0_E6removeEPKS0_(%class.hamt* %16, %class.key* %17)
  %19 = ptrtoint %class.hamt* %18 to i64
  %20 = or i64 %19, 6
  ret i64 %20
}

; Function Attrs: noinline optnone sspstrong uwtable
define linkonce_odr %class.hamt* @_ZNK4hamtI3keyS0_E6removeEPKS0_(%class.hamt*, %class.key*) #2 comdat align 2 {
  %3 = alloca %class.hamt*, align 8
  %4 = alloca %class.hamt*, align 8
  %5 = alloca %class.key*, align 8
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  %8 = alloca %class.hamt*, align 8
  %9 = alloca i64, align 8
  %10 = alloca %class.KV, align 8
  %11 = alloca %class.hamt*, align 8
  store %class.hamt* %0, %class.hamt** %4, align 8
  store %class.key* %1, %class.key** %5, align 8
  %12 = load %class.hamt*, %class.hamt** %4, align 8
  %13 = load %class.key*, %class.key** %5, align 8
  %14 = call i64 @_ZNK3key4hashEv(%class.key* %13)
  store i64 %14, i64* %6, align 8
  %15 = load i64, i64* %6, align 8
  %16 = and i64 %15, 15
  %17 = urem i64 %16, 7
  store i64 %17, i64* %7, align 8
  %18 = getelementptr inbounds %class.hamt, %class.hamt* %12, i32 0, i32 0
  %19 = load i64, i64* %7, align 8
  %20 = getelementptr inbounds [7 x %class.KV], [7 x %class.KV]* %18, i64 0, i64 %19
  %21 = getelementptr inbounds %class.KV, %class.KV* %20, i32 0, i32 0
  %22 = bitcast %"union.KV<key, key, 0>::Key"* %21 to i64*
  %23 = load i64, i64* %22, align 8
  %24 = icmp eq i64 %23, 0
  br i1 %24, label %25, label %26

; <label>:25:                                     ; preds = %2
  store %class.hamt* %12, %class.hamt** %3, align 8
  br label %91

; <label>:26:                                     ; preds = %2
  %27 = getelementptr inbounds %class.hamt, %class.hamt* %12, i32 0, i32 0
  %28 = load i64, i64* %7, align 8
  %29 = getelementptr inbounds [7 x %class.KV], [7 x %class.KV]* %27, i64 0, i64 %28
  %30 = getelementptr inbounds %class.KV, %class.KV* %29, i32 0, i32 0
  %31 = bitcast %"union.KV<key, key, 0>::Key"* %30 to i64*
  %32 = load i64, i64* %31, align 8
  %33 = and i64 %32, 1
  %34 = icmp eq i64 %33, 0
  br i1 %34, label %35, label %61

; <label>:35:                                     ; preds = %26
  %36 = getelementptr inbounds %class.hamt, %class.hamt* %12, i32 0, i32 0
  %37 = load i64, i64* %7, align 8
  %38 = getelementptr inbounds [7 x %class.KV], [7 x %class.KV]* %36, i64 0, i64 %37
  %39 = getelementptr inbounds %class.KV, %class.KV* %38, i32 0, i32 0
  %40 = bitcast %"union.KV<key, key, 0>::Key"* %39 to %class.key**
  %41 = load %class.key*, %class.key** %40, align 8
  %42 = load %class.key*, %class.key** %5, align 8
  %43 = call zeroext i1 @_ZNK3keyeqERKS_(%class.key* %41, %class.key* dereferenceable(8) %42)
  br i1 %43, label %44, label %60

; <label>:44:                                     ; preds = %35
  %45 = call noalias i8* @malloc(i64 120) #8
  %46 = bitcast i8* %45 to %class.hamt*
  store %class.hamt* %46, %class.hamt** %8, align 8
  %47 = load %class.hamt*, %class.hamt** %8, align 8
  %48 = bitcast %class.hamt* %47 to i8*
  %49 = bitcast %class.hamt* %12 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %48, i8* %49, i64 120, i32 8, i1 false)
  %50 = load %class.hamt*, %class.hamt** %8, align 8
  %51 = load i64, i64* %7, align 8
  %52 = getelementptr inbounds %class.hamt, %class.hamt* %50, i64 %51
  %53 = bitcast %class.hamt* %52 to i8*
  %54 = bitcast i8* %53 to %class.KV*
  call void @_ZN2KVI3keyS0_Lj0EEC2EPKS0_S3_(%class.KV* %54, %class.key* null, %class.key* null)
  %55 = load %class.hamt*, %class.hamt** %8, align 8
  %56 = getelementptr inbounds %class.hamt, %class.hamt* %55, i32 0, i32 1
  %57 = load i64, i64* %56, align 8
  %58 = add i64 %57, -1
  store i64 %58, i64* %56, align 8
  %59 = load %class.hamt*, %class.hamt** %8, align 8
  store %class.hamt* %59, %class.hamt** %3, align 8
  br label %91

; <label>:60:                                     ; preds = %35
  store %class.hamt* %12, %class.hamt** %3, align 8
  br label %91

; <label>:61:                                     ; preds = %26
  %62 = getelementptr inbounds %class.hamt, %class.hamt* %12, i32 0, i32 1
  %63 = load i64, i64* %62, align 8
  store i64 %63, i64* %9, align 8
  %64 = getelementptr inbounds %class.hamt, %class.hamt* %12, i32 0, i32 0
  %65 = load i64, i64* %7, align 8
  %66 = getelementptr inbounds [7 x %class.KV], [7 x %class.KV]* %64, i64 0, i64 %65
  %67 = load i64, i64* %6, align 8
  %68 = lshr i64 %67, 4
  %69 = load %class.key*, %class.key** %5, align 8
  call void @_ZN2KVI3keyS0_Lj0EE12remove_innerERKS1_mPKS0_Pm(%class.KV* sret %10, %class.KV* dereferenceable(16) %66, i64 %68, %class.key* %69, i64* %9)
  %70 = getelementptr inbounds %class.hamt, %class.hamt* %12, i32 0, i32 0
  %71 = load i64, i64* %7, align 8
  %72 = getelementptr inbounds [7 x %class.KV], [7 x %class.KV]* %70, i64 0, i64 %71
  %73 = call zeroext i1 @_ZNK2KVI3keyS0_Lj0EEeqERKS1_(%class.KV* %10, %class.KV* dereferenceable(16) %72)
  br i1 %73, label %74, label %75

; <label>:74:                                     ; preds = %61
  store %class.hamt* %12, %class.hamt** %3, align 8
  br label %91

; <label>:75:                                     ; preds = %61
  %76 = call noalias i8* @malloc(i64 120) #8
  %77 = bitcast i8* %76 to %class.hamt*
  store %class.hamt* %77, %class.hamt** %11, align 8
  %78 = load %class.hamt*, %class.hamt** %11, align 8
  %79 = bitcast %class.hamt* %78 to i8*
  %80 = bitcast %class.hamt* %12 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %79, i8* %80, i64 120, i32 8, i1 false)
  %81 = load %class.hamt*, %class.hamt** %11, align 8
  %82 = getelementptr inbounds %class.hamt, %class.hamt* %81, i32 0, i32 0
  %83 = load i64, i64* %7, align 8
  %84 = getelementptr inbounds [7 x %class.KV], [7 x %class.KV]* %82, i64 0, i64 %83
  %85 = bitcast %class.KV* %84 to i8*
  %86 = bitcast i8* %85 to %class.KV*
  call void @_ZN2KVI3keyS0_Lj0EEC2ERKS1_(%class.KV* %86, %class.KV* dereferenceable(16) %10)
  %87 = load i64, i64* %9, align 8
  %88 = load %class.hamt*, %class.hamt** %11, align 8
  %89 = getelementptr inbounds %class.hamt, %class.hamt* %88, i32 0, i32 1
  store i64 %87, i64* %89, align 8
  %90 = load %class.hamt*, %class.hamt** %11, align 8
  store %class.hamt* %90, %class.hamt** %3, align 8
  br label %91

; <label>:91:                                     ; preds = %75, %74, %60, %44, %25
  %92 = load %class.hamt*, %class.hamt** %3, align 8
  ret %class.hamt* %92
}

; Function Attrs: noinline optnone sspstrong uwtable
define i64 @prim_hash_45has_45key_63(i64, i64) #2 {
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  %5 = alloca i64, align 8
  %6 = alloca %class.hamt*, align 8
  %7 = alloca %class.key*, align 8
  %8 = alloca %class.key*, align 8
  store i64 %0, i64* %4, align 8
  store i64 %1, i64* %5, align 8
  %9 = load i64, i64* %4, align 8
  %10 = and i64 %9, -8
  %11 = inttoptr i64 %10 to i64*
  %12 = bitcast i64* %11 to %class.hamt*
  store %class.hamt* %12, %class.hamt** %6, align 8
  %13 = call noalias i8* @malloc(i64 8) #8
  %14 = bitcast i8* %13 to %class.key*
  %15 = bitcast %class.key* %14 to i8*
  %16 = bitcast i8* %15 to %class.key*
  %17 = load i64, i64* %5, align 8
  call void @_ZN3keyC2Em(%class.key* %16, i64 %17)
  store %class.key* %16, %class.key** %7, align 8
  %18 = load %class.hamt*, %class.hamt** %6, align 8
  %19 = load %class.key*, %class.key** %7, align 8
  %20 = call %class.key* @_ZNK4hamtI3keyS0_E3getEPKS0_(%class.hamt* %18, %class.key* %19)
  store %class.key* %20, %class.key** %8, align 8
  %21 = load %class.key*, %class.key** %8, align 8
  %22 = icmp ne %class.key* %21, null
  br i1 %22, label %23, label %24

; <label>:23:                                     ; preds = %2
  store i64 31, i64* %3, align 8
  br label %25

; <label>:24:                                     ; preds = %2
  store i64 15, i64* %3, align 8
  br label %25

; <label>:25:                                     ; preds = %24, %23
  %26 = load i64, i64* %3, align 8
  ret i64 %26
}

; Function Attrs: noinline optnone sspstrong uwtable
define i64 @prim_print_aux(i64) #2 {
  %2 = alloca i64, align 8
  %3 = alloca i64*, align 8
  %4 = alloca i64*, align 8
  %5 = alloca i64, align 8
  %6 = alloca i64, align 8
  store i64 %0, i64* %2, align 8
  %7 = load i64, i64* %2, align 8
  %8 = icmp eq i64 %7, 0
  br i1 %8, label %9, label %11

; <label>:9:                                      ; preds = %1
  %10 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.10, i32 0, i32 0))
  br label %113

; <label>:11:                                     ; preds = %1
  %12 = load i64, i64* %2, align 8
  %13 = and i64 %12, 7
  %14 = icmp eq i64 %13, 0
  br i1 %14, label %15, label %17

; <label>:15:                                     ; preds = %11
  %16 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.11, i32 0, i32 0))
  br label %112

; <label>:17:                                     ; preds = %11
  %18 = load i64, i64* %2, align 8
  %19 = and i64 %18, 7
  %20 = icmp eq i64 %19, 1
  br i1 %20, label %21, label %36

; <label>:21:                                     ; preds = %17
  %22 = load i64, i64* %2, align 8
  %23 = and i64 %22, -8
  %24 = inttoptr i64 %23 to i64*
  store i64* %24, i64** %3, align 8
  %25 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.12, i32 0, i32 0))
  %26 = load i64*, i64** %3, align 8
  %27 = getelementptr inbounds i64, i64* %26, i64 0
  %28 = load i64, i64* %27, align 8
  %29 = call i64 @prim_print_aux(i64 %28)
  %30 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.13, i32 0, i32 0))
  %31 = load i64*, i64** %3, align 8
  %32 = getelementptr inbounds i64, i64* %31, i64 1
  %33 = load i64, i64* %32, align 8
  %34 = call i64 @prim_print_aux(i64 %33)
  %35 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.14, i32 0, i32 0))
  br label %111

; <label>:36:                                     ; preds = %17
  %37 = load i64, i64* %2, align 8
  %38 = and i64 %37, 7
  %39 = icmp eq i64 %38, 2
  br i1 %39, label %40, label %45

; <label>:40:                                     ; preds = %36
  %41 = load i64, i64* %2, align 8
  %42 = lshr i64 %41, 32
  %43 = trunc i64 %42 to i32
  %44 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.15, i32 0, i32 0), i32 %43)
  br label %110

; <label>:45:                                     ; preds = %36
  %46 = load i64, i64* %2, align 8
  %47 = and i64 %46, 7
  %48 = icmp eq i64 %47, 3
  br i1 %48, label %49, label %54

; <label>:49:                                     ; preds = %45
  %50 = load i64, i64* %2, align 8
  %51 = and i64 %50, -8
  %52 = inttoptr i64 %51 to i8*
  %53 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.16, i32 0, i32 0), i8* %52)
  br label %109

; <label>:54:                                     ; preds = %45
  %55 = load i64, i64* %2, align 8
  %56 = and i64 %55, 7
  %57 = icmp eq i64 %56, 4
  br i1 %57, label %58, label %63

; <label>:58:                                     ; preds = %54
  %59 = load i64, i64* %2, align 8
  %60 = and i64 %59, -8
  %61 = inttoptr i64 %60 to i8*
  %62 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i32 0, i32 0), i8* %61)
  br label %108

; <label>:63:                                     ; preds = %54
  %64 = load i64, i64* %2, align 8
  %65 = and i64 %64, 7
  %66 = icmp eq i64 %65, 6
  br i1 %66, label %67, label %104

; <label>:67:                                     ; preds = %63
  %68 = load i64, i64* %2, align 8
  %69 = and i64 %68, -8
  %70 = inttoptr i64 %69 to i64*
  %71 = getelementptr inbounds i64, i64* %70, i64 0
  %72 = load i64, i64* %71, align 8
  %73 = and i64 %72, 7
  %74 = icmp eq i64 1, %73
  br i1 %74, label %75, label %104

; <label>:75:                                     ; preds = %67
  %76 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.17, i32 0, i32 0))
  %77 = load i64, i64* %2, align 8
  %78 = and i64 %77, -8
  %79 = inttoptr i64 %78 to i64*
  store i64* %79, i64** %4, align 8
  %80 = load i64*, i64** %4, align 8
  %81 = getelementptr inbounds i64, i64* %80, i64 0
  %82 = load i64, i64* %81, align 8
  %83 = lshr i64 %82, 3
  store i64 %83, i64* %5, align 8
  %84 = load i64*, i64** %4, align 8
  %85 = getelementptr inbounds i64, i64* %84, i64 1
  %86 = load i64, i64* %85, align 8
  %87 = call i64 @prim_print_aux(i64 %86)
  store i64 2, i64* %6, align 8
  br label %88

; <label>:88:                                     ; preds = %99, %75
  %89 = load i64, i64* %6, align 8
  %90 = load i64, i64* %5, align 8
  %91 = icmp ule i64 %89, %90
  br i1 %91, label %92, label %102

; <label>:92:                                     ; preds = %88
  %93 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.18, i32 0, i32 0))
  %94 = load i64*, i64** %4, align 8
  %95 = load i64, i64* %6, align 8
  %96 = getelementptr inbounds i64, i64* %94, i64 %95
  %97 = load i64, i64* %96, align 8
  %98 = call i64 @prim_print_aux(i64 %97)
  br label %99

; <label>:99:                                     ; preds = %92
  %100 = load i64, i64* %6, align 8
  %101 = add i64 %100, 1
  store i64 %101, i64* %6, align 8
  br label %88

; <label>:102:                                    ; preds = %88
  %103 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.14, i32 0, i32 0))
  br label %107

; <label>:104:                                    ; preds = %67, %63
  %105 = load i64, i64* %2, align 8
  %106 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.19, i32 0, i32 0), i64 %105)
  br label %107

; <label>:107:                                    ; preds = %104, %102
  br label %108

; <label>:108:                                    ; preds = %107, %58
  br label %109

; <label>:109:                                    ; preds = %108, %49
  br label %110

; <label>:110:                                    ; preds = %109, %40
  br label %111

; <label>:111:                                    ; preds = %110, %21
  br label %112

; <label>:112:                                    ; preds = %111, %15
  br label %113

; <label>:113:                                    ; preds = %112, %9
  ret i64 39
}

; Function Attrs: noinline optnone sspstrong uwtable
define i64 @prim_print(i64) #2 {
  %2 = alloca i64, align 8
  %3 = alloca i64*, align 8
  %4 = alloca i64*, align 8
  %5 = alloca i64, align 8
  %6 = alloca i64, align 8
  store i64 %0, i64* %2, align 8
  %7 = load i64, i64* %2, align 8
  %8 = icmp eq i64 %7, 0
  br i1 %8, label %9, label %11

; <label>:9:                                      ; preds = %1
  %10 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.20, i32 0, i32 0))
  br label %131

; <label>:11:                                     ; preds = %1
  %12 = load i64, i64* %2, align 8
  %13 = icmp eq i64 %12, 31
  br i1 %13, label %14, label %16

; <label>:14:                                     ; preds = %11
  %15 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.21, i32 0, i32 0))
  br label %130

; <label>:16:                                     ; preds = %11
  %17 = load i64, i64* %2, align 8
  %18 = icmp eq i64 %17, 15
  br i1 %18, label %19, label %21

; <label>:19:                                     ; preds = %16
  %20 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.22, i32 0, i32 0))
  br label %129

; <label>:21:                                     ; preds = %16
  %22 = load i64, i64* %2, align 8
  %23 = icmp eq i64 %22, 39
  br i1 %23, label %24, label %26

; <label>:24:                                     ; preds = %21
  %25 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.23, i32 0, i32 0))
  br label %128

; <label>:26:                                     ; preds = %21
  %27 = load i64, i64* %2, align 8
  %28 = and i64 %27, 7
  %29 = icmp eq i64 %28, 0
  br i1 %29, label %30, label %32

; <label>:30:                                     ; preds = %26
  %31 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.11, i32 0, i32 0))
  br label %127

; <label>:32:                                     ; preds = %26
  %33 = load i64, i64* %2, align 8
  %34 = and i64 %33, 7
  %35 = icmp eq i64 %34, 1
  br i1 %35, label %36, label %51

; <label>:36:                                     ; preds = %32
  %37 = load i64, i64* %2, align 8
  %38 = and i64 %37, -8
  %39 = inttoptr i64 %38 to i64*
  store i64* %39, i64** %3, align 8
  %40 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.24, i32 0, i32 0))
  %41 = load i64*, i64** %3, align 8
  %42 = getelementptr inbounds i64, i64* %41, i64 0
  %43 = load i64, i64* %42, align 8
  %44 = call i64 @prim_print_aux(i64 %43)
  %45 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.13, i32 0, i32 0))
  %46 = load i64*, i64** %3, align 8
  %47 = getelementptr inbounds i64, i64* %46, i64 1
  %48 = load i64, i64* %47, align 8
  %49 = call i64 @prim_print_aux(i64 %48)
  %50 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.14, i32 0, i32 0))
  br label %126

; <label>:51:                                     ; preds = %32
  %52 = load i64, i64* %2, align 8
  %53 = and i64 %52, 7
  %54 = icmp eq i64 %53, 2
  br i1 %54, label %55, label %60

; <label>:55:                                     ; preds = %51
  %56 = load i64, i64* %2, align 8
  %57 = lshr i64 %56, 32
  %58 = trunc i64 %57 to i32
  %59 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.15, i32 0, i32 0), i32 %58)
  br label %125

; <label>:60:                                     ; preds = %51
  %61 = load i64, i64* %2, align 8
  %62 = and i64 %61, 7
  %63 = icmp eq i64 %62, 3
  br i1 %63, label %64, label %69

; <label>:64:                                     ; preds = %60
  %65 = load i64, i64* %2, align 8
  %66 = and i64 %65, -8
  %67 = inttoptr i64 %66 to i8*
  %68 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.16, i32 0, i32 0), i8* %67)
  br label %124

; <label>:69:                                     ; preds = %60
  %70 = load i64, i64* %2, align 8
  %71 = and i64 %70, 7
  %72 = icmp eq i64 %71, 4
  br i1 %72, label %73, label %78

; <label>:73:                                     ; preds = %69
  %74 = load i64, i64* %2, align 8
  %75 = and i64 %74, -8
  %76 = inttoptr i64 %75 to i8*
  %77 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.25, i32 0, i32 0), i8* %76)
  br label %123

; <label>:78:                                     ; preds = %69
  %79 = load i64, i64* %2, align 8
  %80 = and i64 %79, 7
  %81 = icmp eq i64 %80, 6
  br i1 %81, label %82, label %119

; <label>:82:                                     ; preds = %78
  %83 = load i64, i64* %2, align 8
  %84 = and i64 %83, -8
  %85 = inttoptr i64 %84 to i64*
  %86 = getelementptr inbounds i64, i64* %85, i64 0
  %87 = load i64, i64* %86, align 8
  %88 = and i64 %87, 7
  %89 = icmp eq i64 1, %88
  br i1 %89, label %90, label %119

; <label>:90:                                     ; preds = %82
  %91 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.17, i32 0, i32 0))
  %92 = load i64, i64* %2, align 8
  %93 = and i64 %92, -8
  %94 = inttoptr i64 %93 to i64*
  store i64* %94, i64** %4, align 8
  %95 = load i64*, i64** %4, align 8
  %96 = getelementptr inbounds i64, i64* %95, i64 0
  %97 = load i64, i64* %96, align 8
  %98 = lshr i64 %97, 3
  store i64 %98, i64* %5, align 8
  %99 = load i64*, i64** %4, align 8
  %100 = getelementptr inbounds i64, i64* %99, i64 1
  %101 = load i64, i64* %100, align 8
  %102 = call i64 @prim_print(i64 %101)
  store i64 2, i64* %6, align 8
  br label %103

; <label>:103:                                    ; preds = %114, %90
  %104 = load i64, i64* %6, align 8
  %105 = load i64, i64* %5, align 8
  %106 = icmp ule i64 %104, %105
  br i1 %106, label %107, label %117

; <label>:107:                                    ; preds = %103
  %108 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.18, i32 0, i32 0))
  %109 = load i64*, i64** %4, align 8
  %110 = load i64, i64* %6, align 8
  %111 = getelementptr inbounds i64, i64* %109, i64 %110
  %112 = load i64, i64* %111, align 8
  %113 = call i64 @prim_print(i64 %112)
  br label %114

; <label>:114:                                    ; preds = %107
  %115 = load i64, i64* %6, align 8
  %116 = add i64 %115, 1
  store i64 %116, i64* %6, align 8
  br label %103

; <label>:117:                                    ; preds = %103
  %118 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.14, i32 0, i32 0))
  br label %122

; <label>:119:                                    ; preds = %82, %78
  %120 = load i64, i64* %2, align 8
  %121 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.26, i32 0, i32 0), i64 %120)
  br label %122

; <label>:122:                                    ; preds = %119, %117
  br label %123

; <label>:123:                                    ; preds = %122, %73
  br label %124

; <label>:124:                                    ; preds = %123, %64
  br label %125

; <label>:125:                                    ; preds = %124, %55
  br label %126

; <label>:126:                                    ; preds = %125, %36
  br label %127

; <label>:127:                                    ; preds = %126, %30
  br label %128

; <label>:128:                                    ; preds = %127, %24
  br label %129

; <label>:129:                                    ; preds = %128, %19
  br label %130

; <label>:130:                                    ; preds = %129, %14
  br label %131

; <label>:131:                                    ; preds = %130, %9
  ret i64 39
}

; Function Attrs: noinline optnone sspstrong uwtable
define i64 @applyprim_print(i64) #2 {
  %2 = alloca i64, align 8
  %3 = alloca i64, align 8
  store i64 %0, i64* %2, align 8
  %4 = load i64, i64* %2, align 8
  %5 = call i64 @expect_args1(i64 %4)
  store i64 %5, i64* %3, align 8
  %6 = load i64, i64* %3, align 8
  %7 = call i64 @prim_print(i64 %6)
  ret i64 %7
}

; Function Attrs: noinline optnone sspstrong uwtable
define i64 @prim_halt(i64) #2 {
  %2 = alloca i64, align 8
  %3 = alloca i64, align 8
  store i64 %0, i64* %3, align 8
  %4 = load i64, i64* %3, align 8
  %5 = call i64 @prim_print(i64 %4)
  %6 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i32 0, i32 0))
  call void @exit(i32 0) #9
  unreachable
                                                  ; No predecessors!
  %8 = load i64, i64* %2, align 8
  ret i64 %8
}

; Function Attrs: noinline optnone sspstrong uwtable
define i64 @applyprim_vector(i64) #2 {
  %2 = alloca i64, align 8
  %3 = alloca i64*, align 8
  %4 = alloca i64, align 8
  %5 = alloca i64*, align 8
  %6 = alloca i64, align 8
  store i64 %0, i64* %2, align 8
  %7 = call noalias i8* @malloc(i64 4096) #8
  %8 = bitcast i8* %7 to i64*
  store i64* %8, i64** %3, align 8
  store i64 0, i64* %4, align 8
  br label %9

; <label>:9:                                      ; preds = %18, %1
  %10 = load i64, i64* %2, align 8
  %11 = and i64 %10, 7
  %12 = icmp eq i64 %11, 1
  br i1 %12, label %13, label %16

; <label>:13:                                     ; preds = %9
  %14 = load i64, i64* %4, align 8
  %15 = icmp ult i64 %14, 512
  br label %16

; <label>:16:                                     ; preds = %13, %9
  %17 = phi i1 [ false, %9 ], [ %15, %13 ]
  br i1 %17, label %18, label %25

; <label>:18:                                     ; preds = %16
  %19 = load i64, i64* %2, align 8
  %20 = call i64 @expect_cons(i64 %19, i64* %2)
  %21 = load i64*, i64** %3, align 8
  %22 = load i64, i64* %4, align 8
  %23 = add i64 %22, 1
  store i64 %23, i64* %4, align 8
  %24 = getelementptr inbounds i64, i64* %21, i64 %22
  store i64 %20, i64* %24, align 8
  br label %9

; <label>:25:                                     ; preds = %16
  %26 = load i64, i64* %4, align 8
  %27 = add i64 %26, 1
  %28 = mul i64 %27, 8
  %29 = call i64* @alloc(i64 %28)
  store i64* %29, i64** %5, align 8
  %30 = load i64, i64* %4, align 8
  %31 = shl i64 %30, 3
  %32 = or i64 %31, 1
  %33 = load i64*, i64** %5, align 8
  %34 = getelementptr inbounds i64, i64* %33, i64 0
  store i64 %32, i64* %34, align 8
  store i64 0, i64* %6, align 8
  br label %35

; <label>:35:                                     ; preds = %48, %25
  %36 = load i64, i64* %6, align 8
  %37 = load i64, i64* %4, align 8
  %38 = icmp ult i64 %36, %37
  br i1 %38, label %39, label %51

; <label>:39:                                     ; preds = %35
  %40 = load i64*, i64** %3, align 8
  %41 = load i64, i64* %6, align 8
  %42 = getelementptr inbounds i64, i64* %40, i64 %41
  %43 = load i64, i64* %42, align 8
  %44 = load i64*, i64** %5, align 8
  %45 = load i64, i64* %6, align 8
  %46 = add i64 %45, 1
  %47 = getelementptr inbounds i64, i64* %44, i64 %46
  store i64 %43, i64* %47, align 8
  br label %48

; <label>:48:                                     ; preds = %39
  %49 = load i64, i64* %6, align 8
  %50 = add i64 %49, 1
  store i64 %50, i64* %6, align 8
  br label %35

; <label>:51:                                     ; preds = %35
  %52 = load i64*, i64** %3, align 8
  %53 = icmp eq i64* %52, null
  br i1 %53, label %56, label %54

; <label>:54:                                     ; preds = %51
  %55 = bitcast i64* %52 to i8*
  call void @_ZdaPv(i8* %55) #10
  br label %56

; <label>:56:                                     ; preds = %54, %51
  %57 = load i64*, i64** %5, align 8
  %58 = ptrtoint i64* %57 to i64
  %59 = or i64 %58, 6
  ret i64 %59
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdaPv(i8*) #5

; Function Attrs: noinline optnone sspstrong uwtable
define i64 @prim_make_45vector(i64, i64) #2 {
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  %5 = alloca i64, align 8
  %6 = alloca i64*, align 8
  %7 = alloca i64, align 8
  store i64 %0, i64* %3, align 8
  store i64 %1, i64* %4, align 8
  %8 = load i64, i64* %3, align 8
  %9 = and i64 %8, 7
  %10 = icmp ne i64 %9, 2
  br i1 %10, label %11, label %12

; <label>:11:                                     ; preds = %2
  call void @fatal_err(i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.27, i32 0, i32 0))
  br label %12

; <label>:12:                                     ; preds = %11, %2
  %13 = load i64, i64* %3, align 8
  %14 = and i64 %13, -8
  %15 = lshr i64 %14, 32
  %16 = trunc i64 %15 to i32
  %17 = sext i32 %16 to i64
  store i64 %17, i64* %5, align 8
  %18 = load i64, i64* %5, align 8
  %19 = add i64 %18, 1
  %20 = mul i64 %19, 8
  %21 = call i64* @alloc(i64 %20)
  store i64* %21, i64** %6, align 8
  %22 = load i64, i64* %5, align 8
  %23 = shl i64 %22, 3
  %24 = or i64 %23, 1
  %25 = load i64*, i64** %6, align 8
  %26 = getelementptr inbounds i64, i64* %25, i64 0
  store i64 %24, i64* %26, align 8
  store i64 1, i64* %7, align 8
  br label %27

; <label>:27:                                     ; preds = %36, %12
  %28 = load i64, i64* %7, align 8
  %29 = load i64, i64* %5, align 8
  %30 = icmp ule i64 %28, %29
  br i1 %30, label %31, label %39

; <label>:31:                                     ; preds = %27
  %32 = load i64, i64* %4, align 8
  %33 = load i64*, i64** %6, align 8
  %34 = load i64, i64* %7, align 8
  %35 = getelementptr inbounds i64, i64* %33, i64 %34
  store i64 %32, i64* %35, align 8
  br label %36

; <label>:36:                                     ; preds = %31
  %37 = load i64, i64* %7, align 8
  %38 = add i64 %37, 1
  store i64 %38, i64* %7, align 8
  br label %27

; <label>:39:                                     ; preds = %27
  %40 = load i64*, i64** %6, align 8
  %41 = ptrtoint i64* %40 to i64
  %42 = or i64 %41, 6
  ret i64 %42
}

; Function Attrs: noinline optnone sspstrong uwtable
define i64 @applyprim_make_45vector(i64) #2 {
  %2 = alloca i64, align 8
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  %5 = alloca i64, align 8
  store i64 %0, i64* %2, align 8
  %6 = load i64, i64* %2, align 8
  %7 = call i64 @expect_cons(i64 %6, i64* %3)
  store i64 %7, i64* %4, align 8
  %8 = load i64, i64* %3, align 8
  %9 = call i64 @expect_cons(i64 %8, i64* %3)
  store i64 %9, i64* %5, align 8
  %10 = load i64, i64* %3, align 8
  %11 = icmp ne i64 %10, 0
  br i1 %11, label %12, label %13

; <label>:12:                                     ; preds = %1
  call void @fatal_err(i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.28, i32 0, i32 0))
  br label %13

; <label>:13:                                     ; preds = %12, %1
  %14 = load i64, i64* %4, align 8
  %15 = load i64, i64* %5, align 8
  %16 = call i64 @prim_make_45vector(i64 %14, i64 %15)
  ret i64 %16
}

; Function Attrs: noinline optnone sspstrong uwtable
define i64 @prim_vector_45ref(i64, i64) #2 {
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  store i64 %0, i64* %3, align 8
  store i64 %1, i64* %4, align 8
  %5 = load i64, i64* %4, align 8
  %6 = and i64 %5, 7
  %7 = icmp ne i64 %6, 2
  br i1 %7, label %8, label %9

; <label>:8:                                      ; preds = %2
  call void @fatal_err(i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.29, i32 0, i32 0))
  br label %9

; <label>:9:                                      ; preds = %8, %2
  %10 = load i64, i64* %3, align 8
  %11 = and i64 %10, 7
  %12 = icmp ne i64 %11, 6
  br i1 %12, label %13, label %14

; <label>:13:                                     ; preds = %9
  call void @fatal_err(i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.30, i32 0, i32 0))
  br label %14

; <label>:14:                                     ; preds = %13, %9
  %15 = load i64, i64* %3, align 8
  %16 = and i64 %15, -8
  %17 = inttoptr i64 %16 to i64*
  %18 = getelementptr inbounds i64, i64* %17, i64 0
  %19 = load i64, i64* %18, align 8
  %20 = and i64 %19, 7
  %21 = icmp ne i64 %20, 1
  br i1 %21, label %22, label %23

; <label>:22:                                     ; preds = %14
  call void @fatal_err(i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.31, i32 0, i32 0))
  br label %23

; <label>:23:                                     ; preds = %22, %14
  %24 = load i64, i64* %3, align 8
  %25 = and i64 %24, -8
  %26 = inttoptr i64 %25 to i64*
  %27 = load i64, i64* %4, align 8
  %28 = and i64 %27, -8
  %29 = lshr i64 %28, 32
  %30 = trunc i64 %29 to i32
  %31 = add nsw i32 1, %30
  %32 = sext i32 %31 to i64
  %33 = getelementptr inbounds i64, i64* %26, i64 %32
  %34 = load i64, i64* %33, align 8
  ret i64 %34
}

; Function Attrs: noinline optnone sspstrong uwtable
define i64 @applyprim_vector_45ref(i64) #2 {
  %2 = alloca i64, align 8
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  %5 = alloca i64, align 8
  store i64 %0, i64* %2, align 8
  %6 = load i64, i64* %2, align 8
  %7 = call i64 @expect_cons(i64 %6, i64* %3)
  store i64 %7, i64* %4, align 8
  %8 = load i64, i64* %3, align 8
  %9 = call i64 @expect_cons(i64 %8, i64* %3)
  store i64 %9, i64* %5, align 8
  %10 = load i64, i64* %3, align 8
  %11 = icmp ne i64 %10, 0
  br i1 %11, label %12, label %13

; <label>:12:                                     ; preds = %1
  call void @fatal_err(i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.28, i32 0, i32 0))
  br label %13

; <label>:13:                                     ; preds = %12, %1
  %14 = load i64, i64* %4, align 8
  %15 = load i64, i64* %5, align 8
  %16 = call i64 @prim_vector_45ref(i64 %14, i64 %15)
  ret i64 %16
}

; Function Attrs: noinline optnone sspstrong uwtable
define i64 @prim_vector_45set_33(i64, i64, i64) #2 {
  %4 = alloca i64, align 8
  %5 = alloca i64, align 8
  %6 = alloca i64, align 8
  store i64 %0, i64* %4, align 8
  store i64 %1, i64* %5, align 8
  store i64 %2, i64* %6, align 8
  %7 = load i64, i64* %5, align 8
  %8 = and i64 %7, 7
  %9 = icmp ne i64 %8, 2
  br i1 %9, label %10, label %11

; <label>:10:                                     ; preds = %3
  call void @fatal_err(i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.29, i32 0, i32 0))
  br label %11

; <label>:11:                                     ; preds = %10, %3
  %12 = load i64, i64* %4, align 8
  %13 = and i64 %12, 7
  %14 = icmp ne i64 %13, 6
  br i1 %14, label %15, label %16

; <label>:15:                                     ; preds = %11
  call void @fatal_err(i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.32, i32 0, i32 0))
  br label %16

; <label>:16:                                     ; preds = %15, %11
  %17 = load i64, i64* %4, align 8
  %18 = and i64 %17, -8
  %19 = inttoptr i64 %18 to i64*
  %20 = getelementptr inbounds i64, i64* %19, i64 0
  %21 = load i64, i64* %20, align 8
  %22 = and i64 %21, 7
  %23 = icmp ne i64 %22, 1
  br i1 %23, label %24, label %25

; <label>:24:                                     ; preds = %16
  call void @fatal_err(i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.31, i32 0, i32 0))
  br label %25

; <label>:25:                                     ; preds = %24, %16
  %26 = load i64, i64* %6, align 8
  %27 = load i64, i64* %4, align 8
  %28 = and i64 %27, -8
  %29 = inttoptr i64 %28 to i64*
  %30 = load i64, i64* %5, align 8
  %31 = and i64 %30, -8
  %32 = lshr i64 %31, 32
  %33 = trunc i64 %32 to i32
  %34 = add nsw i32 1, %33
  %35 = sext i32 %34 to i64
  %36 = getelementptr inbounds i64, i64* %29, i64 %35
  store i64 %26, i64* %36, align 8
  ret i64 39
}

; Function Attrs: noinline optnone sspstrong uwtable
define i64 @applyprim_vector_45set_33(i64) #2 {
  %2 = alloca i64, align 8
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  %5 = alloca i64, align 8
  %6 = alloca i64, align 8
  store i64 %0, i64* %2, align 8
  %7 = load i64, i64* %2, align 8
  %8 = call i64 @expect_cons(i64 %7, i64* %3)
  store i64 %8, i64* %4, align 8
  %9 = load i64, i64* %3, align 8
  %10 = call i64 @expect_cons(i64 %9, i64* %3)
  store i64 %10, i64* %5, align 8
  %11 = load i64, i64* %3, align 8
  %12 = call i64 @expect_cons(i64 %11, i64* %3)
  store i64 %12, i64* %6, align 8
  %13 = load i64, i64* %3, align 8
  %14 = icmp ne i64 %13, 0
  br i1 %14, label %15, label %16

; <label>:15:                                     ; preds = %1
  call void @fatal_err(i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.28, i32 0, i32 0))
  br label %16

; <label>:16:                                     ; preds = %15, %1
  %17 = load i64, i64* %4, align 8
  %18 = load i64, i64* %5, align 8
  %19 = load i64, i64* %6, align 8
  %20 = call i64 @prim_vector_45set_33(i64 %17, i64 %18, i64 %19)
  ret i64 %20
}

; Function Attrs: noinline nounwind optnone sspstrong uwtable
define i64 @prim_void() #0 {
  ret i64 39
}

; Function Attrs: noinline nounwind optnone sspstrong uwtable
define i64 @prim_eq_63(i64, i64) #0 {
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  %5 = alloca i64, align 8
  store i64 %0, i64* %4, align 8
  store i64 %1, i64* %5, align 8
  %6 = load i64, i64* %4, align 8
  %7 = load i64, i64* %5, align 8
  %8 = icmp eq i64 %6, %7
  br i1 %8, label %9, label %10

; <label>:9:                                      ; preds = %2
  store i64 31, i64* %3, align 8
  br label %11

; <label>:10:                                     ; preds = %2
  store i64 15, i64* %3, align 8
  br label %11

; <label>:11:                                     ; preds = %10, %9
  %12 = load i64, i64* %3, align 8
  ret i64 %12
}

; Function Attrs: noinline optnone sspstrong uwtable
define i64 @applyprim_eq_63(i64) #2 {
  %2 = alloca i64, align 8
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  %5 = alloca i64, align 8
  store i64 %0, i64* %2, align 8
  %6 = load i64, i64* %2, align 8
  %7 = call i64 @expect_cons(i64 %6, i64* %3)
  store i64 %7, i64* %4, align 8
  %8 = load i64, i64* %3, align 8
  %9 = call i64 @expect_cons(i64 %8, i64* %3)
  store i64 %9, i64* %5, align 8
  %10 = load i64, i64* %3, align 8
  %11 = icmp ne i64 %10, 0
  br i1 %11, label %12, label %13

; <label>:12:                                     ; preds = %1
  call void @fatal_err(i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.28, i32 0, i32 0))
  br label %13

; <label>:13:                                     ; preds = %12, %1
  %14 = load i64, i64* %4, align 8
  %15 = load i64, i64* %5, align 8
  %16 = call i64 @prim_eq_63(i64 %14, i64 %15)
  ret i64 %16
}

; Function Attrs: noinline nounwind optnone sspstrong uwtable
define i64 @prim_eqv_63(i64, i64) #0 {
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  %5 = alloca i64, align 8
  store i64 %0, i64* %4, align 8
  store i64 %1, i64* %5, align 8
  %6 = load i64, i64* %4, align 8
  %7 = load i64, i64* %5, align 8
  %8 = icmp eq i64 %6, %7
  br i1 %8, label %9, label %10

; <label>:9:                                      ; preds = %2
  store i64 31, i64* %3, align 8
  br label %11

; <label>:10:                                     ; preds = %2
  store i64 15, i64* %3, align 8
  br label %11

; <label>:11:                                     ; preds = %10, %9
  %12 = load i64, i64* %3, align 8
  ret i64 %12
}

; Function Attrs: noinline optnone sspstrong uwtable
define i64 @applyprim_eqv_63(i64) #2 {
  %2 = alloca i64, align 8
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  %5 = alloca i64, align 8
  store i64 %0, i64* %2, align 8
  %6 = load i64, i64* %2, align 8
  %7 = call i64 @expect_cons(i64 %6, i64* %3)
  store i64 %7, i64* %4, align 8
  %8 = load i64, i64* %3, align 8
  %9 = call i64 @expect_cons(i64 %8, i64* %3)
  store i64 %9, i64* %5, align 8
  %10 = load i64, i64* %3, align 8
  %11 = icmp ne i64 %10, 0
  br i1 %11, label %12, label %13

; <label>:12:                                     ; preds = %1
  call void @fatal_err(i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.28, i32 0, i32 0))
  br label %13

; <label>:13:                                     ; preds = %12, %1
  %14 = load i64, i64* %4, align 8
  %15 = load i64, i64* %5, align 8
  %16 = call i64 @prim_eqv_63(i64 %14, i64 %15)
  ret i64 %16
}

; Function Attrs: noinline nounwind optnone sspstrong uwtable
define i64 @prim_equal_63(i64, i64) #0 {
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  store i64 %0, i64* %3, align 8
  store i64 %1, i64* %4, align 8
  ret i64 0
}

; Function Attrs: noinline optnone sspstrong uwtable
define i64 @applyprim_equal_63(i64) #2 {
  %2 = alloca i64, align 8
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  %5 = alloca i64, align 8
  store i64 %0, i64* %2, align 8
  %6 = load i64, i64* %2, align 8
  %7 = call i64 @expect_cons(i64 %6, i64* %3)
  store i64 %7, i64* %4, align 8
  %8 = load i64, i64* %3, align 8
  %9 = call i64 @expect_cons(i64 %8, i64* %3)
  store i64 %9, i64* %5, align 8
  %10 = load i64, i64* %3, align 8
  %11 = icmp ne i64 %10, 0
  br i1 %11, label %12, label %13

; <label>:12:                                     ; preds = %1
  call void @fatal_err(i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.28, i32 0, i32 0))
  br label %13

; <label>:13:                                     ; preds = %12, %1
  %14 = load i64, i64* %4, align 8
  %15 = load i64, i64* %5, align 8
  %16 = call i64 @prim_equal_63(i64 %14, i64 %15)
  ret i64 %16
}

; Function Attrs: noinline nounwind optnone sspstrong uwtable
define i64 @prim_number_63(i64) #0 {
  %2 = alloca i64, align 8
  %3 = alloca i64, align 8
  store i64 %0, i64* %3, align 8
  %4 = load i64, i64* %3, align 8
  %5 = and i64 %4, 7
  %6 = icmp eq i64 %5, 2
  br i1 %6, label %7, label %8

; <label>:7:                                      ; preds = %1
  store i64 31, i64* %2, align 8
  br label %9

; <label>:8:                                      ; preds = %1
  store i64 15, i64* %2, align 8
  br label %9

; <label>:9:                                      ; preds = %8, %7
  %10 = load i64, i64* %2, align 8
  ret i64 %10
}

; Function Attrs: noinline optnone sspstrong uwtable
define i64 @applyprim_number_63(i64) #2 {
  %2 = alloca i64, align 8
  %3 = alloca i64, align 8
  store i64 %0, i64* %2, align 8
  %4 = load i64, i64* %2, align 8
  %5 = call i64 @expect_args1(i64 %4)
  store i64 %5, i64* %3, align 8
  %6 = load i64, i64* %3, align 8
  %7 = call i64 @prim_number_63(i64 %6)
  ret i64 %7
}

; Function Attrs: noinline nounwind optnone sspstrong uwtable
define i64 @prim_integer_63(i64) #0 {
  %2 = alloca i64, align 8
  %3 = alloca i64, align 8
  store i64 %0, i64* %3, align 8
  %4 = load i64, i64* %3, align 8
  %5 = and i64 %4, 7
  %6 = icmp eq i64 %5, 2
  br i1 %6, label %7, label %8

; <label>:7:                                      ; preds = %1
  store i64 31, i64* %2, align 8
  br label %9

; <label>:8:                                      ; preds = %1
  store i64 15, i64* %2, align 8
  br label %9

; <label>:9:                                      ; preds = %8, %7
  %10 = load i64, i64* %2, align 8
  ret i64 %10
}

; Function Attrs: noinline optnone sspstrong uwtable
define i64 @applyprim_integer_63(i64) #2 {
  %2 = alloca i64, align 8
  %3 = alloca i64, align 8
  store i64 %0, i64* %2, align 8
  %4 = load i64, i64* %2, align 8
  %5 = call i64 @expect_args1(i64 %4)
  store i64 %5, i64* %3, align 8
  %6 = load i64, i64* %3, align 8
  %7 = call i64 @prim_integer_63(i64 %6)
  ret i64 %7
}

; Function Attrs: noinline nounwind optnone sspstrong uwtable
define i64 @prim_void_63(i64) #0 {
  %2 = alloca i64, align 8
  %3 = alloca i64, align 8
  store i64 %0, i64* %3, align 8
  %4 = load i64, i64* %3, align 8
  %5 = icmp eq i64 %4, 39
  br i1 %5, label %6, label %7

; <label>:6:                                      ; preds = %1
  store i64 31, i64* %2, align 8
  br label %8

; <label>:7:                                      ; preds = %1
  store i64 15, i64* %2, align 8
  br label %8

; <label>:8:                                      ; preds = %7, %6
  %9 = load i64, i64* %2, align 8
  ret i64 %9
}

; Function Attrs: noinline optnone sspstrong uwtable
define i64 @applyprim_void_63(i64) #2 {
  %2 = alloca i64, align 8
  %3 = alloca i64, align 8
  store i64 %0, i64* %2, align 8
  %4 = load i64, i64* %2, align 8
  %5 = call i64 @expect_args1(i64 %4)
  store i64 %5, i64* %3, align 8
  %6 = load i64, i64* %3, align 8
  %7 = call i64 @prim_void_63(i64 %6)
  ret i64 %7
}

; Function Attrs: noinline nounwind optnone sspstrong uwtable
define i64 @prim_procedure_63(i64) #0 {
  %2 = alloca i64, align 8
  %3 = alloca i64, align 8
  store i64 %0, i64* %3, align 8
  %4 = load i64, i64* %3, align 8
  %5 = and i64 %4, 7
  %6 = icmp eq i64 %5, 0
  br i1 %6, label %7, label %8

; <label>:7:                                      ; preds = %1
  store i64 31, i64* %2, align 8
  br label %9

; <label>:8:                                      ; preds = %1
  store i64 15, i64* %2, align 8
  br label %9

; <label>:9:                                      ; preds = %8, %7
  %10 = load i64, i64* %2, align 8
  ret i64 %10
}

; Function Attrs: noinline optnone sspstrong uwtable
define i64 @applyprim_procedure_63(i64) #2 {
  %2 = alloca i64, align 8
  %3 = alloca i64, align 8
  store i64 %0, i64* %2, align 8
  %4 = load i64, i64* %2, align 8
  %5 = call i64 @expect_args1(i64 %4)
  store i64 %5, i64* %3, align 8
  %6 = load i64, i64* %3, align 8
  %7 = call i64 @prim_procedure_63(i64 %6)
  ret i64 %7
}

; Function Attrs: noinline nounwind optnone sspstrong uwtable
define i64 @prim_null_63(i64) #0 {
  %2 = alloca i64, align 8
  %3 = alloca i64, align 8
  store i64 %0, i64* %3, align 8
  %4 = load i64, i64* %3, align 8
  %5 = icmp eq i64 %4, 0
  br i1 %5, label %6, label %7

; <label>:6:                                      ; preds = %1
  store i64 31, i64* %2, align 8
  br label %8

; <label>:7:                                      ; preds = %1
  store i64 15, i64* %2, align 8
  br label %8

; <label>:8:                                      ; preds = %7, %6
  %9 = load i64, i64* %2, align 8
  ret i64 %9
}

; Function Attrs: noinline optnone sspstrong uwtable
define i64 @applyprim_null_63(i64) #2 {
  %2 = alloca i64, align 8
  %3 = alloca i64, align 8
  store i64 %0, i64* %2, align 8
  %4 = load i64, i64* %2, align 8
  %5 = call i64 @expect_args1(i64 %4)
  store i64 %5, i64* %3, align 8
  %6 = load i64, i64* %3, align 8
  %7 = call i64 @prim_null_63(i64 %6)
  ret i64 %7
}

; Function Attrs: noinline nounwind optnone sspstrong uwtable
define i64 @prim_cons_63(i64) #0 {
  %2 = alloca i64, align 8
  %3 = alloca i64, align 8
  store i64 %0, i64* %3, align 8
  %4 = load i64, i64* %3, align 8
  %5 = and i64 %4, 7
  %6 = icmp eq i64 %5, 1
  br i1 %6, label %7, label %8

; <label>:7:                                      ; preds = %1
  store i64 31, i64* %2, align 8
  br label %9

; <label>:8:                                      ; preds = %1
  store i64 15, i64* %2, align 8
  br label %9

; <label>:9:                                      ; preds = %8, %7
  %10 = load i64, i64* %2, align 8
  ret i64 %10
}

; Function Attrs: noinline optnone sspstrong uwtable
define i64 @applyprim_cons_63(i64) #2 {
  %2 = alloca i64, align 8
  %3 = alloca i64, align 8
  store i64 %0, i64* %2, align 8
  %4 = load i64, i64* %2, align 8
  %5 = call i64 @expect_args1(i64 %4)
  store i64 %5, i64* %3, align 8
  %6 = load i64, i64* %3, align 8
  %7 = call i64 @prim_cons_63(i64 %6)
  ret i64 %7
}

; Function Attrs: noinline nounwind optnone sspstrong uwtable
define i64 @prim_cons(i64, i64) #0 {
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  %5 = alloca i64*, align 8
  store i64 %0, i64* %3, align 8
  store i64 %1, i64* %4, align 8
  %6 = call i64* @alloc(i64 16)
  store i64* %6, i64** %5, align 8
  %7 = load i64, i64* %3, align 8
  %8 = load i64*, i64** %5, align 8
  %9 = getelementptr inbounds i64, i64* %8, i64 0
  store i64 %7, i64* %9, align 8
  %10 = load i64, i64* %4, align 8
  %11 = load i64*, i64** %5, align 8
  %12 = getelementptr inbounds i64, i64* %11, i64 1
  store i64 %10, i64* %12, align 8
  %13 = load i64*, i64** %5, align 8
  %14 = ptrtoint i64* %13 to i64
  %15 = or i64 %14, 1
  ret i64 %15
}

; Function Attrs: noinline optnone sspstrong uwtable
define i64 @applyprim_cons(i64) #2 {
  %2 = alloca i64, align 8
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  %5 = alloca i64, align 8
  store i64 %0, i64* %2, align 8
  %6 = load i64, i64* %2, align 8
  %7 = call i64 @expect_cons(i64 %6, i64* %3)
  store i64 %7, i64* %4, align 8
  %8 = load i64, i64* %3, align 8
  %9 = call i64 @expect_cons(i64 %8, i64* %3)
  store i64 %9, i64* %5, align 8
  %10 = load i64, i64* %3, align 8
  %11 = icmp ne i64 %10, 0
  br i1 %11, label %12, label %13

; <label>:12:                                     ; preds = %1
  call void @fatal_err(i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.28, i32 0, i32 0))
  br label %13

; <label>:13:                                     ; preds = %12, %1
  %14 = load i64, i64* %4, align 8
  %15 = load i64, i64* %5, align 8
  %16 = call i64 @prim_cons(i64 %14, i64 %15)
  ret i64 %16
}

; Function Attrs: noinline optnone sspstrong uwtable
define i64 @prim_car(i64) #2 {
  %2 = alloca i64, align 8
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  store i64 %0, i64* %2, align 8
  %5 = load i64, i64* %2, align 8
  %6 = call i64 @expect_cons(i64 %5, i64* %3)
  store i64 %6, i64* %4, align 8
  %7 = load i64, i64* %4, align 8
  ret i64 %7
}

; Function Attrs: noinline optnone sspstrong uwtable
define i64 @applyprim_car(i64) #2 {
  %2 = alloca i64, align 8
  %3 = alloca i64, align 8
  store i64 %0, i64* %2, align 8
  %4 = load i64, i64* %2, align 8
  %5 = call i64 @expect_args1(i64 %4)
  store i64 %5, i64* %3, align 8
  %6 = load i64, i64* %3, align 8
  %7 = call i64 @prim_car(i64 %6)
  ret i64 %7
}

; Function Attrs: noinline optnone sspstrong uwtable
define i64 @prim_cdr(i64) #2 {
  %2 = alloca i64, align 8
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  store i64 %0, i64* %2, align 8
  %5 = load i64, i64* %2, align 8
  %6 = call i64 @expect_cons(i64 %5, i64* %3)
  store i64 %6, i64* %4, align 8
  %7 = load i64, i64* %3, align 8
  ret i64 %7
}

; Function Attrs: noinline optnone sspstrong uwtable
define i64 @applyprim_cdr(i64) #2 {
  %2 = alloca i64, align 8
  %3 = alloca i64, align 8
  store i64 %0, i64* %2, align 8
  %4 = load i64, i64* %2, align 8
  %5 = call i64 @expect_args1(i64 %4)
  store i64 %5, i64* %3, align 8
  %6 = load i64, i64* %3, align 8
  %7 = call i64 @prim_cdr(i64 %6)
  ret i64 %7
}

; Function Attrs: noinline optnone sspstrong uwtable
define i64 @prim__43(i64, i64) #2 {
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  store i64 %0, i64* %3, align 8
  store i64 %1, i64* %4, align 8
  %5 = load i64, i64* %3, align 8
  %6 = and i64 %5, 7
  %7 = icmp ne i64 %6, 2
  br i1 %7, label %8, label %9

; <label>:8:                                      ; preds = %2
  call void @fatal_err(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.33, i32 0, i32 0))
  br label %9

; <label>:9:                                      ; preds = %8, %2
  %10 = load i64, i64* %4, align 8
  %11 = and i64 %10, 7
  %12 = icmp ne i64 %11, 2
  br i1 %12, label %13, label %14

; <label>:13:                                     ; preds = %9
  call void @fatal_err(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.34, i32 0, i32 0))
  br label %14

; <label>:14:                                     ; preds = %13, %9
  %15 = load i64, i64* %3, align 8
  %16 = and i64 %15, -8
  %17 = lshr i64 %16, 32
  %18 = trunc i64 %17 to i32
  %19 = load i64, i64* %4, align 8
  %20 = and i64 %19, -8
  %21 = lshr i64 %20, 32
  %22 = trunc i64 %21 to i32
  %23 = add nsw i32 %18, %22
  %24 = zext i32 %23 to i64
  %25 = shl i64 %24, 32
  %26 = or i64 %25, 2
  ret i64 %26
}

; Function Attrs: noinline optnone sspstrong uwtable
define i64 @applyprim__43(i64) #2 {
  %2 = alloca i64, align 8
  %3 = alloca i64, align 8
  %4 = alloca i64*, align 8
  store i64 %0, i64* %3, align 8
  %5 = load i64, i64* %3, align 8
  %6 = icmp eq i64 %5, 0
  br i1 %6, label %7, label %8

; <label>:7:                                      ; preds = %1
  store i64 2, i64* %2, align 8
  br label %34

; <label>:8:                                      ; preds = %1
  %9 = load i64, i64* %3, align 8
  %10 = and i64 %9, 7
  %11 = icmp ne i64 %10, 1
  br i1 %11, label %12, label %13

; <label>:12:                                     ; preds = %8
  call void @fatal_err(i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.35, i32 0, i32 0))
  br label %13

; <label>:13:                                     ; preds = %12, %8
  %14 = load i64, i64* %3, align 8
  %15 = and i64 %14, -8
  %16 = inttoptr i64 %15 to i64*
  store i64* %16, i64** %4, align 8
  %17 = load i64*, i64** %4, align 8
  %18 = getelementptr inbounds i64, i64* %17, i64 0
  %19 = load i64, i64* %18, align 8
  %20 = and i64 %19, -8
  %21 = lshr i64 %20, 32
  %22 = trunc i64 %21 to i32
  %23 = load i64*, i64** %4, align 8
  %24 = getelementptr inbounds i64, i64* %23, i64 1
  %25 = load i64, i64* %24, align 8
  %26 = call i64 @applyprim__43(i64 %25)
  %27 = and i64 %26, -8
  %28 = lshr i64 %27, 32
  %29 = trunc i64 %28 to i32
  %30 = add nsw i32 %22, %29
  %31 = zext i32 %30 to i64
  %32 = shl i64 %31, 32
  %33 = or i64 %32, 2
  store i64 %33, i64* %2, align 8
  br label %34

; <label>:34:                                     ; preds = %13, %7
  %35 = load i64, i64* %2, align 8
  ret i64 %35
}

; Function Attrs: noinline optnone sspstrong uwtable
define i64 @prim__45(i64, i64) #2 {
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  store i64 %0, i64* %3, align 8
  store i64 %1, i64* %4, align 8
  %5 = load i64, i64* %3, align 8
  %6 = and i64 %5, 7
  %7 = icmp ne i64 %6, 2
  br i1 %7, label %8, label %9

; <label>:8:                                      ; preds = %2
  call void @fatal_err(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.33, i32 0, i32 0))
  br label %9

; <label>:9:                                      ; preds = %8, %2
  %10 = load i64, i64* %4, align 8
  %11 = and i64 %10, 7
  %12 = icmp ne i64 %11, 2
  br i1 %12, label %13, label %14

; <label>:13:                                     ; preds = %9
  call void @fatal_err(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.36, i32 0, i32 0))
  br label %14

; <label>:14:                                     ; preds = %13, %9
  %15 = load i64, i64* %3, align 8
  %16 = and i64 %15, -8
  %17 = lshr i64 %16, 32
  %18 = trunc i64 %17 to i32
  %19 = load i64, i64* %4, align 8
  %20 = and i64 %19, -8
  %21 = lshr i64 %20, 32
  %22 = trunc i64 %21 to i32
  %23 = sub nsw i32 %18, %22
  %24 = zext i32 %23 to i64
  %25 = shl i64 %24, 32
  %26 = or i64 %25, 2
  ret i64 %26
}

; Function Attrs: noinline optnone sspstrong uwtable
define i64 @applyprim__45(i64) #2 {
  %2 = alloca i64, align 8
  %3 = alloca i64, align 8
  %4 = alloca i64*, align 8
  store i64 %0, i64* %3, align 8
  %5 = load i64, i64* %3, align 8
  %6 = icmp eq i64 %5, 0
  br i1 %6, label %7, label %8

; <label>:7:                                      ; preds = %1
  store i64 2, i64* %2, align 8
  br label %50

; <label>:8:                                      ; preds = %1
  %9 = load i64, i64* %3, align 8
  %10 = and i64 %9, 7
  %11 = icmp ne i64 %10, 1
  br i1 %11, label %12, label %13

; <label>:12:                                     ; preds = %8
  call void @fatal_err(i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.35, i32 0, i32 0))
  br label %13

; <label>:13:                                     ; preds = %12, %8
  %14 = load i64, i64* %3, align 8
  %15 = and i64 %14, -8
  %16 = inttoptr i64 %15 to i64*
  store i64* %16, i64** %4, align 8
  %17 = load i64*, i64** %4, align 8
  %18 = getelementptr inbounds i64, i64* %17, i64 1
  %19 = load i64, i64* %18, align 8
  %20 = icmp eq i64 %19, 0
  br i1 %20, label %21, label %32

; <label>:21:                                     ; preds = %13
  %22 = load i64*, i64** %4, align 8
  %23 = getelementptr inbounds i64, i64* %22, i64 0
  %24 = load i64, i64* %23, align 8
  %25 = and i64 %24, -8
  %26 = lshr i64 %25, 32
  %27 = trunc i64 %26 to i32
  %28 = sub nsw i32 0, %27
  %29 = zext i32 %28 to i64
  %30 = shl i64 %29, 32
  %31 = or i64 %30, 2
  store i64 %31, i64* %2, align 8
  br label %50

; <label>:32:                                     ; preds = %13
  %33 = load i64*, i64** %4, align 8
  %34 = getelementptr inbounds i64, i64* %33, i64 0
  %35 = load i64, i64* %34, align 8
  %36 = and i64 %35, -8
  %37 = lshr i64 %36, 32
  %38 = trunc i64 %37 to i32
  %39 = load i64*, i64** %4, align 8
  %40 = getelementptr inbounds i64, i64* %39, i64 1
  %41 = load i64, i64* %40, align 8
  %42 = call i64 @applyprim__43(i64 %41)
  %43 = and i64 %42, -8
  %44 = lshr i64 %43, 32
  %45 = trunc i64 %44 to i32
  %46 = sub nsw i32 %38, %45
  %47 = zext i32 %46 to i64
  %48 = shl i64 %47, 32
  %49 = or i64 %48, 2
  store i64 %49, i64* %2, align 8
  br label %50

; <label>:50:                                     ; preds = %32, %21, %7
  %51 = load i64, i64* %2, align 8
  ret i64 %51
}

; Function Attrs: noinline optnone sspstrong uwtable
define i64 @prim__42(i64, i64) #2 {
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  store i64 %0, i64* %3, align 8
  store i64 %1, i64* %4, align 8
  %5 = load i64, i64* %3, align 8
  %6 = and i64 %5, 7
  %7 = icmp ne i64 %6, 2
  br i1 %7, label %8, label %9

; <label>:8:                                      ; preds = %2
  call void @fatal_err(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.37, i32 0, i32 0))
  br label %9

; <label>:9:                                      ; preds = %8, %2
  %10 = load i64, i64* %4, align 8
  %11 = and i64 %10, 7
  %12 = icmp ne i64 %11, 2
  br i1 %12, label %13, label %14

; <label>:13:                                     ; preds = %9
  call void @fatal_err(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.38, i32 0, i32 0))
  br label %14

; <label>:14:                                     ; preds = %13, %9
  %15 = load i64, i64* %3, align 8
  %16 = and i64 %15, -8
  %17 = lshr i64 %16, 32
  %18 = trunc i64 %17 to i32
  %19 = load i64, i64* %4, align 8
  %20 = and i64 %19, -8
  %21 = lshr i64 %20, 32
  %22 = trunc i64 %21 to i32
  %23 = mul nsw i32 %18, %22
  %24 = zext i32 %23 to i64
  %25 = shl i64 %24, 32
  %26 = or i64 %25, 2
  ret i64 %26
}

; Function Attrs: noinline optnone sspstrong uwtable
define i64 @applyprim__42(i64) #2 {
  %2 = alloca i64, align 8
  %3 = alloca i64, align 8
  %4 = alloca i64*, align 8
  store i64 %0, i64* %3, align 8
  %5 = load i64, i64* %3, align 8
  %6 = icmp eq i64 %5, 0
  br i1 %6, label %7, label %8

; <label>:7:                                      ; preds = %1
  store i64 4294967298, i64* %2, align 8
  br label %34

; <label>:8:                                      ; preds = %1
  %9 = load i64, i64* %3, align 8
  %10 = and i64 %9, 7
  %11 = icmp ne i64 %10, 1
  br i1 %11, label %12, label %13

; <label>:12:                                     ; preds = %8
  call void @fatal_err(i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.35, i32 0, i32 0))
  br label %13

; <label>:13:                                     ; preds = %12, %8
  %14 = load i64, i64* %3, align 8
  %15 = and i64 %14, -8
  %16 = inttoptr i64 %15 to i64*
  store i64* %16, i64** %4, align 8
  %17 = load i64*, i64** %4, align 8
  %18 = getelementptr inbounds i64, i64* %17, i64 0
  %19 = load i64, i64* %18, align 8
  %20 = and i64 %19, -8
  %21 = lshr i64 %20, 32
  %22 = trunc i64 %21 to i32
  %23 = load i64*, i64** %4, align 8
  %24 = getelementptr inbounds i64, i64* %23, i64 1
  %25 = load i64, i64* %24, align 8
  %26 = call i64 @applyprim__42(i64 %25)
  %27 = and i64 %26, -8
  %28 = lshr i64 %27, 32
  %29 = trunc i64 %28 to i32
  %30 = mul nsw i32 %22, %29
  %31 = zext i32 %30 to i64
  %32 = shl i64 %31, 32
  %33 = or i64 %32, 2
  store i64 %33, i64* %2, align 8
  br label %34

; <label>:34:                                     ; preds = %13, %7
  %35 = load i64, i64* %2, align 8
  ret i64 %35
}

; Function Attrs: noinline optnone sspstrong uwtable
define i64 @prim__47(i64, i64) #2 {
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  store i64 %0, i64* %3, align 8
  store i64 %1, i64* %4, align 8
  %5 = load i64, i64* %3, align 8
  %6 = and i64 %5, 7
  %7 = icmp ne i64 %6, 2
  br i1 %7, label %8, label %9

; <label>:8:                                      ; preds = %2
  call void @fatal_err(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.39, i32 0, i32 0))
  br label %9

; <label>:9:                                      ; preds = %8, %2
  %10 = load i64, i64* %4, align 8
  %11 = and i64 %10, 7
  %12 = icmp ne i64 %11, 2
  br i1 %12, label %13, label %14

; <label>:13:                                     ; preds = %9
  call void @fatal_err(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.40, i32 0, i32 0))
  br label %14

; <label>:14:                                     ; preds = %13, %9
  %15 = load i64, i64* %3, align 8
  %16 = and i64 %15, -8
  %17 = lshr i64 %16, 32
  %18 = trunc i64 %17 to i32
  %19 = load i64, i64* %4, align 8
  %20 = and i64 %19, -8
  %21 = lshr i64 %20, 32
  %22 = trunc i64 %21 to i32
  %23 = sdiv i32 %18, %22
  %24 = zext i32 %23 to i64
  %25 = shl i64 %24, 32
  %26 = or i64 %25, 2
  ret i64 %26
}

; Function Attrs: noinline optnone sspstrong uwtable
define i64 @prim__61(i64, i64) #2 {
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  %5 = alloca i64, align 8
  store i64 %0, i64* %4, align 8
  store i64 %1, i64* %5, align 8
  %6 = load i64, i64* %4, align 8
  %7 = and i64 %6, 7
  %8 = icmp ne i64 %7, 2
  br i1 %8, label %9, label %10

; <label>:9:                                      ; preds = %2
  call void @fatal_err(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.41, i32 0, i32 0))
  br label %10

; <label>:10:                                     ; preds = %9, %2
  %11 = load i64, i64* %5, align 8
  %12 = and i64 %11, 7
  %13 = icmp ne i64 %12, 2
  br i1 %13, label %14, label %15

; <label>:14:                                     ; preds = %10
  call void @fatal_err(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.42, i32 0, i32 0))
  br label %15

; <label>:15:                                     ; preds = %14, %10
  %16 = load i64, i64* %4, align 8
  %17 = and i64 %16, -8
  %18 = lshr i64 %17, 32
  %19 = trunc i64 %18 to i32
  %20 = load i64, i64* %5, align 8
  %21 = and i64 %20, -8
  %22 = lshr i64 %21, 32
  %23 = trunc i64 %22 to i32
  %24 = icmp eq i32 %19, %23
  br i1 %24, label %25, label %26

; <label>:25:                                     ; preds = %15
  store i64 31, i64* %3, align 8
  br label %27

; <label>:26:                                     ; preds = %15
  store i64 15, i64* %3, align 8
  br label %27

; <label>:27:                                     ; preds = %26, %25
  %28 = load i64, i64* %3, align 8
  ret i64 %28
}

; Function Attrs: noinline optnone sspstrong uwtable
define i64 @prim__60(i64, i64) #2 {
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  %5 = alloca i64, align 8
  store i64 %0, i64* %4, align 8
  store i64 %1, i64* %5, align 8
  %6 = load i64, i64* %4, align 8
  %7 = and i64 %6, 7
  %8 = icmp ne i64 %7, 2
  br i1 %8, label %9, label %10

; <label>:9:                                      ; preds = %2
  call void @fatal_err(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.43, i32 0, i32 0))
  br label %10

; <label>:10:                                     ; preds = %9, %2
  %11 = load i64, i64* %5, align 8
  %12 = and i64 %11, 7
  %13 = icmp ne i64 %12, 2
  br i1 %13, label %14, label %15

; <label>:14:                                     ; preds = %10
  call void @fatal_err(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.44, i32 0, i32 0))
  br label %15

; <label>:15:                                     ; preds = %14, %10
  %16 = load i64, i64* %4, align 8
  %17 = and i64 %16, -8
  %18 = lshr i64 %17, 32
  %19 = trunc i64 %18 to i32
  %20 = load i64, i64* %5, align 8
  %21 = and i64 %20, -8
  %22 = lshr i64 %21, 32
  %23 = trunc i64 %22 to i32
  %24 = icmp slt i32 %19, %23
  br i1 %24, label %25, label %26

; <label>:25:                                     ; preds = %15
  store i64 31, i64* %3, align 8
  br label %27

; <label>:26:                                     ; preds = %15
  store i64 15, i64* %3, align 8
  br label %27

; <label>:27:                                     ; preds = %26, %25
  %28 = load i64, i64* %3, align 8
  ret i64 %28
}

; Function Attrs: noinline optnone sspstrong uwtable
define i64 @prim__60_61(i64, i64) #2 {
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  %5 = alloca i64, align 8
  store i64 %0, i64* %4, align 8
  store i64 %1, i64* %5, align 8
  %6 = load i64, i64* %4, align 8
  %7 = and i64 %6, 7
  %8 = icmp ne i64 %7, 2
  br i1 %8, label %9, label %10

; <label>:9:                                      ; preds = %2
  call void @fatal_err(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.45, i32 0, i32 0))
  br label %10

; <label>:10:                                     ; preds = %9, %2
  %11 = load i64, i64* %5, align 8
  %12 = and i64 %11, 7
  %13 = icmp ne i64 %12, 2
  br i1 %13, label %14, label %15

; <label>:14:                                     ; preds = %10
  call void @fatal_err(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.46, i32 0, i32 0))
  br label %15

; <label>:15:                                     ; preds = %14, %10
  %16 = load i64, i64* %4, align 8
  %17 = and i64 %16, -8
  %18 = lshr i64 %17, 32
  %19 = trunc i64 %18 to i32
  %20 = load i64, i64* %5, align 8
  %21 = and i64 %20, -8
  %22 = lshr i64 %21, 32
  %23 = trunc i64 %22 to i32
  %24 = icmp sle i32 %19, %23
  br i1 %24, label %25, label %26

; <label>:25:                                     ; preds = %15
  store i64 31, i64* %3, align 8
  br label %27

; <label>:26:                                     ; preds = %15
  store i64 15, i64* %3, align 8
  br label %27

; <label>:27:                                     ; preds = %26, %25
  %28 = load i64, i64* %3, align 8
  ret i64 %28
}

; Function Attrs: noinline nounwind optnone sspstrong uwtable
define i64 @prim_not(i64) #0 {
  %2 = alloca i64, align 8
  %3 = alloca i64, align 8
  store i64 %0, i64* %3, align 8
  %4 = load i64, i64* %3, align 8
  %5 = icmp eq i64 %4, 15
  br i1 %5, label %6, label %7

; <label>:6:                                      ; preds = %1
  store i64 31, i64* %2, align 8
  br label %8

; <label>:7:                                      ; preds = %1
  store i64 15, i64* %2, align 8
  br label %8

; <label>:8:                                      ; preds = %7, %6
  %9 = load i64, i64* %2, align 8
  ret i64 %9
}

; Function Attrs: noinline optnone sspstrong uwtable
define i64 @applyprim_not(i64) #2 {
  %2 = alloca i64, align 8
  %3 = alloca i64, align 8
  store i64 %0, i64* %2, align 8
  %4 = load i64, i64* %2, align 8
  %5 = call i64 @expect_args1(i64 %4)
  store i64 %5, i64* %3, align 8
  %6 = load i64, i64* %3, align 8
  %7 = call i64 @prim_not(i64 %6)
  ret i64 %7
}

; Function Attrs: noinline optnone sspstrong uwtable
define linkonce_odr void @_ZN2KVI3keyS0_Lj0EEC2Ev(%class.KV*) unnamed_addr #2 comdat align 2 {
  %2 = alloca %class.KV*, align 8
  store %class.KV* %0, %class.KV** %2, align 8
  %3 = load %class.KV*, %class.KV** %2, align 8
  %4 = getelementptr inbounds %class.KV, %class.KV* %3, i32 0, i32 0
  call void @_ZN2KVI3keyS0_Lj0EE3KeyC2Em(%"union.KV<key, key, 0>::Key"* %4, i64 0)
  %5 = getelementptr inbounds %class.KV, %class.KV* %3, i32 0, i32 1
  call void @_ZN2KVI3keyS0_Lj0EE3ValC2EPKS0_(%"union.KV<key, key, 0>::Val"* %5, %class.key* null)
  ret void
}

; Function Attrs: noinline nounwind optnone sspstrong uwtable
define linkonce_odr void @_ZN2KVI3keyS0_Lj0EE3KeyC2Em(%"union.KV<key, key, 0>::Key"*, i64) unnamed_addr #0 comdat align 2 {
  %3 = alloca %"union.KV<key, key, 0>::Key"*, align 8
  %4 = alloca i64, align 8
  store %"union.KV<key, key, 0>::Key"* %0, %"union.KV<key, key, 0>::Key"** %3, align 8
  store i64 %1, i64* %4, align 8
  %5 = load %"union.KV<key, key, 0>::Key"*, %"union.KV<key, key, 0>::Key"** %3, align 8
  %6 = bitcast %"union.KV<key, key, 0>::Key"* %5 to i64*
  %7 = load i64, i64* %4, align 8
  store i64 %7, i64* %6, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone sspstrong uwtable
define linkonce_odr void @_ZN2KVI3keyS0_Lj0EE3ValC2EPKS0_(%"union.KV<key, key, 0>::Val"*, %class.key*) unnamed_addr #0 comdat align 2 {
  %3 = alloca %"union.KV<key, key, 0>::Val"*, align 8
  %4 = alloca %class.key*, align 8
  store %"union.KV<key, key, 0>::Val"* %0, %"union.KV<key, key, 0>::Val"** %3, align 8
  store %class.key* %1, %class.key** %4, align 8
  %5 = load %"union.KV<key, key, 0>::Val"*, %"union.KV<key, key, 0>::Val"** %3, align 8
  %6 = bitcast %"union.KV<key, key, 0>::Val"* %5 to %class.key**
  %7 = load %class.key*, %class.key** %4, align 8
  store %class.key* %7, %class.key** %6, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone sspstrong uwtable
define linkonce_odr i64 @_ZNK3key4hashEv(%class.key*) #0 comdat align 2 {
  %2 = alloca %class.key*, align 8
  %3 = alloca i8*, align 8
  %4 = alloca i64, align 8
  %5 = alloca i32, align 4
  store %class.key* %0, %class.key** %2, align 8
  %6 = load %class.key*, %class.key** %2, align 8
  %7 = bitcast %class.key* %6 to i8*
  store i8* %7, i8** %3, align 8
  store i64 -3750763034362895579, i64* %4, align 8
  store i32 0, i32* %5, align 4
  br label %8

; <label>:8:                                      ; preds = %28, %1
  %9 = load i32, i32* %5, align 4
  %10 = zext i32 %9 to i64
  %11 = icmp ult i64 %10, 8
  br i1 %11, label %12, label %30

; <label>:12:                                     ; preds = %8
  %13 = load i64, i64* %4, align 8
  %14 = load i8*, i8** %3, align 8
  %15 = load i8, i8* %14, align 1
  %16 = zext i8 %15 to i64
  %17 = xor i64 %13, %16
  store i64 %17, i64* %4, align 8
  %18 = load i64, i64* %4, align 8
  %19 = mul i64 %18, 1099511628211
  store i64 %19, i64* %4, align 8
  br label %20

; <label>:20:                                     ; preds = %12
  %21 = load i32, i32* %5, align 4
  %22 = add i32 %21, 1
  store i32 %22, i32* %5, align 4
  %23 = icmp ne i32 %22, 0
  br i1 %23, label %24, label %28

; <label>:24:                                     ; preds = %20
  %25 = load i8*, i8** %3, align 8
  %26 = getelementptr inbounds i8, i8* %25, i32 1
  store i8* %26, i8** %3, align 8
  %27 = icmp ne i8* %26, null
  br label %28

; <label>:28:                                     ; preds = %24, %20
  %29 = phi i1 [ false, %20 ], [ %27, %24 ]
  br label %8

; <label>:30:                                     ; preds = %8
  %31 = load i64, i64* %4, align 8
  ret i64 %31
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i32, i1) #6

; Function Attrs: noinline optnone sspstrong uwtable
define linkonce_odr void @_ZN2KVI3keyS0_Lj0EEC2EPKS0_S3_(%class.KV*, %class.key*, %class.key*) unnamed_addr #2 comdat align 2 {
  %4 = alloca %class.KV*, align 8
  %5 = alloca %class.key*, align 8
  %6 = alloca %class.key*, align 8
  store %class.KV* %0, %class.KV** %4, align 8
  store %class.key* %1, %class.key** %5, align 8
  store %class.key* %2, %class.key** %6, align 8
  %7 = load %class.KV*, %class.KV** %4, align 8
  %8 = getelementptr inbounds %class.KV, %class.KV* %7, i32 0, i32 0
  %9 = load %class.key*, %class.key** %5, align 8
  call void @_ZN2KVI3keyS0_Lj0EE3KeyC2EPKS0_(%"union.KV<key, key, 0>::Key"* %8, %class.key* %9)
  %10 = getelementptr inbounds %class.KV, %class.KV* %7, i32 0, i32 1
  %11 = load %class.key*, %class.key** %6, align 8
  call void @_ZN2KVI3keyS0_Lj0EE3ValC2EPKS0_(%"union.KV<key, key, 0>::Val"* %10, %class.key* %11)
  ret void
}

; Function Attrs: noinline nounwind optnone sspstrong uwtable
define linkonce_odr zeroext i1 @_ZNK3keyeqERKS_(%class.key*, %class.key* dereferenceable(8)) #0 comdat align 2 {
  %3 = alloca %class.key*, align 8
  %4 = alloca %class.key*, align 8
  store %class.key* %0, %class.key** %3, align 8
  store %class.key* %1, %class.key** %4, align 8
  %5 = load %class.key*, %class.key** %3, align 8
  %6 = load %class.key*, %class.key** %4, align 8
  %7 = getelementptr inbounds %class.key, %class.key* %6, i32 0, i32 0
  %8 = load i64, i64* %7, align 8
  %9 = getelementptr inbounds %class.key, %class.key* %5, i32 0, i32 0
  %10 = load i64, i64* %9, align 8
  %11 = icmp eq i64 %8, %10
  ret i1 %11
}

; Function Attrs: noinline optnone sspstrong uwtable
define linkonce_odr void @_ZN2KVI3keyS0_Lj0EE14new_inner_nodeEmPKS0_S3_mS3_S3_(%class.KV* noalias sret, i64, %class.key*, %class.key*, i64, %class.key*, %class.key*) #2 comdat align 2 {
  %8 = alloca i64, align 8
  %9 = alloca %class.key*, align 8
  %10 = alloca %class.key*, align 8
  %11 = alloca i64, align 8
  %12 = alloca %class.key*, align 8
  %13 = alloca %class.key*, align 8
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  %16 = alloca %class.KV.0, align 8
  %17 = alloca %class.KV.0*, align 8
  %18 = alloca %class.KV.0*, align 8
  store i64 %1, i64* %8, align 8
  store %class.key* %2, %class.key** %9, align 8
  store %class.key* %3, %class.key** %10, align 8
  store i64 %4, i64* %11, align 8
  store %class.key* %5, %class.key** %12, align 8
  store %class.key* %6, %class.key** %13, align 8
  %19 = load i64, i64* %8, align 8
  %20 = and i64 %19, 63
  %21 = urem i64 %20, 63
  %22 = trunc i64 %21 to i32
  store i32 %22, i32* %14, align 4
  %23 = load i64, i64* %11, align 8
  %24 = and i64 %23, 63
  %25 = urem i64 %24, 63
  %26 = trunc i64 %25 to i32
  store i32 %26, i32* %15, align 4
  %27 = load i32, i32* %14, align 4
  %28 = load i32, i32* %15, align 4
  %29 = icmp eq i32 %27, %28
  br i1 %29, label %30, label %51

; <label>:30:                                     ; preds = %7
  %31 = load i64, i64* %8, align 8
  %32 = lshr i64 %31, 6
  %33 = load %class.key*, %class.key** %9, align 8
  %34 = load %class.key*, %class.key** %10, align 8
  %35 = load i64, i64* %11, align 8
  %36 = lshr i64 %35, 6
  %37 = load %class.key*, %class.key** %12, align 8
  %38 = load %class.key*, %class.key** %13, align 8
  call void @_ZN2KVI3keyS0_Lj1EE14new_inner_nodeEmPKS0_S3_mS3_S3_(%class.KV.0* sret %16, i64 %32, %class.key* %33, %class.key* %34, i64 %36, %class.key* %37, %class.key* %38)
  %39 = call noalias i8* @malloc(i64 16) #8
  %40 = bitcast i8* %39 to %class.KV.0*
  store %class.KV.0* %40, %class.KV.0** %17, align 8
  %41 = load %class.KV.0*, %class.KV.0** %17, align 8
  %42 = getelementptr inbounds %class.KV.0, %class.KV.0* %41, i64 0
  %43 = bitcast %class.KV.0* %42 to i8*
  %44 = bitcast i8* %43 to %class.KV.0*
  call void @_ZN2KVI3keyS0_Lj1EEC2ERKS1_(%class.KV.0* %44, %class.KV.0* dereferenceable(16) %16)
  %45 = load i32, i32* %14, align 4
  %46 = zext i32 %45 to i64
  %47 = shl i64 1, %46
  %48 = shl i64 %47, 1
  %49 = or i64 %48, 1
  %50 = load %class.KV.0*, %class.KV.0** %17, align 8
  call void @_ZN2KVI3keyS0_Lj0EEC2EmPKS_IS0_S0_Lj1EE(%class.KV* %0, i64 %49, %class.KV.0* %50)
  br label %94

; <label>:51:                                     ; preds = %7
  %52 = call noalias i8* @malloc(i64 32) #8
  %53 = bitcast i8* %52 to %class.KV.0*
  store %class.KV.0* %53, %class.KV.0** %18, align 8
  %54 = load i32, i32* %15, align 4
  %55 = load i32, i32* %14, align 4
  %56 = icmp ult i32 %54, %55
  br i1 %56, label %57, label %70

; <label>:57:                                     ; preds = %51
  %58 = load %class.KV.0*, %class.KV.0** %18, align 8
  %59 = getelementptr inbounds %class.KV.0, %class.KV.0* %58, i64 0
  %60 = bitcast %class.KV.0* %59 to i8*
  %61 = bitcast i8* %60 to %class.KV.0*
  %62 = load %class.key*, %class.key** %12, align 8
  %63 = load %class.key*, %class.key** %13, align 8
  call void @_ZN2KVI3keyS0_Lj1EEC2EPKS0_S3_(%class.KV.0* %61, %class.key* %62, %class.key* %63)
  %64 = load %class.KV.0*, %class.KV.0** %18, align 8
  %65 = getelementptr inbounds %class.KV.0, %class.KV.0* %64, i64 1
  %66 = bitcast %class.KV.0* %65 to i8*
  %67 = bitcast i8* %66 to %class.KV.0*
  %68 = load %class.key*, %class.key** %9, align 8
  %69 = load %class.key*, %class.key** %10, align 8
  call void @_ZN2KVI3keyS0_Lj1EEC2EPKS0_S3_(%class.KV.0* %67, %class.key* %68, %class.key* %69)
  br label %83

; <label>:70:                                     ; preds = %51
  %71 = load %class.KV.0*, %class.KV.0** %18, align 8
  %72 = getelementptr inbounds %class.KV.0, %class.KV.0* %71, i64 0
  %73 = bitcast %class.KV.0* %72 to i8*
  %74 = bitcast i8* %73 to %class.KV.0*
  %75 = load %class.key*, %class.key** %9, align 8
  %76 = load %class.key*, %class.key** %10, align 8
  call void @_ZN2KVI3keyS0_Lj1EEC2EPKS0_S3_(%class.KV.0* %74, %class.key* %75, %class.key* %76)
  %77 = load %class.KV.0*, %class.KV.0** %18, align 8
  %78 = getelementptr inbounds %class.KV.0, %class.KV.0* %77, i64 1
  %79 = bitcast %class.KV.0* %78 to i8*
  %80 = bitcast i8* %79 to %class.KV.0*
  %81 = load %class.key*, %class.key** %12, align 8
  %82 = load %class.key*, %class.key** %13, align 8
  call void @_ZN2KVI3keyS0_Lj1EEC2EPKS0_S3_(%class.KV.0* %80, %class.key* %81, %class.key* %82)
  br label %83

; <label>:83:                                     ; preds = %70, %57
  %84 = load i32, i32* %14, align 4
  %85 = zext i32 %84 to i64
  %86 = shl i64 1, %85
  %87 = load i32, i32* %15, align 4
  %88 = zext i32 %87 to i64
  %89 = shl i64 1, %88
  %90 = or i64 %86, %89
  %91 = shl i64 %90, 1
  %92 = or i64 %91, 1
  %93 = load %class.KV.0*, %class.KV.0** %18, align 8
  call void @_ZN2KVI3keyS0_Lj0EEC2EmPKS_IS0_S0_Lj1EE(%class.KV* %0, i64 %92, %class.KV.0* %93)
  br label %94

; <label>:94:                                     ; preds = %83, %30
  ret void
}

; Function Attrs: noinline optnone sspstrong uwtable
define linkonce_odr void @_ZN2KVI3keyS0_Lj0EE12insert_innerERKS1_mPKS0_S5_Pm(%class.KV* noalias sret, %class.KV* dereferenceable(16), i64, %class.key*, %class.key*, i64*) #2 comdat align 2 {
  %7 = alloca %class.KV*, align 8
  %8 = alloca i64, align 8
  %9 = alloca %class.key*, align 8
  %10 = alloca %class.key*, align 8
  %11 = alloca i64*, align 8
  %12 = alloca %class.KV.0*, align 8
  %13 = alloca i64, align 8
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  %16 = alloca i32, align 4
  %17 = alloca i8, align 1
  %18 = alloca %class.KV.0*, align 8
  %19 = alloca %class.KV.0, align 8
  %20 = alloca %class.KV.0, align 8
  %21 = alloca %class.KV.0*, align 8
  %22 = alloca %class.KV.0, align 8
  %23 = alloca %class.KV.0*, align 8
  %24 = alloca %class.KV.0*, align 8
  store %class.KV* %1, %class.KV** %7, align 8
  store i64 %2, i64* %8, align 8
  store %class.key* %3, %class.key** %9, align 8
  store %class.key* %4, %class.key** %10, align 8
  store i64* %5, i64** %11, align 8
  %25 = load %class.KV*, %class.KV** %7, align 8
  %26 = getelementptr inbounds %class.KV, %class.KV* %25, i32 0, i32 1
  %27 = bitcast %"union.KV<key, key, 0>::Val"* %26 to %class.KV.0**
  %28 = load %class.KV.0*, %class.KV.0** %27, align 8
  store %class.KV.0* %28, %class.KV.0** %12, align 8
  %29 = load %class.KV*, %class.KV** %7, align 8
  %30 = getelementptr inbounds %class.KV, %class.KV* %29, i32 0, i32 0
  %31 = bitcast %"union.KV<key, key, 0>::Key"* %30 to i64*
  %32 = load i64, i64* %31, align 8
  %33 = lshr i64 %32, 1
  store i64 %33, i64* %13, align 8
  %34 = load i64, i64* %8, align 8
  %35 = and i64 %34, 63
  %36 = urem i64 %35, 63
  %37 = trunc i64 %36 to i32
  store i32 %37, i32* %14, align 4
  %38 = load i64, i64* %13, align 8
  %39 = call i64 @llvm.ctpop.i64(i64 %38)
  %40 = trunc i64 %39 to i32
  store i32 %40, i32* %15, align 4
  %41 = load i64, i64* %13, align 8
  %42 = shl i64 %41, 1
  %43 = load i32, i32* %14, align 4
  %44 = sub i32 63, %43
  %45 = zext i32 %44 to i64
  %46 = shl i64 %42, %45
  %47 = call i64 @llvm.ctpop.i64(i64 %46)
  %48 = trunc i64 %47 to i32
  store i32 %48, i32* %16, align 4
  %49 = load i64, i64* %13, align 8
  %50 = load i32, i32* %14, align 4
  %51 = zext i32 %50 to i64
  %52 = shl i64 1, %51
  %53 = and i64 %49, %52
  %54 = icmp ne i64 %53, 0
  %55 = zext i1 %54 to i8
  store i8 %55, i8* %17, align 1
  %56 = load i8, i8* %17, align 1
  %57 = trunc i8 %56 to i1
  br i1 %57, label %58, label %149

; <label>:58:                                     ; preds = %6
  %59 = load %class.KV.0*, %class.KV.0** %12, align 8
  %60 = load i32, i32* %16, align 4
  %61 = zext i32 %60 to i64
  %62 = getelementptr inbounds %class.KV.0, %class.KV.0* %59, i64 %61
  %63 = getelementptr inbounds %class.KV.0, %class.KV.0* %62, i32 0, i32 0
  %64 = bitcast %"union.KV<key, key, 1>::Key"* %63 to i64*
  %65 = load i64, i64* %64, align 8
  %66 = and i64 %65, 1
  %67 = icmp eq i64 %66, 0
  br i1 %67, label %68, label %130

; <label>:68:                                     ; preds = %58
  %69 = load %class.KV.0*, %class.KV.0** %12, align 8
  %70 = load i32, i32* %16, align 4
  %71 = zext i32 %70 to i64
  %72 = getelementptr inbounds %class.KV.0, %class.KV.0* %69, i64 %71
  %73 = getelementptr inbounds %class.KV.0, %class.KV.0* %72, i32 0, i32 0
  %74 = bitcast %"union.KV<key, key, 1>::Key"* %73 to %class.key**
  %75 = load %class.key*, %class.key** %74, align 8
  %76 = load %class.key*, %class.key** %9, align 8
  %77 = call zeroext i1 @_ZNK3keyeqERKS_(%class.key* %75, %class.key* dereferenceable(8) %76)
  br i1 %77, label %78, label %90

; <label>:78:                                     ; preds = %68
  %79 = load %class.KV.0*, %class.KV.0** %12, align 8
  %80 = load i32, i32* %15, align 4
  %81 = load i32, i32* %16, align 4
  %82 = load %class.key*, %class.key** %9, align 8
  %83 = load %class.key*, %class.key** %10, align 8
  call void @_ZN2KVI3keyS0_Lj1EEC2EPKS0_S3_(%class.KV.0* %19, %class.key* %82, %class.key* %83)
  %84 = call %class.KV.0* @_ZN2KVI3keyS0_Lj1EE11update_nodeEPKS1_jjRS2_(%class.KV.0* %79, i32 %80, i32 %81, %class.KV.0* dereferenceable(16) %19)
  store %class.KV.0* %84, %class.KV.0** %18, align 8
  %85 = load %class.KV*, %class.KV** %7, align 8
  %86 = getelementptr inbounds %class.KV, %class.KV* %85, i32 0, i32 0
  %87 = bitcast %"union.KV<key, key, 0>::Key"* %86 to i64*
  %88 = load i64, i64* %87, align 8
  %89 = load %class.KV.0*, %class.KV.0** %18, align 8
  call void @_ZN2KVI3keyS0_Lj0EEC2EmPKS_IS0_S0_Lj1EE(%class.KV* %0, i64 %88, %class.KV.0* %89)
  br label %198

; <label>:90:                                     ; preds = %68
  %91 = load i64*, i64** %11, align 8
  %92 = load i64, i64* %91, align 8
  %93 = add i64 %92, 1
  store i64 %93, i64* %91, align 8
  %94 = load %class.KV.0*, %class.KV.0** %12, align 8
  %95 = load i32, i32* %16, align 4
  %96 = zext i32 %95 to i64
  %97 = getelementptr inbounds %class.KV.0, %class.KV.0* %94, i64 %96
  %98 = getelementptr inbounds %class.KV.0, %class.KV.0* %97, i32 0, i32 0
  %99 = bitcast %"union.KV<key, key, 1>::Key"* %98 to %class.key**
  %100 = load %class.key*, %class.key** %99, align 8
  %101 = call i64 @_ZNK3key4hashEv(%class.key* %100)
  %102 = lshr i64 %101, 10
  %103 = load %class.KV.0*, %class.KV.0** %12, align 8
  %104 = load i32, i32* %16, align 4
  %105 = zext i32 %104 to i64
  %106 = getelementptr inbounds %class.KV.0, %class.KV.0* %103, i64 %105
  %107 = getelementptr inbounds %class.KV.0, %class.KV.0* %106, i32 0, i32 0
  %108 = bitcast %"union.KV<key, key, 1>::Key"* %107 to %class.key**
  %109 = load %class.key*, %class.key** %108, align 8
  %110 = load %class.KV.0*, %class.KV.0** %12, align 8
  %111 = load i32, i32* %16, align 4
  %112 = zext i32 %111 to i64
  %113 = getelementptr inbounds %class.KV.0, %class.KV.0* %110, i64 %112
  %114 = getelementptr inbounds %class.KV.0, %class.KV.0* %113, i32 0, i32 1
  %115 = bitcast %"union.KV<key, key, 1>::Val"* %114 to %class.key**
  %116 = load %class.key*, %class.key** %115, align 8
  %117 = load i64, i64* %8, align 8
  %118 = lshr i64 %117, 6
  %119 = load %class.key*, %class.key** %9, align 8
  %120 = load %class.key*, %class.key** %10, align 8
  call void @_ZN2KVI3keyS0_Lj1EE14new_inner_nodeEmPKS0_S3_mS3_S3_(%class.KV.0* sret %20, i64 %102, %class.key* %109, %class.key* %116, i64 %118, %class.key* %119, %class.key* %120)
  %121 = load %class.KV.0*, %class.KV.0** %12, align 8
  %122 = load i32, i32* %15, align 4
  %123 = load i32, i32* %16, align 4
  %124 = call %class.KV.0* @_ZN2KVI3keyS0_Lj1EE11update_nodeEPKS1_jjRS2_(%class.KV.0* %121, i32 %122, i32 %123, %class.KV.0* dereferenceable(16) %20)
  store %class.KV.0* %124, %class.KV.0** %21, align 8
  %125 = load %class.KV*, %class.KV** %7, align 8
  %126 = getelementptr inbounds %class.KV, %class.KV* %125, i32 0, i32 0
  %127 = bitcast %"union.KV<key, key, 0>::Key"* %126 to i64*
  %128 = load i64, i64* %127, align 8
  %129 = load %class.KV.0*, %class.KV.0** %21, align 8
  call void @_ZN2KVI3keyS0_Lj0EEC2EmPKS_IS0_S0_Lj1EE(%class.KV* %0, i64 %128, %class.KV.0* %129)
  br label %198

; <label>:130:                                    ; preds = %58
  %131 = load %class.KV.0*, %class.KV.0** %12, align 8
  %132 = load i32, i32* %16, align 4
  %133 = zext i32 %132 to i64
  %134 = getelementptr inbounds %class.KV.0, %class.KV.0* %131, i64 %133
  %135 = load i64, i64* %8, align 8
  %136 = lshr i64 %135, 6
  %137 = load %class.key*, %class.key** %9, align 8
  %138 = load %class.key*, %class.key** %10, align 8
  %139 = load i64*, i64** %11, align 8
  call void @_ZN2KVI3keyS0_Lj1EE12insert_innerERKS1_mPKS0_S5_Pm(%class.KV.0* sret %22, %class.KV.0* dereferenceable(16) %134, i64 %136, %class.key* %137, %class.key* %138, i64* %139)
  %140 = load %class.KV.0*, %class.KV.0** %12, align 8
  %141 = load i32, i32* %15, align 4
  %142 = load i32, i32* %16, align 4
  %143 = call %class.KV.0* @_ZN2KVI3keyS0_Lj1EE11update_nodeEPKS1_jjRS2_(%class.KV.0* %140, i32 %141, i32 %142, %class.KV.0* dereferenceable(16) %22)
  store %class.KV.0* %143, %class.KV.0** %23, align 8
  %144 = load %class.KV*, %class.KV** %7, align 8
  %145 = getelementptr inbounds %class.KV, %class.KV* %144, i32 0, i32 0
  %146 = bitcast %"union.KV<key, key, 0>::Key"* %145 to i64*
  %147 = load i64, i64* %146, align 8
  %148 = load %class.KV.0*, %class.KV.0** %23, align 8
  call void @_ZN2KVI3keyS0_Lj0EEC2EmPKS_IS0_S0_Lj1EE(%class.KV* %0, i64 %147, %class.KV.0* %148)
  br label %198

; <label>:149:                                    ; preds = %6
  %150 = load i64*, i64** %11, align 8
  %151 = load i64, i64* %150, align 8
  %152 = add i64 %151, 1
  store i64 %152, i64* %150, align 8
  %153 = load i32, i32* %15, align 4
  %154 = add i32 %153, 1
  %155 = zext i32 %154 to i64
  %156 = mul i64 %155, 16
  %157 = call noalias i8* @malloc(i64 %156) #8
  %158 = bitcast i8* %157 to %class.KV.0*
  store %class.KV.0* %158, %class.KV.0** %24, align 8
  %159 = load %class.KV.0*, %class.KV.0** %24, align 8
  %160 = bitcast %class.KV.0* %159 to i8*
  %161 = load %class.KV.0*, %class.KV.0** %12, align 8
  %162 = bitcast %class.KV.0* %161 to i8*
  %163 = load i32, i32* %16, align 4
  %164 = zext i32 %163 to i64
  %165 = mul i64 %164, 16
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %160, i8* %162, i64 %165, i32 8, i1 false)
  %166 = load %class.KV.0*, %class.KV.0** %24, align 8
  %167 = load i32, i32* %16, align 4
  %168 = add i32 %167, 1
  %169 = zext i32 %168 to i64
  %170 = getelementptr inbounds %class.KV.0, %class.KV.0* %166, i64 %169
  %171 = bitcast %class.KV.0* %170 to i8*
  %172 = load %class.KV.0*, %class.KV.0** %12, align 8
  %173 = load i32, i32* %16, align 4
  %174 = zext i32 %173 to i64
  %175 = getelementptr inbounds %class.KV.0, %class.KV.0* %172, i64 %174
  %176 = bitcast %class.KV.0* %175 to i8*
  %177 = load i32, i32* %15, align 4
  %178 = load i32, i32* %16, align 4
  %179 = sub i32 %177, %178
  %180 = zext i32 %179 to i64
  %181 = mul i64 %180, 16
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %171, i8* %176, i64 %181, i32 8, i1 false)
  %182 = load %class.KV.0*, %class.KV.0** %24, align 8
  %183 = load i32, i32* %16, align 4
  %184 = zext i32 %183 to i64
  %185 = getelementptr inbounds %class.KV.0, %class.KV.0* %182, i64 %184
  %186 = bitcast %class.KV.0* %185 to i8*
  %187 = bitcast i8* %186 to %class.KV.0*
  %188 = load %class.key*, %class.key** %9, align 8
  %189 = load %class.key*, %class.key** %10, align 8
  call void @_ZN2KVI3keyS0_Lj1EEC2EPKS0_S3_(%class.KV.0* %187, %class.key* %188, %class.key* %189)
  %190 = load i64, i64* %13, align 8
  %191 = load i32, i32* %14, align 4
  %192 = zext i32 %191 to i64
  %193 = shl i64 1, %192
  %194 = or i64 %190, %193
  %195 = shl i64 %194, 1
  %196 = or i64 %195, 1
  %197 = load %class.KV.0*, %class.KV.0** %24, align 8
  call void @_ZN2KVI3keyS0_Lj0EEC2EmPKS_IS0_S0_Lj1EE(%class.KV* %0, i64 %196, %class.KV.0* %197)
  br label %198

; <label>:198:                                    ; preds = %149, %130, %90, %78
  ret void
}

; Function Attrs: noinline nounwind optnone sspstrong uwtable
define linkonce_odr void @_ZN2KVI3keyS0_Lj0EE3KeyC2EPKS0_(%"union.KV<key, key, 0>::Key"*, %class.key*) unnamed_addr #0 comdat align 2 {
  %3 = alloca %"union.KV<key, key, 0>::Key"*, align 8
  %4 = alloca %class.key*, align 8
  store %"union.KV<key, key, 0>::Key"* %0, %"union.KV<key, key, 0>::Key"** %3, align 8
  store %class.key* %1, %class.key** %4, align 8
  %5 = load %"union.KV<key, key, 0>::Key"*, %"union.KV<key, key, 0>::Key"** %3, align 8
  %6 = bitcast %"union.KV<key, key, 0>::Key"* %5 to %class.key**
  %7 = load %class.key*, %class.key** %4, align 8
  store %class.key* %7, %class.key** %6, align 8
  ret void
}

; Function Attrs: noinline optnone sspstrong uwtable
define linkonce_odr void @_ZN2KVI3keyS0_Lj1EE14new_inner_nodeEmPKS0_S3_mS3_S3_(%class.KV.0* noalias sret, i64, %class.key*, %class.key*, i64, %class.key*, %class.key*) #2 comdat align 2 {
  %8 = alloca i64, align 8
  %9 = alloca %class.key*, align 8
  %10 = alloca %class.key*, align 8
  %11 = alloca i64, align 8
  %12 = alloca %class.key*, align 8
  %13 = alloca %class.key*, align 8
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  %16 = alloca %class.KV.1, align 8
  %17 = alloca %class.KV.1*, align 8
  %18 = alloca %class.KV.1*, align 8
  store i64 %1, i64* %8, align 8
  store %class.key* %2, %class.key** %9, align 8
  store %class.key* %3, %class.key** %10, align 8
  store i64 %4, i64* %11, align 8
  store %class.key* %5, %class.key** %12, align 8
  store %class.key* %6, %class.key** %13, align 8
  %19 = load i64, i64* %8, align 8
  %20 = and i64 %19, 63
  %21 = urem i64 %20, 63
  %22 = trunc i64 %21 to i32
  store i32 %22, i32* %14, align 4
  %23 = load i64, i64* %11, align 8
  %24 = and i64 %23, 63
  %25 = urem i64 %24, 63
  %26 = trunc i64 %25 to i32
  store i32 %26, i32* %15, align 4
  %27 = load i32, i32* %14, align 4
  %28 = load i32, i32* %15, align 4
  %29 = icmp eq i32 %27, %28
  br i1 %29, label %30, label %51

; <label>:30:                                     ; preds = %7
  %31 = load i64, i64* %8, align 8
  %32 = lshr i64 %31, 6
  %33 = load %class.key*, %class.key** %9, align 8
  %34 = load %class.key*, %class.key** %10, align 8
  %35 = load i64, i64* %11, align 8
  %36 = lshr i64 %35, 6
  %37 = load %class.key*, %class.key** %12, align 8
  %38 = load %class.key*, %class.key** %13, align 8
  call void @_ZN2KVI3keyS0_Lj2EE14new_inner_nodeEmPKS0_S3_mS3_S3_(%class.KV.1* sret %16, i64 %32, %class.key* %33, %class.key* %34, i64 %36, %class.key* %37, %class.key* %38)
  %39 = call noalias i8* @malloc(i64 16) #8
  %40 = bitcast i8* %39 to %class.KV.1*
  store %class.KV.1* %40, %class.KV.1** %17, align 8
  %41 = load %class.KV.1*, %class.KV.1** %17, align 8
  %42 = getelementptr inbounds %class.KV.1, %class.KV.1* %41, i64 0
  %43 = bitcast %class.KV.1* %42 to i8*
  %44 = bitcast i8* %43 to %class.KV.1*
  call void @_ZN2KVI3keyS0_Lj2EEC2ERKS1_(%class.KV.1* %44, %class.KV.1* dereferenceable(16) %16)
  %45 = load i32, i32* %14, align 4
  %46 = zext i32 %45 to i64
  %47 = shl i64 1, %46
  %48 = shl i64 %47, 1
  %49 = or i64 %48, 1
  %50 = load %class.KV.1*, %class.KV.1** %17, align 8
  call void @_ZN2KVI3keyS0_Lj1EEC2EmPKS_IS0_S0_Lj2EE(%class.KV.0* %0, i64 %49, %class.KV.1* %50)
  br label %94

; <label>:51:                                     ; preds = %7
  %52 = call noalias i8* @malloc(i64 32) #8
  %53 = bitcast i8* %52 to %class.KV.1*
  store %class.KV.1* %53, %class.KV.1** %18, align 8
  %54 = load i32, i32* %15, align 4
  %55 = load i32, i32* %14, align 4
  %56 = icmp ult i32 %54, %55
  br i1 %56, label %57, label %70

; <label>:57:                                     ; preds = %51
  %58 = load %class.KV.1*, %class.KV.1** %18, align 8
  %59 = getelementptr inbounds %class.KV.1, %class.KV.1* %58, i64 0
  %60 = bitcast %class.KV.1* %59 to i8*
  %61 = bitcast i8* %60 to %class.KV.1*
  %62 = load %class.key*, %class.key** %12, align 8
  %63 = load %class.key*, %class.key** %13, align 8
  call void @_ZN2KVI3keyS0_Lj2EEC2EPKS0_S3_(%class.KV.1* %61, %class.key* %62, %class.key* %63)
  %64 = load %class.KV.1*, %class.KV.1** %18, align 8
  %65 = getelementptr inbounds %class.KV.1, %class.KV.1* %64, i64 1
  %66 = bitcast %class.KV.1* %65 to i8*
  %67 = bitcast i8* %66 to %class.KV.1*
  %68 = load %class.key*, %class.key** %9, align 8
  %69 = load %class.key*, %class.key** %10, align 8
  call void @_ZN2KVI3keyS0_Lj2EEC2EPKS0_S3_(%class.KV.1* %67, %class.key* %68, %class.key* %69)
  br label %83

; <label>:70:                                     ; preds = %51
  %71 = load %class.KV.1*, %class.KV.1** %18, align 8
  %72 = getelementptr inbounds %class.KV.1, %class.KV.1* %71, i64 0
  %73 = bitcast %class.KV.1* %72 to i8*
  %74 = bitcast i8* %73 to %class.KV.1*
  %75 = load %class.key*, %class.key** %9, align 8
  %76 = load %class.key*, %class.key** %10, align 8
  call void @_ZN2KVI3keyS0_Lj2EEC2EPKS0_S3_(%class.KV.1* %74, %class.key* %75, %class.key* %76)
  %77 = load %class.KV.1*, %class.KV.1** %18, align 8
  %78 = getelementptr inbounds %class.KV.1, %class.KV.1* %77, i64 1
  %79 = bitcast %class.KV.1* %78 to i8*
  %80 = bitcast i8* %79 to %class.KV.1*
  %81 = load %class.key*, %class.key** %12, align 8
  %82 = load %class.key*, %class.key** %13, align 8
  call void @_ZN2KVI3keyS0_Lj2EEC2EPKS0_S3_(%class.KV.1* %80, %class.key* %81, %class.key* %82)
  br label %83

; <label>:83:                                     ; preds = %70, %57
  %84 = load i32, i32* %14, align 4
  %85 = zext i32 %84 to i64
  %86 = shl i64 1, %85
  %87 = load i32, i32* %15, align 4
  %88 = zext i32 %87 to i64
  %89 = shl i64 1, %88
  %90 = or i64 %86, %89
  %91 = shl i64 %90, 1
  %92 = or i64 %91, 1
  %93 = load %class.KV.1*, %class.KV.1** %18, align 8
  call void @_ZN2KVI3keyS0_Lj1EEC2EmPKS_IS0_S0_Lj2EE(%class.KV.0* %0, i64 %92, %class.KV.1* %93)
  br label %94

; <label>:94:                                     ; preds = %83, %30
  ret void
}

; Function Attrs: noinline nounwind optnone sspstrong uwtable
define linkonce_odr void @_ZN2KVI3keyS0_Lj1EEC2ERKS1_(%class.KV.0*, %class.KV.0* dereferenceable(16)) unnamed_addr #0 comdat align 2 {
  %3 = alloca %class.KV.0*, align 8
  %4 = alloca %class.KV.0*, align 8
  store %class.KV.0* %0, %class.KV.0** %3, align 8
  store %class.KV.0* %1, %class.KV.0** %4, align 8
  %5 = load %class.KV.0*, %class.KV.0** %3, align 8
  %6 = getelementptr inbounds %class.KV.0, %class.KV.0* %5, i32 0, i32 0
  %7 = load %class.KV.0*, %class.KV.0** %4, align 8
  %8 = getelementptr inbounds %class.KV.0, %class.KV.0* %7, i32 0, i32 0
  %9 = bitcast %"union.KV<key, key, 1>::Key"* %6 to i8*
  %10 = bitcast %"union.KV<key, key, 1>::Key"* %8 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %9, i8* %10, i64 8, i32 8, i1 false)
  %11 = getelementptr inbounds %class.KV.0, %class.KV.0* %5, i32 0, i32 1
  %12 = load %class.KV.0*, %class.KV.0** %4, align 8
  %13 = getelementptr inbounds %class.KV.0, %class.KV.0* %12, i32 0, i32 1
  %14 = bitcast %"union.KV<key, key, 1>::Val"* %11 to i8*
  %15 = bitcast %"union.KV<key, key, 1>::Val"* %13 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %14, i8* %15, i64 8, i32 8, i1 false)
  ret void
}

; Function Attrs: noinline optnone sspstrong uwtable
define linkonce_odr void @_ZN2KVI3keyS0_Lj0EEC2EmPKS_IS0_S0_Lj1EE(%class.KV*, i64, %class.KV.0*) unnamed_addr #2 comdat align 2 {
  %4 = alloca %class.KV*, align 8
  %5 = alloca i64, align 8
  %6 = alloca %class.KV.0*, align 8
  store %class.KV* %0, %class.KV** %4, align 8
  store i64 %1, i64* %5, align 8
  store %class.KV.0* %2, %class.KV.0** %6, align 8
  %7 = load %class.KV*, %class.KV** %4, align 8
  %8 = getelementptr inbounds %class.KV, %class.KV* %7, i32 0, i32 0
  %9 = load i64, i64* %5, align 8
  call void @_ZN2KVI3keyS0_Lj0EE3KeyC2Em(%"union.KV<key, key, 0>::Key"* %8, i64 %9)
  %10 = getelementptr inbounds %class.KV, %class.KV* %7, i32 0, i32 1
  %11 = load %class.KV.0*, %class.KV.0** %6, align 8
  call void @_ZN2KVI3keyS0_Lj0EE3ValC2EPKS_IS0_S0_Lj1EE(%"union.KV<key, key, 0>::Val"* %10, %class.KV.0* %11)
  ret void
}

; Function Attrs: noinline optnone sspstrong uwtable
define linkonce_odr void @_ZN2KVI3keyS0_Lj1EEC2EPKS0_S3_(%class.KV.0*, %class.key*, %class.key*) unnamed_addr #2 comdat align 2 {
  %4 = alloca %class.KV.0*, align 8
  %5 = alloca %class.key*, align 8
  %6 = alloca %class.key*, align 8
  store %class.KV.0* %0, %class.KV.0** %4, align 8
  store %class.key* %1, %class.key** %5, align 8
  store %class.key* %2, %class.key** %6, align 8
  %7 = load %class.KV.0*, %class.KV.0** %4, align 8
  %8 = getelementptr inbounds %class.KV.0, %class.KV.0* %7, i32 0, i32 0
  %9 = load %class.key*, %class.key** %5, align 8
  call void @_ZN2KVI3keyS0_Lj1EE3KeyC2EPKS0_(%"union.KV<key, key, 1>::Key"* %8, %class.key* %9)
  %10 = getelementptr inbounds %class.KV.0, %class.KV.0* %7, i32 0, i32 1
  %11 = load %class.key*, %class.key** %6, align 8
  call void @_ZN2KVI3keyS0_Lj1EE3ValC2EPKS0_(%"union.KV<key, key, 1>::Val"* %10, %class.key* %11)
  ret void
}

; Function Attrs: noinline optnone sspstrong uwtable
define linkonce_odr void @_ZN2KVI3keyS0_Lj2EE14new_inner_nodeEmPKS0_S3_mS3_S3_(%class.KV.1* noalias sret, i64, %class.key*, %class.key*, i64, %class.key*, %class.key*) #2 comdat align 2 {
  %8 = alloca i64, align 8
  %9 = alloca %class.key*, align 8
  %10 = alloca %class.key*, align 8
  %11 = alloca i64, align 8
  %12 = alloca %class.key*, align 8
  %13 = alloca %class.key*, align 8
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  %16 = alloca %class.KV.2, align 8
  %17 = alloca %class.KV.2*, align 8
  %18 = alloca %class.KV.2*, align 8
  store i64 %1, i64* %8, align 8
  store %class.key* %2, %class.key** %9, align 8
  store %class.key* %3, %class.key** %10, align 8
  store i64 %4, i64* %11, align 8
  store %class.key* %5, %class.key** %12, align 8
  store %class.key* %6, %class.key** %13, align 8
  %19 = load i64, i64* %8, align 8
  %20 = and i64 %19, 63
  %21 = urem i64 %20, 63
  %22 = trunc i64 %21 to i32
  store i32 %22, i32* %14, align 4
  %23 = load i64, i64* %11, align 8
  %24 = and i64 %23, 63
  %25 = urem i64 %24, 63
  %26 = trunc i64 %25 to i32
  store i32 %26, i32* %15, align 4
  %27 = load i32, i32* %14, align 4
  %28 = load i32, i32* %15, align 4
  %29 = icmp eq i32 %27, %28
  br i1 %29, label %30, label %51

; <label>:30:                                     ; preds = %7
  %31 = load i64, i64* %8, align 8
  %32 = lshr i64 %31, 6
  %33 = load %class.key*, %class.key** %9, align 8
  %34 = load %class.key*, %class.key** %10, align 8
  %35 = load i64, i64* %11, align 8
  %36 = lshr i64 %35, 6
  %37 = load %class.key*, %class.key** %12, align 8
  %38 = load %class.key*, %class.key** %13, align 8
  call void @_ZN2KVI3keyS0_Lj3EE14new_inner_nodeEmPKS0_S3_mS3_S3_(%class.KV.2* sret %16, i64 %32, %class.key* %33, %class.key* %34, i64 %36, %class.key* %37, %class.key* %38)
  %39 = call noalias i8* @malloc(i64 16) #8
  %40 = bitcast i8* %39 to %class.KV.2*
  store %class.KV.2* %40, %class.KV.2** %17, align 8
  %41 = load %class.KV.2*, %class.KV.2** %17, align 8
  %42 = getelementptr inbounds %class.KV.2, %class.KV.2* %41, i64 0
  %43 = bitcast %class.KV.2* %42 to i8*
  %44 = bitcast i8* %43 to %class.KV.2*
  call void @_ZN2KVI3keyS0_Lj3EEC2ERKS1_(%class.KV.2* %44, %class.KV.2* dereferenceable(16) %16)
  %45 = load i32, i32* %14, align 4
  %46 = zext i32 %45 to i64
  %47 = shl i64 1, %46
  %48 = shl i64 %47, 1
  %49 = or i64 %48, 1
  %50 = load %class.KV.2*, %class.KV.2** %17, align 8
  call void @_ZN2KVI3keyS0_Lj2EEC2EmPKS_IS0_S0_Lj3EE(%class.KV.1* %0, i64 %49, %class.KV.2* %50)
  br label %94

; <label>:51:                                     ; preds = %7
  %52 = call noalias i8* @malloc(i64 32) #8
  %53 = bitcast i8* %52 to %class.KV.2*
  store %class.KV.2* %53, %class.KV.2** %18, align 8
  %54 = load i32, i32* %15, align 4
  %55 = load i32, i32* %14, align 4
  %56 = icmp ult i32 %54, %55
  br i1 %56, label %57, label %70

; <label>:57:                                     ; preds = %51
  %58 = load %class.KV.2*, %class.KV.2** %18, align 8
  %59 = getelementptr inbounds %class.KV.2, %class.KV.2* %58, i64 0
  %60 = bitcast %class.KV.2* %59 to i8*
  %61 = bitcast i8* %60 to %class.KV.2*
  %62 = load %class.key*, %class.key** %12, align 8
  %63 = load %class.key*, %class.key** %13, align 8
  call void @_ZN2KVI3keyS0_Lj3EEC2EPKS0_S3_(%class.KV.2* %61, %class.key* %62, %class.key* %63)
  %64 = load %class.KV.2*, %class.KV.2** %18, align 8
  %65 = getelementptr inbounds %class.KV.2, %class.KV.2* %64, i64 1
  %66 = bitcast %class.KV.2* %65 to i8*
  %67 = bitcast i8* %66 to %class.KV.2*
  %68 = load %class.key*, %class.key** %9, align 8
  %69 = load %class.key*, %class.key** %10, align 8
  call void @_ZN2KVI3keyS0_Lj3EEC2EPKS0_S3_(%class.KV.2* %67, %class.key* %68, %class.key* %69)
  br label %83

; <label>:70:                                     ; preds = %51
  %71 = load %class.KV.2*, %class.KV.2** %18, align 8
  %72 = getelementptr inbounds %class.KV.2, %class.KV.2* %71, i64 0
  %73 = bitcast %class.KV.2* %72 to i8*
  %74 = bitcast i8* %73 to %class.KV.2*
  %75 = load %class.key*, %class.key** %9, align 8
  %76 = load %class.key*, %class.key** %10, align 8
  call void @_ZN2KVI3keyS0_Lj3EEC2EPKS0_S3_(%class.KV.2* %74, %class.key* %75, %class.key* %76)
  %77 = load %class.KV.2*, %class.KV.2** %18, align 8
  %78 = getelementptr inbounds %class.KV.2, %class.KV.2* %77, i64 1
  %79 = bitcast %class.KV.2* %78 to i8*
  %80 = bitcast i8* %79 to %class.KV.2*
  %81 = load %class.key*, %class.key** %12, align 8
  %82 = load %class.key*, %class.key** %13, align 8
  call void @_ZN2KVI3keyS0_Lj3EEC2EPKS0_S3_(%class.KV.2* %80, %class.key* %81, %class.key* %82)
  br label %83

; <label>:83:                                     ; preds = %70, %57
  %84 = load i32, i32* %14, align 4
  %85 = zext i32 %84 to i64
  %86 = shl i64 1, %85
  %87 = load i32, i32* %15, align 4
  %88 = zext i32 %87 to i64
  %89 = shl i64 1, %88
  %90 = or i64 %86, %89
  %91 = shl i64 %90, 1
  %92 = or i64 %91, 1
  %93 = load %class.KV.2*, %class.KV.2** %18, align 8
  call void @_ZN2KVI3keyS0_Lj2EEC2EmPKS_IS0_S0_Lj3EE(%class.KV.1* %0, i64 %92, %class.KV.2* %93)
  br label %94

; <label>:94:                                     ; preds = %83, %30
  ret void
}

; Function Attrs: noinline nounwind optnone sspstrong uwtable
define linkonce_odr void @_ZN2KVI3keyS0_Lj2EEC2ERKS1_(%class.KV.1*, %class.KV.1* dereferenceable(16)) unnamed_addr #0 comdat align 2 {
  %3 = alloca %class.KV.1*, align 8
  %4 = alloca %class.KV.1*, align 8
  store %class.KV.1* %0, %class.KV.1** %3, align 8
  store %class.KV.1* %1, %class.KV.1** %4, align 8
  %5 = load %class.KV.1*, %class.KV.1** %3, align 8
  %6 = getelementptr inbounds %class.KV.1, %class.KV.1* %5, i32 0, i32 0
  %7 = load %class.KV.1*, %class.KV.1** %4, align 8
  %8 = getelementptr inbounds %class.KV.1, %class.KV.1* %7, i32 0, i32 0
  %9 = bitcast %"union.KV<key, key, 2>::Key"* %6 to i8*
  %10 = bitcast %"union.KV<key, key, 2>::Key"* %8 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %9, i8* %10, i64 8, i32 8, i1 false)
  %11 = getelementptr inbounds %class.KV.1, %class.KV.1* %5, i32 0, i32 1
  %12 = load %class.KV.1*, %class.KV.1** %4, align 8
  %13 = getelementptr inbounds %class.KV.1, %class.KV.1* %12, i32 0, i32 1
  %14 = bitcast %"union.KV<key, key, 2>::Val"* %11 to i8*
  %15 = bitcast %"union.KV<key, key, 2>::Val"* %13 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %14, i8* %15, i64 8, i32 8, i1 false)
  ret void
}

; Function Attrs: noinline optnone sspstrong uwtable
define linkonce_odr void @_ZN2KVI3keyS0_Lj1EEC2EmPKS_IS0_S0_Lj2EE(%class.KV.0*, i64, %class.KV.1*) unnamed_addr #2 comdat align 2 {
  %4 = alloca %class.KV.0*, align 8
  %5 = alloca i64, align 8
  %6 = alloca %class.KV.1*, align 8
  store %class.KV.0* %0, %class.KV.0** %4, align 8
  store i64 %1, i64* %5, align 8
  store %class.KV.1* %2, %class.KV.1** %6, align 8
  %7 = load %class.KV.0*, %class.KV.0** %4, align 8
  %8 = getelementptr inbounds %class.KV.0, %class.KV.0* %7, i32 0, i32 0
  %9 = load i64, i64* %5, align 8
  call void @_ZN2KVI3keyS0_Lj1EE3KeyC2Em(%"union.KV<key, key, 1>::Key"* %8, i64 %9)
  %10 = getelementptr inbounds %class.KV.0, %class.KV.0* %7, i32 0, i32 1
  %11 = load %class.KV.1*, %class.KV.1** %6, align 8
  call void @_ZN2KVI3keyS0_Lj1EE3ValC2EPKS_IS0_S0_Lj2EE(%"union.KV<key, key, 1>::Val"* %10, %class.KV.1* %11)
  ret void
}

; Function Attrs: noinline optnone sspstrong uwtable
define linkonce_odr void @_ZN2KVI3keyS0_Lj2EEC2EPKS0_S3_(%class.KV.1*, %class.key*, %class.key*) unnamed_addr #2 comdat align 2 {
  %4 = alloca %class.KV.1*, align 8
  %5 = alloca %class.key*, align 8
  %6 = alloca %class.key*, align 8
  store %class.KV.1* %0, %class.KV.1** %4, align 8
  store %class.key* %1, %class.key** %5, align 8
  store %class.key* %2, %class.key** %6, align 8
  %7 = load %class.KV.1*, %class.KV.1** %4, align 8
  %8 = getelementptr inbounds %class.KV.1, %class.KV.1* %7, i32 0, i32 0
  %9 = load %class.key*, %class.key** %5, align 8
  call void @_ZN2KVI3keyS0_Lj2EE3KeyC2EPKS0_(%"union.KV<key, key, 2>::Key"* %8, %class.key* %9)
  %10 = getelementptr inbounds %class.KV.1, %class.KV.1* %7, i32 0, i32 1
  %11 = load %class.key*, %class.key** %6, align 8
  call void @_ZN2KVI3keyS0_Lj2EE3ValC2EPKS0_(%"union.KV<key, key, 2>::Val"* %10, %class.key* %11)
  ret void
}

; Function Attrs: noinline optnone sspstrong uwtable
define linkonce_odr void @_ZN2KVI3keyS0_Lj3EE14new_inner_nodeEmPKS0_S3_mS3_S3_(%class.KV.2* noalias sret, i64, %class.key*, %class.key*, i64, %class.key*, %class.key*) #2 comdat align 2 {
  %8 = alloca i64, align 8
  %9 = alloca %class.key*, align 8
  %10 = alloca %class.key*, align 8
  %11 = alloca i64, align 8
  %12 = alloca %class.key*, align 8
  %13 = alloca %class.key*, align 8
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  %16 = alloca %class.KV.3, align 8
  %17 = alloca %class.KV.3*, align 8
  %18 = alloca %class.KV.3*, align 8
  store i64 %1, i64* %8, align 8
  store %class.key* %2, %class.key** %9, align 8
  store %class.key* %3, %class.key** %10, align 8
  store i64 %4, i64* %11, align 8
  store %class.key* %5, %class.key** %12, align 8
  store %class.key* %6, %class.key** %13, align 8
  %19 = load i64, i64* %8, align 8
  %20 = and i64 %19, 63
  %21 = urem i64 %20, 63
  %22 = trunc i64 %21 to i32
  store i32 %22, i32* %14, align 4
  %23 = load i64, i64* %11, align 8
  %24 = and i64 %23, 63
  %25 = urem i64 %24, 63
  %26 = trunc i64 %25 to i32
  store i32 %26, i32* %15, align 4
  %27 = load i32, i32* %14, align 4
  %28 = load i32, i32* %15, align 4
  %29 = icmp eq i32 %27, %28
  br i1 %29, label %30, label %51

; <label>:30:                                     ; preds = %7
  %31 = load i64, i64* %8, align 8
  %32 = lshr i64 %31, 6
  %33 = load %class.key*, %class.key** %9, align 8
  %34 = load %class.key*, %class.key** %10, align 8
  %35 = load i64, i64* %11, align 8
  %36 = lshr i64 %35, 6
  %37 = load %class.key*, %class.key** %12, align 8
  %38 = load %class.key*, %class.key** %13, align 8
  call void @_ZN2KVI3keyS0_Lj4EE14new_inner_nodeEmPKS0_S3_mS3_S3_(%class.KV.3* sret %16, i64 %32, %class.key* %33, %class.key* %34, i64 %36, %class.key* %37, %class.key* %38)
  %39 = call noalias i8* @malloc(i64 16) #8
  %40 = bitcast i8* %39 to %class.KV.3*
  store %class.KV.3* %40, %class.KV.3** %17, align 8
  %41 = load %class.KV.3*, %class.KV.3** %17, align 8
  %42 = getelementptr inbounds %class.KV.3, %class.KV.3* %41, i64 0
  %43 = bitcast %class.KV.3* %42 to i8*
  %44 = bitcast i8* %43 to %class.KV.3*
  call void @_ZN2KVI3keyS0_Lj4EEC2ERKS1_(%class.KV.3* %44, %class.KV.3* dereferenceable(16) %16)
  %45 = load i32, i32* %14, align 4
  %46 = zext i32 %45 to i64
  %47 = shl i64 1, %46
  %48 = shl i64 %47, 1
  %49 = or i64 %48, 1
  %50 = load %class.KV.3*, %class.KV.3** %17, align 8
  call void @_ZN2KVI3keyS0_Lj3EEC2EmPKS_IS0_S0_Lj4EE(%class.KV.2* %0, i64 %49, %class.KV.3* %50)
  br label %94

; <label>:51:                                     ; preds = %7
  %52 = call noalias i8* @malloc(i64 32) #8
  %53 = bitcast i8* %52 to %class.KV.3*
  store %class.KV.3* %53, %class.KV.3** %18, align 8
  %54 = load i32, i32* %15, align 4
  %55 = load i32, i32* %14, align 4
  %56 = icmp ult i32 %54, %55
  br i1 %56, label %57, label %70

; <label>:57:                                     ; preds = %51
  %58 = load %class.KV.3*, %class.KV.3** %18, align 8
  %59 = getelementptr inbounds %class.KV.3, %class.KV.3* %58, i64 0
  %60 = bitcast %class.KV.3* %59 to i8*
  %61 = bitcast i8* %60 to %class.KV.3*
  %62 = load %class.key*, %class.key** %12, align 8
  %63 = load %class.key*, %class.key** %13, align 8
  call void @_ZN2KVI3keyS0_Lj4EEC2EPKS0_S3_(%class.KV.3* %61, %class.key* %62, %class.key* %63)
  %64 = load %class.KV.3*, %class.KV.3** %18, align 8
  %65 = getelementptr inbounds %class.KV.3, %class.KV.3* %64, i64 1
  %66 = bitcast %class.KV.3* %65 to i8*
  %67 = bitcast i8* %66 to %class.KV.3*
  %68 = load %class.key*, %class.key** %9, align 8
  %69 = load %class.key*, %class.key** %10, align 8
  call void @_ZN2KVI3keyS0_Lj4EEC2EPKS0_S3_(%class.KV.3* %67, %class.key* %68, %class.key* %69)
  br label %83

; <label>:70:                                     ; preds = %51
  %71 = load %class.KV.3*, %class.KV.3** %18, align 8
  %72 = getelementptr inbounds %class.KV.3, %class.KV.3* %71, i64 0
  %73 = bitcast %class.KV.3* %72 to i8*
  %74 = bitcast i8* %73 to %class.KV.3*
  %75 = load %class.key*, %class.key** %9, align 8
  %76 = load %class.key*, %class.key** %10, align 8
  call void @_ZN2KVI3keyS0_Lj4EEC2EPKS0_S3_(%class.KV.3* %74, %class.key* %75, %class.key* %76)
  %77 = load %class.KV.3*, %class.KV.3** %18, align 8
  %78 = getelementptr inbounds %class.KV.3, %class.KV.3* %77, i64 1
  %79 = bitcast %class.KV.3* %78 to i8*
  %80 = bitcast i8* %79 to %class.KV.3*
  %81 = load %class.key*, %class.key** %12, align 8
  %82 = load %class.key*, %class.key** %13, align 8
  call void @_ZN2KVI3keyS0_Lj4EEC2EPKS0_S3_(%class.KV.3* %80, %class.key* %81, %class.key* %82)
  br label %83

; <label>:83:                                     ; preds = %70, %57
  %84 = load i32, i32* %14, align 4
  %85 = zext i32 %84 to i64
  %86 = shl i64 1, %85
  %87 = load i32, i32* %15, align 4
  %88 = zext i32 %87 to i64
  %89 = shl i64 1, %88
  %90 = or i64 %86, %89
  %91 = shl i64 %90, 1
  %92 = or i64 %91, 1
  %93 = load %class.KV.3*, %class.KV.3** %18, align 8
  call void @_ZN2KVI3keyS0_Lj3EEC2EmPKS_IS0_S0_Lj4EE(%class.KV.2* %0, i64 %92, %class.KV.3* %93)
  br label %94

; <label>:94:                                     ; preds = %83, %30
  ret void
}

; Function Attrs: noinline nounwind optnone sspstrong uwtable
define linkonce_odr void @_ZN2KVI3keyS0_Lj3EEC2ERKS1_(%class.KV.2*, %class.KV.2* dereferenceable(16)) unnamed_addr #0 comdat align 2 {
  %3 = alloca %class.KV.2*, align 8
  %4 = alloca %class.KV.2*, align 8
  store %class.KV.2* %0, %class.KV.2** %3, align 8
  store %class.KV.2* %1, %class.KV.2** %4, align 8
  %5 = load %class.KV.2*, %class.KV.2** %3, align 8
  %6 = getelementptr inbounds %class.KV.2, %class.KV.2* %5, i32 0, i32 0
  %7 = load %class.KV.2*, %class.KV.2** %4, align 8
  %8 = getelementptr inbounds %class.KV.2, %class.KV.2* %7, i32 0, i32 0
  %9 = bitcast %"union.KV<key, key, 3>::Key"* %6 to i8*
  %10 = bitcast %"union.KV<key, key, 3>::Key"* %8 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %9, i8* %10, i64 8, i32 8, i1 false)
  %11 = getelementptr inbounds %class.KV.2, %class.KV.2* %5, i32 0, i32 1
  %12 = load %class.KV.2*, %class.KV.2** %4, align 8
  %13 = getelementptr inbounds %class.KV.2, %class.KV.2* %12, i32 0, i32 1
  %14 = bitcast %"union.KV<key, key, 3>::Val"* %11 to i8*
  %15 = bitcast %"union.KV<key, key, 3>::Val"* %13 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %14, i8* %15, i64 8, i32 8, i1 false)
  ret void
}

; Function Attrs: noinline optnone sspstrong uwtable
define linkonce_odr void @_ZN2KVI3keyS0_Lj2EEC2EmPKS_IS0_S0_Lj3EE(%class.KV.1*, i64, %class.KV.2*) unnamed_addr #2 comdat align 2 {
  %4 = alloca %class.KV.1*, align 8
  %5 = alloca i64, align 8
  %6 = alloca %class.KV.2*, align 8
  store %class.KV.1* %0, %class.KV.1** %4, align 8
  store i64 %1, i64* %5, align 8
  store %class.KV.2* %2, %class.KV.2** %6, align 8
  %7 = load %class.KV.1*, %class.KV.1** %4, align 8
  %8 = getelementptr inbounds %class.KV.1, %class.KV.1* %7, i32 0, i32 0
  %9 = load i64, i64* %5, align 8
  call void @_ZN2KVI3keyS0_Lj2EE3KeyC2Em(%"union.KV<key, key, 2>::Key"* %8, i64 %9)
  %10 = getelementptr inbounds %class.KV.1, %class.KV.1* %7, i32 0, i32 1
  %11 = load %class.KV.2*, %class.KV.2** %6, align 8
  call void @_ZN2KVI3keyS0_Lj2EE3ValC2EPKS_IS0_S0_Lj3EE(%"union.KV<key, key, 2>::Val"* %10, %class.KV.2* %11)
  ret void
}

; Function Attrs: noinline optnone sspstrong uwtable
define linkonce_odr void @_ZN2KVI3keyS0_Lj3EEC2EPKS0_S3_(%class.KV.2*, %class.key*, %class.key*) unnamed_addr #2 comdat align 2 {
  %4 = alloca %class.KV.2*, align 8
  %5 = alloca %class.key*, align 8
  %6 = alloca %class.key*, align 8
  store %class.KV.2* %0, %class.KV.2** %4, align 8
  store %class.key* %1, %class.key** %5, align 8
  store %class.key* %2, %class.key** %6, align 8
  %7 = load %class.KV.2*, %class.KV.2** %4, align 8
  %8 = getelementptr inbounds %class.KV.2, %class.KV.2* %7, i32 0, i32 0
  %9 = load %class.key*, %class.key** %5, align 8
  call void @_ZN2KVI3keyS0_Lj3EE3KeyC2EPKS0_(%"union.KV<key, key, 3>::Key"* %8, %class.key* %9)
  %10 = getelementptr inbounds %class.KV.2, %class.KV.2* %7, i32 0, i32 1
  %11 = load %class.key*, %class.key** %6, align 8
  call void @_ZN2KVI3keyS0_Lj3EE3ValC2EPKS0_(%"union.KV<key, key, 3>::Val"* %10, %class.key* %11)
  ret void
}

; Function Attrs: noinline optnone sspstrong uwtable
define linkonce_odr void @_ZN2KVI3keyS0_Lj4EE14new_inner_nodeEmPKS0_S3_mS3_S3_(%class.KV.3* noalias sret, i64, %class.key*, %class.key*, i64, %class.key*, %class.key*) #2 comdat align 2 {
  %8 = alloca i64, align 8
  %9 = alloca %class.key*, align 8
  %10 = alloca %class.key*, align 8
  %11 = alloca i64, align 8
  %12 = alloca %class.key*, align 8
  %13 = alloca %class.key*, align 8
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  %16 = alloca %class.KV.4, align 8
  %17 = alloca %class.KV.4*, align 8
  %18 = alloca %class.KV.4*, align 8
  store i64 %1, i64* %8, align 8
  store %class.key* %2, %class.key** %9, align 8
  store %class.key* %3, %class.key** %10, align 8
  store i64 %4, i64* %11, align 8
  store %class.key* %5, %class.key** %12, align 8
  store %class.key* %6, %class.key** %13, align 8
  %19 = load i64, i64* %8, align 8
  %20 = and i64 %19, 63
  %21 = urem i64 %20, 63
  %22 = trunc i64 %21 to i32
  store i32 %22, i32* %14, align 4
  %23 = load i64, i64* %11, align 8
  %24 = and i64 %23, 63
  %25 = urem i64 %24, 63
  %26 = trunc i64 %25 to i32
  store i32 %26, i32* %15, align 4
  %27 = load i32, i32* %14, align 4
  %28 = load i32, i32* %15, align 4
  %29 = icmp eq i32 %27, %28
  br i1 %29, label %30, label %51

; <label>:30:                                     ; preds = %7
  %31 = load i64, i64* %8, align 8
  %32 = lshr i64 %31, 6
  %33 = load %class.key*, %class.key** %9, align 8
  %34 = load %class.key*, %class.key** %10, align 8
  %35 = load i64, i64* %11, align 8
  %36 = lshr i64 %35, 6
  %37 = load %class.key*, %class.key** %12, align 8
  %38 = load %class.key*, %class.key** %13, align 8
  call void @_ZN2KVI3keyS0_Lj5EE14new_inner_nodeEmPKS0_S3_mS3_S3_(%class.KV.4* sret %16, i64 %32, %class.key* %33, %class.key* %34, i64 %36, %class.key* %37, %class.key* %38)
  %39 = call noalias i8* @malloc(i64 16) #8
  %40 = bitcast i8* %39 to %class.KV.4*
  store %class.KV.4* %40, %class.KV.4** %17, align 8
  %41 = load %class.KV.4*, %class.KV.4** %17, align 8
  %42 = getelementptr inbounds %class.KV.4, %class.KV.4* %41, i64 0
  %43 = bitcast %class.KV.4* %42 to i8*
  %44 = bitcast i8* %43 to %class.KV.4*
  call void @_ZN2KVI3keyS0_Lj5EEC2ERKS1_(%class.KV.4* %44, %class.KV.4* dereferenceable(16) %16)
  %45 = load i32, i32* %14, align 4
  %46 = zext i32 %45 to i64
  %47 = shl i64 1, %46
  %48 = shl i64 %47, 1
  %49 = or i64 %48, 1
  %50 = load %class.KV.4*, %class.KV.4** %17, align 8
  call void @_ZN2KVI3keyS0_Lj4EEC2EmPKS_IS0_S0_Lj5EE(%class.KV.3* %0, i64 %49, %class.KV.4* %50)
  br label %94

; <label>:51:                                     ; preds = %7
  %52 = call noalias i8* @malloc(i64 32) #8
  %53 = bitcast i8* %52 to %class.KV.4*
  store %class.KV.4* %53, %class.KV.4** %18, align 8
  %54 = load i32, i32* %15, align 4
  %55 = load i32, i32* %14, align 4
  %56 = icmp ult i32 %54, %55
  br i1 %56, label %57, label %70

; <label>:57:                                     ; preds = %51
  %58 = load %class.KV.4*, %class.KV.4** %18, align 8
  %59 = getelementptr inbounds %class.KV.4, %class.KV.4* %58, i64 0
  %60 = bitcast %class.KV.4* %59 to i8*
  %61 = bitcast i8* %60 to %class.KV.4*
  %62 = load %class.key*, %class.key** %12, align 8
  %63 = load %class.key*, %class.key** %13, align 8
  call void @_ZN2KVI3keyS0_Lj5EEC2EPKS0_S3_(%class.KV.4* %61, %class.key* %62, %class.key* %63)
  %64 = load %class.KV.4*, %class.KV.4** %18, align 8
  %65 = getelementptr inbounds %class.KV.4, %class.KV.4* %64, i64 1
  %66 = bitcast %class.KV.4* %65 to i8*
  %67 = bitcast i8* %66 to %class.KV.4*
  %68 = load %class.key*, %class.key** %9, align 8
  %69 = load %class.key*, %class.key** %10, align 8
  call void @_ZN2KVI3keyS0_Lj5EEC2EPKS0_S3_(%class.KV.4* %67, %class.key* %68, %class.key* %69)
  br label %83

; <label>:70:                                     ; preds = %51
  %71 = load %class.KV.4*, %class.KV.4** %18, align 8
  %72 = getelementptr inbounds %class.KV.4, %class.KV.4* %71, i64 0
  %73 = bitcast %class.KV.4* %72 to i8*
  %74 = bitcast i8* %73 to %class.KV.4*
  %75 = load %class.key*, %class.key** %9, align 8
  %76 = load %class.key*, %class.key** %10, align 8
  call void @_ZN2KVI3keyS0_Lj5EEC2EPKS0_S3_(%class.KV.4* %74, %class.key* %75, %class.key* %76)
  %77 = load %class.KV.4*, %class.KV.4** %18, align 8
  %78 = getelementptr inbounds %class.KV.4, %class.KV.4* %77, i64 1
  %79 = bitcast %class.KV.4* %78 to i8*
  %80 = bitcast i8* %79 to %class.KV.4*
  %81 = load %class.key*, %class.key** %12, align 8
  %82 = load %class.key*, %class.key** %13, align 8
  call void @_ZN2KVI3keyS0_Lj5EEC2EPKS0_S3_(%class.KV.4* %80, %class.key* %81, %class.key* %82)
  br label %83

; <label>:83:                                     ; preds = %70, %57
  %84 = load i32, i32* %14, align 4
  %85 = zext i32 %84 to i64
  %86 = shl i64 1, %85
  %87 = load i32, i32* %15, align 4
  %88 = zext i32 %87 to i64
  %89 = shl i64 1, %88
  %90 = or i64 %86, %89
  %91 = shl i64 %90, 1
  %92 = or i64 %91, 1
  %93 = load %class.KV.4*, %class.KV.4** %18, align 8
  call void @_ZN2KVI3keyS0_Lj4EEC2EmPKS_IS0_S0_Lj5EE(%class.KV.3* %0, i64 %92, %class.KV.4* %93)
  br label %94

; <label>:94:                                     ; preds = %83, %30
  ret void
}

; Function Attrs: noinline nounwind optnone sspstrong uwtable
define linkonce_odr void @_ZN2KVI3keyS0_Lj4EEC2ERKS1_(%class.KV.3*, %class.KV.3* dereferenceable(16)) unnamed_addr #0 comdat align 2 {
  %3 = alloca %class.KV.3*, align 8
  %4 = alloca %class.KV.3*, align 8
  store %class.KV.3* %0, %class.KV.3** %3, align 8
  store %class.KV.3* %1, %class.KV.3** %4, align 8
  %5 = load %class.KV.3*, %class.KV.3** %3, align 8
  %6 = getelementptr inbounds %class.KV.3, %class.KV.3* %5, i32 0, i32 0
  %7 = load %class.KV.3*, %class.KV.3** %4, align 8
  %8 = getelementptr inbounds %class.KV.3, %class.KV.3* %7, i32 0, i32 0
  %9 = bitcast %"union.KV<key, key, 4>::Key"* %6 to i8*
  %10 = bitcast %"union.KV<key, key, 4>::Key"* %8 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %9, i8* %10, i64 8, i32 8, i1 false)
  %11 = getelementptr inbounds %class.KV.3, %class.KV.3* %5, i32 0, i32 1
  %12 = load %class.KV.3*, %class.KV.3** %4, align 8
  %13 = getelementptr inbounds %class.KV.3, %class.KV.3* %12, i32 0, i32 1
  %14 = bitcast %"union.KV<key, key, 4>::Val"* %11 to i8*
  %15 = bitcast %"union.KV<key, key, 4>::Val"* %13 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %14, i8* %15, i64 8, i32 8, i1 false)
  ret void
}

; Function Attrs: noinline optnone sspstrong uwtable
define linkonce_odr void @_ZN2KVI3keyS0_Lj3EEC2EmPKS_IS0_S0_Lj4EE(%class.KV.2*, i64, %class.KV.3*) unnamed_addr #2 comdat align 2 {
  %4 = alloca %class.KV.2*, align 8
  %5 = alloca i64, align 8
  %6 = alloca %class.KV.3*, align 8
  store %class.KV.2* %0, %class.KV.2** %4, align 8
  store i64 %1, i64* %5, align 8
  store %class.KV.3* %2, %class.KV.3** %6, align 8
  %7 = load %class.KV.2*, %class.KV.2** %4, align 8
  %8 = getelementptr inbounds %class.KV.2, %class.KV.2* %7, i32 0, i32 0
  %9 = load i64, i64* %5, align 8
  call void @_ZN2KVI3keyS0_Lj3EE3KeyC2Em(%"union.KV<key, key, 3>::Key"* %8, i64 %9)
  %10 = getelementptr inbounds %class.KV.2, %class.KV.2* %7, i32 0, i32 1
  %11 = load %class.KV.3*, %class.KV.3** %6, align 8
  call void @_ZN2KVI3keyS0_Lj3EE3ValC2EPKS_IS0_S0_Lj4EE(%"union.KV<key, key, 3>::Val"* %10, %class.KV.3* %11)
  ret void
}

; Function Attrs: noinline optnone sspstrong uwtable
define linkonce_odr void @_ZN2KVI3keyS0_Lj4EEC2EPKS0_S3_(%class.KV.3*, %class.key*, %class.key*) unnamed_addr #2 comdat align 2 {
  %4 = alloca %class.KV.3*, align 8
  %5 = alloca %class.key*, align 8
  %6 = alloca %class.key*, align 8
  store %class.KV.3* %0, %class.KV.3** %4, align 8
  store %class.key* %1, %class.key** %5, align 8
  store %class.key* %2, %class.key** %6, align 8
  %7 = load %class.KV.3*, %class.KV.3** %4, align 8
  %8 = getelementptr inbounds %class.KV.3, %class.KV.3* %7, i32 0, i32 0
  %9 = load %class.key*, %class.key** %5, align 8
  call void @_ZN2KVI3keyS0_Lj4EE3KeyC2EPKS0_(%"union.KV<key, key, 4>::Key"* %8, %class.key* %9)
  %10 = getelementptr inbounds %class.KV.3, %class.KV.3* %7, i32 0, i32 1
  %11 = load %class.key*, %class.key** %6, align 8
  call void @_ZN2KVI3keyS0_Lj4EE3ValC2EPKS0_(%"union.KV<key, key, 4>::Val"* %10, %class.key* %11)
  ret void
}

; Function Attrs: noinline optnone sspstrong uwtable
define linkonce_odr void @_ZN2KVI3keyS0_Lj5EE14new_inner_nodeEmPKS0_S3_mS3_S3_(%class.KV.4* noalias sret, i64, %class.key*, %class.key*, i64, %class.key*, %class.key*) #2 comdat align 2 {
  %8 = alloca i64, align 8
  %9 = alloca %class.key*, align 8
  %10 = alloca %class.key*, align 8
  %11 = alloca i64, align 8
  %12 = alloca %class.key*, align 8
  %13 = alloca %class.key*, align 8
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  %16 = alloca %class.KV.5, align 8
  %17 = alloca %class.KV.5*, align 8
  %18 = alloca %class.KV.5*, align 8
  store i64 %1, i64* %8, align 8
  store %class.key* %2, %class.key** %9, align 8
  store %class.key* %3, %class.key** %10, align 8
  store i64 %4, i64* %11, align 8
  store %class.key* %5, %class.key** %12, align 8
  store %class.key* %6, %class.key** %13, align 8
  %19 = load i64, i64* %8, align 8
  %20 = and i64 %19, 63
  %21 = urem i64 %20, 63
  %22 = trunc i64 %21 to i32
  store i32 %22, i32* %14, align 4
  %23 = load i64, i64* %11, align 8
  %24 = and i64 %23, 63
  %25 = urem i64 %24, 63
  %26 = trunc i64 %25 to i32
  store i32 %26, i32* %15, align 4
  %27 = load i32, i32* %14, align 4
  %28 = load i32, i32* %15, align 4
  %29 = icmp eq i32 %27, %28
  br i1 %29, label %30, label %51

; <label>:30:                                     ; preds = %7
  %31 = load i64, i64* %8, align 8
  %32 = lshr i64 %31, 6
  %33 = load %class.key*, %class.key** %9, align 8
  %34 = load %class.key*, %class.key** %10, align 8
  %35 = load i64, i64* %11, align 8
  %36 = lshr i64 %35, 6
  %37 = load %class.key*, %class.key** %12, align 8
  %38 = load %class.key*, %class.key** %13, align 8
  call void @_ZN2KVI3keyS0_Lj6EE14new_inner_nodeEmPKS0_S3_mS3_S3_(%class.KV.5* sret %16, i64 %32, %class.key* %33, %class.key* %34, i64 %36, %class.key* %37, %class.key* %38)
  %39 = call noalias i8* @malloc(i64 16) #8
  %40 = bitcast i8* %39 to %class.KV.5*
  store %class.KV.5* %40, %class.KV.5** %17, align 8
  %41 = load %class.KV.5*, %class.KV.5** %17, align 8
  %42 = getelementptr inbounds %class.KV.5, %class.KV.5* %41, i64 0
  %43 = bitcast %class.KV.5* %42 to i8*
  %44 = bitcast i8* %43 to %class.KV.5*
  call void @_ZN2KVI3keyS0_Lj6EEC2ERKS1_(%class.KV.5* %44, %class.KV.5* dereferenceable(16) %16)
  %45 = load i32, i32* %14, align 4
  %46 = zext i32 %45 to i64
  %47 = shl i64 1, %46
  %48 = shl i64 %47, 1
  %49 = or i64 %48, 1
  %50 = load %class.KV.5*, %class.KV.5** %17, align 8
  call void @_ZN2KVI3keyS0_Lj5EEC2EmPKS_IS0_S0_Lj6EE(%class.KV.4* %0, i64 %49, %class.KV.5* %50)
  br label %94

; <label>:51:                                     ; preds = %7
  %52 = call noalias i8* @malloc(i64 32) #8
  %53 = bitcast i8* %52 to %class.KV.5*
  store %class.KV.5* %53, %class.KV.5** %18, align 8
  %54 = load i32, i32* %15, align 4
  %55 = load i32, i32* %14, align 4
  %56 = icmp ult i32 %54, %55
  br i1 %56, label %57, label %70

; <label>:57:                                     ; preds = %51
  %58 = load %class.KV.5*, %class.KV.5** %18, align 8
  %59 = getelementptr inbounds %class.KV.5, %class.KV.5* %58, i64 0
  %60 = bitcast %class.KV.5* %59 to i8*
  %61 = bitcast i8* %60 to %class.KV.5*
  %62 = load %class.key*, %class.key** %12, align 8
  %63 = load %class.key*, %class.key** %13, align 8
  call void @_ZN2KVI3keyS0_Lj6EEC2EPKS0_S3_(%class.KV.5* %61, %class.key* %62, %class.key* %63)
  %64 = load %class.KV.5*, %class.KV.5** %18, align 8
  %65 = getelementptr inbounds %class.KV.5, %class.KV.5* %64, i64 1
  %66 = bitcast %class.KV.5* %65 to i8*
  %67 = bitcast i8* %66 to %class.KV.5*
  %68 = load %class.key*, %class.key** %9, align 8
  %69 = load %class.key*, %class.key** %10, align 8
  call void @_ZN2KVI3keyS0_Lj6EEC2EPKS0_S3_(%class.KV.5* %67, %class.key* %68, %class.key* %69)
  br label %83

; <label>:70:                                     ; preds = %51
  %71 = load %class.KV.5*, %class.KV.5** %18, align 8
  %72 = getelementptr inbounds %class.KV.5, %class.KV.5* %71, i64 0
  %73 = bitcast %class.KV.5* %72 to i8*
  %74 = bitcast i8* %73 to %class.KV.5*
  %75 = load %class.key*, %class.key** %9, align 8
  %76 = load %class.key*, %class.key** %10, align 8
  call void @_ZN2KVI3keyS0_Lj6EEC2EPKS0_S3_(%class.KV.5* %74, %class.key* %75, %class.key* %76)
  %77 = load %class.KV.5*, %class.KV.5** %18, align 8
  %78 = getelementptr inbounds %class.KV.5, %class.KV.5* %77, i64 1
  %79 = bitcast %class.KV.5* %78 to i8*
  %80 = bitcast i8* %79 to %class.KV.5*
  %81 = load %class.key*, %class.key** %12, align 8
  %82 = load %class.key*, %class.key** %13, align 8
  call void @_ZN2KVI3keyS0_Lj6EEC2EPKS0_S3_(%class.KV.5* %80, %class.key* %81, %class.key* %82)
  br label %83

; <label>:83:                                     ; preds = %70, %57
  %84 = load i32, i32* %14, align 4
  %85 = zext i32 %84 to i64
  %86 = shl i64 1, %85
  %87 = load i32, i32* %15, align 4
  %88 = zext i32 %87 to i64
  %89 = shl i64 1, %88
  %90 = or i64 %86, %89
  %91 = shl i64 %90, 1
  %92 = or i64 %91, 1
  %93 = load %class.KV.5*, %class.KV.5** %18, align 8
  call void @_ZN2KVI3keyS0_Lj5EEC2EmPKS_IS0_S0_Lj6EE(%class.KV.4* %0, i64 %92, %class.KV.5* %93)
  br label %94

; <label>:94:                                     ; preds = %83, %30
  ret void
}

; Function Attrs: noinline nounwind optnone sspstrong uwtable
define linkonce_odr void @_ZN2KVI3keyS0_Lj5EEC2ERKS1_(%class.KV.4*, %class.KV.4* dereferenceable(16)) unnamed_addr #0 comdat align 2 {
  %3 = alloca %class.KV.4*, align 8
  %4 = alloca %class.KV.4*, align 8
  store %class.KV.4* %0, %class.KV.4** %3, align 8
  store %class.KV.4* %1, %class.KV.4** %4, align 8
  %5 = load %class.KV.4*, %class.KV.4** %3, align 8
  %6 = getelementptr inbounds %class.KV.4, %class.KV.4* %5, i32 0, i32 0
  %7 = load %class.KV.4*, %class.KV.4** %4, align 8
  %8 = getelementptr inbounds %class.KV.4, %class.KV.4* %7, i32 0, i32 0
  %9 = bitcast %"union.KV<key, key, 5>::Key"* %6 to i8*
  %10 = bitcast %"union.KV<key, key, 5>::Key"* %8 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %9, i8* %10, i64 8, i32 8, i1 false)
  %11 = getelementptr inbounds %class.KV.4, %class.KV.4* %5, i32 0, i32 1
  %12 = load %class.KV.4*, %class.KV.4** %4, align 8
  %13 = getelementptr inbounds %class.KV.4, %class.KV.4* %12, i32 0, i32 1
  %14 = bitcast %"union.KV<key, key, 5>::Val"* %11 to i8*
  %15 = bitcast %"union.KV<key, key, 5>::Val"* %13 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %14, i8* %15, i64 8, i32 8, i1 false)
  ret void
}

; Function Attrs: noinline optnone sspstrong uwtable
define linkonce_odr void @_ZN2KVI3keyS0_Lj4EEC2EmPKS_IS0_S0_Lj5EE(%class.KV.3*, i64, %class.KV.4*) unnamed_addr #2 comdat align 2 {
  %4 = alloca %class.KV.3*, align 8
  %5 = alloca i64, align 8
  %6 = alloca %class.KV.4*, align 8
  store %class.KV.3* %0, %class.KV.3** %4, align 8
  store i64 %1, i64* %5, align 8
  store %class.KV.4* %2, %class.KV.4** %6, align 8
  %7 = load %class.KV.3*, %class.KV.3** %4, align 8
  %8 = getelementptr inbounds %class.KV.3, %class.KV.3* %7, i32 0, i32 0
  %9 = load i64, i64* %5, align 8
  call void @_ZN2KVI3keyS0_Lj4EE3KeyC2Em(%"union.KV<key, key, 4>::Key"* %8, i64 %9)
  %10 = getelementptr inbounds %class.KV.3, %class.KV.3* %7, i32 0, i32 1
  %11 = load %class.KV.4*, %class.KV.4** %6, align 8
  call void @_ZN2KVI3keyS0_Lj4EE3ValC2EPKS_IS0_S0_Lj5EE(%"union.KV<key, key, 4>::Val"* %10, %class.KV.4* %11)
  ret void
}

; Function Attrs: noinline optnone sspstrong uwtable
define linkonce_odr void @_ZN2KVI3keyS0_Lj5EEC2EPKS0_S3_(%class.KV.4*, %class.key*, %class.key*) unnamed_addr #2 comdat align 2 {
  %4 = alloca %class.KV.4*, align 8
  %5 = alloca %class.key*, align 8
  %6 = alloca %class.key*, align 8
  store %class.KV.4* %0, %class.KV.4** %4, align 8
  store %class.key* %1, %class.key** %5, align 8
  store %class.key* %2, %class.key** %6, align 8
  %7 = load %class.KV.4*, %class.KV.4** %4, align 8
  %8 = getelementptr inbounds %class.KV.4, %class.KV.4* %7, i32 0, i32 0
  %9 = load %class.key*, %class.key** %5, align 8
  call void @_ZN2KVI3keyS0_Lj5EE3KeyC2EPKS0_(%"union.KV<key, key, 5>::Key"* %8, %class.key* %9)
  %10 = getelementptr inbounds %class.KV.4, %class.KV.4* %7, i32 0, i32 1
  %11 = load %class.key*, %class.key** %6, align 8
  call void @_ZN2KVI3keyS0_Lj5EE3ValC2EPKS0_(%"union.KV<key, key, 5>::Val"* %10, %class.key* %11)
  ret void
}

; Function Attrs: noinline optnone sspstrong uwtable
define linkonce_odr void @_ZN2KVI3keyS0_Lj6EE14new_inner_nodeEmPKS0_S3_mS3_S3_(%class.KV.5* noalias sret, i64, %class.key*, %class.key*, i64, %class.key*, %class.key*) #2 comdat align 2 {
  %8 = alloca i64, align 8
  %9 = alloca %class.key*, align 8
  %10 = alloca %class.key*, align 8
  %11 = alloca i64, align 8
  %12 = alloca %class.key*, align 8
  %13 = alloca %class.key*, align 8
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  %16 = alloca %class.KV.6, align 8
  %17 = alloca %class.KV.6*, align 8
  %18 = alloca %class.KV.6*, align 8
  store i64 %1, i64* %8, align 8
  store %class.key* %2, %class.key** %9, align 8
  store %class.key* %3, %class.key** %10, align 8
  store i64 %4, i64* %11, align 8
  store %class.key* %5, %class.key** %12, align 8
  store %class.key* %6, %class.key** %13, align 8
  %19 = load i64, i64* %8, align 8
  %20 = and i64 %19, 63
  %21 = urem i64 %20, 63
  %22 = trunc i64 %21 to i32
  store i32 %22, i32* %14, align 4
  %23 = load i64, i64* %11, align 8
  %24 = and i64 %23, 63
  %25 = urem i64 %24, 63
  %26 = trunc i64 %25 to i32
  store i32 %26, i32* %15, align 4
  %27 = load i32, i32* %14, align 4
  %28 = load i32, i32* %15, align 4
  %29 = icmp eq i32 %27, %28
  br i1 %29, label %30, label %51

; <label>:30:                                     ; preds = %7
  %31 = load i64, i64* %8, align 8
  %32 = lshr i64 %31, 6
  %33 = load %class.key*, %class.key** %9, align 8
  %34 = load %class.key*, %class.key** %10, align 8
  %35 = load i64, i64* %11, align 8
  %36 = lshr i64 %35, 6
  %37 = load %class.key*, %class.key** %12, align 8
  %38 = load %class.key*, %class.key** %13, align 8
  call void @_ZN2KVI3keyS0_Lj7EE14new_inner_nodeEmPKS0_S3_mS3_S3_(%class.KV.6* sret %16, i64 %32, %class.key* %33, %class.key* %34, i64 %36, %class.key* %37, %class.key* %38)
  %39 = call noalias i8* @malloc(i64 16) #8
  %40 = bitcast i8* %39 to %class.KV.6*
  store %class.KV.6* %40, %class.KV.6** %17, align 8
  %41 = load %class.KV.6*, %class.KV.6** %17, align 8
  %42 = getelementptr inbounds %class.KV.6, %class.KV.6* %41, i64 0
  %43 = bitcast %class.KV.6* %42 to i8*
  %44 = bitcast i8* %43 to %class.KV.6*
  call void @_ZN2KVI3keyS0_Lj7EEC2ERKS1_(%class.KV.6* %44, %class.KV.6* dereferenceable(16) %16)
  %45 = load i32, i32* %14, align 4
  %46 = zext i32 %45 to i64
  %47 = shl i64 1, %46
  %48 = shl i64 %47, 1
  %49 = or i64 %48, 1
  %50 = load %class.KV.6*, %class.KV.6** %17, align 8
  call void @_ZN2KVI3keyS0_Lj6EEC2EmPKS_IS0_S0_Lj7EE(%class.KV.5* %0, i64 %49, %class.KV.6* %50)
  br label %94

; <label>:51:                                     ; preds = %7
  %52 = call noalias i8* @malloc(i64 32) #8
  %53 = bitcast i8* %52 to %class.KV.6*
  store %class.KV.6* %53, %class.KV.6** %18, align 8
  %54 = load i32, i32* %15, align 4
  %55 = load i32, i32* %14, align 4
  %56 = icmp ult i32 %54, %55
  br i1 %56, label %57, label %70

; <label>:57:                                     ; preds = %51
  %58 = load %class.KV.6*, %class.KV.6** %18, align 8
  %59 = getelementptr inbounds %class.KV.6, %class.KV.6* %58, i64 0
  %60 = bitcast %class.KV.6* %59 to i8*
  %61 = bitcast i8* %60 to %class.KV.6*
  %62 = load %class.key*, %class.key** %12, align 8
  %63 = load %class.key*, %class.key** %13, align 8
  call void @_ZN2KVI3keyS0_Lj7EEC2EPKS0_S3_(%class.KV.6* %61, %class.key* %62, %class.key* %63)
  %64 = load %class.KV.6*, %class.KV.6** %18, align 8
  %65 = getelementptr inbounds %class.KV.6, %class.KV.6* %64, i64 1
  %66 = bitcast %class.KV.6* %65 to i8*
  %67 = bitcast i8* %66 to %class.KV.6*
  %68 = load %class.key*, %class.key** %9, align 8
  %69 = load %class.key*, %class.key** %10, align 8
  call void @_ZN2KVI3keyS0_Lj7EEC2EPKS0_S3_(%class.KV.6* %67, %class.key* %68, %class.key* %69)
  br label %83

; <label>:70:                                     ; preds = %51
  %71 = load %class.KV.6*, %class.KV.6** %18, align 8
  %72 = getelementptr inbounds %class.KV.6, %class.KV.6* %71, i64 0
  %73 = bitcast %class.KV.6* %72 to i8*
  %74 = bitcast i8* %73 to %class.KV.6*
  %75 = load %class.key*, %class.key** %9, align 8
  %76 = load %class.key*, %class.key** %10, align 8
  call void @_ZN2KVI3keyS0_Lj7EEC2EPKS0_S3_(%class.KV.6* %74, %class.key* %75, %class.key* %76)
  %77 = load %class.KV.6*, %class.KV.6** %18, align 8
  %78 = getelementptr inbounds %class.KV.6, %class.KV.6* %77, i64 1
  %79 = bitcast %class.KV.6* %78 to i8*
  %80 = bitcast i8* %79 to %class.KV.6*
  %81 = load %class.key*, %class.key** %12, align 8
  %82 = load %class.key*, %class.key** %13, align 8
  call void @_ZN2KVI3keyS0_Lj7EEC2EPKS0_S3_(%class.KV.6* %80, %class.key* %81, %class.key* %82)
  br label %83

; <label>:83:                                     ; preds = %70, %57
  %84 = load i32, i32* %14, align 4
  %85 = zext i32 %84 to i64
  %86 = shl i64 1, %85
  %87 = load i32, i32* %15, align 4
  %88 = zext i32 %87 to i64
  %89 = shl i64 1, %88
  %90 = or i64 %86, %89
  %91 = shl i64 %90, 1
  %92 = or i64 %91, 1
  %93 = load %class.KV.6*, %class.KV.6** %18, align 8
  call void @_ZN2KVI3keyS0_Lj6EEC2EmPKS_IS0_S0_Lj7EE(%class.KV.5* %0, i64 %92, %class.KV.6* %93)
  br label %94

; <label>:94:                                     ; preds = %83, %30
  ret void
}

; Function Attrs: noinline nounwind optnone sspstrong uwtable
define linkonce_odr void @_ZN2KVI3keyS0_Lj6EEC2ERKS1_(%class.KV.5*, %class.KV.5* dereferenceable(16)) unnamed_addr #0 comdat align 2 {
  %3 = alloca %class.KV.5*, align 8
  %4 = alloca %class.KV.5*, align 8
  store %class.KV.5* %0, %class.KV.5** %3, align 8
  store %class.KV.5* %1, %class.KV.5** %4, align 8
  %5 = load %class.KV.5*, %class.KV.5** %3, align 8
  %6 = getelementptr inbounds %class.KV.5, %class.KV.5* %5, i32 0, i32 0
  %7 = load %class.KV.5*, %class.KV.5** %4, align 8
  %8 = getelementptr inbounds %class.KV.5, %class.KV.5* %7, i32 0, i32 0
  %9 = bitcast %"union.KV<key, key, 6>::Key"* %6 to i8*
  %10 = bitcast %"union.KV<key, key, 6>::Key"* %8 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %9, i8* %10, i64 8, i32 8, i1 false)
  %11 = getelementptr inbounds %class.KV.5, %class.KV.5* %5, i32 0, i32 1
  %12 = load %class.KV.5*, %class.KV.5** %4, align 8
  %13 = getelementptr inbounds %class.KV.5, %class.KV.5* %12, i32 0, i32 1
  %14 = bitcast %"union.KV<key, key, 6>::Val"* %11 to i8*
  %15 = bitcast %"union.KV<key, key, 6>::Val"* %13 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %14, i8* %15, i64 8, i32 8, i1 false)
  ret void
}

; Function Attrs: noinline optnone sspstrong uwtable
define linkonce_odr void @_ZN2KVI3keyS0_Lj5EEC2EmPKS_IS0_S0_Lj6EE(%class.KV.4*, i64, %class.KV.5*) unnamed_addr #2 comdat align 2 {
  %4 = alloca %class.KV.4*, align 8
  %5 = alloca i64, align 8
  %6 = alloca %class.KV.5*, align 8
  store %class.KV.4* %0, %class.KV.4** %4, align 8
  store i64 %1, i64* %5, align 8
  store %class.KV.5* %2, %class.KV.5** %6, align 8
  %7 = load %class.KV.4*, %class.KV.4** %4, align 8
  %8 = getelementptr inbounds %class.KV.4, %class.KV.4* %7, i32 0, i32 0
  %9 = load i64, i64* %5, align 8
  call void @_ZN2KVI3keyS0_Lj5EE3KeyC2Em(%"union.KV<key, key, 5>::Key"* %8, i64 %9)
  %10 = getelementptr inbounds %class.KV.4, %class.KV.4* %7, i32 0, i32 1
  %11 = load %class.KV.5*, %class.KV.5** %6, align 8
  call void @_ZN2KVI3keyS0_Lj5EE3ValC2EPKS_IS0_S0_Lj6EE(%"union.KV<key, key, 5>::Val"* %10, %class.KV.5* %11)
  ret void
}

; Function Attrs: noinline optnone sspstrong uwtable
define linkonce_odr void @_ZN2KVI3keyS0_Lj6EEC2EPKS0_S3_(%class.KV.5*, %class.key*, %class.key*) unnamed_addr #2 comdat align 2 {
  %4 = alloca %class.KV.5*, align 8
  %5 = alloca %class.key*, align 8
  %6 = alloca %class.key*, align 8
  store %class.KV.5* %0, %class.KV.5** %4, align 8
  store %class.key* %1, %class.key** %5, align 8
  store %class.key* %2, %class.key** %6, align 8
  %7 = load %class.KV.5*, %class.KV.5** %4, align 8
  %8 = getelementptr inbounds %class.KV.5, %class.KV.5* %7, i32 0, i32 0
  %9 = load %class.key*, %class.key** %5, align 8
  call void @_ZN2KVI3keyS0_Lj6EE3KeyC2EPKS0_(%"union.KV<key, key, 6>::Key"* %8, %class.key* %9)
  %10 = getelementptr inbounds %class.KV.5, %class.KV.5* %7, i32 0, i32 1
  %11 = load %class.key*, %class.key** %6, align 8
  call void @_ZN2KVI3keyS0_Lj6EE3ValC2EPKS0_(%"union.KV<key, key, 6>::Val"* %10, %class.key* %11)
  ret void
}

; Function Attrs: noinline optnone sspstrong uwtable
define linkonce_odr void @_ZN2KVI3keyS0_Lj7EE14new_inner_nodeEmPKS0_S3_mS3_S3_(%class.KV.6* noalias sret, i64, %class.key*, %class.key*, i64, %class.key*, %class.key*) #2 comdat align 2 {
  %8 = alloca i64, align 8
  %9 = alloca %class.key*, align 8
  %10 = alloca %class.key*, align 8
  %11 = alloca i64, align 8
  %12 = alloca %class.key*, align 8
  %13 = alloca %class.key*, align 8
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  %16 = alloca %class.KV.7, align 8
  %17 = alloca %class.KV.7*, align 8
  %18 = alloca %class.KV.7*, align 8
  store i64 %1, i64* %8, align 8
  store %class.key* %2, %class.key** %9, align 8
  store %class.key* %3, %class.key** %10, align 8
  store i64 %4, i64* %11, align 8
  store %class.key* %5, %class.key** %12, align 8
  store %class.key* %6, %class.key** %13, align 8
  %19 = load i64, i64* %8, align 8
  %20 = and i64 %19, 63
  %21 = urem i64 %20, 63
  %22 = trunc i64 %21 to i32
  store i32 %22, i32* %14, align 4
  %23 = load i64, i64* %11, align 8
  %24 = and i64 %23, 63
  %25 = urem i64 %24, 63
  %26 = trunc i64 %25 to i32
  store i32 %26, i32* %15, align 4
  %27 = load i32, i32* %14, align 4
  %28 = load i32, i32* %15, align 4
  %29 = icmp eq i32 %27, %28
  br i1 %29, label %30, label %51

; <label>:30:                                     ; preds = %7
  %31 = load i64, i64* %8, align 8
  %32 = lshr i64 %31, 6
  %33 = load %class.key*, %class.key** %9, align 8
  %34 = load %class.key*, %class.key** %10, align 8
  %35 = load i64, i64* %11, align 8
  %36 = lshr i64 %35, 6
  %37 = load %class.key*, %class.key** %12, align 8
  %38 = load %class.key*, %class.key** %13, align 8
  call void @_ZN2KVI3keyS0_Lj8EE14new_inner_nodeEmPKS0_S3_mS3_S3_(%class.KV.7* sret %16, i64 %32, %class.key* %33, %class.key* %34, i64 %36, %class.key* %37, %class.key* %38)
  %39 = call noalias i8* @malloc(i64 16) #8
  %40 = bitcast i8* %39 to %class.KV.7*
  store %class.KV.7* %40, %class.KV.7** %17, align 8
  %41 = load %class.KV.7*, %class.KV.7** %17, align 8
  %42 = getelementptr inbounds %class.KV.7, %class.KV.7* %41, i64 0
  %43 = bitcast %class.KV.7* %42 to i8*
  %44 = bitcast i8* %43 to %class.KV.7*
  call void @_ZN2KVI3keyS0_Lj8EEC2ERKS1_(%class.KV.7* %44, %class.KV.7* dereferenceable(16) %16)
  %45 = load i32, i32* %14, align 4
  %46 = zext i32 %45 to i64
  %47 = shl i64 1, %46
  %48 = shl i64 %47, 1
  %49 = or i64 %48, 1
  %50 = load %class.KV.7*, %class.KV.7** %17, align 8
  call void @_ZN2KVI3keyS0_Lj7EEC2EmPKS_IS0_S0_Lj8EE(%class.KV.6* %0, i64 %49, %class.KV.7* %50)
  br label %94

; <label>:51:                                     ; preds = %7
  %52 = call noalias i8* @malloc(i64 32) #8
  %53 = bitcast i8* %52 to %class.KV.7*
  store %class.KV.7* %53, %class.KV.7** %18, align 8
  %54 = load i32, i32* %15, align 4
  %55 = load i32, i32* %14, align 4
  %56 = icmp ult i32 %54, %55
  br i1 %56, label %57, label %70

; <label>:57:                                     ; preds = %51
  %58 = load %class.KV.7*, %class.KV.7** %18, align 8
  %59 = getelementptr inbounds %class.KV.7, %class.KV.7* %58, i64 0
  %60 = bitcast %class.KV.7* %59 to i8*
  %61 = bitcast i8* %60 to %class.KV.7*
  %62 = load %class.key*, %class.key** %12, align 8
  %63 = load %class.key*, %class.key** %13, align 8
  call void @_ZN2KVI3keyS0_Lj8EEC2EPKS0_S3_(%class.KV.7* %61, %class.key* %62, %class.key* %63)
  %64 = load %class.KV.7*, %class.KV.7** %18, align 8
  %65 = getelementptr inbounds %class.KV.7, %class.KV.7* %64, i64 1
  %66 = bitcast %class.KV.7* %65 to i8*
  %67 = bitcast i8* %66 to %class.KV.7*
  %68 = load %class.key*, %class.key** %9, align 8
  %69 = load %class.key*, %class.key** %10, align 8
  call void @_ZN2KVI3keyS0_Lj8EEC2EPKS0_S3_(%class.KV.7* %67, %class.key* %68, %class.key* %69)
  br label %83

; <label>:70:                                     ; preds = %51
  %71 = load %class.KV.7*, %class.KV.7** %18, align 8
  %72 = getelementptr inbounds %class.KV.7, %class.KV.7* %71, i64 0
  %73 = bitcast %class.KV.7* %72 to i8*
  %74 = bitcast i8* %73 to %class.KV.7*
  %75 = load %class.key*, %class.key** %9, align 8
  %76 = load %class.key*, %class.key** %10, align 8
  call void @_ZN2KVI3keyS0_Lj8EEC2EPKS0_S3_(%class.KV.7* %74, %class.key* %75, %class.key* %76)
  %77 = load %class.KV.7*, %class.KV.7** %18, align 8
  %78 = getelementptr inbounds %class.KV.7, %class.KV.7* %77, i64 1
  %79 = bitcast %class.KV.7* %78 to i8*
  %80 = bitcast i8* %79 to %class.KV.7*
  %81 = load %class.key*, %class.key** %12, align 8
  %82 = load %class.key*, %class.key** %13, align 8
  call void @_ZN2KVI3keyS0_Lj8EEC2EPKS0_S3_(%class.KV.7* %80, %class.key* %81, %class.key* %82)
  br label %83

; <label>:83:                                     ; preds = %70, %57
  %84 = load i32, i32* %14, align 4
  %85 = zext i32 %84 to i64
  %86 = shl i64 1, %85
  %87 = load i32, i32* %15, align 4
  %88 = zext i32 %87 to i64
  %89 = shl i64 1, %88
  %90 = or i64 %86, %89
  %91 = shl i64 %90, 1
  %92 = or i64 %91, 1
  %93 = load %class.KV.7*, %class.KV.7** %18, align 8
  call void @_ZN2KVI3keyS0_Lj7EEC2EmPKS_IS0_S0_Lj8EE(%class.KV.6* %0, i64 %92, %class.KV.7* %93)
  br label %94

; <label>:94:                                     ; preds = %83, %30
  ret void
}

; Function Attrs: noinline nounwind optnone sspstrong uwtable
define linkonce_odr void @_ZN2KVI3keyS0_Lj7EEC2ERKS1_(%class.KV.6*, %class.KV.6* dereferenceable(16)) unnamed_addr #0 comdat align 2 {
  %3 = alloca %class.KV.6*, align 8
  %4 = alloca %class.KV.6*, align 8
  store %class.KV.6* %0, %class.KV.6** %3, align 8
  store %class.KV.6* %1, %class.KV.6** %4, align 8
  %5 = load %class.KV.6*, %class.KV.6** %3, align 8
  %6 = getelementptr inbounds %class.KV.6, %class.KV.6* %5, i32 0, i32 0
  %7 = load %class.KV.6*, %class.KV.6** %4, align 8
  %8 = getelementptr inbounds %class.KV.6, %class.KV.6* %7, i32 0, i32 0
  %9 = bitcast %"union.KV<key, key, 7>::Key"* %6 to i8*
  %10 = bitcast %"union.KV<key, key, 7>::Key"* %8 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %9, i8* %10, i64 8, i32 8, i1 false)
  %11 = getelementptr inbounds %class.KV.6, %class.KV.6* %5, i32 0, i32 1
  %12 = load %class.KV.6*, %class.KV.6** %4, align 8
  %13 = getelementptr inbounds %class.KV.6, %class.KV.6* %12, i32 0, i32 1
  %14 = bitcast %"union.KV<key, key, 7>::Val"* %11 to i8*
  %15 = bitcast %"union.KV<key, key, 7>::Val"* %13 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %14, i8* %15, i64 8, i32 8, i1 false)
  ret void
}

; Function Attrs: noinline optnone sspstrong uwtable
define linkonce_odr void @_ZN2KVI3keyS0_Lj6EEC2EmPKS_IS0_S0_Lj7EE(%class.KV.5*, i64, %class.KV.6*) unnamed_addr #2 comdat align 2 {
  %4 = alloca %class.KV.5*, align 8
  %5 = alloca i64, align 8
  %6 = alloca %class.KV.6*, align 8
  store %class.KV.5* %0, %class.KV.5** %4, align 8
  store i64 %1, i64* %5, align 8
  store %class.KV.6* %2, %class.KV.6** %6, align 8
  %7 = load %class.KV.5*, %class.KV.5** %4, align 8
  %8 = getelementptr inbounds %class.KV.5, %class.KV.5* %7, i32 0, i32 0
  %9 = load i64, i64* %5, align 8
  call void @_ZN2KVI3keyS0_Lj6EE3KeyC2Em(%"union.KV<key, key, 6>::Key"* %8, i64 %9)
  %10 = getelementptr inbounds %class.KV.5, %class.KV.5* %7, i32 0, i32 1
  %11 = load %class.KV.6*, %class.KV.6** %6, align 8
  call void @_ZN2KVI3keyS0_Lj6EE3ValC2EPKS_IS0_S0_Lj7EE(%"union.KV<key, key, 6>::Val"* %10, %class.KV.6* %11)
  ret void
}

; Function Attrs: noinline optnone sspstrong uwtable
define linkonce_odr void @_ZN2KVI3keyS0_Lj7EEC2EPKS0_S3_(%class.KV.6*, %class.key*, %class.key*) unnamed_addr #2 comdat align 2 {
  %4 = alloca %class.KV.6*, align 8
  %5 = alloca %class.key*, align 8
  %6 = alloca %class.key*, align 8
  store %class.KV.6* %0, %class.KV.6** %4, align 8
  store %class.key* %1, %class.key** %5, align 8
  store %class.key* %2, %class.key** %6, align 8
  %7 = load %class.KV.6*, %class.KV.6** %4, align 8
  %8 = getelementptr inbounds %class.KV.6, %class.KV.6* %7, i32 0, i32 0
  %9 = load %class.key*, %class.key** %5, align 8
  call void @_ZN2KVI3keyS0_Lj7EE3KeyC2EPKS0_(%"union.KV<key, key, 7>::Key"* %8, %class.key* %9)
  %10 = getelementptr inbounds %class.KV.6, %class.KV.6* %7, i32 0, i32 1
  %11 = load %class.key*, %class.key** %6, align 8
  call void @_ZN2KVI3keyS0_Lj7EE3ValC2EPKS0_(%"union.KV<key, key, 7>::Val"* %10, %class.key* %11)
  ret void
}

; Function Attrs: noinline optnone sspstrong uwtable
define linkonce_odr void @_ZN2KVI3keyS0_Lj8EE14new_inner_nodeEmPKS0_S3_mS3_S3_(%class.KV.7* noalias sret, i64, %class.key*, %class.key*, i64, %class.key*, %class.key*) #2 comdat align 2 {
  %8 = alloca i64, align 8
  %9 = alloca %class.key*, align 8
  %10 = alloca %class.key*, align 8
  %11 = alloca i64, align 8
  %12 = alloca %class.key*, align 8
  %13 = alloca %class.key*, align 8
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  %16 = alloca %class.KV.8, align 8
  %17 = alloca %class.KV.8*, align 8
  %18 = alloca %class.KV.8*, align 8
  store i64 %1, i64* %8, align 8
  store %class.key* %2, %class.key** %9, align 8
  store %class.key* %3, %class.key** %10, align 8
  store i64 %4, i64* %11, align 8
  store %class.key* %5, %class.key** %12, align 8
  store %class.key* %6, %class.key** %13, align 8
  %19 = load i64, i64* %8, align 8
  %20 = and i64 %19, 63
  %21 = urem i64 %20, 63
  %22 = trunc i64 %21 to i32
  store i32 %22, i32* %14, align 4
  %23 = load i64, i64* %11, align 8
  %24 = and i64 %23, 63
  %25 = urem i64 %24, 63
  %26 = trunc i64 %25 to i32
  store i32 %26, i32* %15, align 4
  %27 = load i32, i32* %14, align 4
  %28 = load i32, i32* %15, align 4
  %29 = icmp eq i32 %27, %28
  br i1 %29, label %30, label %51

; <label>:30:                                     ; preds = %7
  %31 = load i64, i64* %8, align 8
  %32 = lshr i64 %31, 6
  %33 = load %class.key*, %class.key** %9, align 8
  %34 = load %class.key*, %class.key** %10, align 8
  %35 = load i64, i64* %11, align 8
  %36 = lshr i64 %35, 6
  %37 = load %class.key*, %class.key** %12, align 8
  %38 = load %class.key*, %class.key** %13, align 8
  call void @_ZN2KVI3keyS0_Lj9EE14new_inner_nodeEmPKS0_S3_mS3_S3_(%class.KV.8* sret %16, i64 %32, %class.key* %33, %class.key* %34, i64 %36, %class.key* %37, %class.key* %38)
  %39 = call noalias i8* @malloc(i64 16) #8
  %40 = bitcast i8* %39 to %class.KV.8*
  store %class.KV.8* %40, %class.KV.8** %17, align 8
  %41 = load %class.KV.8*, %class.KV.8** %17, align 8
  %42 = getelementptr inbounds %class.KV.8, %class.KV.8* %41, i64 0
  %43 = bitcast %class.KV.8* %42 to i8*
  %44 = bitcast i8* %43 to %class.KV.8*
  call void @_ZN2KVI3keyS0_Lj9EEC2ERKS1_(%class.KV.8* %44, %class.KV.8* dereferenceable(16) %16)
  %45 = load i32, i32* %14, align 4
  %46 = zext i32 %45 to i64
  %47 = shl i64 1, %46
  %48 = shl i64 %47, 1
  %49 = or i64 %48, 1
  %50 = load %class.KV.8*, %class.KV.8** %17, align 8
  call void @_ZN2KVI3keyS0_Lj8EEC2EmPKS_IS0_S0_Lj9EE(%class.KV.7* %0, i64 %49, %class.KV.8* %50)
  br label %94

; <label>:51:                                     ; preds = %7
  %52 = call noalias i8* @malloc(i64 32) #8
  %53 = bitcast i8* %52 to %class.KV.8*
  store %class.KV.8* %53, %class.KV.8** %18, align 8
  %54 = load i32, i32* %15, align 4
  %55 = load i32, i32* %14, align 4
  %56 = icmp ult i32 %54, %55
  br i1 %56, label %57, label %70

; <label>:57:                                     ; preds = %51
  %58 = load %class.KV.8*, %class.KV.8** %18, align 8
  %59 = getelementptr inbounds %class.KV.8, %class.KV.8* %58, i64 0
  %60 = bitcast %class.KV.8* %59 to i8*
  %61 = bitcast i8* %60 to %class.KV.8*
  %62 = load %class.key*, %class.key** %12, align 8
  %63 = load %class.key*, %class.key** %13, align 8
  call void @_ZN2KVI3keyS0_Lj9EEC2EPKS0_S3_(%class.KV.8* %61, %class.key* %62, %class.key* %63)
  %64 = load %class.KV.8*, %class.KV.8** %18, align 8
  %65 = getelementptr inbounds %class.KV.8, %class.KV.8* %64, i64 1
  %66 = bitcast %class.KV.8* %65 to i8*
  %67 = bitcast i8* %66 to %class.KV.8*
  %68 = load %class.key*, %class.key** %9, align 8
  %69 = load %class.key*, %class.key** %10, align 8
  call void @_ZN2KVI3keyS0_Lj9EEC2EPKS0_S3_(%class.KV.8* %67, %class.key* %68, %class.key* %69)
  br label %83

; <label>:70:                                     ; preds = %51
  %71 = load %class.KV.8*, %class.KV.8** %18, align 8
  %72 = getelementptr inbounds %class.KV.8, %class.KV.8* %71, i64 0
  %73 = bitcast %class.KV.8* %72 to i8*
  %74 = bitcast i8* %73 to %class.KV.8*
  %75 = load %class.key*, %class.key** %9, align 8
  %76 = load %class.key*, %class.key** %10, align 8
  call void @_ZN2KVI3keyS0_Lj9EEC2EPKS0_S3_(%class.KV.8* %74, %class.key* %75, %class.key* %76)
  %77 = load %class.KV.8*, %class.KV.8** %18, align 8
  %78 = getelementptr inbounds %class.KV.8, %class.KV.8* %77, i64 1
  %79 = bitcast %class.KV.8* %78 to i8*
  %80 = bitcast i8* %79 to %class.KV.8*
  %81 = load %class.key*, %class.key** %12, align 8
  %82 = load %class.key*, %class.key** %13, align 8
  call void @_ZN2KVI3keyS0_Lj9EEC2EPKS0_S3_(%class.KV.8* %80, %class.key* %81, %class.key* %82)
  br label %83

; <label>:83:                                     ; preds = %70, %57
  %84 = load i32, i32* %14, align 4
  %85 = zext i32 %84 to i64
  %86 = shl i64 1, %85
  %87 = load i32, i32* %15, align 4
  %88 = zext i32 %87 to i64
  %89 = shl i64 1, %88
  %90 = or i64 %86, %89
  %91 = shl i64 %90, 1
  %92 = or i64 %91, 1
  %93 = load %class.KV.8*, %class.KV.8** %18, align 8
  call void @_ZN2KVI3keyS0_Lj8EEC2EmPKS_IS0_S0_Lj9EE(%class.KV.7* %0, i64 %92, %class.KV.8* %93)
  br label %94

; <label>:94:                                     ; preds = %83, %30
  ret void
}

; Function Attrs: noinline nounwind optnone sspstrong uwtable
define linkonce_odr void @_ZN2KVI3keyS0_Lj8EEC2ERKS1_(%class.KV.7*, %class.KV.7* dereferenceable(16)) unnamed_addr #0 comdat align 2 {
  %3 = alloca %class.KV.7*, align 8
  %4 = alloca %class.KV.7*, align 8
  store %class.KV.7* %0, %class.KV.7** %3, align 8
  store %class.KV.7* %1, %class.KV.7** %4, align 8
  %5 = load %class.KV.7*, %class.KV.7** %3, align 8
  %6 = getelementptr inbounds %class.KV.7, %class.KV.7* %5, i32 0, i32 0
  %7 = load %class.KV.7*, %class.KV.7** %4, align 8
  %8 = getelementptr inbounds %class.KV.7, %class.KV.7* %7, i32 0, i32 0
  %9 = bitcast %"union.KV<key, key, 8>::Key"* %6 to i8*
  %10 = bitcast %"union.KV<key, key, 8>::Key"* %8 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %9, i8* %10, i64 8, i32 8, i1 false)
  %11 = getelementptr inbounds %class.KV.7, %class.KV.7* %5, i32 0, i32 1
  %12 = load %class.KV.7*, %class.KV.7** %4, align 8
  %13 = getelementptr inbounds %class.KV.7, %class.KV.7* %12, i32 0, i32 1
  %14 = bitcast %"union.KV<key, key, 8>::Val"* %11 to i8*
  %15 = bitcast %"union.KV<key, key, 8>::Val"* %13 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %14, i8* %15, i64 8, i32 8, i1 false)
  ret void
}

; Function Attrs: noinline optnone sspstrong uwtable
define linkonce_odr void @_ZN2KVI3keyS0_Lj7EEC2EmPKS_IS0_S0_Lj8EE(%class.KV.6*, i64, %class.KV.7*) unnamed_addr #2 comdat align 2 {
  %4 = alloca %class.KV.6*, align 8
  %5 = alloca i64, align 8
  %6 = alloca %class.KV.7*, align 8
  store %class.KV.6* %0, %class.KV.6** %4, align 8
  store i64 %1, i64* %5, align 8
  store %class.KV.7* %2, %class.KV.7** %6, align 8
  %7 = load %class.KV.6*, %class.KV.6** %4, align 8
  %8 = getelementptr inbounds %class.KV.6, %class.KV.6* %7, i32 0, i32 0
  %9 = load i64, i64* %5, align 8
  call void @_ZN2KVI3keyS0_Lj7EE3KeyC2Em(%"union.KV<key, key, 7>::Key"* %8, i64 %9)
  %10 = getelementptr inbounds %class.KV.6, %class.KV.6* %7, i32 0, i32 1
  %11 = load %class.KV.7*, %class.KV.7** %6, align 8
  call void @_ZN2KVI3keyS0_Lj7EE3ValC2EPKS_IS0_S0_Lj8EE(%"union.KV<key, key, 7>::Val"* %10, %class.KV.7* %11)
  ret void
}

; Function Attrs: noinline optnone sspstrong uwtable
define linkonce_odr void @_ZN2KVI3keyS0_Lj8EEC2EPKS0_S3_(%class.KV.7*, %class.key*, %class.key*) unnamed_addr #2 comdat align 2 {
  %4 = alloca %class.KV.7*, align 8
  %5 = alloca %class.key*, align 8
  %6 = alloca %class.key*, align 8
  store %class.KV.7* %0, %class.KV.7** %4, align 8
  store %class.key* %1, %class.key** %5, align 8
  store %class.key* %2, %class.key** %6, align 8
  %7 = load %class.KV.7*, %class.KV.7** %4, align 8
  %8 = getelementptr inbounds %class.KV.7, %class.KV.7* %7, i32 0, i32 0
  %9 = load %class.key*, %class.key** %5, align 8
  call void @_ZN2KVI3keyS0_Lj8EE3KeyC2EPKS0_(%"union.KV<key, key, 8>::Key"* %8, %class.key* %9)
  %10 = getelementptr inbounds %class.KV.7, %class.KV.7* %7, i32 0, i32 1
  %11 = load %class.key*, %class.key** %6, align 8
  call void @_ZN2KVI3keyS0_Lj8EE3ValC2EPKS0_(%"union.KV<key, key, 8>::Val"* %10, %class.key* %11)
  ret void
}

; Function Attrs: noinline optnone sspstrong uwtable
define linkonce_odr void @_ZN2KVI3keyS0_Lj9EE14new_inner_nodeEmPKS0_S3_mS3_S3_(%class.KV.8* noalias sret, i64, %class.key*, %class.key*, i64, %class.key*, %class.key*) #2 comdat align 2 {
  %8 = alloca i64, align 8
  %9 = alloca %class.key*, align 8
  %10 = alloca %class.key*, align 8
  %11 = alloca i64, align 8
  %12 = alloca %class.key*, align 8
  %13 = alloca %class.key*, align 8
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  %16 = alloca %class.KV.9, align 8
  %17 = alloca %class.KV.9*, align 8
  %18 = alloca %class.KV.9*, align 8
  store i64 %1, i64* %8, align 8
  store %class.key* %2, %class.key** %9, align 8
  store %class.key* %3, %class.key** %10, align 8
  store i64 %4, i64* %11, align 8
  store %class.key* %5, %class.key** %12, align 8
  store %class.key* %6, %class.key** %13, align 8
  %19 = load i64, i64* %8, align 8
  %20 = and i64 %19, 63
  %21 = urem i64 %20, 63
  %22 = trunc i64 %21 to i32
  store i32 %22, i32* %14, align 4
  %23 = load i64, i64* %11, align 8
  %24 = and i64 %23, 63
  %25 = urem i64 %24, 63
  %26 = trunc i64 %25 to i32
  store i32 %26, i32* %15, align 4
  %27 = load i32, i32* %14, align 4
  %28 = load i32, i32* %15, align 4
  %29 = icmp eq i32 %27, %28
  br i1 %29, label %30, label %51

; <label>:30:                                     ; preds = %7
  %31 = load i64, i64* %8, align 8
  %32 = lshr i64 %31, 6
  %33 = load %class.key*, %class.key** %9, align 8
  %34 = load %class.key*, %class.key** %10, align 8
  %35 = load i64, i64* %11, align 8
  %36 = lshr i64 %35, 6
  %37 = load %class.key*, %class.key** %12, align 8
  %38 = load %class.key*, %class.key** %13, align 8
  call void @_ZN2KVI3keyS0_Lj10EE14new_inner_nodeEmPKS0_S3_mS3_S3_(%class.KV.9* sret %16, i64 %32, %class.key* %33, %class.key* %34, i64 %36, %class.key* %37, %class.key* %38)
  %39 = call noalias i8* @malloc(i64 16) #8
  %40 = bitcast i8* %39 to %class.KV.9*
  store %class.KV.9* %40, %class.KV.9** %17, align 8
  %41 = load %class.KV.9*, %class.KV.9** %17, align 8
  %42 = getelementptr inbounds %class.KV.9, %class.KV.9* %41, i64 0
  %43 = bitcast %class.KV.9* %42 to i8*
  %44 = bitcast i8* %43 to %class.KV.9*
  call void @_ZN2KVI3keyS0_Lj10EEC2ERKS1_(%class.KV.9* %44, %class.KV.9* dereferenceable(16) %16)
  %45 = load i32, i32* %14, align 4
  %46 = zext i32 %45 to i64
  %47 = shl i64 1, %46
  %48 = shl i64 %47, 1
  %49 = or i64 %48, 1
  %50 = load %class.KV.9*, %class.KV.9** %17, align 8
  call void @_ZN2KVI3keyS0_Lj9EEC2EmPKS_IS0_S0_Lj10EE(%class.KV.8* %0, i64 %49, %class.KV.9* %50)
  br label %94

; <label>:51:                                     ; preds = %7
  %52 = call noalias i8* @malloc(i64 32) #8
  %53 = bitcast i8* %52 to %class.KV.9*
  store %class.KV.9* %53, %class.KV.9** %18, align 8
  %54 = load i32, i32* %15, align 4
  %55 = load i32, i32* %14, align 4
  %56 = icmp ult i32 %54, %55
  br i1 %56, label %57, label %70

; <label>:57:                                     ; preds = %51
  %58 = load %class.KV.9*, %class.KV.9** %18, align 8
  %59 = getelementptr inbounds %class.KV.9, %class.KV.9* %58, i64 0
  %60 = bitcast %class.KV.9* %59 to i8*
  %61 = bitcast i8* %60 to %class.KV.9*
  %62 = load %class.key*, %class.key** %12, align 8
  %63 = load %class.key*, %class.key** %13, align 8
  call void @_ZN2KVI3keyS0_Lj10EEC2EPKS0_S3_(%class.KV.9* %61, %class.key* %62, %class.key* %63)
  %64 = load %class.KV.9*, %class.KV.9** %18, align 8
  %65 = getelementptr inbounds %class.KV.9, %class.KV.9* %64, i64 1
  %66 = bitcast %class.KV.9* %65 to i8*
  %67 = bitcast i8* %66 to %class.KV.9*
  %68 = load %class.key*, %class.key** %9, align 8
  %69 = load %class.key*, %class.key** %10, align 8
  call void @_ZN2KVI3keyS0_Lj10EEC2EPKS0_S3_(%class.KV.9* %67, %class.key* %68, %class.key* %69)
  br label %83

; <label>:70:                                     ; preds = %51
  %71 = load %class.KV.9*, %class.KV.9** %18, align 8
  %72 = getelementptr inbounds %class.KV.9, %class.KV.9* %71, i64 0
  %73 = bitcast %class.KV.9* %72 to i8*
  %74 = bitcast i8* %73 to %class.KV.9*
  %75 = load %class.key*, %class.key** %9, align 8
  %76 = load %class.key*, %class.key** %10, align 8
  call void @_ZN2KVI3keyS0_Lj10EEC2EPKS0_S3_(%class.KV.9* %74, %class.key* %75, %class.key* %76)
  %77 = load %class.KV.9*, %class.KV.9** %18, align 8
  %78 = getelementptr inbounds %class.KV.9, %class.KV.9* %77, i64 1
  %79 = bitcast %class.KV.9* %78 to i8*
  %80 = bitcast i8* %79 to %class.KV.9*
  %81 = load %class.key*, %class.key** %12, align 8
  %82 = load %class.key*, %class.key** %13, align 8
  call void @_ZN2KVI3keyS0_Lj10EEC2EPKS0_S3_(%class.KV.9* %80, %class.key* %81, %class.key* %82)
  br label %83

; <label>:83:                                     ; preds = %70, %57
  %84 = load i32, i32* %14, align 4
  %85 = zext i32 %84 to i64
  %86 = shl i64 1, %85
  %87 = load i32, i32* %15, align 4
  %88 = zext i32 %87 to i64
  %89 = shl i64 1, %88
  %90 = or i64 %86, %89
  %91 = shl i64 %90, 1
  %92 = or i64 %91, 1
  %93 = load %class.KV.9*, %class.KV.9** %18, align 8
  call void @_ZN2KVI3keyS0_Lj9EEC2EmPKS_IS0_S0_Lj10EE(%class.KV.8* %0, i64 %92, %class.KV.9* %93)
  br label %94

; <label>:94:                                     ; preds = %83, %30
  ret void
}

; Function Attrs: noinline nounwind optnone sspstrong uwtable
define linkonce_odr void @_ZN2KVI3keyS0_Lj9EEC2ERKS1_(%class.KV.8*, %class.KV.8* dereferenceable(16)) unnamed_addr #0 comdat align 2 {
  %3 = alloca %class.KV.8*, align 8
  %4 = alloca %class.KV.8*, align 8
  store %class.KV.8* %0, %class.KV.8** %3, align 8
  store %class.KV.8* %1, %class.KV.8** %4, align 8
  %5 = load %class.KV.8*, %class.KV.8** %3, align 8
  %6 = getelementptr inbounds %class.KV.8, %class.KV.8* %5, i32 0, i32 0
  %7 = load %class.KV.8*, %class.KV.8** %4, align 8
  %8 = getelementptr inbounds %class.KV.8, %class.KV.8* %7, i32 0, i32 0
  %9 = bitcast %"union.KV<key, key, 9>::Key"* %6 to i8*
  %10 = bitcast %"union.KV<key, key, 9>::Key"* %8 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %9, i8* %10, i64 8, i32 8, i1 false)
  %11 = getelementptr inbounds %class.KV.8, %class.KV.8* %5, i32 0, i32 1
  %12 = load %class.KV.8*, %class.KV.8** %4, align 8
  %13 = getelementptr inbounds %class.KV.8, %class.KV.8* %12, i32 0, i32 1
  %14 = bitcast %"union.KV<key, key, 9>::Val"* %11 to i8*
  %15 = bitcast %"union.KV<key, key, 9>::Val"* %13 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %14, i8* %15, i64 8, i32 8, i1 false)
  ret void
}

; Function Attrs: noinline optnone sspstrong uwtable
define linkonce_odr void @_ZN2KVI3keyS0_Lj8EEC2EmPKS_IS0_S0_Lj9EE(%class.KV.7*, i64, %class.KV.8*) unnamed_addr #2 comdat align 2 {
  %4 = alloca %class.KV.7*, align 8
  %5 = alloca i64, align 8
  %6 = alloca %class.KV.8*, align 8
  store %class.KV.7* %0, %class.KV.7** %4, align 8
  store i64 %1, i64* %5, align 8
  store %class.KV.8* %2, %class.KV.8** %6, align 8
  %7 = load %class.KV.7*, %class.KV.7** %4, align 8
  %8 = getelementptr inbounds %class.KV.7, %class.KV.7* %7, i32 0, i32 0
  %9 = load i64, i64* %5, align 8
  call void @_ZN2KVI3keyS0_Lj8EE3KeyC2Em(%"union.KV<key, key, 8>::Key"* %8, i64 %9)
  %10 = getelementptr inbounds %class.KV.7, %class.KV.7* %7, i32 0, i32 1
  %11 = load %class.KV.8*, %class.KV.8** %6, align 8
  call void @_ZN2KVI3keyS0_Lj8EE3ValC2EPKS_IS0_S0_Lj9EE(%"union.KV<key, key, 8>::Val"* %10, %class.KV.8* %11)
  ret void
}

; Function Attrs: noinline optnone sspstrong uwtable
define linkonce_odr void @_ZN2KVI3keyS0_Lj9EEC2EPKS0_S3_(%class.KV.8*, %class.key*, %class.key*) unnamed_addr #2 comdat align 2 {
  %4 = alloca %class.KV.8*, align 8
  %5 = alloca %class.key*, align 8
  %6 = alloca %class.key*, align 8
  store %class.KV.8* %0, %class.KV.8** %4, align 8
  store %class.key* %1, %class.key** %5, align 8
  store %class.key* %2, %class.key** %6, align 8
  %7 = load %class.KV.8*, %class.KV.8** %4, align 8
  %8 = getelementptr inbounds %class.KV.8, %class.KV.8* %7, i32 0, i32 0
  %9 = load %class.key*, %class.key** %5, align 8
  call void @_ZN2KVI3keyS0_Lj9EE3KeyC2EPKS0_(%"union.KV<key, key, 9>::Key"* %8, %class.key* %9)
  %10 = getelementptr inbounds %class.KV.8, %class.KV.8* %7, i32 0, i32 1
  %11 = load %class.key*, %class.key** %6, align 8
  call void @_ZN2KVI3keyS0_Lj9EE3ValC2EPKS0_(%"union.KV<key, key, 9>::Val"* %10, %class.key* %11)
  ret void
}

; Function Attrs: noinline optnone sspstrong uwtable
define linkonce_odr void @_ZN2KVI3keyS0_Lj10EE14new_inner_nodeEmPKS0_S3_mS3_S3_(%class.KV.9* noalias sret, i64, %class.key*, %class.key*, i64, %class.key*, %class.key*) #2 comdat align 2 {
  %8 = alloca i64, align 8
  %9 = alloca %class.key*, align 8
  %10 = alloca %class.key*, align 8
  %11 = alloca i64, align 8
  %12 = alloca %class.key*, align 8
  %13 = alloca %class.key*, align 8
  %14 = alloca %class.LL*, align 8
  %15 = alloca %class.LL*, align 8
  store i64 %1, i64* %8, align 8
  store %class.key* %2, %class.key** %9, align 8
  store %class.key* %3, %class.key** %10, align 8
  store i64 %4, i64* %11, align 8
  store %class.key* %5, %class.key** %12, align 8
  store %class.key* %6, %class.key** %13, align 8
  %16 = call noalias i8* @malloc(i64 24) #8
  %17 = bitcast i8* %16 to %class.LL*
  %18 = bitcast %class.LL* %17 to i8*
  %19 = bitcast i8* %18 to %class.LL*
  %20 = load %class.key*, %class.key** %9, align 8
  %21 = load %class.key*, %class.key** %10, align 8
  call void @_ZN2LLI3keyS0_EC2EPKS0_S3_PKS1_(%class.LL* %19, %class.key* %20, %class.key* %21, %class.LL* null)
  store %class.LL* %19, %class.LL** %14, align 8
  %22 = call noalias i8* @malloc(i64 24) #8
  %23 = bitcast i8* %22 to %class.LL*
  %24 = bitcast %class.LL* %23 to i8*
  %25 = bitcast i8* %24 to %class.LL*
  %26 = load %class.key*, %class.key** %12, align 8
  %27 = load %class.key*, %class.key** %13, align 8
  %28 = load %class.LL*, %class.LL** %14, align 8
  call void @_ZN2LLI3keyS0_EC2EPKS0_S3_PKS1_(%class.LL* %25, %class.key* %26, %class.key* %27, %class.LL* %28)
  store %class.LL* %25, %class.LL** %15, align 8
  %29 = load %class.LL*, %class.LL** %15, align 8
  call void @_ZN2KVI3keyS0_Lj10EEC2EmPK2LLIS0_S0_E(%class.KV.9* %0, i64 1, %class.LL* %29)
  ret void
}

; Function Attrs: noinline nounwind optnone sspstrong uwtable
define linkonce_odr void @_ZN2KVI3keyS0_Lj10EEC2ERKS1_(%class.KV.9*, %class.KV.9* dereferenceable(16)) unnamed_addr #0 comdat align 2 {
  %3 = alloca %class.KV.9*, align 8
  %4 = alloca %class.KV.9*, align 8
  store %class.KV.9* %0, %class.KV.9** %3, align 8
  store %class.KV.9* %1, %class.KV.9** %4, align 8
  %5 = load %class.KV.9*, %class.KV.9** %3, align 8
  %6 = getelementptr inbounds %class.KV.9, %class.KV.9* %5, i32 0, i32 0
  %7 = load %class.KV.9*, %class.KV.9** %4, align 8
  %8 = getelementptr inbounds %class.KV.9, %class.KV.9* %7, i32 0, i32 0
  %9 = bitcast %"union.KV<key, key, 10>::Key"* %6 to i8*
  %10 = bitcast %"union.KV<key, key, 10>::Key"* %8 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %9, i8* %10, i64 8, i32 8, i1 false)
  %11 = getelementptr inbounds %class.KV.9, %class.KV.9* %5, i32 0, i32 1
  %12 = load %class.KV.9*, %class.KV.9** %4, align 8
  %13 = getelementptr inbounds %class.KV.9, %class.KV.9* %12, i32 0, i32 1
  %14 = bitcast %"union.KV<key, key, 10>::Val"* %11 to i8*
  %15 = bitcast %"union.KV<key, key, 10>::Val"* %13 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %14, i8* %15, i64 8, i32 8, i1 false)
  ret void
}

; Function Attrs: noinline optnone sspstrong uwtable
define linkonce_odr void @_ZN2KVI3keyS0_Lj9EEC2EmPKS_IS0_S0_Lj10EE(%class.KV.8*, i64, %class.KV.9*) unnamed_addr #2 comdat align 2 {
  %4 = alloca %class.KV.8*, align 8
  %5 = alloca i64, align 8
  %6 = alloca %class.KV.9*, align 8
  store %class.KV.8* %0, %class.KV.8** %4, align 8
  store i64 %1, i64* %5, align 8
  store %class.KV.9* %2, %class.KV.9** %6, align 8
  %7 = load %class.KV.8*, %class.KV.8** %4, align 8
  %8 = getelementptr inbounds %class.KV.8, %class.KV.8* %7, i32 0, i32 0
  %9 = load i64, i64* %5, align 8
  call void @_ZN2KVI3keyS0_Lj9EE3KeyC2Em(%"union.KV<key, key, 9>::Key"* %8, i64 %9)
  %10 = getelementptr inbounds %class.KV.8, %class.KV.8* %7, i32 0, i32 1
  %11 = load %class.KV.9*, %class.KV.9** %6, align 8
  call void @_ZN2KVI3keyS0_Lj9EE3ValC2EPKS_IS0_S0_Lj10EE(%"union.KV<key, key, 9>::Val"* %10, %class.KV.9* %11)
  ret void
}

; Function Attrs: noinline optnone sspstrong uwtable
define linkonce_odr void @_ZN2KVI3keyS0_Lj10EEC2EPKS0_S3_(%class.KV.9*, %class.key*, %class.key*) unnamed_addr #2 comdat align 2 {
  %4 = alloca %class.KV.9*, align 8
  %5 = alloca %class.key*, align 8
  %6 = alloca %class.key*, align 8
  store %class.KV.9* %0, %class.KV.9** %4, align 8
  store %class.key* %1, %class.key** %5, align 8
  store %class.key* %2, %class.key** %6, align 8
  %7 = load %class.KV.9*, %class.KV.9** %4, align 8
  %8 = getelementptr inbounds %class.KV.9, %class.KV.9* %7, i32 0, i32 0
  %9 = load %class.key*, %class.key** %5, align 8
  call void @_ZN2KVI3keyS0_Lj10EE3KeyC2EPKS0_(%"union.KV<key, key, 10>::Key"* %8, %class.key* %9)
  %10 = getelementptr inbounds %class.KV.9, %class.KV.9* %7, i32 0, i32 1
  %11 = load %class.key*, %class.key** %6, align 8
  call void @_ZN2KVI3keyS0_Lj10EE3ValC2EPKS0_(%"union.KV<key, key, 10>::Val"* %10, %class.key* %11)
  ret void
}

; Function Attrs: noinline nounwind optnone sspstrong uwtable
define linkonce_odr void @_ZN2LLI3keyS0_EC2EPKS0_S3_PKS1_(%class.LL*, %class.key*, %class.key*, %class.LL*) unnamed_addr #0 comdat align 2 {
  %5 = alloca %class.LL*, align 8
  %6 = alloca %class.key*, align 8
  %7 = alloca %class.key*, align 8
  %8 = alloca %class.LL*, align 8
  store %class.LL* %0, %class.LL** %5, align 8
  store %class.key* %1, %class.key** %6, align 8
  store %class.key* %2, %class.key** %7, align 8
  store %class.LL* %3, %class.LL** %8, align 8
  %9 = load %class.LL*, %class.LL** %5, align 8
  %10 = getelementptr inbounds %class.LL, %class.LL* %9, i32 0, i32 0
  %11 = load %class.key*, %class.key** %6, align 8
  store %class.key* %11, %class.key** %10, align 8
  %12 = getelementptr inbounds %class.LL, %class.LL* %9, i32 0, i32 1
  %13 = load %class.key*, %class.key** %7, align 8
  store %class.key* %13, %class.key** %12, align 8
  %14 = getelementptr inbounds %class.LL, %class.LL* %9, i32 0, i32 2
  %15 = load %class.LL*, %class.LL** %8, align 8
  store %class.LL* %15, %class.LL** %14, align 8
  ret void
}

; Function Attrs: noinline optnone sspstrong uwtable
define linkonce_odr void @_ZN2KVI3keyS0_Lj10EEC2EmPK2LLIS0_S0_E(%class.KV.9*, i64, %class.LL*) unnamed_addr #2 comdat align 2 {
  %4 = alloca %class.KV.9*, align 8
  %5 = alloca i64, align 8
  %6 = alloca %class.LL*, align 8
  store %class.KV.9* %0, %class.KV.9** %4, align 8
  store i64 %1, i64* %5, align 8
  store %class.LL* %2, %class.LL** %6, align 8
  %7 = load %class.KV.9*, %class.KV.9** %4, align 8
  %8 = getelementptr inbounds %class.KV.9, %class.KV.9* %7, i32 0, i32 0
  %9 = load i64, i64* %5, align 8
  call void @_ZN2KVI3keyS0_Lj10EE3KeyC2Em(%"union.KV<key, key, 10>::Key"* %8, i64 %9)
  %10 = getelementptr inbounds %class.KV.9, %class.KV.9* %7, i32 0, i32 1
  %11 = load %class.LL*, %class.LL** %6, align 8
  call void @_ZN2KVI3keyS0_Lj10EE3ValC2EPK2LLIS0_S0_E(%"union.KV<key, key, 10>::Val"* %10, %class.LL* %11)
  ret void
}

; Function Attrs: noinline nounwind optnone sspstrong uwtable
define linkonce_odr void @_ZN2KVI3keyS0_Lj10EE3KeyC2Em(%"union.KV<key, key, 10>::Key"*, i64) unnamed_addr #0 comdat align 2 {
  %3 = alloca %"union.KV<key, key, 10>::Key"*, align 8
  %4 = alloca i64, align 8
  store %"union.KV<key, key, 10>::Key"* %0, %"union.KV<key, key, 10>::Key"** %3, align 8
  store i64 %1, i64* %4, align 8
  %5 = load %"union.KV<key, key, 10>::Key"*, %"union.KV<key, key, 10>::Key"** %3, align 8
  %6 = bitcast %"union.KV<key, key, 10>::Key"* %5 to i64*
  %7 = load i64, i64* %4, align 8
  store i64 %7, i64* %6, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone sspstrong uwtable
define linkonce_odr void @_ZN2KVI3keyS0_Lj10EE3ValC2EPK2LLIS0_S0_E(%"union.KV<key, key, 10>::Val"*, %class.LL*) unnamed_addr #0 comdat align 2 {
  %3 = alloca %"union.KV<key, key, 10>::Val"*, align 8
  %4 = alloca %class.LL*, align 8
  store %"union.KV<key, key, 10>::Val"* %0, %"union.KV<key, key, 10>::Val"** %3, align 8
  store %class.LL* %1, %class.LL** %4, align 8
  %5 = load %"union.KV<key, key, 10>::Val"*, %"union.KV<key, key, 10>::Val"** %3, align 8
  %6 = bitcast %"union.KV<key, key, 10>::Val"* %5 to %class.LL**
  %7 = load %class.LL*, %class.LL** %4, align 8
  store %class.LL* %7, %class.LL** %6, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone sspstrong uwtable
define linkonce_odr void @_ZN2KVI3keyS0_Lj9EE3KeyC2Em(%"union.KV<key, key, 9>::Key"*, i64) unnamed_addr #0 comdat align 2 {
  %3 = alloca %"union.KV<key, key, 9>::Key"*, align 8
  %4 = alloca i64, align 8
  store %"union.KV<key, key, 9>::Key"* %0, %"union.KV<key, key, 9>::Key"** %3, align 8
  store i64 %1, i64* %4, align 8
  %5 = load %"union.KV<key, key, 9>::Key"*, %"union.KV<key, key, 9>::Key"** %3, align 8
  %6 = bitcast %"union.KV<key, key, 9>::Key"* %5 to i64*
  %7 = load i64, i64* %4, align 8
  store i64 %7, i64* %6, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone sspstrong uwtable
define linkonce_odr void @_ZN2KVI3keyS0_Lj9EE3ValC2EPKS_IS0_S0_Lj10EE(%"union.KV<key, key, 9>::Val"*, %class.KV.9*) unnamed_addr #0 comdat align 2 {
  %3 = alloca %"union.KV<key, key, 9>::Val"*, align 8
  %4 = alloca %class.KV.9*, align 8
  store %"union.KV<key, key, 9>::Val"* %0, %"union.KV<key, key, 9>::Val"** %3, align 8
  store %class.KV.9* %1, %class.KV.9** %4, align 8
  %5 = load %"union.KV<key, key, 9>::Val"*, %"union.KV<key, key, 9>::Val"** %3, align 8
  %6 = bitcast %"union.KV<key, key, 9>::Val"* %5 to %class.KV.9**
  %7 = load %class.KV.9*, %class.KV.9** %4, align 8
  store %class.KV.9* %7, %class.KV.9** %6, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone sspstrong uwtable
define linkonce_odr void @_ZN2KVI3keyS0_Lj10EE3KeyC2EPKS0_(%"union.KV<key, key, 10>::Key"*, %class.key*) unnamed_addr #0 comdat align 2 {
  %3 = alloca %"union.KV<key, key, 10>::Key"*, align 8
  %4 = alloca %class.key*, align 8
  store %"union.KV<key, key, 10>::Key"* %0, %"union.KV<key, key, 10>::Key"** %3, align 8
  store %class.key* %1, %class.key** %4, align 8
  %5 = load %"union.KV<key, key, 10>::Key"*, %"union.KV<key, key, 10>::Key"** %3, align 8
  %6 = bitcast %"union.KV<key, key, 10>::Key"* %5 to %class.key**
  %7 = load %class.key*, %class.key** %4, align 8
  store %class.key* %7, %class.key** %6, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone sspstrong uwtable
define linkonce_odr void @_ZN2KVI3keyS0_Lj10EE3ValC2EPKS0_(%"union.KV<key, key, 10>::Val"*, %class.key*) unnamed_addr #0 comdat align 2 {
  %3 = alloca %"union.KV<key, key, 10>::Val"*, align 8
  %4 = alloca %class.key*, align 8
  store %"union.KV<key, key, 10>::Val"* %0, %"union.KV<key, key, 10>::Val"** %3, align 8
  store %class.key* %1, %class.key** %4, align 8
  %5 = load %"union.KV<key, key, 10>::Val"*, %"union.KV<key, key, 10>::Val"** %3, align 8
  %6 = bitcast %"union.KV<key, key, 10>::Val"* %5 to %class.key**
  %7 = load %class.key*, %class.key** %4, align 8
  store %class.key* %7, %class.key** %6, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone sspstrong uwtable
define linkonce_odr void @_ZN2KVI3keyS0_Lj8EE3KeyC2Em(%"union.KV<key, key, 8>::Key"*, i64) unnamed_addr #0 comdat align 2 {
  %3 = alloca %"union.KV<key, key, 8>::Key"*, align 8
  %4 = alloca i64, align 8
  store %"union.KV<key, key, 8>::Key"* %0, %"union.KV<key, key, 8>::Key"** %3, align 8
  store i64 %1, i64* %4, align 8
  %5 = load %"union.KV<key, key, 8>::Key"*, %"union.KV<key, key, 8>::Key"** %3, align 8
  %6 = bitcast %"union.KV<key, key, 8>::Key"* %5 to i64*
  %7 = load i64, i64* %4, align 8
  store i64 %7, i64* %6, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone sspstrong uwtable
define linkonce_odr void @_ZN2KVI3keyS0_Lj8EE3ValC2EPKS_IS0_S0_Lj9EE(%"union.KV<key, key, 8>::Val"*, %class.KV.8*) unnamed_addr #0 comdat align 2 {
  %3 = alloca %"union.KV<key, key, 8>::Val"*, align 8
  %4 = alloca %class.KV.8*, align 8
  store %"union.KV<key, key, 8>::Val"* %0, %"union.KV<key, key, 8>::Val"** %3, align 8
  store %class.KV.8* %1, %class.KV.8** %4, align 8
  %5 = load %"union.KV<key, key, 8>::Val"*, %"union.KV<key, key, 8>::Val"** %3, align 8
  %6 = bitcast %"union.KV<key, key, 8>::Val"* %5 to %class.KV.8**
  %7 = load %class.KV.8*, %class.KV.8** %4, align 8
  store %class.KV.8* %7, %class.KV.8** %6, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone sspstrong uwtable
define linkonce_odr void @_ZN2KVI3keyS0_Lj9EE3KeyC2EPKS0_(%"union.KV<key, key, 9>::Key"*, %class.key*) unnamed_addr #0 comdat align 2 {
  %3 = alloca %"union.KV<key, key, 9>::Key"*, align 8
  %4 = alloca %class.key*, align 8
  store %"union.KV<key, key, 9>::Key"* %0, %"union.KV<key, key, 9>::Key"** %3, align 8
  store %class.key* %1, %class.key** %4, align 8
  %5 = load %"union.KV<key, key, 9>::Key"*, %"union.KV<key, key, 9>::Key"** %3, align 8
  %6 = bitcast %"union.KV<key, key, 9>::Key"* %5 to %class.key**
  %7 = load %class.key*, %class.key** %4, align 8
  store %class.key* %7, %class.key** %6, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone sspstrong uwtable
define linkonce_odr void @_ZN2KVI3keyS0_Lj9EE3ValC2EPKS0_(%"union.KV<key, key, 9>::Val"*, %class.key*) unnamed_addr #0 comdat align 2 {
  %3 = alloca %"union.KV<key, key, 9>::Val"*, align 8
  %4 = alloca %class.key*, align 8
  store %"union.KV<key, key, 9>::Val"* %0, %"union.KV<key, key, 9>::Val"** %3, align 8
  store %class.key* %1, %class.key** %4, align 8
  %5 = load %"union.KV<key, key, 9>::Val"*, %"union.KV<key, key, 9>::Val"** %3, align 8
  %6 = bitcast %"union.KV<key, key, 9>::Val"* %5 to %class.key**
  %7 = load %class.key*, %class.key** %4, align 8
  store %class.key* %7, %class.key** %6, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone sspstrong uwtable
define linkonce_odr void @_ZN2KVI3keyS0_Lj7EE3KeyC2Em(%"union.KV<key, key, 7>::Key"*, i64) unnamed_addr #0 comdat align 2 {
  %3 = alloca %"union.KV<key, key, 7>::Key"*, align 8
  %4 = alloca i64, align 8
  store %"union.KV<key, key, 7>::Key"* %0, %"union.KV<key, key, 7>::Key"** %3, align 8
  store i64 %1, i64* %4, align 8
  %5 = load %"union.KV<key, key, 7>::Key"*, %"union.KV<key, key, 7>::Key"** %3, align 8
  %6 = bitcast %"union.KV<key, key, 7>::Key"* %5 to i64*
  %7 = load i64, i64* %4, align 8
  store i64 %7, i64* %6, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone sspstrong uwtable
define linkonce_odr void @_ZN2KVI3keyS0_Lj7EE3ValC2EPKS_IS0_S0_Lj8EE(%"union.KV<key, key, 7>::Val"*, %class.KV.7*) unnamed_addr #0 comdat align 2 {
  %3 = alloca %"union.KV<key, key, 7>::Val"*, align 8
  %4 = alloca %class.KV.7*, align 8
  store %"union.KV<key, key, 7>::Val"* %0, %"union.KV<key, key, 7>::Val"** %3, align 8
  store %class.KV.7* %1, %class.KV.7** %4, align 8
  %5 = load %"union.KV<key, key, 7>::Val"*, %"union.KV<key, key, 7>::Val"** %3, align 8
  %6 = bitcast %"union.KV<key, key, 7>::Val"* %5 to %class.KV.7**
  %7 = load %class.KV.7*, %class.KV.7** %4, align 8
  store %class.KV.7* %7, %class.KV.7** %6, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone sspstrong uwtable
define linkonce_odr void @_ZN2KVI3keyS0_Lj8EE3KeyC2EPKS0_(%"union.KV<key, key, 8>::Key"*, %class.key*) unnamed_addr #0 comdat align 2 {
  %3 = alloca %"union.KV<key, key, 8>::Key"*, align 8
  %4 = alloca %class.key*, align 8
  store %"union.KV<key, key, 8>::Key"* %0, %"union.KV<key, key, 8>::Key"** %3, align 8
  store %class.key* %1, %class.key** %4, align 8
  %5 = load %"union.KV<key, key, 8>::Key"*, %"union.KV<key, key, 8>::Key"** %3, align 8
  %6 = bitcast %"union.KV<key, key, 8>::Key"* %5 to %class.key**
  %7 = load %class.key*, %class.key** %4, align 8
  store %class.key* %7, %class.key** %6, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone sspstrong uwtable
define linkonce_odr void @_ZN2KVI3keyS0_Lj8EE3ValC2EPKS0_(%"union.KV<key, key, 8>::Val"*, %class.key*) unnamed_addr #0 comdat align 2 {
  %3 = alloca %"union.KV<key, key, 8>::Val"*, align 8
  %4 = alloca %class.key*, align 8
  store %"union.KV<key, key, 8>::Val"* %0, %"union.KV<key, key, 8>::Val"** %3, align 8
  store %class.key* %1, %class.key** %4, align 8
  %5 = load %"union.KV<key, key, 8>::Val"*, %"union.KV<key, key, 8>::Val"** %3, align 8
  %6 = bitcast %"union.KV<key, key, 8>::Val"* %5 to %class.key**
  %7 = load %class.key*, %class.key** %4, align 8
  store %class.key* %7, %class.key** %6, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone sspstrong uwtable
define linkonce_odr void @_ZN2KVI3keyS0_Lj6EE3KeyC2Em(%"union.KV<key, key, 6>::Key"*, i64) unnamed_addr #0 comdat align 2 {
  %3 = alloca %"union.KV<key, key, 6>::Key"*, align 8
  %4 = alloca i64, align 8
  store %"union.KV<key, key, 6>::Key"* %0, %"union.KV<key, key, 6>::Key"** %3, align 8
  store i64 %1, i64* %4, align 8
  %5 = load %"union.KV<key, key, 6>::Key"*, %"union.KV<key, key, 6>::Key"** %3, align 8
  %6 = bitcast %"union.KV<key, key, 6>::Key"* %5 to i64*
  %7 = load i64, i64* %4, align 8
  store i64 %7, i64* %6, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone sspstrong uwtable
define linkonce_odr void @_ZN2KVI3keyS0_Lj6EE3ValC2EPKS_IS0_S0_Lj7EE(%"union.KV<key, key, 6>::Val"*, %class.KV.6*) unnamed_addr #0 comdat align 2 {
  %3 = alloca %"union.KV<key, key, 6>::Val"*, align 8
  %4 = alloca %class.KV.6*, align 8
  store %"union.KV<key, key, 6>::Val"* %0, %"union.KV<key, key, 6>::Val"** %3, align 8
  store %class.KV.6* %1, %class.KV.6** %4, align 8
  %5 = load %"union.KV<key, key, 6>::Val"*, %"union.KV<key, key, 6>::Val"** %3, align 8
  %6 = bitcast %"union.KV<key, key, 6>::Val"* %5 to %class.KV.6**
  %7 = load %class.KV.6*, %class.KV.6** %4, align 8
  store %class.KV.6* %7, %class.KV.6** %6, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone sspstrong uwtable
define linkonce_odr void @_ZN2KVI3keyS0_Lj7EE3KeyC2EPKS0_(%"union.KV<key, key, 7>::Key"*, %class.key*) unnamed_addr #0 comdat align 2 {
  %3 = alloca %"union.KV<key, key, 7>::Key"*, align 8
  %4 = alloca %class.key*, align 8
  store %"union.KV<key, key, 7>::Key"* %0, %"union.KV<key, key, 7>::Key"** %3, align 8
  store %class.key* %1, %class.key** %4, align 8
  %5 = load %"union.KV<key, key, 7>::Key"*, %"union.KV<key, key, 7>::Key"** %3, align 8
  %6 = bitcast %"union.KV<key, key, 7>::Key"* %5 to %class.key**
  %7 = load %class.key*, %class.key** %4, align 8
  store %class.key* %7, %class.key** %6, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone sspstrong uwtable
define linkonce_odr void @_ZN2KVI3keyS0_Lj7EE3ValC2EPKS0_(%"union.KV<key, key, 7>::Val"*, %class.key*) unnamed_addr #0 comdat align 2 {
  %3 = alloca %"union.KV<key, key, 7>::Val"*, align 8
  %4 = alloca %class.key*, align 8
  store %"union.KV<key, key, 7>::Val"* %0, %"union.KV<key, key, 7>::Val"** %3, align 8
  store %class.key* %1, %class.key** %4, align 8
  %5 = load %"union.KV<key, key, 7>::Val"*, %"union.KV<key, key, 7>::Val"** %3, align 8
  %6 = bitcast %"union.KV<key, key, 7>::Val"* %5 to %class.key**
  %7 = load %class.key*, %class.key** %4, align 8
  store %class.key* %7, %class.key** %6, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone sspstrong uwtable
define linkonce_odr void @_ZN2KVI3keyS0_Lj5EE3KeyC2Em(%"union.KV<key, key, 5>::Key"*, i64) unnamed_addr #0 comdat align 2 {
  %3 = alloca %"union.KV<key, key, 5>::Key"*, align 8
  %4 = alloca i64, align 8
  store %"union.KV<key, key, 5>::Key"* %0, %"union.KV<key, key, 5>::Key"** %3, align 8
  store i64 %1, i64* %4, align 8
  %5 = load %"union.KV<key, key, 5>::Key"*, %"union.KV<key, key, 5>::Key"** %3, align 8
  %6 = bitcast %"union.KV<key, key, 5>::Key"* %5 to i64*
  %7 = load i64, i64* %4, align 8
  store i64 %7, i64* %6, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone sspstrong uwtable
define linkonce_odr void @_ZN2KVI3keyS0_Lj5EE3ValC2EPKS_IS0_S0_Lj6EE(%"union.KV<key, key, 5>::Val"*, %class.KV.5*) unnamed_addr #0 comdat align 2 {
  %3 = alloca %"union.KV<key, key, 5>::Val"*, align 8
  %4 = alloca %class.KV.5*, align 8
  store %"union.KV<key, key, 5>::Val"* %0, %"union.KV<key, key, 5>::Val"** %3, align 8
  store %class.KV.5* %1, %class.KV.5** %4, align 8
  %5 = load %"union.KV<key, key, 5>::Val"*, %"union.KV<key, key, 5>::Val"** %3, align 8
  %6 = bitcast %"union.KV<key, key, 5>::Val"* %5 to %class.KV.5**
  %7 = load %class.KV.5*, %class.KV.5** %4, align 8
  store %class.KV.5* %7, %class.KV.5** %6, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone sspstrong uwtable
define linkonce_odr void @_ZN2KVI3keyS0_Lj6EE3KeyC2EPKS0_(%"union.KV<key, key, 6>::Key"*, %class.key*) unnamed_addr #0 comdat align 2 {
  %3 = alloca %"union.KV<key, key, 6>::Key"*, align 8
  %4 = alloca %class.key*, align 8
  store %"union.KV<key, key, 6>::Key"* %0, %"union.KV<key, key, 6>::Key"** %3, align 8
  store %class.key* %1, %class.key** %4, align 8
  %5 = load %"union.KV<key, key, 6>::Key"*, %"union.KV<key, key, 6>::Key"** %3, align 8
  %6 = bitcast %"union.KV<key, key, 6>::Key"* %5 to %class.key**
  %7 = load %class.key*, %class.key** %4, align 8
  store %class.key* %7, %class.key** %6, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone sspstrong uwtable
define linkonce_odr void @_ZN2KVI3keyS0_Lj6EE3ValC2EPKS0_(%"union.KV<key, key, 6>::Val"*, %class.key*) unnamed_addr #0 comdat align 2 {
  %3 = alloca %"union.KV<key, key, 6>::Val"*, align 8
  %4 = alloca %class.key*, align 8
  store %"union.KV<key, key, 6>::Val"* %0, %"union.KV<key, key, 6>::Val"** %3, align 8
  store %class.key* %1, %class.key** %4, align 8
  %5 = load %"union.KV<key, key, 6>::Val"*, %"union.KV<key, key, 6>::Val"** %3, align 8
  %6 = bitcast %"union.KV<key, key, 6>::Val"* %5 to %class.key**
  %7 = load %class.key*, %class.key** %4, align 8
  store %class.key* %7, %class.key** %6, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone sspstrong uwtable
define linkonce_odr void @_ZN2KVI3keyS0_Lj4EE3KeyC2Em(%"union.KV<key, key, 4>::Key"*, i64) unnamed_addr #0 comdat align 2 {
  %3 = alloca %"union.KV<key, key, 4>::Key"*, align 8
  %4 = alloca i64, align 8
  store %"union.KV<key, key, 4>::Key"* %0, %"union.KV<key, key, 4>::Key"** %3, align 8
  store i64 %1, i64* %4, align 8
  %5 = load %"union.KV<key, key, 4>::Key"*, %"union.KV<key, key, 4>::Key"** %3, align 8
  %6 = bitcast %"union.KV<key, key, 4>::Key"* %5 to i64*
  %7 = load i64, i64* %4, align 8
  store i64 %7, i64* %6, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone sspstrong uwtable
define linkonce_odr void @_ZN2KVI3keyS0_Lj4EE3ValC2EPKS_IS0_S0_Lj5EE(%"union.KV<key, key, 4>::Val"*, %class.KV.4*) unnamed_addr #0 comdat align 2 {
  %3 = alloca %"union.KV<key, key, 4>::Val"*, align 8
  %4 = alloca %class.KV.4*, align 8
  store %"union.KV<key, key, 4>::Val"* %0, %"union.KV<key, key, 4>::Val"** %3, align 8
  store %class.KV.4* %1, %class.KV.4** %4, align 8
  %5 = load %"union.KV<key, key, 4>::Val"*, %"union.KV<key, key, 4>::Val"** %3, align 8
  %6 = bitcast %"union.KV<key, key, 4>::Val"* %5 to %class.KV.4**
  %7 = load %class.KV.4*, %class.KV.4** %4, align 8
  store %class.KV.4* %7, %class.KV.4** %6, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone sspstrong uwtable
define linkonce_odr void @_ZN2KVI3keyS0_Lj5EE3KeyC2EPKS0_(%"union.KV<key, key, 5>::Key"*, %class.key*) unnamed_addr #0 comdat align 2 {
  %3 = alloca %"union.KV<key, key, 5>::Key"*, align 8
  %4 = alloca %class.key*, align 8
  store %"union.KV<key, key, 5>::Key"* %0, %"union.KV<key, key, 5>::Key"** %3, align 8
  store %class.key* %1, %class.key** %4, align 8
  %5 = load %"union.KV<key, key, 5>::Key"*, %"union.KV<key, key, 5>::Key"** %3, align 8
  %6 = bitcast %"union.KV<key, key, 5>::Key"* %5 to %class.key**
  %7 = load %class.key*, %class.key** %4, align 8
  store %class.key* %7, %class.key** %6, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone sspstrong uwtable
define linkonce_odr void @_ZN2KVI3keyS0_Lj5EE3ValC2EPKS0_(%"union.KV<key, key, 5>::Val"*, %class.key*) unnamed_addr #0 comdat align 2 {
  %3 = alloca %"union.KV<key, key, 5>::Val"*, align 8
  %4 = alloca %class.key*, align 8
  store %"union.KV<key, key, 5>::Val"* %0, %"union.KV<key, key, 5>::Val"** %3, align 8
  store %class.key* %1, %class.key** %4, align 8
  %5 = load %"union.KV<key, key, 5>::Val"*, %"union.KV<key, key, 5>::Val"** %3, align 8
  %6 = bitcast %"union.KV<key, key, 5>::Val"* %5 to %class.key**
  %7 = load %class.key*, %class.key** %4, align 8
  store %class.key* %7, %class.key** %6, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone sspstrong uwtable
define linkonce_odr void @_ZN2KVI3keyS0_Lj3EE3KeyC2Em(%"union.KV<key, key, 3>::Key"*, i64) unnamed_addr #0 comdat align 2 {
  %3 = alloca %"union.KV<key, key, 3>::Key"*, align 8
  %4 = alloca i64, align 8
  store %"union.KV<key, key, 3>::Key"* %0, %"union.KV<key, key, 3>::Key"** %3, align 8
  store i64 %1, i64* %4, align 8
  %5 = load %"union.KV<key, key, 3>::Key"*, %"union.KV<key, key, 3>::Key"** %3, align 8
  %6 = bitcast %"union.KV<key, key, 3>::Key"* %5 to i64*
  %7 = load i64, i64* %4, align 8
  store i64 %7, i64* %6, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone sspstrong uwtable
define linkonce_odr void @_ZN2KVI3keyS0_Lj3EE3ValC2EPKS_IS0_S0_Lj4EE(%"union.KV<key, key, 3>::Val"*, %class.KV.3*) unnamed_addr #0 comdat align 2 {
  %3 = alloca %"union.KV<key, key, 3>::Val"*, align 8
  %4 = alloca %class.KV.3*, align 8
  store %"union.KV<key, key, 3>::Val"* %0, %"union.KV<key, key, 3>::Val"** %3, align 8
  store %class.KV.3* %1, %class.KV.3** %4, align 8
  %5 = load %"union.KV<key, key, 3>::Val"*, %"union.KV<key, key, 3>::Val"** %3, align 8
  %6 = bitcast %"union.KV<key, key, 3>::Val"* %5 to %class.KV.3**
  %7 = load %class.KV.3*, %class.KV.3** %4, align 8
  store %class.KV.3* %7, %class.KV.3** %6, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone sspstrong uwtable
define linkonce_odr void @_ZN2KVI3keyS0_Lj4EE3KeyC2EPKS0_(%"union.KV<key, key, 4>::Key"*, %class.key*) unnamed_addr #0 comdat align 2 {
  %3 = alloca %"union.KV<key, key, 4>::Key"*, align 8
  %4 = alloca %class.key*, align 8
  store %"union.KV<key, key, 4>::Key"* %0, %"union.KV<key, key, 4>::Key"** %3, align 8
  store %class.key* %1, %class.key** %4, align 8
  %5 = load %"union.KV<key, key, 4>::Key"*, %"union.KV<key, key, 4>::Key"** %3, align 8
  %6 = bitcast %"union.KV<key, key, 4>::Key"* %5 to %class.key**
  %7 = load %class.key*, %class.key** %4, align 8
  store %class.key* %7, %class.key** %6, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone sspstrong uwtable
define linkonce_odr void @_ZN2KVI3keyS0_Lj4EE3ValC2EPKS0_(%"union.KV<key, key, 4>::Val"*, %class.key*) unnamed_addr #0 comdat align 2 {
  %3 = alloca %"union.KV<key, key, 4>::Val"*, align 8
  %4 = alloca %class.key*, align 8
  store %"union.KV<key, key, 4>::Val"* %0, %"union.KV<key, key, 4>::Val"** %3, align 8
  store %class.key* %1, %class.key** %4, align 8
  %5 = load %"union.KV<key, key, 4>::Val"*, %"union.KV<key, key, 4>::Val"** %3, align 8
  %6 = bitcast %"union.KV<key, key, 4>::Val"* %5 to %class.key**
  %7 = load %class.key*, %class.key** %4, align 8
  store %class.key* %7, %class.key** %6, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone sspstrong uwtable
define linkonce_odr void @_ZN2KVI3keyS0_Lj2EE3KeyC2Em(%"union.KV<key, key, 2>::Key"*, i64) unnamed_addr #0 comdat align 2 {
  %3 = alloca %"union.KV<key, key, 2>::Key"*, align 8
  %4 = alloca i64, align 8
  store %"union.KV<key, key, 2>::Key"* %0, %"union.KV<key, key, 2>::Key"** %3, align 8
  store i64 %1, i64* %4, align 8
  %5 = load %"union.KV<key, key, 2>::Key"*, %"union.KV<key, key, 2>::Key"** %3, align 8
  %6 = bitcast %"union.KV<key, key, 2>::Key"* %5 to i64*
  %7 = load i64, i64* %4, align 8
  store i64 %7, i64* %6, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone sspstrong uwtable
define linkonce_odr void @_ZN2KVI3keyS0_Lj2EE3ValC2EPKS_IS0_S0_Lj3EE(%"union.KV<key, key, 2>::Val"*, %class.KV.2*) unnamed_addr #0 comdat align 2 {
  %3 = alloca %"union.KV<key, key, 2>::Val"*, align 8
  %4 = alloca %class.KV.2*, align 8
  store %"union.KV<key, key, 2>::Val"* %0, %"union.KV<key, key, 2>::Val"** %3, align 8
  store %class.KV.2* %1, %class.KV.2** %4, align 8
  %5 = load %"union.KV<key, key, 2>::Val"*, %"union.KV<key, key, 2>::Val"** %3, align 8
  %6 = bitcast %"union.KV<key, key, 2>::Val"* %5 to %class.KV.2**
  %7 = load %class.KV.2*, %class.KV.2** %4, align 8
  store %class.KV.2* %7, %class.KV.2** %6, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone sspstrong uwtable
define linkonce_odr void @_ZN2KVI3keyS0_Lj3EE3KeyC2EPKS0_(%"union.KV<key, key, 3>::Key"*, %class.key*) unnamed_addr #0 comdat align 2 {
  %3 = alloca %"union.KV<key, key, 3>::Key"*, align 8
  %4 = alloca %class.key*, align 8
  store %"union.KV<key, key, 3>::Key"* %0, %"union.KV<key, key, 3>::Key"** %3, align 8
  store %class.key* %1, %class.key** %4, align 8
  %5 = load %"union.KV<key, key, 3>::Key"*, %"union.KV<key, key, 3>::Key"** %3, align 8
  %6 = bitcast %"union.KV<key, key, 3>::Key"* %5 to %class.key**
  %7 = load %class.key*, %class.key** %4, align 8
  store %class.key* %7, %class.key** %6, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone sspstrong uwtable
define linkonce_odr void @_ZN2KVI3keyS0_Lj3EE3ValC2EPKS0_(%"union.KV<key, key, 3>::Val"*, %class.key*) unnamed_addr #0 comdat align 2 {
  %3 = alloca %"union.KV<key, key, 3>::Val"*, align 8
  %4 = alloca %class.key*, align 8
  store %"union.KV<key, key, 3>::Val"* %0, %"union.KV<key, key, 3>::Val"** %3, align 8
  store %class.key* %1, %class.key** %4, align 8
  %5 = load %"union.KV<key, key, 3>::Val"*, %"union.KV<key, key, 3>::Val"** %3, align 8
  %6 = bitcast %"union.KV<key, key, 3>::Val"* %5 to %class.key**
  %7 = load %class.key*, %class.key** %4, align 8
  store %class.key* %7, %class.key** %6, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone sspstrong uwtable
define linkonce_odr void @_ZN2KVI3keyS0_Lj1EE3KeyC2Em(%"union.KV<key, key, 1>::Key"*, i64) unnamed_addr #0 comdat align 2 {
  %3 = alloca %"union.KV<key, key, 1>::Key"*, align 8
  %4 = alloca i64, align 8
  store %"union.KV<key, key, 1>::Key"* %0, %"union.KV<key, key, 1>::Key"** %3, align 8
  store i64 %1, i64* %4, align 8
  %5 = load %"union.KV<key, key, 1>::Key"*, %"union.KV<key, key, 1>::Key"** %3, align 8
  %6 = bitcast %"union.KV<key, key, 1>::Key"* %5 to i64*
  %7 = load i64, i64* %4, align 8
  store i64 %7, i64* %6, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone sspstrong uwtable
define linkonce_odr void @_ZN2KVI3keyS0_Lj1EE3ValC2EPKS_IS0_S0_Lj2EE(%"union.KV<key, key, 1>::Val"*, %class.KV.1*) unnamed_addr #0 comdat align 2 {
  %3 = alloca %"union.KV<key, key, 1>::Val"*, align 8
  %4 = alloca %class.KV.1*, align 8
  store %"union.KV<key, key, 1>::Val"* %0, %"union.KV<key, key, 1>::Val"** %3, align 8
  store %class.KV.1* %1, %class.KV.1** %4, align 8
  %5 = load %"union.KV<key, key, 1>::Val"*, %"union.KV<key, key, 1>::Val"** %3, align 8
  %6 = bitcast %"union.KV<key, key, 1>::Val"* %5 to %class.KV.1**
  %7 = load %class.KV.1*, %class.KV.1** %4, align 8
  store %class.KV.1* %7, %class.KV.1** %6, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone sspstrong uwtable
define linkonce_odr void @_ZN2KVI3keyS0_Lj2EE3KeyC2EPKS0_(%"union.KV<key, key, 2>::Key"*, %class.key*) unnamed_addr #0 comdat align 2 {
  %3 = alloca %"union.KV<key, key, 2>::Key"*, align 8
  %4 = alloca %class.key*, align 8
  store %"union.KV<key, key, 2>::Key"* %0, %"union.KV<key, key, 2>::Key"** %3, align 8
  store %class.key* %1, %class.key** %4, align 8
  %5 = load %"union.KV<key, key, 2>::Key"*, %"union.KV<key, key, 2>::Key"** %3, align 8
  %6 = bitcast %"union.KV<key, key, 2>::Key"* %5 to %class.key**
  %7 = load %class.key*, %class.key** %4, align 8
  store %class.key* %7, %class.key** %6, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone sspstrong uwtable
define linkonce_odr void @_ZN2KVI3keyS0_Lj2EE3ValC2EPKS0_(%"union.KV<key, key, 2>::Val"*, %class.key*) unnamed_addr #0 comdat align 2 {
  %3 = alloca %"union.KV<key, key, 2>::Val"*, align 8
  %4 = alloca %class.key*, align 8
  store %"union.KV<key, key, 2>::Val"* %0, %"union.KV<key, key, 2>::Val"** %3, align 8
  store %class.key* %1, %class.key** %4, align 8
  %5 = load %"union.KV<key, key, 2>::Val"*, %"union.KV<key, key, 2>::Val"** %3, align 8
  %6 = bitcast %"union.KV<key, key, 2>::Val"* %5 to %class.key**
  %7 = load %class.key*, %class.key** %4, align 8
  store %class.key* %7, %class.key** %6, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone sspstrong uwtable
define linkonce_odr void @_ZN2KVI3keyS0_Lj0EE3ValC2EPKS_IS0_S0_Lj1EE(%"union.KV<key, key, 0>::Val"*, %class.KV.0*) unnamed_addr #0 comdat align 2 {
  %3 = alloca %"union.KV<key, key, 0>::Val"*, align 8
  %4 = alloca %class.KV.0*, align 8
  store %"union.KV<key, key, 0>::Val"* %0, %"union.KV<key, key, 0>::Val"** %3, align 8
  store %class.KV.0* %1, %class.KV.0** %4, align 8
  %5 = load %"union.KV<key, key, 0>::Val"*, %"union.KV<key, key, 0>::Val"** %3, align 8
  %6 = bitcast %"union.KV<key, key, 0>::Val"* %5 to %class.KV.0**
  %7 = load %class.KV.0*, %class.KV.0** %4, align 8
  store %class.KV.0* %7, %class.KV.0** %6, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone sspstrong uwtable
define linkonce_odr void @_ZN2KVI3keyS0_Lj1EE3KeyC2EPKS0_(%"union.KV<key, key, 1>::Key"*, %class.key*) unnamed_addr #0 comdat align 2 {
  %3 = alloca %"union.KV<key, key, 1>::Key"*, align 8
  %4 = alloca %class.key*, align 8
  store %"union.KV<key, key, 1>::Key"* %0, %"union.KV<key, key, 1>::Key"** %3, align 8
  store %class.key* %1, %class.key** %4, align 8
  %5 = load %"union.KV<key, key, 1>::Key"*, %"union.KV<key, key, 1>::Key"** %3, align 8
  %6 = bitcast %"union.KV<key, key, 1>::Key"* %5 to %class.key**
  %7 = load %class.key*, %class.key** %4, align 8
  store %class.key* %7, %class.key** %6, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone sspstrong uwtable
define linkonce_odr void @_ZN2KVI3keyS0_Lj1EE3ValC2EPKS0_(%"union.KV<key, key, 1>::Val"*, %class.key*) unnamed_addr #0 comdat align 2 {
  %3 = alloca %"union.KV<key, key, 1>::Val"*, align 8
  %4 = alloca %class.key*, align 8
  store %"union.KV<key, key, 1>::Val"* %0, %"union.KV<key, key, 1>::Val"** %3, align 8
  store %class.key* %1, %class.key** %4, align 8
  %5 = load %"union.KV<key, key, 1>::Val"*, %"union.KV<key, key, 1>::Val"** %3, align 8
  %6 = bitcast %"union.KV<key, key, 1>::Val"* %5 to %class.key**
  %7 = load %class.key*, %class.key** %4, align 8
  store %class.key* %7, %class.key** %6, align 8
  ret void
}

; Function Attrs: nounwind readnone speculatable
declare i64 @llvm.ctpop.i64(i64) #7

; Function Attrs: noinline optnone sspstrong uwtable
define linkonce_odr %class.KV.0* @_ZN2KVI3keyS0_Lj1EE11update_nodeEPKS1_jjRS2_(%class.KV.0*, i32, i32, %class.KV.0* dereferenceable(16)) #2 comdat align 2 {
  %5 = alloca %class.KV.0*, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca %class.KV.0*, align 8
  %9 = alloca %class.KV.0*, align 8
  store %class.KV.0* %0, %class.KV.0** %5, align 8
  store i32 %1, i32* %6, align 4
  store i32 %2, i32* %7, align 4
  store %class.KV.0* %3, %class.KV.0** %8, align 8
  %10 = load i32, i32* %6, align 4
  %11 = zext i32 %10 to i64
  %12 = mul i64 %11, 16
  %13 = call noalias i8* @malloc(i64 %12) #8
  %14 = bitcast i8* %13 to %class.KV.0*
  store %class.KV.0* %14, %class.KV.0** %9, align 8
  %15 = load %class.KV.0*, %class.KV.0** %9, align 8
  %16 = bitcast %class.KV.0* %15 to i8*
  %17 = load %class.KV.0*, %class.KV.0** %5, align 8
  %18 = bitcast %class.KV.0* %17 to i8*
  %19 = load i32, i32* %6, align 4
  %20 = zext i32 %19 to i64
  %21 = mul i64 %20, 16
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %16, i8* %18, i64 %21, i32 8, i1 false)
  %22 = load %class.KV.0*, %class.KV.0** %9, align 8
  %23 = load i32, i32* %7, align 4
  %24 = zext i32 %23 to i64
  %25 = getelementptr inbounds %class.KV.0, %class.KV.0* %22, i64 %24
  %26 = bitcast %class.KV.0* %25 to i8*
  %27 = bitcast i8* %26 to %class.KV.0*
  %28 = load %class.KV.0*, %class.KV.0** %8, align 8
  call void @_ZN2KVI3keyS0_Lj1EEC2ERKS1_(%class.KV.0* %27, %class.KV.0* dereferenceable(16) %28)
  %29 = load %class.KV.0*, %class.KV.0** %9, align 8
  ret %class.KV.0* %29
}

; Function Attrs: noinline optnone sspstrong uwtable
define linkonce_odr void @_ZN2KVI3keyS0_Lj1EE12insert_innerERKS1_mPKS0_S5_Pm(%class.KV.0* noalias sret, %class.KV.0* dereferenceable(16), i64, %class.key*, %class.key*, i64*) #2 comdat align 2 {
  %7 = alloca %class.KV.0*, align 8
  %8 = alloca i64, align 8
  %9 = alloca %class.key*, align 8
  %10 = alloca %class.key*, align 8
  %11 = alloca i64*, align 8
  %12 = alloca %class.KV.1*, align 8
  %13 = alloca i64, align 8
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  %16 = alloca i32, align 4
  %17 = alloca i8, align 1
  %18 = alloca %class.KV.1*, align 8
  %19 = alloca %class.KV.1, align 8
  %20 = alloca %class.KV.1, align 8
  %21 = alloca %class.KV.1*, align 8
  %22 = alloca %class.KV.1, align 8
  %23 = alloca %class.KV.1*, align 8
  %24 = alloca %class.KV.1*, align 8
  store %class.KV.0* %1, %class.KV.0** %7, align 8
  store i64 %2, i64* %8, align 8
  store %class.key* %3, %class.key** %9, align 8
  store %class.key* %4, %class.key** %10, align 8
  store i64* %5, i64** %11, align 8
  %25 = load %class.KV.0*, %class.KV.0** %7, align 8
  %26 = getelementptr inbounds %class.KV.0, %class.KV.0* %25, i32 0, i32 1
  %27 = bitcast %"union.KV<key, key, 1>::Val"* %26 to %class.KV.1**
  %28 = load %class.KV.1*, %class.KV.1** %27, align 8
  store %class.KV.1* %28, %class.KV.1** %12, align 8
  %29 = load %class.KV.0*, %class.KV.0** %7, align 8
  %30 = getelementptr inbounds %class.KV.0, %class.KV.0* %29, i32 0, i32 0
  %31 = bitcast %"union.KV<key, key, 1>::Key"* %30 to i64*
  %32 = load i64, i64* %31, align 8
  %33 = lshr i64 %32, 1
  store i64 %33, i64* %13, align 8
  %34 = load i64, i64* %8, align 8
  %35 = and i64 %34, 63
  %36 = urem i64 %35, 63
  %37 = trunc i64 %36 to i32
  store i32 %37, i32* %14, align 4
  %38 = load i64, i64* %13, align 8
  %39 = call i64 @llvm.ctpop.i64(i64 %38)
  %40 = trunc i64 %39 to i32
  store i32 %40, i32* %15, align 4
  %41 = load i64, i64* %13, align 8
  %42 = shl i64 %41, 1
  %43 = load i32, i32* %14, align 4
  %44 = sub i32 63, %43
  %45 = zext i32 %44 to i64
  %46 = shl i64 %42, %45
  %47 = call i64 @llvm.ctpop.i64(i64 %46)
  %48 = trunc i64 %47 to i32
  store i32 %48, i32* %16, align 4
  %49 = load i64, i64* %13, align 8
  %50 = load i32, i32* %14, align 4
  %51 = zext i32 %50 to i64
  %52 = shl i64 1, %51
  %53 = and i64 %49, %52
  %54 = icmp ne i64 %53, 0
  %55 = zext i1 %54 to i8
  store i8 %55, i8* %17, align 1
  %56 = load i8, i8* %17, align 1
  %57 = trunc i8 %56 to i1
  br i1 %57, label %58, label %149

; <label>:58:                                     ; preds = %6
  %59 = load %class.KV.1*, %class.KV.1** %12, align 8
  %60 = load i32, i32* %16, align 4
  %61 = zext i32 %60 to i64
  %62 = getelementptr inbounds %class.KV.1, %class.KV.1* %59, i64 %61
  %63 = getelementptr inbounds %class.KV.1, %class.KV.1* %62, i32 0, i32 0
  %64 = bitcast %"union.KV<key, key, 2>::Key"* %63 to i64*
  %65 = load i64, i64* %64, align 8
  %66 = and i64 %65, 1
  %67 = icmp eq i64 %66, 0
  br i1 %67, label %68, label %130

; <label>:68:                                     ; preds = %58
  %69 = load %class.KV.1*, %class.KV.1** %12, align 8
  %70 = load i32, i32* %16, align 4
  %71 = zext i32 %70 to i64
  %72 = getelementptr inbounds %class.KV.1, %class.KV.1* %69, i64 %71
  %73 = getelementptr inbounds %class.KV.1, %class.KV.1* %72, i32 0, i32 0
  %74 = bitcast %"union.KV<key, key, 2>::Key"* %73 to %class.key**
  %75 = load %class.key*, %class.key** %74, align 8
  %76 = load %class.key*, %class.key** %9, align 8
  %77 = call zeroext i1 @_ZNK3keyeqERKS_(%class.key* %75, %class.key* dereferenceable(8) %76)
  br i1 %77, label %78, label %90

; <label>:78:                                     ; preds = %68
  %79 = load %class.KV.1*, %class.KV.1** %12, align 8
  %80 = load i32, i32* %15, align 4
  %81 = load i32, i32* %16, align 4
  %82 = load %class.key*, %class.key** %9, align 8
  %83 = load %class.key*, %class.key** %10, align 8
  call void @_ZN2KVI3keyS0_Lj2EEC2EPKS0_S3_(%class.KV.1* %19, %class.key* %82, %class.key* %83)
  %84 = call %class.KV.1* @_ZN2KVI3keyS0_Lj2EE11update_nodeEPKS1_jjRS2_(%class.KV.1* %79, i32 %80, i32 %81, %class.KV.1* dereferenceable(16) %19)
  store %class.KV.1* %84, %class.KV.1** %18, align 8
  %85 = load %class.KV.0*, %class.KV.0** %7, align 8
  %86 = getelementptr inbounds %class.KV.0, %class.KV.0* %85, i32 0, i32 0
  %87 = bitcast %"union.KV<key, key, 1>::Key"* %86 to i64*
  %88 = load i64, i64* %87, align 8
  %89 = load %class.KV.1*, %class.KV.1** %18, align 8
  call void @_ZN2KVI3keyS0_Lj1EEC2EmPKS_IS0_S0_Lj2EE(%class.KV.0* %0, i64 %88, %class.KV.1* %89)
  br label %198

; <label>:90:                                     ; preds = %68
  %91 = load i64*, i64** %11, align 8
  %92 = load i64, i64* %91, align 8
  %93 = add i64 %92, 1
  store i64 %93, i64* %91, align 8
  %94 = load %class.KV.1*, %class.KV.1** %12, align 8
  %95 = load i32, i32* %16, align 4
  %96 = zext i32 %95 to i64
  %97 = getelementptr inbounds %class.KV.1, %class.KV.1* %94, i64 %96
  %98 = getelementptr inbounds %class.KV.1, %class.KV.1* %97, i32 0, i32 0
  %99 = bitcast %"union.KV<key, key, 2>::Key"* %98 to %class.key**
  %100 = load %class.key*, %class.key** %99, align 8
  %101 = call i64 @_ZNK3key4hashEv(%class.key* %100)
  %102 = lshr i64 %101, 16
  %103 = load %class.KV.1*, %class.KV.1** %12, align 8
  %104 = load i32, i32* %16, align 4
  %105 = zext i32 %104 to i64
  %106 = getelementptr inbounds %class.KV.1, %class.KV.1* %103, i64 %105
  %107 = getelementptr inbounds %class.KV.1, %class.KV.1* %106, i32 0, i32 0
  %108 = bitcast %"union.KV<key, key, 2>::Key"* %107 to %class.key**
  %109 = load %class.key*, %class.key** %108, align 8
  %110 = load %class.KV.1*, %class.KV.1** %12, align 8
  %111 = load i32, i32* %16, align 4
  %112 = zext i32 %111 to i64
  %113 = getelementptr inbounds %class.KV.1, %class.KV.1* %110, i64 %112
  %114 = getelementptr inbounds %class.KV.1, %class.KV.1* %113, i32 0, i32 1
  %115 = bitcast %"union.KV<key, key, 2>::Val"* %114 to %class.key**
  %116 = load %class.key*, %class.key** %115, align 8
  %117 = load i64, i64* %8, align 8
  %118 = lshr i64 %117, 6
  %119 = load %class.key*, %class.key** %9, align 8
  %120 = load %class.key*, %class.key** %10, align 8
  call void @_ZN2KVI3keyS0_Lj2EE14new_inner_nodeEmPKS0_S3_mS3_S3_(%class.KV.1* sret %20, i64 %102, %class.key* %109, %class.key* %116, i64 %118, %class.key* %119, %class.key* %120)
  %121 = load %class.KV.1*, %class.KV.1** %12, align 8
  %122 = load i32, i32* %15, align 4
  %123 = load i32, i32* %16, align 4
  %124 = call %class.KV.1* @_ZN2KVI3keyS0_Lj2EE11update_nodeEPKS1_jjRS2_(%class.KV.1* %121, i32 %122, i32 %123, %class.KV.1* dereferenceable(16) %20)
  store %class.KV.1* %124, %class.KV.1** %21, align 8
  %125 = load %class.KV.0*, %class.KV.0** %7, align 8
  %126 = getelementptr inbounds %class.KV.0, %class.KV.0* %125, i32 0, i32 0
  %127 = bitcast %"union.KV<key, key, 1>::Key"* %126 to i64*
  %128 = load i64, i64* %127, align 8
  %129 = load %class.KV.1*, %class.KV.1** %21, align 8
  call void @_ZN2KVI3keyS0_Lj1EEC2EmPKS_IS0_S0_Lj2EE(%class.KV.0* %0, i64 %128, %class.KV.1* %129)
  br label %198

; <label>:130:                                    ; preds = %58
  %131 = load %class.KV.1*, %class.KV.1** %12, align 8
  %132 = load i32, i32* %16, align 4
  %133 = zext i32 %132 to i64
  %134 = getelementptr inbounds %class.KV.1, %class.KV.1* %131, i64 %133
  %135 = load i64, i64* %8, align 8
  %136 = lshr i64 %135, 6
  %137 = load %class.key*, %class.key** %9, align 8
  %138 = load %class.key*, %class.key** %10, align 8
  %139 = load i64*, i64** %11, align 8
  call void @_ZN2KVI3keyS0_Lj2EE12insert_innerERKS1_mPKS0_S5_Pm(%class.KV.1* sret %22, %class.KV.1* dereferenceable(16) %134, i64 %136, %class.key* %137, %class.key* %138, i64* %139)
  %140 = load %class.KV.1*, %class.KV.1** %12, align 8
  %141 = load i32, i32* %15, align 4
  %142 = load i32, i32* %16, align 4
  %143 = call %class.KV.1* @_ZN2KVI3keyS0_Lj2EE11update_nodeEPKS1_jjRS2_(%class.KV.1* %140, i32 %141, i32 %142, %class.KV.1* dereferenceable(16) %22)
  store %class.KV.1* %143, %class.KV.1** %23, align 8
  %144 = load %class.KV.0*, %class.KV.0** %7, align 8
  %145 = getelementptr inbounds %class.KV.0, %class.KV.0* %144, i32 0, i32 0
  %146 = bitcast %"union.KV<key, key, 1>::Key"* %145 to i64*
  %147 = load i64, i64* %146, align 8
  %148 = load %class.KV.1*, %class.KV.1** %23, align 8
  call void @_ZN2KVI3keyS0_Lj1EEC2EmPKS_IS0_S0_Lj2EE(%class.KV.0* %0, i64 %147, %class.KV.1* %148)
  br label %198

; <label>:149:                                    ; preds = %6
  %150 = load i64*, i64** %11, align 8
  %151 = load i64, i64* %150, align 8
  %152 = add i64 %151, 1
  store i64 %152, i64* %150, align 8
  %153 = load i32, i32* %15, align 4
  %154 = add i32 %153, 1
  %155 = zext i32 %154 to i64
  %156 = mul i64 %155, 16
  %157 = call noalias i8* @malloc(i64 %156) #8
  %158 = bitcast i8* %157 to %class.KV.1*
  store %class.KV.1* %158, %class.KV.1** %24, align 8
  %159 = load %class.KV.1*, %class.KV.1** %24, align 8
  %160 = bitcast %class.KV.1* %159 to i8*
  %161 = load %class.KV.1*, %class.KV.1** %12, align 8
  %162 = bitcast %class.KV.1* %161 to i8*
  %163 = load i32, i32* %16, align 4
  %164 = zext i32 %163 to i64
  %165 = mul i64 %164, 16
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %160, i8* %162, i64 %165, i32 8, i1 false)
  %166 = load %class.KV.1*, %class.KV.1** %24, align 8
  %167 = load i32, i32* %16, align 4
  %168 = add i32 %167, 1
  %169 = zext i32 %168 to i64
  %170 = getelementptr inbounds %class.KV.1, %class.KV.1* %166, i64 %169
  %171 = bitcast %class.KV.1* %170 to i8*
  %172 = load %class.KV.1*, %class.KV.1** %12, align 8
  %173 = load i32, i32* %16, align 4
  %174 = zext i32 %173 to i64
  %175 = getelementptr inbounds %class.KV.1, %class.KV.1* %172, i64 %174
  %176 = bitcast %class.KV.1* %175 to i8*
  %177 = load i32, i32* %15, align 4
  %178 = load i32, i32* %16, align 4
  %179 = sub i32 %177, %178
  %180 = zext i32 %179 to i64
  %181 = mul i64 %180, 16
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %171, i8* %176, i64 %181, i32 8, i1 false)
  %182 = load %class.KV.1*, %class.KV.1** %24, align 8
  %183 = load i32, i32* %16, align 4
  %184 = zext i32 %183 to i64
  %185 = getelementptr inbounds %class.KV.1, %class.KV.1* %182, i64 %184
  %186 = bitcast %class.KV.1* %185 to i8*
  %187 = bitcast i8* %186 to %class.KV.1*
  %188 = load %class.key*, %class.key** %9, align 8
  %189 = load %class.key*, %class.key** %10, align 8
  call void @_ZN2KVI3keyS0_Lj2EEC2EPKS0_S3_(%class.KV.1* %187, %class.key* %188, %class.key* %189)
  %190 = load i64, i64* %13, align 8
  %191 = load i32, i32* %14, align 4
  %192 = zext i32 %191 to i64
  %193 = shl i64 1, %192
  %194 = or i64 %190, %193
  %195 = shl i64 %194, 1
  %196 = or i64 %195, 1
  %197 = load %class.KV.1*, %class.KV.1** %24, align 8
  call void @_ZN2KVI3keyS0_Lj1EEC2EmPKS_IS0_S0_Lj2EE(%class.KV.0* %0, i64 %196, %class.KV.1* %197)
  br label %198

; <label>:198:                                    ; preds = %149, %130, %90, %78
  ret void
}

; Function Attrs: noinline optnone sspstrong uwtable
define linkonce_odr %class.KV.1* @_ZN2KVI3keyS0_Lj2EE11update_nodeEPKS1_jjRS2_(%class.KV.1*, i32, i32, %class.KV.1* dereferenceable(16)) #2 comdat align 2 {
  %5 = alloca %class.KV.1*, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca %class.KV.1*, align 8
  %9 = alloca %class.KV.1*, align 8
  store %class.KV.1* %0, %class.KV.1** %5, align 8
  store i32 %1, i32* %6, align 4
  store i32 %2, i32* %7, align 4
  store %class.KV.1* %3, %class.KV.1** %8, align 8
  %10 = load i32, i32* %6, align 4
  %11 = zext i32 %10 to i64
  %12 = mul i64 %11, 16
  %13 = call noalias i8* @malloc(i64 %12) #8
  %14 = bitcast i8* %13 to %class.KV.1*
  store %class.KV.1* %14, %class.KV.1** %9, align 8
  %15 = load %class.KV.1*, %class.KV.1** %9, align 8
  %16 = bitcast %class.KV.1* %15 to i8*
  %17 = load %class.KV.1*, %class.KV.1** %5, align 8
  %18 = bitcast %class.KV.1* %17 to i8*
  %19 = load i32, i32* %6, align 4
  %20 = zext i32 %19 to i64
  %21 = mul i64 %20, 16
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %16, i8* %18, i64 %21, i32 8, i1 false)
  %22 = load %class.KV.1*, %class.KV.1** %9, align 8
  %23 = load i32, i32* %7, align 4
  %24 = zext i32 %23 to i64
  %25 = getelementptr inbounds %class.KV.1, %class.KV.1* %22, i64 %24
  %26 = bitcast %class.KV.1* %25 to i8*
  %27 = bitcast i8* %26 to %class.KV.1*
  %28 = load %class.KV.1*, %class.KV.1** %8, align 8
  call void @_ZN2KVI3keyS0_Lj2EEC2ERKS1_(%class.KV.1* %27, %class.KV.1* dereferenceable(16) %28)
  %29 = load %class.KV.1*, %class.KV.1** %9, align 8
  ret %class.KV.1* %29
}

; Function Attrs: noinline optnone sspstrong uwtable
define linkonce_odr void @_ZN2KVI3keyS0_Lj2EE12insert_innerERKS1_mPKS0_S5_Pm(%class.KV.1* noalias sret, %class.KV.1* dereferenceable(16), i64, %class.key*, %class.key*, i64*) #2 comdat align 2 {
  %7 = alloca %class.KV.1*, align 8
  %8 = alloca i64, align 8
  %9 = alloca %class.key*, align 8
  %10 = alloca %class.key*, align 8
  %11 = alloca i64*, align 8
  %12 = alloca %class.KV.2*, align 8
  %13 = alloca i64, align 8
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  %16 = alloca i32, align 4
  %17 = alloca i8, align 1
  %18 = alloca %class.KV.2*, align 8
  %19 = alloca %class.KV.2, align 8
  %20 = alloca %class.KV.2, align 8
  %21 = alloca %class.KV.2*, align 8
  %22 = alloca %class.KV.2, align 8
  %23 = alloca %class.KV.2*, align 8
  %24 = alloca %class.KV.2*, align 8
  store %class.KV.1* %1, %class.KV.1** %7, align 8
  store i64 %2, i64* %8, align 8
  store %class.key* %3, %class.key** %9, align 8
  store %class.key* %4, %class.key** %10, align 8
  store i64* %5, i64** %11, align 8
  %25 = load %class.KV.1*, %class.KV.1** %7, align 8
  %26 = getelementptr inbounds %class.KV.1, %class.KV.1* %25, i32 0, i32 1
  %27 = bitcast %"union.KV<key, key, 2>::Val"* %26 to %class.KV.2**
  %28 = load %class.KV.2*, %class.KV.2** %27, align 8
  store %class.KV.2* %28, %class.KV.2** %12, align 8
  %29 = load %class.KV.1*, %class.KV.1** %7, align 8
  %30 = getelementptr inbounds %class.KV.1, %class.KV.1* %29, i32 0, i32 0
  %31 = bitcast %"union.KV<key, key, 2>::Key"* %30 to i64*
  %32 = load i64, i64* %31, align 8
  %33 = lshr i64 %32, 1
  store i64 %33, i64* %13, align 8
  %34 = load i64, i64* %8, align 8
  %35 = and i64 %34, 63
  %36 = urem i64 %35, 63
  %37 = trunc i64 %36 to i32
  store i32 %37, i32* %14, align 4
  %38 = load i64, i64* %13, align 8
  %39 = call i64 @llvm.ctpop.i64(i64 %38)
  %40 = trunc i64 %39 to i32
  store i32 %40, i32* %15, align 4
  %41 = load i64, i64* %13, align 8
  %42 = shl i64 %41, 1
  %43 = load i32, i32* %14, align 4
  %44 = sub i32 63, %43
  %45 = zext i32 %44 to i64
  %46 = shl i64 %42, %45
  %47 = call i64 @llvm.ctpop.i64(i64 %46)
  %48 = trunc i64 %47 to i32
  store i32 %48, i32* %16, align 4
  %49 = load i64, i64* %13, align 8
  %50 = load i32, i32* %14, align 4
  %51 = zext i32 %50 to i64
  %52 = shl i64 1, %51
  %53 = and i64 %49, %52
  %54 = icmp ne i64 %53, 0
  %55 = zext i1 %54 to i8
  store i8 %55, i8* %17, align 1
  %56 = load i8, i8* %17, align 1
  %57 = trunc i8 %56 to i1
  br i1 %57, label %58, label %149

; <label>:58:                                     ; preds = %6
  %59 = load %class.KV.2*, %class.KV.2** %12, align 8
  %60 = load i32, i32* %16, align 4
  %61 = zext i32 %60 to i64
  %62 = getelementptr inbounds %class.KV.2, %class.KV.2* %59, i64 %61
  %63 = getelementptr inbounds %class.KV.2, %class.KV.2* %62, i32 0, i32 0
  %64 = bitcast %"union.KV<key, key, 3>::Key"* %63 to i64*
  %65 = load i64, i64* %64, align 8
  %66 = and i64 %65, 1
  %67 = icmp eq i64 %66, 0
  br i1 %67, label %68, label %130

; <label>:68:                                     ; preds = %58
  %69 = load %class.KV.2*, %class.KV.2** %12, align 8
  %70 = load i32, i32* %16, align 4
  %71 = zext i32 %70 to i64
  %72 = getelementptr inbounds %class.KV.2, %class.KV.2* %69, i64 %71
  %73 = getelementptr inbounds %class.KV.2, %class.KV.2* %72, i32 0, i32 0
  %74 = bitcast %"union.KV<key, key, 3>::Key"* %73 to %class.key**
  %75 = load %class.key*, %class.key** %74, align 8
  %76 = load %class.key*, %class.key** %9, align 8
  %77 = call zeroext i1 @_ZNK3keyeqERKS_(%class.key* %75, %class.key* dereferenceable(8) %76)
  br i1 %77, label %78, label %90

; <label>:78:                                     ; preds = %68
  %79 = load %class.KV.2*, %class.KV.2** %12, align 8
  %80 = load i32, i32* %15, align 4
  %81 = load i32, i32* %16, align 4
  %82 = load %class.key*, %class.key** %9, align 8
  %83 = load %class.key*, %class.key** %10, align 8
  call void @_ZN2KVI3keyS0_Lj3EEC2EPKS0_S3_(%class.KV.2* %19, %class.key* %82, %class.key* %83)
  %84 = call %class.KV.2* @_ZN2KVI3keyS0_Lj3EE11update_nodeEPKS1_jjRS2_(%class.KV.2* %79, i32 %80, i32 %81, %class.KV.2* dereferenceable(16) %19)
  store %class.KV.2* %84, %class.KV.2** %18, align 8
  %85 = load %class.KV.1*, %class.KV.1** %7, align 8
  %86 = getelementptr inbounds %class.KV.1, %class.KV.1* %85, i32 0, i32 0
  %87 = bitcast %"union.KV<key, key, 2>::Key"* %86 to i64*
  %88 = load i64, i64* %87, align 8
  %89 = load %class.KV.2*, %class.KV.2** %18, align 8
  call void @_ZN2KVI3keyS0_Lj2EEC2EmPKS_IS0_S0_Lj3EE(%class.KV.1* %0, i64 %88, %class.KV.2* %89)
  br label %198

; <label>:90:                                     ; preds = %68
  %91 = load i64*, i64** %11, align 8
  %92 = load i64, i64* %91, align 8
  %93 = add i64 %92, 1
  store i64 %93, i64* %91, align 8
  %94 = load %class.KV.2*, %class.KV.2** %12, align 8
  %95 = load i32, i32* %16, align 4
  %96 = zext i32 %95 to i64
  %97 = getelementptr inbounds %class.KV.2, %class.KV.2* %94, i64 %96
  %98 = getelementptr inbounds %class.KV.2, %class.KV.2* %97, i32 0, i32 0
  %99 = bitcast %"union.KV<key, key, 3>::Key"* %98 to %class.key**
  %100 = load %class.key*, %class.key** %99, align 8
  %101 = call i64 @_ZNK3key4hashEv(%class.key* %100)
  %102 = lshr i64 %101, 22
  %103 = load %class.KV.2*, %class.KV.2** %12, align 8
  %104 = load i32, i32* %16, align 4
  %105 = zext i32 %104 to i64
  %106 = getelementptr inbounds %class.KV.2, %class.KV.2* %103, i64 %105
  %107 = getelementptr inbounds %class.KV.2, %class.KV.2* %106, i32 0, i32 0
  %108 = bitcast %"union.KV<key, key, 3>::Key"* %107 to %class.key**
  %109 = load %class.key*, %class.key** %108, align 8
  %110 = load %class.KV.2*, %class.KV.2** %12, align 8
  %111 = load i32, i32* %16, align 4
  %112 = zext i32 %111 to i64
  %113 = getelementptr inbounds %class.KV.2, %class.KV.2* %110, i64 %112
  %114 = getelementptr inbounds %class.KV.2, %class.KV.2* %113, i32 0, i32 1
  %115 = bitcast %"union.KV<key, key, 3>::Val"* %114 to %class.key**
  %116 = load %class.key*, %class.key** %115, align 8
  %117 = load i64, i64* %8, align 8
  %118 = lshr i64 %117, 6
  %119 = load %class.key*, %class.key** %9, align 8
  %120 = load %class.key*, %class.key** %10, align 8
  call void @_ZN2KVI3keyS0_Lj3EE14new_inner_nodeEmPKS0_S3_mS3_S3_(%class.KV.2* sret %20, i64 %102, %class.key* %109, %class.key* %116, i64 %118, %class.key* %119, %class.key* %120)
  %121 = load %class.KV.2*, %class.KV.2** %12, align 8
  %122 = load i32, i32* %15, align 4
  %123 = load i32, i32* %16, align 4
  %124 = call %class.KV.2* @_ZN2KVI3keyS0_Lj3EE11update_nodeEPKS1_jjRS2_(%class.KV.2* %121, i32 %122, i32 %123, %class.KV.2* dereferenceable(16) %20)
  store %class.KV.2* %124, %class.KV.2** %21, align 8
  %125 = load %class.KV.1*, %class.KV.1** %7, align 8
  %126 = getelementptr inbounds %class.KV.1, %class.KV.1* %125, i32 0, i32 0
  %127 = bitcast %"union.KV<key, key, 2>::Key"* %126 to i64*
  %128 = load i64, i64* %127, align 8
  %129 = load %class.KV.2*, %class.KV.2** %21, align 8
  call void @_ZN2KVI3keyS0_Lj2EEC2EmPKS_IS0_S0_Lj3EE(%class.KV.1* %0, i64 %128, %class.KV.2* %129)
  br label %198

; <label>:130:                                    ; preds = %58
  %131 = load %class.KV.2*, %class.KV.2** %12, align 8
  %132 = load i32, i32* %16, align 4
  %133 = zext i32 %132 to i64
  %134 = getelementptr inbounds %class.KV.2, %class.KV.2* %131, i64 %133
  %135 = load i64, i64* %8, align 8
  %136 = lshr i64 %135, 6
  %137 = load %class.key*, %class.key** %9, align 8
  %138 = load %class.key*, %class.key** %10, align 8
  %139 = load i64*, i64** %11, align 8
  call void @_ZN2KVI3keyS0_Lj3EE12insert_innerERKS1_mPKS0_S5_Pm(%class.KV.2* sret %22, %class.KV.2* dereferenceable(16) %134, i64 %136, %class.key* %137, %class.key* %138, i64* %139)
  %140 = load %class.KV.2*, %class.KV.2** %12, align 8
  %141 = load i32, i32* %15, align 4
  %142 = load i32, i32* %16, align 4
  %143 = call %class.KV.2* @_ZN2KVI3keyS0_Lj3EE11update_nodeEPKS1_jjRS2_(%class.KV.2* %140, i32 %141, i32 %142, %class.KV.2* dereferenceable(16) %22)
  store %class.KV.2* %143, %class.KV.2** %23, align 8
  %144 = load %class.KV.1*, %class.KV.1** %7, align 8
  %145 = getelementptr inbounds %class.KV.1, %class.KV.1* %144, i32 0, i32 0
  %146 = bitcast %"union.KV<key, key, 2>::Key"* %145 to i64*
  %147 = load i64, i64* %146, align 8
  %148 = load %class.KV.2*, %class.KV.2** %23, align 8
  call void @_ZN2KVI3keyS0_Lj2EEC2EmPKS_IS0_S0_Lj3EE(%class.KV.1* %0, i64 %147, %class.KV.2* %148)
  br label %198

; <label>:149:                                    ; preds = %6
  %150 = load i64*, i64** %11, align 8
  %151 = load i64, i64* %150, align 8
  %152 = add i64 %151, 1
  store i64 %152, i64* %150, align 8
  %153 = load i32, i32* %15, align 4
  %154 = add i32 %153, 1
  %155 = zext i32 %154 to i64
  %156 = mul i64 %155, 16
  %157 = call noalias i8* @malloc(i64 %156) #8
  %158 = bitcast i8* %157 to %class.KV.2*
  store %class.KV.2* %158, %class.KV.2** %24, align 8
  %159 = load %class.KV.2*, %class.KV.2** %24, align 8
  %160 = bitcast %class.KV.2* %159 to i8*
  %161 = load %class.KV.2*, %class.KV.2** %12, align 8
  %162 = bitcast %class.KV.2* %161 to i8*
  %163 = load i32, i32* %16, align 4
  %164 = zext i32 %163 to i64
  %165 = mul i64 %164, 16
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %160, i8* %162, i64 %165, i32 8, i1 false)
  %166 = load %class.KV.2*, %class.KV.2** %24, align 8
  %167 = load i32, i32* %16, align 4
  %168 = add i32 %167, 1
  %169 = zext i32 %168 to i64
  %170 = getelementptr inbounds %class.KV.2, %class.KV.2* %166, i64 %169
  %171 = bitcast %class.KV.2* %170 to i8*
  %172 = load %class.KV.2*, %class.KV.2** %12, align 8
  %173 = load i32, i32* %16, align 4
  %174 = zext i32 %173 to i64
  %175 = getelementptr inbounds %class.KV.2, %class.KV.2* %172, i64 %174
  %176 = bitcast %class.KV.2* %175 to i8*
  %177 = load i32, i32* %15, align 4
  %178 = load i32, i32* %16, align 4
  %179 = sub i32 %177, %178
  %180 = zext i32 %179 to i64
  %181 = mul i64 %180, 16
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %171, i8* %176, i64 %181, i32 8, i1 false)
  %182 = load %class.KV.2*, %class.KV.2** %24, align 8
  %183 = load i32, i32* %16, align 4
  %184 = zext i32 %183 to i64
  %185 = getelementptr inbounds %class.KV.2, %class.KV.2* %182, i64 %184
  %186 = bitcast %class.KV.2* %185 to i8*
  %187 = bitcast i8* %186 to %class.KV.2*
  %188 = load %class.key*, %class.key** %9, align 8
  %189 = load %class.key*, %class.key** %10, align 8
  call void @_ZN2KVI3keyS0_Lj3EEC2EPKS0_S3_(%class.KV.2* %187, %class.key* %188, %class.key* %189)
  %190 = load i64, i64* %13, align 8
  %191 = load i32, i32* %14, align 4
  %192 = zext i32 %191 to i64
  %193 = shl i64 1, %192
  %194 = or i64 %190, %193
  %195 = shl i64 %194, 1
  %196 = or i64 %195, 1
  %197 = load %class.KV.2*, %class.KV.2** %24, align 8
  call void @_ZN2KVI3keyS0_Lj2EEC2EmPKS_IS0_S0_Lj3EE(%class.KV.1* %0, i64 %196, %class.KV.2* %197)
  br label %198

; <label>:198:                                    ; preds = %149, %130, %90, %78
  ret void
}

; Function Attrs: noinline optnone sspstrong uwtable
define linkonce_odr %class.KV.2* @_ZN2KVI3keyS0_Lj3EE11update_nodeEPKS1_jjRS2_(%class.KV.2*, i32, i32, %class.KV.2* dereferenceable(16)) #2 comdat align 2 {
  %5 = alloca %class.KV.2*, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca %class.KV.2*, align 8
  %9 = alloca %class.KV.2*, align 8
  store %class.KV.2* %0, %class.KV.2** %5, align 8
  store i32 %1, i32* %6, align 4
  store i32 %2, i32* %7, align 4
  store %class.KV.2* %3, %class.KV.2** %8, align 8
  %10 = load i32, i32* %6, align 4
  %11 = zext i32 %10 to i64
  %12 = mul i64 %11, 16
  %13 = call noalias i8* @malloc(i64 %12) #8
  %14 = bitcast i8* %13 to %class.KV.2*
  store %class.KV.2* %14, %class.KV.2** %9, align 8
  %15 = load %class.KV.2*, %class.KV.2** %9, align 8
  %16 = bitcast %class.KV.2* %15 to i8*
  %17 = load %class.KV.2*, %class.KV.2** %5, align 8
  %18 = bitcast %class.KV.2* %17 to i8*
  %19 = load i32, i32* %6, align 4
  %20 = zext i32 %19 to i64
  %21 = mul i64 %20, 16
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %16, i8* %18, i64 %21, i32 8, i1 false)
  %22 = load %class.KV.2*, %class.KV.2** %9, align 8
  %23 = load i32, i32* %7, align 4
  %24 = zext i32 %23 to i64
  %25 = getelementptr inbounds %class.KV.2, %class.KV.2* %22, i64 %24
  %26 = bitcast %class.KV.2* %25 to i8*
  %27 = bitcast i8* %26 to %class.KV.2*
  %28 = load %class.KV.2*, %class.KV.2** %8, align 8
  call void @_ZN2KVI3keyS0_Lj3EEC2ERKS1_(%class.KV.2* %27, %class.KV.2* dereferenceable(16) %28)
  %29 = load %class.KV.2*, %class.KV.2** %9, align 8
  ret %class.KV.2* %29
}

; Function Attrs: noinline optnone sspstrong uwtable
define linkonce_odr void @_ZN2KVI3keyS0_Lj3EE12insert_innerERKS1_mPKS0_S5_Pm(%class.KV.2* noalias sret, %class.KV.2* dereferenceable(16), i64, %class.key*, %class.key*, i64*) #2 comdat align 2 {
  %7 = alloca %class.KV.2*, align 8
  %8 = alloca i64, align 8
  %9 = alloca %class.key*, align 8
  %10 = alloca %class.key*, align 8
  %11 = alloca i64*, align 8
  %12 = alloca %class.KV.3*, align 8
  %13 = alloca i64, align 8
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  %16 = alloca i32, align 4
  %17 = alloca i8, align 1
  %18 = alloca %class.KV.3*, align 8
  %19 = alloca %class.KV.3, align 8
  %20 = alloca %class.KV.3, align 8
  %21 = alloca %class.KV.3*, align 8
  %22 = alloca %class.KV.3, align 8
  %23 = alloca %class.KV.3*, align 8
  %24 = alloca %class.KV.3*, align 8
  store %class.KV.2* %1, %class.KV.2** %7, align 8
  store i64 %2, i64* %8, align 8
  store %class.key* %3, %class.key** %9, align 8
  store %class.key* %4, %class.key** %10, align 8
  store i64* %5, i64** %11, align 8
  %25 = load %class.KV.2*, %class.KV.2** %7, align 8
  %26 = getelementptr inbounds %class.KV.2, %class.KV.2* %25, i32 0, i32 1
  %27 = bitcast %"union.KV<key, key, 3>::Val"* %26 to %class.KV.3**
  %28 = load %class.KV.3*, %class.KV.3** %27, align 8
  store %class.KV.3* %28, %class.KV.3** %12, align 8
  %29 = load %class.KV.2*, %class.KV.2** %7, align 8
  %30 = getelementptr inbounds %class.KV.2, %class.KV.2* %29, i32 0, i32 0
  %31 = bitcast %"union.KV<key, key, 3>::Key"* %30 to i64*
  %32 = load i64, i64* %31, align 8
  %33 = lshr i64 %32, 1
  store i64 %33, i64* %13, align 8
  %34 = load i64, i64* %8, align 8
  %35 = and i64 %34, 63
  %36 = urem i64 %35, 63
  %37 = trunc i64 %36 to i32
  store i32 %37, i32* %14, align 4
  %38 = load i64, i64* %13, align 8
  %39 = call i64 @llvm.ctpop.i64(i64 %38)
  %40 = trunc i64 %39 to i32
  store i32 %40, i32* %15, align 4
  %41 = load i64, i64* %13, align 8
  %42 = shl i64 %41, 1
  %43 = load i32, i32* %14, align 4
  %44 = sub i32 63, %43
  %45 = zext i32 %44 to i64
  %46 = shl i64 %42, %45
  %47 = call i64 @llvm.ctpop.i64(i64 %46)
  %48 = trunc i64 %47 to i32
  store i32 %48, i32* %16, align 4
  %49 = load i64, i64* %13, align 8
  %50 = load i32, i32* %14, align 4
  %51 = zext i32 %50 to i64
  %52 = shl i64 1, %51
  %53 = and i64 %49, %52
  %54 = icmp ne i64 %53, 0
  %55 = zext i1 %54 to i8
  store i8 %55, i8* %17, align 1
  %56 = load i8, i8* %17, align 1
  %57 = trunc i8 %56 to i1
  br i1 %57, label %58, label %149

; <label>:58:                                     ; preds = %6
  %59 = load %class.KV.3*, %class.KV.3** %12, align 8
  %60 = load i32, i32* %16, align 4
  %61 = zext i32 %60 to i64
  %62 = getelementptr inbounds %class.KV.3, %class.KV.3* %59, i64 %61
  %63 = getelementptr inbounds %class.KV.3, %class.KV.3* %62, i32 0, i32 0
  %64 = bitcast %"union.KV<key, key, 4>::Key"* %63 to i64*
  %65 = load i64, i64* %64, align 8
  %66 = and i64 %65, 1
  %67 = icmp eq i64 %66, 0
  br i1 %67, label %68, label %130

; <label>:68:                                     ; preds = %58
  %69 = load %class.KV.3*, %class.KV.3** %12, align 8
  %70 = load i32, i32* %16, align 4
  %71 = zext i32 %70 to i64
  %72 = getelementptr inbounds %class.KV.3, %class.KV.3* %69, i64 %71
  %73 = getelementptr inbounds %class.KV.3, %class.KV.3* %72, i32 0, i32 0
  %74 = bitcast %"union.KV<key, key, 4>::Key"* %73 to %class.key**
  %75 = load %class.key*, %class.key** %74, align 8
  %76 = load %class.key*, %class.key** %9, align 8
  %77 = call zeroext i1 @_ZNK3keyeqERKS_(%class.key* %75, %class.key* dereferenceable(8) %76)
  br i1 %77, label %78, label %90

; <label>:78:                                     ; preds = %68
  %79 = load %class.KV.3*, %class.KV.3** %12, align 8
  %80 = load i32, i32* %15, align 4
  %81 = load i32, i32* %16, align 4
  %82 = load %class.key*, %class.key** %9, align 8
  %83 = load %class.key*, %class.key** %10, align 8
  call void @_ZN2KVI3keyS0_Lj4EEC2EPKS0_S3_(%class.KV.3* %19, %class.key* %82, %class.key* %83)
  %84 = call %class.KV.3* @_ZN2KVI3keyS0_Lj4EE11update_nodeEPKS1_jjRS2_(%class.KV.3* %79, i32 %80, i32 %81, %class.KV.3* dereferenceable(16) %19)
  store %class.KV.3* %84, %class.KV.3** %18, align 8
  %85 = load %class.KV.2*, %class.KV.2** %7, align 8
  %86 = getelementptr inbounds %class.KV.2, %class.KV.2* %85, i32 0, i32 0
  %87 = bitcast %"union.KV<key, key, 3>::Key"* %86 to i64*
  %88 = load i64, i64* %87, align 8
  %89 = load %class.KV.3*, %class.KV.3** %18, align 8
  call void @_ZN2KVI3keyS0_Lj3EEC2EmPKS_IS0_S0_Lj4EE(%class.KV.2* %0, i64 %88, %class.KV.3* %89)
  br label %198

; <label>:90:                                     ; preds = %68
  %91 = load i64*, i64** %11, align 8
  %92 = load i64, i64* %91, align 8
  %93 = add i64 %92, 1
  store i64 %93, i64* %91, align 8
  %94 = load %class.KV.3*, %class.KV.3** %12, align 8
  %95 = load i32, i32* %16, align 4
  %96 = zext i32 %95 to i64
  %97 = getelementptr inbounds %class.KV.3, %class.KV.3* %94, i64 %96
  %98 = getelementptr inbounds %class.KV.3, %class.KV.3* %97, i32 0, i32 0
  %99 = bitcast %"union.KV<key, key, 4>::Key"* %98 to %class.key**
  %100 = load %class.key*, %class.key** %99, align 8
  %101 = call i64 @_ZNK3key4hashEv(%class.key* %100)
  %102 = lshr i64 %101, 28
  %103 = load %class.KV.3*, %class.KV.3** %12, align 8
  %104 = load i32, i32* %16, align 4
  %105 = zext i32 %104 to i64
  %106 = getelementptr inbounds %class.KV.3, %class.KV.3* %103, i64 %105
  %107 = getelementptr inbounds %class.KV.3, %class.KV.3* %106, i32 0, i32 0
  %108 = bitcast %"union.KV<key, key, 4>::Key"* %107 to %class.key**
  %109 = load %class.key*, %class.key** %108, align 8
  %110 = load %class.KV.3*, %class.KV.3** %12, align 8
  %111 = load i32, i32* %16, align 4
  %112 = zext i32 %111 to i64
  %113 = getelementptr inbounds %class.KV.3, %class.KV.3* %110, i64 %112
  %114 = getelementptr inbounds %class.KV.3, %class.KV.3* %113, i32 0, i32 1
  %115 = bitcast %"union.KV<key, key, 4>::Val"* %114 to %class.key**
  %116 = load %class.key*, %class.key** %115, align 8
  %117 = load i64, i64* %8, align 8
  %118 = lshr i64 %117, 6
  %119 = load %class.key*, %class.key** %9, align 8
  %120 = load %class.key*, %class.key** %10, align 8
  call void @_ZN2KVI3keyS0_Lj4EE14new_inner_nodeEmPKS0_S3_mS3_S3_(%class.KV.3* sret %20, i64 %102, %class.key* %109, %class.key* %116, i64 %118, %class.key* %119, %class.key* %120)
  %121 = load %class.KV.3*, %class.KV.3** %12, align 8
  %122 = load i32, i32* %15, align 4
  %123 = load i32, i32* %16, align 4
  %124 = call %class.KV.3* @_ZN2KVI3keyS0_Lj4EE11update_nodeEPKS1_jjRS2_(%class.KV.3* %121, i32 %122, i32 %123, %class.KV.3* dereferenceable(16) %20)
  store %class.KV.3* %124, %class.KV.3** %21, align 8
  %125 = load %class.KV.2*, %class.KV.2** %7, align 8
  %126 = getelementptr inbounds %class.KV.2, %class.KV.2* %125, i32 0, i32 0
  %127 = bitcast %"union.KV<key, key, 3>::Key"* %126 to i64*
  %128 = load i64, i64* %127, align 8
  %129 = load %class.KV.3*, %class.KV.3** %21, align 8
  call void @_ZN2KVI3keyS0_Lj3EEC2EmPKS_IS0_S0_Lj4EE(%class.KV.2* %0, i64 %128, %class.KV.3* %129)
  br label %198

; <label>:130:                                    ; preds = %58
  %131 = load %class.KV.3*, %class.KV.3** %12, align 8
  %132 = load i32, i32* %16, align 4
  %133 = zext i32 %132 to i64
  %134 = getelementptr inbounds %class.KV.3, %class.KV.3* %131, i64 %133
  %135 = load i64, i64* %8, align 8
  %136 = lshr i64 %135, 6
  %137 = load %class.key*, %class.key** %9, align 8
  %138 = load %class.key*, %class.key** %10, align 8
  %139 = load i64*, i64** %11, align 8
  call void @_ZN2KVI3keyS0_Lj4EE12insert_innerERKS1_mPKS0_S5_Pm(%class.KV.3* sret %22, %class.KV.3* dereferenceable(16) %134, i64 %136, %class.key* %137, %class.key* %138, i64* %139)
  %140 = load %class.KV.3*, %class.KV.3** %12, align 8
  %141 = load i32, i32* %15, align 4
  %142 = load i32, i32* %16, align 4
  %143 = call %class.KV.3* @_ZN2KVI3keyS0_Lj4EE11update_nodeEPKS1_jjRS2_(%class.KV.3* %140, i32 %141, i32 %142, %class.KV.3* dereferenceable(16) %22)
  store %class.KV.3* %143, %class.KV.3** %23, align 8
  %144 = load %class.KV.2*, %class.KV.2** %7, align 8
  %145 = getelementptr inbounds %class.KV.2, %class.KV.2* %144, i32 0, i32 0
  %146 = bitcast %"union.KV<key, key, 3>::Key"* %145 to i64*
  %147 = load i64, i64* %146, align 8
  %148 = load %class.KV.3*, %class.KV.3** %23, align 8
  call void @_ZN2KVI3keyS0_Lj3EEC2EmPKS_IS0_S0_Lj4EE(%class.KV.2* %0, i64 %147, %class.KV.3* %148)
  br label %198

; <label>:149:                                    ; preds = %6
  %150 = load i64*, i64** %11, align 8
  %151 = load i64, i64* %150, align 8
  %152 = add i64 %151, 1
  store i64 %152, i64* %150, align 8
  %153 = load i32, i32* %15, align 4
  %154 = add i32 %153, 1
  %155 = zext i32 %154 to i64
  %156 = mul i64 %155, 16
  %157 = call noalias i8* @malloc(i64 %156) #8
  %158 = bitcast i8* %157 to %class.KV.3*
  store %class.KV.3* %158, %class.KV.3** %24, align 8
  %159 = load %class.KV.3*, %class.KV.3** %24, align 8
  %160 = bitcast %class.KV.3* %159 to i8*
  %161 = load %class.KV.3*, %class.KV.3** %12, align 8
  %162 = bitcast %class.KV.3* %161 to i8*
  %163 = load i32, i32* %16, align 4
  %164 = zext i32 %163 to i64
  %165 = mul i64 %164, 16
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %160, i8* %162, i64 %165, i32 8, i1 false)
  %166 = load %class.KV.3*, %class.KV.3** %24, align 8
  %167 = load i32, i32* %16, align 4
  %168 = add i32 %167, 1
  %169 = zext i32 %168 to i64
  %170 = getelementptr inbounds %class.KV.3, %class.KV.3* %166, i64 %169
  %171 = bitcast %class.KV.3* %170 to i8*
  %172 = load %class.KV.3*, %class.KV.3** %12, align 8
  %173 = load i32, i32* %16, align 4
  %174 = zext i32 %173 to i64
  %175 = getelementptr inbounds %class.KV.3, %class.KV.3* %172, i64 %174
  %176 = bitcast %class.KV.3* %175 to i8*
  %177 = load i32, i32* %15, align 4
  %178 = load i32, i32* %16, align 4
  %179 = sub i32 %177, %178
  %180 = zext i32 %179 to i64
  %181 = mul i64 %180, 16
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %171, i8* %176, i64 %181, i32 8, i1 false)
  %182 = load %class.KV.3*, %class.KV.3** %24, align 8
  %183 = load i32, i32* %16, align 4
  %184 = zext i32 %183 to i64
  %185 = getelementptr inbounds %class.KV.3, %class.KV.3* %182, i64 %184
  %186 = bitcast %class.KV.3* %185 to i8*
  %187 = bitcast i8* %186 to %class.KV.3*
  %188 = load %class.key*, %class.key** %9, align 8
  %189 = load %class.key*, %class.key** %10, align 8
  call void @_ZN2KVI3keyS0_Lj4EEC2EPKS0_S3_(%class.KV.3* %187, %class.key* %188, %class.key* %189)
  %190 = load i64, i64* %13, align 8
  %191 = load i32, i32* %14, align 4
  %192 = zext i32 %191 to i64
  %193 = shl i64 1, %192
  %194 = or i64 %190, %193
  %195 = shl i64 %194, 1
  %196 = or i64 %195, 1
  %197 = load %class.KV.3*, %class.KV.3** %24, align 8
  call void @_ZN2KVI3keyS0_Lj3EEC2EmPKS_IS0_S0_Lj4EE(%class.KV.2* %0, i64 %196, %class.KV.3* %197)
  br label %198

; <label>:198:                                    ; preds = %149, %130, %90, %78
  ret void
}

; Function Attrs: noinline optnone sspstrong uwtable
define linkonce_odr %class.KV.3* @_ZN2KVI3keyS0_Lj4EE11update_nodeEPKS1_jjRS2_(%class.KV.3*, i32, i32, %class.KV.3* dereferenceable(16)) #2 comdat align 2 {
  %5 = alloca %class.KV.3*, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca %class.KV.3*, align 8
  %9 = alloca %class.KV.3*, align 8
  store %class.KV.3* %0, %class.KV.3** %5, align 8
  store i32 %1, i32* %6, align 4
  store i32 %2, i32* %7, align 4
  store %class.KV.3* %3, %class.KV.3** %8, align 8
  %10 = load i32, i32* %6, align 4
  %11 = zext i32 %10 to i64
  %12 = mul i64 %11, 16
  %13 = call noalias i8* @malloc(i64 %12) #8
  %14 = bitcast i8* %13 to %class.KV.3*
  store %class.KV.3* %14, %class.KV.3** %9, align 8
  %15 = load %class.KV.3*, %class.KV.3** %9, align 8
  %16 = bitcast %class.KV.3* %15 to i8*
  %17 = load %class.KV.3*, %class.KV.3** %5, align 8
  %18 = bitcast %class.KV.3* %17 to i8*
  %19 = load i32, i32* %6, align 4
  %20 = zext i32 %19 to i64
  %21 = mul i64 %20, 16
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %16, i8* %18, i64 %21, i32 8, i1 false)
  %22 = load %class.KV.3*, %class.KV.3** %9, align 8
  %23 = load i32, i32* %7, align 4
  %24 = zext i32 %23 to i64
  %25 = getelementptr inbounds %class.KV.3, %class.KV.3* %22, i64 %24
  %26 = bitcast %class.KV.3* %25 to i8*
  %27 = bitcast i8* %26 to %class.KV.3*
  %28 = load %class.KV.3*, %class.KV.3** %8, align 8
  call void @_ZN2KVI3keyS0_Lj4EEC2ERKS1_(%class.KV.3* %27, %class.KV.3* dereferenceable(16) %28)
  %29 = load %class.KV.3*, %class.KV.3** %9, align 8
  ret %class.KV.3* %29
}

; Function Attrs: noinline optnone sspstrong uwtable
define linkonce_odr void @_ZN2KVI3keyS0_Lj4EE12insert_innerERKS1_mPKS0_S5_Pm(%class.KV.3* noalias sret, %class.KV.3* dereferenceable(16), i64, %class.key*, %class.key*, i64*) #2 comdat align 2 {
  %7 = alloca %class.KV.3*, align 8
  %8 = alloca i64, align 8
  %9 = alloca %class.key*, align 8
  %10 = alloca %class.key*, align 8
  %11 = alloca i64*, align 8
  %12 = alloca %class.KV.4*, align 8
  %13 = alloca i64, align 8
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  %16 = alloca i32, align 4
  %17 = alloca i8, align 1
  %18 = alloca %class.KV.4*, align 8
  %19 = alloca %class.KV.4, align 8
  %20 = alloca %class.KV.4, align 8
  %21 = alloca %class.KV.4*, align 8
  %22 = alloca %class.KV.4, align 8
  %23 = alloca %class.KV.4*, align 8
  %24 = alloca %class.KV.4*, align 8
  store %class.KV.3* %1, %class.KV.3** %7, align 8
  store i64 %2, i64* %8, align 8
  store %class.key* %3, %class.key** %9, align 8
  store %class.key* %4, %class.key** %10, align 8
  store i64* %5, i64** %11, align 8
  %25 = load %class.KV.3*, %class.KV.3** %7, align 8
  %26 = getelementptr inbounds %class.KV.3, %class.KV.3* %25, i32 0, i32 1
  %27 = bitcast %"union.KV<key, key, 4>::Val"* %26 to %class.KV.4**
  %28 = load %class.KV.4*, %class.KV.4** %27, align 8
  store %class.KV.4* %28, %class.KV.4** %12, align 8
  %29 = load %class.KV.3*, %class.KV.3** %7, align 8
  %30 = getelementptr inbounds %class.KV.3, %class.KV.3* %29, i32 0, i32 0
  %31 = bitcast %"union.KV<key, key, 4>::Key"* %30 to i64*
  %32 = load i64, i64* %31, align 8
  %33 = lshr i64 %32, 1
  store i64 %33, i64* %13, align 8
  %34 = load i64, i64* %8, align 8
  %35 = and i64 %34, 63
  %36 = urem i64 %35, 63
  %37 = trunc i64 %36 to i32
  store i32 %37, i32* %14, align 4
  %38 = load i64, i64* %13, align 8
  %39 = call i64 @llvm.ctpop.i64(i64 %38)
  %40 = trunc i64 %39 to i32
  store i32 %40, i32* %15, align 4
  %41 = load i64, i64* %13, align 8
  %42 = shl i64 %41, 1
  %43 = load i32, i32* %14, align 4
  %44 = sub i32 63, %43
  %45 = zext i32 %44 to i64
  %46 = shl i64 %42, %45
  %47 = call i64 @llvm.ctpop.i64(i64 %46)
  %48 = trunc i64 %47 to i32
  store i32 %48, i32* %16, align 4
  %49 = load i64, i64* %13, align 8
  %50 = load i32, i32* %14, align 4
  %51 = zext i32 %50 to i64
  %52 = shl i64 1, %51
  %53 = and i64 %49, %52
  %54 = icmp ne i64 %53, 0
  %55 = zext i1 %54 to i8
  store i8 %55, i8* %17, align 1
  %56 = load i8, i8* %17, align 1
  %57 = trunc i8 %56 to i1
  br i1 %57, label %58, label %149

; <label>:58:                                     ; preds = %6
  %59 = load %class.KV.4*, %class.KV.4** %12, align 8
  %60 = load i32, i32* %16, align 4
  %61 = zext i32 %60 to i64
  %62 = getelementptr inbounds %class.KV.4, %class.KV.4* %59, i64 %61
  %63 = getelementptr inbounds %class.KV.4, %class.KV.4* %62, i32 0, i32 0
  %64 = bitcast %"union.KV<key, key, 5>::Key"* %63 to i64*
  %65 = load i64, i64* %64, align 8
  %66 = and i64 %65, 1
  %67 = icmp eq i64 %66, 0
  br i1 %67, label %68, label %130

; <label>:68:                                     ; preds = %58
  %69 = load %class.KV.4*, %class.KV.4** %12, align 8
  %70 = load i32, i32* %16, align 4
  %71 = zext i32 %70 to i64
  %72 = getelementptr inbounds %class.KV.4, %class.KV.4* %69, i64 %71
  %73 = getelementptr inbounds %class.KV.4, %class.KV.4* %72, i32 0, i32 0
  %74 = bitcast %"union.KV<key, key, 5>::Key"* %73 to %class.key**
  %75 = load %class.key*, %class.key** %74, align 8
  %76 = load %class.key*, %class.key** %9, align 8
  %77 = call zeroext i1 @_ZNK3keyeqERKS_(%class.key* %75, %class.key* dereferenceable(8) %76)
  br i1 %77, label %78, label %90

; <label>:78:                                     ; preds = %68
  %79 = load %class.KV.4*, %class.KV.4** %12, align 8
  %80 = load i32, i32* %15, align 4
  %81 = load i32, i32* %16, align 4
  %82 = load %class.key*, %class.key** %9, align 8
  %83 = load %class.key*, %class.key** %10, align 8
  call void @_ZN2KVI3keyS0_Lj5EEC2EPKS0_S3_(%class.KV.4* %19, %class.key* %82, %class.key* %83)
  %84 = call %class.KV.4* @_ZN2KVI3keyS0_Lj5EE11update_nodeEPKS1_jjRS2_(%class.KV.4* %79, i32 %80, i32 %81, %class.KV.4* dereferenceable(16) %19)
  store %class.KV.4* %84, %class.KV.4** %18, align 8
  %85 = load %class.KV.3*, %class.KV.3** %7, align 8
  %86 = getelementptr inbounds %class.KV.3, %class.KV.3* %85, i32 0, i32 0
  %87 = bitcast %"union.KV<key, key, 4>::Key"* %86 to i64*
  %88 = load i64, i64* %87, align 8
  %89 = load %class.KV.4*, %class.KV.4** %18, align 8
  call void @_ZN2KVI3keyS0_Lj4EEC2EmPKS_IS0_S0_Lj5EE(%class.KV.3* %0, i64 %88, %class.KV.4* %89)
  br label %198

; <label>:90:                                     ; preds = %68
  %91 = load i64*, i64** %11, align 8
  %92 = load i64, i64* %91, align 8
  %93 = add i64 %92, 1
  store i64 %93, i64* %91, align 8
  %94 = load %class.KV.4*, %class.KV.4** %12, align 8
  %95 = load i32, i32* %16, align 4
  %96 = zext i32 %95 to i64
  %97 = getelementptr inbounds %class.KV.4, %class.KV.4* %94, i64 %96
  %98 = getelementptr inbounds %class.KV.4, %class.KV.4* %97, i32 0, i32 0
  %99 = bitcast %"union.KV<key, key, 5>::Key"* %98 to %class.key**
  %100 = load %class.key*, %class.key** %99, align 8
  %101 = call i64 @_ZNK3key4hashEv(%class.key* %100)
  %102 = lshr i64 %101, 34
  %103 = load %class.KV.4*, %class.KV.4** %12, align 8
  %104 = load i32, i32* %16, align 4
  %105 = zext i32 %104 to i64
  %106 = getelementptr inbounds %class.KV.4, %class.KV.4* %103, i64 %105
  %107 = getelementptr inbounds %class.KV.4, %class.KV.4* %106, i32 0, i32 0
  %108 = bitcast %"union.KV<key, key, 5>::Key"* %107 to %class.key**
  %109 = load %class.key*, %class.key** %108, align 8
  %110 = load %class.KV.4*, %class.KV.4** %12, align 8
  %111 = load i32, i32* %16, align 4
  %112 = zext i32 %111 to i64
  %113 = getelementptr inbounds %class.KV.4, %class.KV.4* %110, i64 %112
  %114 = getelementptr inbounds %class.KV.4, %class.KV.4* %113, i32 0, i32 1
  %115 = bitcast %"union.KV<key, key, 5>::Val"* %114 to %class.key**
  %116 = load %class.key*, %class.key** %115, align 8
  %117 = load i64, i64* %8, align 8
  %118 = lshr i64 %117, 6
  %119 = load %class.key*, %class.key** %9, align 8
  %120 = load %class.key*, %class.key** %10, align 8
  call void @_ZN2KVI3keyS0_Lj5EE14new_inner_nodeEmPKS0_S3_mS3_S3_(%class.KV.4* sret %20, i64 %102, %class.key* %109, %class.key* %116, i64 %118, %class.key* %119, %class.key* %120)
  %121 = load %class.KV.4*, %class.KV.4** %12, align 8
  %122 = load i32, i32* %15, align 4
  %123 = load i32, i32* %16, align 4
  %124 = call %class.KV.4* @_ZN2KVI3keyS0_Lj5EE11update_nodeEPKS1_jjRS2_(%class.KV.4* %121, i32 %122, i32 %123, %class.KV.4* dereferenceable(16) %20)
  store %class.KV.4* %124, %class.KV.4** %21, align 8
  %125 = load %class.KV.3*, %class.KV.3** %7, align 8
  %126 = getelementptr inbounds %class.KV.3, %class.KV.3* %125, i32 0, i32 0
  %127 = bitcast %"union.KV<key, key, 4>::Key"* %126 to i64*
  %128 = load i64, i64* %127, align 8
  %129 = load %class.KV.4*, %class.KV.4** %21, align 8
  call void @_ZN2KVI3keyS0_Lj4EEC2EmPKS_IS0_S0_Lj5EE(%class.KV.3* %0, i64 %128, %class.KV.4* %129)
  br label %198

; <label>:130:                                    ; preds = %58
  %131 = load %class.KV.4*, %class.KV.4** %12, align 8
  %132 = load i32, i32* %16, align 4
  %133 = zext i32 %132 to i64
  %134 = getelementptr inbounds %class.KV.4, %class.KV.4* %131, i64 %133
  %135 = load i64, i64* %8, align 8
  %136 = lshr i64 %135, 6
  %137 = load %class.key*, %class.key** %9, align 8
  %138 = load %class.key*, %class.key** %10, align 8
  %139 = load i64*, i64** %11, align 8
  call void @_ZN2KVI3keyS0_Lj5EE12insert_innerERKS1_mPKS0_S5_Pm(%class.KV.4* sret %22, %class.KV.4* dereferenceable(16) %134, i64 %136, %class.key* %137, %class.key* %138, i64* %139)
  %140 = load %class.KV.4*, %class.KV.4** %12, align 8
  %141 = load i32, i32* %15, align 4
  %142 = load i32, i32* %16, align 4
  %143 = call %class.KV.4* @_ZN2KVI3keyS0_Lj5EE11update_nodeEPKS1_jjRS2_(%class.KV.4* %140, i32 %141, i32 %142, %class.KV.4* dereferenceable(16) %22)
  store %class.KV.4* %143, %class.KV.4** %23, align 8
  %144 = load %class.KV.3*, %class.KV.3** %7, align 8
  %145 = getelementptr inbounds %class.KV.3, %class.KV.3* %144, i32 0, i32 0
  %146 = bitcast %"union.KV<key, key, 4>::Key"* %145 to i64*
  %147 = load i64, i64* %146, align 8
  %148 = load %class.KV.4*, %class.KV.4** %23, align 8
  call void @_ZN2KVI3keyS0_Lj4EEC2EmPKS_IS0_S0_Lj5EE(%class.KV.3* %0, i64 %147, %class.KV.4* %148)
  br label %198

; <label>:149:                                    ; preds = %6
  %150 = load i64*, i64** %11, align 8
  %151 = load i64, i64* %150, align 8
  %152 = add i64 %151, 1
  store i64 %152, i64* %150, align 8
  %153 = load i32, i32* %15, align 4
  %154 = add i32 %153, 1
  %155 = zext i32 %154 to i64
  %156 = mul i64 %155, 16
  %157 = call noalias i8* @malloc(i64 %156) #8
  %158 = bitcast i8* %157 to %class.KV.4*
  store %class.KV.4* %158, %class.KV.4** %24, align 8
  %159 = load %class.KV.4*, %class.KV.4** %24, align 8
  %160 = bitcast %class.KV.4* %159 to i8*
  %161 = load %class.KV.4*, %class.KV.4** %12, align 8
  %162 = bitcast %class.KV.4* %161 to i8*
  %163 = load i32, i32* %16, align 4
  %164 = zext i32 %163 to i64
  %165 = mul i64 %164, 16
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %160, i8* %162, i64 %165, i32 8, i1 false)
  %166 = load %class.KV.4*, %class.KV.4** %24, align 8
  %167 = load i32, i32* %16, align 4
  %168 = add i32 %167, 1
  %169 = zext i32 %168 to i64
  %170 = getelementptr inbounds %class.KV.4, %class.KV.4* %166, i64 %169
  %171 = bitcast %class.KV.4* %170 to i8*
  %172 = load %class.KV.4*, %class.KV.4** %12, align 8
  %173 = load i32, i32* %16, align 4
  %174 = zext i32 %173 to i64
  %175 = getelementptr inbounds %class.KV.4, %class.KV.4* %172, i64 %174
  %176 = bitcast %class.KV.4* %175 to i8*
  %177 = load i32, i32* %15, align 4
  %178 = load i32, i32* %16, align 4
  %179 = sub i32 %177, %178
  %180 = zext i32 %179 to i64
  %181 = mul i64 %180, 16
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %171, i8* %176, i64 %181, i32 8, i1 false)
  %182 = load %class.KV.4*, %class.KV.4** %24, align 8
  %183 = load i32, i32* %16, align 4
  %184 = zext i32 %183 to i64
  %185 = getelementptr inbounds %class.KV.4, %class.KV.4* %182, i64 %184
  %186 = bitcast %class.KV.4* %185 to i8*
  %187 = bitcast i8* %186 to %class.KV.4*
  %188 = load %class.key*, %class.key** %9, align 8
  %189 = load %class.key*, %class.key** %10, align 8
  call void @_ZN2KVI3keyS0_Lj5EEC2EPKS0_S3_(%class.KV.4* %187, %class.key* %188, %class.key* %189)
  %190 = load i64, i64* %13, align 8
  %191 = load i32, i32* %14, align 4
  %192 = zext i32 %191 to i64
  %193 = shl i64 1, %192
  %194 = or i64 %190, %193
  %195 = shl i64 %194, 1
  %196 = or i64 %195, 1
  %197 = load %class.KV.4*, %class.KV.4** %24, align 8
  call void @_ZN2KVI3keyS0_Lj4EEC2EmPKS_IS0_S0_Lj5EE(%class.KV.3* %0, i64 %196, %class.KV.4* %197)
  br label %198

; <label>:198:                                    ; preds = %149, %130, %90, %78
  ret void
}

; Function Attrs: noinline optnone sspstrong uwtable
define linkonce_odr %class.KV.4* @_ZN2KVI3keyS0_Lj5EE11update_nodeEPKS1_jjRS2_(%class.KV.4*, i32, i32, %class.KV.4* dereferenceable(16)) #2 comdat align 2 {
  %5 = alloca %class.KV.4*, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca %class.KV.4*, align 8
  %9 = alloca %class.KV.4*, align 8
  store %class.KV.4* %0, %class.KV.4** %5, align 8
  store i32 %1, i32* %6, align 4
  store i32 %2, i32* %7, align 4
  store %class.KV.4* %3, %class.KV.4** %8, align 8
  %10 = load i32, i32* %6, align 4
  %11 = zext i32 %10 to i64
  %12 = mul i64 %11, 16
  %13 = call noalias i8* @malloc(i64 %12) #8
  %14 = bitcast i8* %13 to %class.KV.4*
  store %class.KV.4* %14, %class.KV.4** %9, align 8
  %15 = load %class.KV.4*, %class.KV.4** %9, align 8
  %16 = bitcast %class.KV.4* %15 to i8*
  %17 = load %class.KV.4*, %class.KV.4** %5, align 8
  %18 = bitcast %class.KV.4* %17 to i8*
  %19 = load i32, i32* %6, align 4
  %20 = zext i32 %19 to i64
  %21 = mul i64 %20, 16
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %16, i8* %18, i64 %21, i32 8, i1 false)
  %22 = load %class.KV.4*, %class.KV.4** %9, align 8
  %23 = load i32, i32* %7, align 4
  %24 = zext i32 %23 to i64
  %25 = getelementptr inbounds %class.KV.4, %class.KV.4* %22, i64 %24
  %26 = bitcast %class.KV.4* %25 to i8*
  %27 = bitcast i8* %26 to %class.KV.4*
  %28 = load %class.KV.4*, %class.KV.4** %8, align 8
  call void @_ZN2KVI3keyS0_Lj5EEC2ERKS1_(%class.KV.4* %27, %class.KV.4* dereferenceable(16) %28)
  %29 = load %class.KV.4*, %class.KV.4** %9, align 8
  ret %class.KV.4* %29
}

; Function Attrs: noinline optnone sspstrong uwtable
define linkonce_odr void @_ZN2KVI3keyS0_Lj5EE12insert_innerERKS1_mPKS0_S5_Pm(%class.KV.4* noalias sret, %class.KV.4* dereferenceable(16), i64, %class.key*, %class.key*, i64*) #2 comdat align 2 {
  %7 = alloca %class.KV.4*, align 8
  %8 = alloca i64, align 8
  %9 = alloca %class.key*, align 8
  %10 = alloca %class.key*, align 8
  %11 = alloca i64*, align 8
  %12 = alloca %class.KV.5*, align 8
  %13 = alloca i64, align 8
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  %16 = alloca i32, align 4
  %17 = alloca i8, align 1
  %18 = alloca %class.KV.5*, align 8
  %19 = alloca %class.KV.5, align 8
  %20 = alloca %class.KV.5, align 8
  %21 = alloca %class.KV.5*, align 8
  %22 = alloca %class.KV.5, align 8
  %23 = alloca %class.KV.5*, align 8
  %24 = alloca %class.KV.5*, align 8
  store %class.KV.4* %1, %class.KV.4** %7, align 8
  store i64 %2, i64* %8, align 8
  store %class.key* %3, %class.key** %9, align 8
  store %class.key* %4, %class.key** %10, align 8
  store i64* %5, i64** %11, align 8
  %25 = load %class.KV.4*, %class.KV.4** %7, align 8
  %26 = getelementptr inbounds %class.KV.4, %class.KV.4* %25, i32 0, i32 1
  %27 = bitcast %"union.KV<key, key, 5>::Val"* %26 to %class.KV.5**
  %28 = load %class.KV.5*, %class.KV.5** %27, align 8
  store %class.KV.5* %28, %class.KV.5** %12, align 8
  %29 = load %class.KV.4*, %class.KV.4** %7, align 8
  %30 = getelementptr inbounds %class.KV.4, %class.KV.4* %29, i32 0, i32 0
  %31 = bitcast %"union.KV<key, key, 5>::Key"* %30 to i64*
  %32 = load i64, i64* %31, align 8
  %33 = lshr i64 %32, 1
  store i64 %33, i64* %13, align 8
  %34 = load i64, i64* %8, align 8
  %35 = and i64 %34, 63
  %36 = urem i64 %35, 63
  %37 = trunc i64 %36 to i32
  store i32 %37, i32* %14, align 4
  %38 = load i64, i64* %13, align 8
  %39 = call i64 @llvm.ctpop.i64(i64 %38)
  %40 = trunc i64 %39 to i32
  store i32 %40, i32* %15, align 4
  %41 = load i64, i64* %13, align 8
  %42 = shl i64 %41, 1
  %43 = load i32, i32* %14, align 4
  %44 = sub i32 63, %43
  %45 = zext i32 %44 to i64
  %46 = shl i64 %42, %45
  %47 = call i64 @llvm.ctpop.i64(i64 %46)
  %48 = trunc i64 %47 to i32
  store i32 %48, i32* %16, align 4
  %49 = load i64, i64* %13, align 8
  %50 = load i32, i32* %14, align 4
  %51 = zext i32 %50 to i64
  %52 = shl i64 1, %51
  %53 = and i64 %49, %52
  %54 = icmp ne i64 %53, 0
  %55 = zext i1 %54 to i8
  store i8 %55, i8* %17, align 1
  %56 = load i8, i8* %17, align 1
  %57 = trunc i8 %56 to i1
  br i1 %57, label %58, label %149

; <label>:58:                                     ; preds = %6
  %59 = load %class.KV.5*, %class.KV.5** %12, align 8
  %60 = load i32, i32* %16, align 4
  %61 = zext i32 %60 to i64
  %62 = getelementptr inbounds %class.KV.5, %class.KV.5* %59, i64 %61
  %63 = getelementptr inbounds %class.KV.5, %class.KV.5* %62, i32 0, i32 0
  %64 = bitcast %"union.KV<key, key, 6>::Key"* %63 to i64*
  %65 = load i64, i64* %64, align 8
  %66 = and i64 %65, 1
  %67 = icmp eq i64 %66, 0
  br i1 %67, label %68, label %130

; <label>:68:                                     ; preds = %58
  %69 = load %class.KV.5*, %class.KV.5** %12, align 8
  %70 = load i32, i32* %16, align 4
  %71 = zext i32 %70 to i64
  %72 = getelementptr inbounds %class.KV.5, %class.KV.5* %69, i64 %71
  %73 = getelementptr inbounds %class.KV.5, %class.KV.5* %72, i32 0, i32 0
  %74 = bitcast %"union.KV<key, key, 6>::Key"* %73 to %class.key**
  %75 = load %class.key*, %class.key** %74, align 8
  %76 = load %class.key*, %class.key** %9, align 8
  %77 = call zeroext i1 @_ZNK3keyeqERKS_(%class.key* %75, %class.key* dereferenceable(8) %76)
  br i1 %77, label %78, label %90

; <label>:78:                                     ; preds = %68
  %79 = load %class.KV.5*, %class.KV.5** %12, align 8
  %80 = load i32, i32* %15, align 4
  %81 = load i32, i32* %16, align 4
  %82 = load %class.key*, %class.key** %9, align 8
  %83 = load %class.key*, %class.key** %10, align 8
  call void @_ZN2KVI3keyS0_Lj6EEC2EPKS0_S3_(%class.KV.5* %19, %class.key* %82, %class.key* %83)
  %84 = call %class.KV.5* @_ZN2KVI3keyS0_Lj6EE11update_nodeEPKS1_jjRS2_(%class.KV.5* %79, i32 %80, i32 %81, %class.KV.5* dereferenceable(16) %19)
  store %class.KV.5* %84, %class.KV.5** %18, align 8
  %85 = load %class.KV.4*, %class.KV.4** %7, align 8
  %86 = getelementptr inbounds %class.KV.4, %class.KV.4* %85, i32 0, i32 0
  %87 = bitcast %"union.KV<key, key, 5>::Key"* %86 to i64*
  %88 = load i64, i64* %87, align 8
  %89 = load %class.KV.5*, %class.KV.5** %18, align 8
  call void @_ZN2KVI3keyS0_Lj5EEC2EmPKS_IS0_S0_Lj6EE(%class.KV.4* %0, i64 %88, %class.KV.5* %89)
  br label %198

; <label>:90:                                     ; preds = %68
  %91 = load i64*, i64** %11, align 8
  %92 = load i64, i64* %91, align 8
  %93 = add i64 %92, 1
  store i64 %93, i64* %91, align 8
  %94 = load %class.KV.5*, %class.KV.5** %12, align 8
  %95 = load i32, i32* %16, align 4
  %96 = zext i32 %95 to i64
  %97 = getelementptr inbounds %class.KV.5, %class.KV.5* %94, i64 %96
  %98 = getelementptr inbounds %class.KV.5, %class.KV.5* %97, i32 0, i32 0
  %99 = bitcast %"union.KV<key, key, 6>::Key"* %98 to %class.key**
  %100 = load %class.key*, %class.key** %99, align 8
  %101 = call i64 @_ZNK3key4hashEv(%class.key* %100)
  %102 = lshr i64 %101, 40
  %103 = load %class.KV.5*, %class.KV.5** %12, align 8
  %104 = load i32, i32* %16, align 4
  %105 = zext i32 %104 to i64
  %106 = getelementptr inbounds %class.KV.5, %class.KV.5* %103, i64 %105
  %107 = getelementptr inbounds %class.KV.5, %class.KV.5* %106, i32 0, i32 0
  %108 = bitcast %"union.KV<key, key, 6>::Key"* %107 to %class.key**
  %109 = load %class.key*, %class.key** %108, align 8
  %110 = load %class.KV.5*, %class.KV.5** %12, align 8
  %111 = load i32, i32* %16, align 4
  %112 = zext i32 %111 to i64
  %113 = getelementptr inbounds %class.KV.5, %class.KV.5* %110, i64 %112
  %114 = getelementptr inbounds %class.KV.5, %class.KV.5* %113, i32 0, i32 1
  %115 = bitcast %"union.KV<key, key, 6>::Val"* %114 to %class.key**
  %116 = load %class.key*, %class.key** %115, align 8
  %117 = load i64, i64* %8, align 8
  %118 = lshr i64 %117, 6
  %119 = load %class.key*, %class.key** %9, align 8
  %120 = load %class.key*, %class.key** %10, align 8
  call void @_ZN2KVI3keyS0_Lj6EE14new_inner_nodeEmPKS0_S3_mS3_S3_(%class.KV.5* sret %20, i64 %102, %class.key* %109, %class.key* %116, i64 %118, %class.key* %119, %class.key* %120)
  %121 = load %class.KV.5*, %class.KV.5** %12, align 8
  %122 = load i32, i32* %15, align 4
  %123 = load i32, i32* %16, align 4
  %124 = call %class.KV.5* @_ZN2KVI3keyS0_Lj6EE11update_nodeEPKS1_jjRS2_(%class.KV.5* %121, i32 %122, i32 %123, %class.KV.5* dereferenceable(16) %20)
  store %class.KV.5* %124, %class.KV.5** %21, align 8
  %125 = load %class.KV.4*, %class.KV.4** %7, align 8
  %126 = getelementptr inbounds %class.KV.4, %class.KV.4* %125, i32 0, i32 0
  %127 = bitcast %"union.KV<key, key, 5>::Key"* %126 to i64*
  %128 = load i64, i64* %127, align 8
  %129 = load %class.KV.5*, %class.KV.5** %21, align 8
  call void @_ZN2KVI3keyS0_Lj5EEC2EmPKS_IS0_S0_Lj6EE(%class.KV.4* %0, i64 %128, %class.KV.5* %129)
  br label %198

; <label>:130:                                    ; preds = %58
  %131 = load %class.KV.5*, %class.KV.5** %12, align 8
  %132 = load i32, i32* %16, align 4
  %133 = zext i32 %132 to i64
  %134 = getelementptr inbounds %class.KV.5, %class.KV.5* %131, i64 %133
  %135 = load i64, i64* %8, align 8
  %136 = lshr i64 %135, 6
  %137 = load %class.key*, %class.key** %9, align 8
  %138 = load %class.key*, %class.key** %10, align 8
  %139 = load i64*, i64** %11, align 8
  call void @_ZN2KVI3keyS0_Lj6EE12insert_innerERKS1_mPKS0_S5_Pm(%class.KV.5* sret %22, %class.KV.5* dereferenceable(16) %134, i64 %136, %class.key* %137, %class.key* %138, i64* %139)
  %140 = load %class.KV.5*, %class.KV.5** %12, align 8
  %141 = load i32, i32* %15, align 4
  %142 = load i32, i32* %16, align 4
  %143 = call %class.KV.5* @_ZN2KVI3keyS0_Lj6EE11update_nodeEPKS1_jjRS2_(%class.KV.5* %140, i32 %141, i32 %142, %class.KV.5* dereferenceable(16) %22)
  store %class.KV.5* %143, %class.KV.5** %23, align 8
  %144 = load %class.KV.4*, %class.KV.4** %7, align 8
  %145 = getelementptr inbounds %class.KV.4, %class.KV.4* %144, i32 0, i32 0
  %146 = bitcast %"union.KV<key, key, 5>::Key"* %145 to i64*
  %147 = load i64, i64* %146, align 8
  %148 = load %class.KV.5*, %class.KV.5** %23, align 8
  call void @_ZN2KVI3keyS0_Lj5EEC2EmPKS_IS0_S0_Lj6EE(%class.KV.4* %0, i64 %147, %class.KV.5* %148)
  br label %198

; <label>:149:                                    ; preds = %6
  %150 = load i64*, i64** %11, align 8
  %151 = load i64, i64* %150, align 8
  %152 = add i64 %151, 1
  store i64 %152, i64* %150, align 8
  %153 = load i32, i32* %15, align 4
  %154 = add i32 %153, 1
  %155 = zext i32 %154 to i64
  %156 = mul i64 %155, 16
  %157 = call noalias i8* @malloc(i64 %156) #8
  %158 = bitcast i8* %157 to %class.KV.5*
  store %class.KV.5* %158, %class.KV.5** %24, align 8
  %159 = load %class.KV.5*, %class.KV.5** %24, align 8
  %160 = bitcast %class.KV.5* %159 to i8*
  %161 = load %class.KV.5*, %class.KV.5** %12, align 8
  %162 = bitcast %class.KV.5* %161 to i8*
  %163 = load i32, i32* %16, align 4
  %164 = zext i32 %163 to i64
  %165 = mul i64 %164, 16
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %160, i8* %162, i64 %165, i32 8, i1 false)
  %166 = load %class.KV.5*, %class.KV.5** %24, align 8
  %167 = load i32, i32* %16, align 4
  %168 = add i32 %167, 1
  %169 = zext i32 %168 to i64
  %170 = getelementptr inbounds %class.KV.5, %class.KV.5* %166, i64 %169
  %171 = bitcast %class.KV.5* %170 to i8*
  %172 = load %class.KV.5*, %class.KV.5** %12, align 8
  %173 = load i32, i32* %16, align 4
  %174 = zext i32 %173 to i64
  %175 = getelementptr inbounds %class.KV.5, %class.KV.5* %172, i64 %174
  %176 = bitcast %class.KV.5* %175 to i8*
  %177 = load i32, i32* %15, align 4
  %178 = load i32, i32* %16, align 4
  %179 = sub i32 %177, %178
  %180 = zext i32 %179 to i64
  %181 = mul i64 %180, 16
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %171, i8* %176, i64 %181, i32 8, i1 false)
  %182 = load %class.KV.5*, %class.KV.5** %24, align 8
  %183 = load i32, i32* %16, align 4
  %184 = zext i32 %183 to i64
  %185 = getelementptr inbounds %class.KV.5, %class.KV.5* %182, i64 %184
  %186 = bitcast %class.KV.5* %185 to i8*
  %187 = bitcast i8* %186 to %class.KV.5*
  %188 = load %class.key*, %class.key** %9, align 8
  %189 = load %class.key*, %class.key** %10, align 8
  call void @_ZN2KVI3keyS0_Lj6EEC2EPKS0_S3_(%class.KV.5* %187, %class.key* %188, %class.key* %189)
  %190 = load i64, i64* %13, align 8
  %191 = load i32, i32* %14, align 4
  %192 = zext i32 %191 to i64
  %193 = shl i64 1, %192
  %194 = or i64 %190, %193
  %195 = shl i64 %194, 1
  %196 = or i64 %195, 1
  %197 = load %class.KV.5*, %class.KV.5** %24, align 8
  call void @_ZN2KVI3keyS0_Lj5EEC2EmPKS_IS0_S0_Lj6EE(%class.KV.4* %0, i64 %196, %class.KV.5* %197)
  br label %198

; <label>:198:                                    ; preds = %149, %130, %90, %78
  ret void
}

; Function Attrs: noinline optnone sspstrong uwtable
define linkonce_odr %class.KV.5* @_ZN2KVI3keyS0_Lj6EE11update_nodeEPKS1_jjRS2_(%class.KV.5*, i32, i32, %class.KV.5* dereferenceable(16)) #2 comdat align 2 {
  %5 = alloca %class.KV.5*, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca %class.KV.5*, align 8
  %9 = alloca %class.KV.5*, align 8
  store %class.KV.5* %0, %class.KV.5** %5, align 8
  store i32 %1, i32* %6, align 4
  store i32 %2, i32* %7, align 4
  store %class.KV.5* %3, %class.KV.5** %8, align 8
  %10 = load i32, i32* %6, align 4
  %11 = zext i32 %10 to i64
  %12 = mul i64 %11, 16
  %13 = call noalias i8* @malloc(i64 %12) #8
  %14 = bitcast i8* %13 to %class.KV.5*
  store %class.KV.5* %14, %class.KV.5** %9, align 8
  %15 = load %class.KV.5*, %class.KV.5** %9, align 8
  %16 = bitcast %class.KV.5* %15 to i8*
  %17 = load %class.KV.5*, %class.KV.5** %5, align 8
  %18 = bitcast %class.KV.5* %17 to i8*
  %19 = load i32, i32* %6, align 4
  %20 = zext i32 %19 to i64
  %21 = mul i64 %20, 16
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %16, i8* %18, i64 %21, i32 8, i1 false)
  %22 = load %class.KV.5*, %class.KV.5** %9, align 8
  %23 = load i32, i32* %7, align 4
  %24 = zext i32 %23 to i64
  %25 = getelementptr inbounds %class.KV.5, %class.KV.5* %22, i64 %24
  %26 = bitcast %class.KV.5* %25 to i8*
  %27 = bitcast i8* %26 to %class.KV.5*
  %28 = load %class.KV.5*, %class.KV.5** %8, align 8
  call void @_ZN2KVI3keyS0_Lj6EEC2ERKS1_(%class.KV.5* %27, %class.KV.5* dereferenceable(16) %28)
  %29 = load %class.KV.5*, %class.KV.5** %9, align 8
  ret %class.KV.5* %29
}

; Function Attrs: noinline optnone sspstrong uwtable
define linkonce_odr void @_ZN2KVI3keyS0_Lj6EE12insert_innerERKS1_mPKS0_S5_Pm(%class.KV.5* noalias sret, %class.KV.5* dereferenceable(16), i64, %class.key*, %class.key*, i64*) #2 comdat align 2 {
  %7 = alloca %class.KV.5*, align 8
  %8 = alloca i64, align 8
  %9 = alloca %class.key*, align 8
  %10 = alloca %class.key*, align 8
  %11 = alloca i64*, align 8
  %12 = alloca %class.KV.6*, align 8
  %13 = alloca i64, align 8
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  %16 = alloca i32, align 4
  %17 = alloca i8, align 1
  %18 = alloca %class.KV.6*, align 8
  %19 = alloca %class.KV.6, align 8
  %20 = alloca %class.KV.6, align 8
  %21 = alloca %class.KV.6*, align 8
  %22 = alloca %class.KV.6, align 8
  %23 = alloca %class.KV.6*, align 8
  %24 = alloca %class.KV.6*, align 8
  store %class.KV.5* %1, %class.KV.5** %7, align 8
  store i64 %2, i64* %8, align 8
  store %class.key* %3, %class.key** %9, align 8
  store %class.key* %4, %class.key** %10, align 8
  store i64* %5, i64** %11, align 8
  %25 = load %class.KV.5*, %class.KV.5** %7, align 8
  %26 = getelementptr inbounds %class.KV.5, %class.KV.5* %25, i32 0, i32 1
  %27 = bitcast %"union.KV<key, key, 6>::Val"* %26 to %class.KV.6**
  %28 = load %class.KV.6*, %class.KV.6** %27, align 8
  store %class.KV.6* %28, %class.KV.6** %12, align 8
  %29 = load %class.KV.5*, %class.KV.5** %7, align 8
  %30 = getelementptr inbounds %class.KV.5, %class.KV.5* %29, i32 0, i32 0
  %31 = bitcast %"union.KV<key, key, 6>::Key"* %30 to i64*
  %32 = load i64, i64* %31, align 8
  %33 = lshr i64 %32, 1
  store i64 %33, i64* %13, align 8
  %34 = load i64, i64* %8, align 8
  %35 = and i64 %34, 63
  %36 = urem i64 %35, 63
  %37 = trunc i64 %36 to i32
  store i32 %37, i32* %14, align 4
  %38 = load i64, i64* %13, align 8
  %39 = call i64 @llvm.ctpop.i64(i64 %38)
  %40 = trunc i64 %39 to i32
  store i32 %40, i32* %15, align 4
  %41 = load i64, i64* %13, align 8
  %42 = shl i64 %41, 1
  %43 = load i32, i32* %14, align 4
  %44 = sub i32 63, %43
  %45 = zext i32 %44 to i64
  %46 = shl i64 %42, %45
  %47 = call i64 @llvm.ctpop.i64(i64 %46)
  %48 = trunc i64 %47 to i32
  store i32 %48, i32* %16, align 4
  %49 = load i64, i64* %13, align 8
  %50 = load i32, i32* %14, align 4
  %51 = zext i32 %50 to i64
  %52 = shl i64 1, %51
  %53 = and i64 %49, %52
  %54 = icmp ne i64 %53, 0
  %55 = zext i1 %54 to i8
  store i8 %55, i8* %17, align 1
  %56 = load i8, i8* %17, align 1
  %57 = trunc i8 %56 to i1
  br i1 %57, label %58, label %149

; <label>:58:                                     ; preds = %6
  %59 = load %class.KV.6*, %class.KV.6** %12, align 8
  %60 = load i32, i32* %16, align 4
  %61 = zext i32 %60 to i64
  %62 = getelementptr inbounds %class.KV.6, %class.KV.6* %59, i64 %61
  %63 = getelementptr inbounds %class.KV.6, %class.KV.6* %62, i32 0, i32 0
  %64 = bitcast %"union.KV<key, key, 7>::Key"* %63 to i64*
  %65 = load i64, i64* %64, align 8
  %66 = and i64 %65, 1
  %67 = icmp eq i64 %66, 0
  br i1 %67, label %68, label %130

; <label>:68:                                     ; preds = %58
  %69 = load %class.KV.6*, %class.KV.6** %12, align 8
  %70 = load i32, i32* %16, align 4
  %71 = zext i32 %70 to i64
  %72 = getelementptr inbounds %class.KV.6, %class.KV.6* %69, i64 %71
  %73 = getelementptr inbounds %class.KV.6, %class.KV.6* %72, i32 0, i32 0
  %74 = bitcast %"union.KV<key, key, 7>::Key"* %73 to %class.key**
  %75 = load %class.key*, %class.key** %74, align 8
  %76 = load %class.key*, %class.key** %9, align 8
  %77 = call zeroext i1 @_ZNK3keyeqERKS_(%class.key* %75, %class.key* dereferenceable(8) %76)
  br i1 %77, label %78, label %90

; <label>:78:                                     ; preds = %68
  %79 = load %class.KV.6*, %class.KV.6** %12, align 8
  %80 = load i32, i32* %15, align 4
  %81 = load i32, i32* %16, align 4
  %82 = load %class.key*, %class.key** %9, align 8
  %83 = load %class.key*, %class.key** %10, align 8
  call void @_ZN2KVI3keyS0_Lj7EEC2EPKS0_S3_(%class.KV.6* %19, %class.key* %82, %class.key* %83)
  %84 = call %class.KV.6* @_ZN2KVI3keyS0_Lj7EE11update_nodeEPKS1_jjRS2_(%class.KV.6* %79, i32 %80, i32 %81, %class.KV.6* dereferenceable(16) %19)
  store %class.KV.6* %84, %class.KV.6** %18, align 8
  %85 = load %class.KV.5*, %class.KV.5** %7, align 8
  %86 = getelementptr inbounds %class.KV.5, %class.KV.5* %85, i32 0, i32 0
  %87 = bitcast %"union.KV<key, key, 6>::Key"* %86 to i64*
  %88 = load i64, i64* %87, align 8
  %89 = load %class.KV.6*, %class.KV.6** %18, align 8
  call void @_ZN2KVI3keyS0_Lj6EEC2EmPKS_IS0_S0_Lj7EE(%class.KV.5* %0, i64 %88, %class.KV.6* %89)
  br label %198

; <label>:90:                                     ; preds = %68
  %91 = load i64*, i64** %11, align 8
  %92 = load i64, i64* %91, align 8
  %93 = add i64 %92, 1
  store i64 %93, i64* %91, align 8
  %94 = load %class.KV.6*, %class.KV.6** %12, align 8
  %95 = load i32, i32* %16, align 4
  %96 = zext i32 %95 to i64
  %97 = getelementptr inbounds %class.KV.6, %class.KV.6* %94, i64 %96
  %98 = getelementptr inbounds %class.KV.6, %class.KV.6* %97, i32 0, i32 0
  %99 = bitcast %"union.KV<key, key, 7>::Key"* %98 to %class.key**
  %100 = load %class.key*, %class.key** %99, align 8
  %101 = call i64 @_ZNK3key4hashEv(%class.key* %100)
  %102 = lshr i64 %101, 46
  %103 = load %class.KV.6*, %class.KV.6** %12, align 8
  %104 = load i32, i32* %16, align 4
  %105 = zext i32 %104 to i64
  %106 = getelementptr inbounds %class.KV.6, %class.KV.6* %103, i64 %105
  %107 = getelementptr inbounds %class.KV.6, %class.KV.6* %106, i32 0, i32 0
  %108 = bitcast %"union.KV<key, key, 7>::Key"* %107 to %class.key**
  %109 = load %class.key*, %class.key** %108, align 8
  %110 = load %class.KV.6*, %class.KV.6** %12, align 8
  %111 = load i32, i32* %16, align 4
  %112 = zext i32 %111 to i64
  %113 = getelementptr inbounds %class.KV.6, %class.KV.6* %110, i64 %112
  %114 = getelementptr inbounds %class.KV.6, %class.KV.6* %113, i32 0, i32 1
  %115 = bitcast %"union.KV<key, key, 7>::Val"* %114 to %class.key**
  %116 = load %class.key*, %class.key** %115, align 8
  %117 = load i64, i64* %8, align 8
  %118 = lshr i64 %117, 6
  %119 = load %class.key*, %class.key** %9, align 8
  %120 = load %class.key*, %class.key** %10, align 8
  call void @_ZN2KVI3keyS0_Lj7EE14new_inner_nodeEmPKS0_S3_mS3_S3_(%class.KV.6* sret %20, i64 %102, %class.key* %109, %class.key* %116, i64 %118, %class.key* %119, %class.key* %120)
  %121 = load %class.KV.6*, %class.KV.6** %12, align 8
  %122 = load i32, i32* %15, align 4
  %123 = load i32, i32* %16, align 4
  %124 = call %class.KV.6* @_ZN2KVI3keyS0_Lj7EE11update_nodeEPKS1_jjRS2_(%class.KV.6* %121, i32 %122, i32 %123, %class.KV.6* dereferenceable(16) %20)
  store %class.KV.6* %124, %class.KV.6** %21, align 8
  %125 = load %class.KV.5*, %class.KV.5** %7, align 8
  %126 = getelementptr inbounds %class.KV.5, %class.KV.5* %125, i32 0, i32 0
  %127 = bitcast %"union.KV<key, key, 6>::Key"* %126 to i64*
  %128 = load i64, i64* %127, align 8
  %129 = load %class.KV.6*, %class.KV.6** %21, align 8
  call void @_ZN2KVI3keyS0_Lj6EEC2EmPKS_IS0_S0_Lj7EE(%class.KV.5* %0, i64 %128, %class.KV.6* %129)
  br label %198

; <label>:130:                                    ; preds = %58
  %131 = load %class.KV.6*, %class.KV.6** %12, align 8
  %132 = load i32, i32* %16, align 4
  %133 = zext i32 %132 to i64
  %134 = getelementptr inbounds %class.KV.6, %class.KV.6* %131, i64 %133
  %135 = load i64, i64* %8, align 8
  %136 = lshr i64 %135, 6
  %137 = load %class.key*, %class.key** %9, align 8
  %138 = load %class.key*, %class.key** %10, align 8
  %139 = load i64*, i64** %11, align 8
  call void @_ZN2KVI3keyS0_Lj7EE12insert_innerERKS1_mPKS0_S5_Pm(%class.KV.6* sret %22, %class.KV.6* dereferenceable(16) %134, i64 %136, %class.key* %137, %class.key* %138, i64* %139)
  %140 = load %class.KV.6*, %class.KV.6** %12, align 8
  %141 = load i32, i32* %15, align 4
  %142 = load i32, i32* %16, align 4
  %143 = call %class.KV.6* @_ZN2KVI3keyS0_Lj7EE11update_nodeEPKS1_jjRS2_(%class.KV.6* %140, i32 %141, i32 %142, %class.KV.6* dereferenceable(16) %22)
  store %class.KV.6* %143, %class.KV.6** %23, align 8
  %144 = load %class.KV.5*, %class.KV.5** %7, align 8
  %145 = getelementptr inbounds %class.KV.5, %class.KV.5* %144, i32 0, i32 0
  %146 = bitcast %"union.KV<key, key, 6>::Key"* %145 to i64*
  %147 = load i64, i64* %146, align 8
  %148 = load %class.KV.6*, %class.KV.6** %23, align 8
  call void @_ZN2KVI3keyS0_Lj6EEC2EmPKS_IS0_S0_Lj7EE(%class.KV.5* %0, i64 %147, %class.KV.6* %148)
  br label %198

; <label>:149:                                    ; preds = %6
  %150 = load i64*, i64** %11, align 8
  %151 = load i64, i64* %150, align 8
  %152 = add i64 %151, 1
  store i64 %152, i64* %150, align 8
  %153 = load i32, i32* %15, align 4
  %154 = add i32 %153, 1
  %155 = zext i32 %154 to i64
  %156 = mul i64 %155, 16
  %157 = call noalias i8* @malloc(i64 %156) #8
  %158 = bitcast i8* %157 to %class.KV.6*
  store %class.KV.6* %158, %class.KV.6** %24, align 8
  %159 = load %class.KV.6*, %class.KV.6** %24, align 8
  %160 = bitcast %class.KV.6* %159 to i8*
  %161 = load %class.KV.6*, %class.KV.6** %12, align 8
  %162 = bitcast %class.KV.6* %161 to i8*
  %163 = load i32, i32* %16, align 4
  %164 = zext i32 %163 to i64
  %165 = mul i64 %164, 16
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %160, i8* %162, i64 %165, i32 8, i1 false)
  %166 = load %class.KV.6*, %class.KV.6** %24, align 8
  %167 = load i32, i32* %16, align 4
  %168 = add i32 %167, 1
  %169 = zext i32 %168 to i64
  %170 = getelementptr inbounds %class.KV.6, %class.KV.6* %166, i64 %169
  %171 = bitcast %class.KV.6* %170 to i8*
  %172 = load %class.KV.6*, %class.KV.6** %12, align 8
  %173 = load i32, i32* %16, align 4
  %174 = zext i32 %173 to i64
  %175 = getelementptr inbounds %class.KV.6, %class.KV.6* %172, i64 %174
  %176 = bitcast %class.KV.6* %175 to i8*
  %177 = load i32, i32* %15, align 4
  %178 = load i32, i32* %16, align 4
  %179 = sub i32 %177, %178
  %180 = zext i32 %179 to i64
  %181 = mul i64 %180, 16
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %171, i8* %176, i64 %181, i32 8, i1 false)
  %182 = load %class.KV.6*, %class.KV.6** %24, align 8
  %183 = load i32, i32* %16, align 4
  %184 = zext i32 %183 to i64
  %185 = getelementptr inbounds %class.KV.6, %class.KV.6* %182, i64 %184
  %186 = bitcast %class.KV.6* %185 to i8*
  %187 = bitcast i8* %186 to %class.KV.6*
  %188 = load %class.key*, %class.key** %9, align 8
  %189 = load %class.key*, %class.key** %10, align 8
  call void @_ZN2KVI3keyS0_Lj7EEC2EPKS0_S3_(%class.KV.6* %187, %class.key* %188, %class.key* %189)
  %190 = load i64, i64* %13, align 8
  %191 = load i32, i32* %14, align 4
  %192 = zext i32 %191 to i64
  %193 = shl i64 1, %192
  %194 = or i64 %190, %193
  %195 = shl i64 %194, 1
  %196 = or i64 %195, 1
  %197 = load %class.KV.6*, %class.KV.6** %24, align 8
  call void @_ZN2KVI3keyS0_Lj6EEC2EmPKS_IS0_S0_Lj7EE(%class.KV.5* %0, i64 %196, %class.KV.6* %197)
  br label %198

; <label>:198:                                    ; preds = %149, %130, %90, %78
  ret void
}

; Function Attrs: noinline optnone sspstrong uwtable
define linkonce_odr %class.KV.6* @_ZN2KVI3keyS0_Lj7EE11update_nodeEPKS1_jjRS2_(%class.KV.6*, i32, i32, %class.KV.6* dereferenceable(16)) #2 comdat align 2 {
  %5 = alloca %class.KV.6*, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca %class.KV.6*, align 8
  %9 = alloca %class.KV.6*, align 8
  store %class.KV.6* %0, %class.KV.6** %5, align 8
  store i32 %1, i32* %6, align 4
  store i32 %2, i32* %7, align 4
  store %class.KV.6* %3, %class.KV.6** %8, align 8
  %10 = load i32, i32* %6, align 4
  %11 = zext i32 %10 to i64
  %12 = mul i64 %11, 16
  %13 = call noalias i8* @malloc(i64 %12) #8
  %14 = bitcast i8* %13 to %class.KV.6*
  store %class.KV.6* %14, %class.KV.6** %9, align 8
  %15 = load %class.KV.6*, %class.KV.6** %9, align 8
  %16 = bitcast %class.KV.6* %15 to i8*
  %17 = load %class.KV.6*, %class.KV.6** %5, align 8
  %18 = bitcast %class.KV.6* %17 to i8*
  %19 = load i32, i32* %6, align 4
  %20 = zext i32 %19 to i64
  %21 = mul i64 %20, 16
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %16, i8* %18, i64 %21, i32 8, i1 false)
  %22 = load %class.KV.6*, %class.KV.6** %9, align 8
  %23 = load i32, i32* %7, align 4
  %24 = zext i32 %23 to i64
  %25 = getelementptr inbounds %class.KV.6, %class.KV.6* %22, i64 %24
  %26 = bitcast %class.KV.6* %25 to i8*
  %27 = bitcast i8* %26 to %class.KV.6*
  %28 = load %class.KV.6*, %class.KV.6** %8, align 8
  call void @_ZN2KVI3keyS0_Lj7EEC2ERKS1_(%class.KV.6* %27, %class.KV.6* dereferenceable(16) %28)
  %29 = load %class.KV.6*, %class.KV.6** %9, align 8
  ret %class.KV.6* %29
}

; Function Attrs: noinline optnone sspstrong uwtable
define linkonce_odr void @_ZN2KVI3keyS0_Lj7EE12insert_innerERKS1_mPKS0_S5_Pm(%class.KV.6* noalias sret, %class.KV.6* dereferenceable(16), i64, %class.key*, %class.key*, i64*) #2 comdat align 2 {
  %7 = alloca %class.KV.6*, align 8
  %8 = alloca i64, align 8
  %9 = alloca %class.key*, align 8
  %10 = alloca %class.key*, align 8
  %11 = alloca i64*, align 8
  %12 = alloca %class.KV.7*, align 8
  %13 = alloca i64, align 8
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  %16 = alloca i32, align 4
  %17 = alloca i8, align 1
  %18 = alloca %class.KV.7*, align 8
  %19 = alloca %class.KV.7, align 8
  %20 = alloca %class.KV.7, align 8
  %21 = alloca %class.KV.7*, align 8
  %22 = alloca %class.KV.7, align 8
  %23 = alloca %class.KV.7*, align 8
  %24 = alloca %class.KV.7*, align 8
  store %class.KV.6* %1, %class.KV.6** %7, align 8
  store i64 %2, i64* %8, align 8
  store %class.key* %3, %class.key** %9, align 8
  store %class.key* %4, %class.key** %10, align 8
  store i64* %5, i64** %11, align 8
  %25 = load %class.KV.6*, %class.KV.6** %7, align 8
  %26 = getelementptr inbounds %class.KV.6, %class.KV.6* %25, i32 0, i32 1
  %27 = bitcast %"union.KV<key, key, 7>::Val"* %26 to %class.KV.7**
  %28 = load %class.KV.7*, %class.KV.7** %27, align 8
  store %class.KV.7* %28, %class.KV.7** %12, align 8
  %29 = load %class.KV.6*, %class.KV.6** %7, align 8
  %30 = getelementptr inbounds %class.KV.6, %class.KV.6* %29, i32 0, i32 0
  %31 = bitcast %"union.KV<key, key, 7>::Key"* %30 to i64*
  %32 = load i64, i64* %31, align 8
  %33 = lshr i64 %32, 1
  store i64 %33, i64* %13, align 8
  %34 = load i64, i64* %8, align 8
  %35 = and i64 %34, 63
  %36 = urem i64 %35, 63
  %37 = trunc i64 %36 to i32
  store i32 %37, i32* %14, align 4
  %38 = load i64, i64* %13, align 8
  %39 = call i64 @llvm.ctpop.i64(i64 %38)
  %40 = trunc i64 %39 to i32
  store i32 %40, i32* %15, align 4
  %41 = load i64, i64* %13, align 8
  %42 = shl i64 %41, 1
  %43 = load i32, i32* %14, align 4
  %44 = sub i32 63, %43
  %45 = zext i32 %44 to i64
  %46 = shl i64 %42, %45
  %47 = call i64 @llvm.ctpop.i64(i64 %46)
  %48 = trunc i64 %47 to i32
  store i32 %48, i32* %16, align 4
  %49 = load i64, i64* %13, align 8
  %50 = load i32, i32* %14, align 4
  %51 = zext i32 %50 to i64
  %52 = shl i64 1, %51
  %53 = and i64 %49, %52
  %54 = icmp ne i64 %53, 0
  %55 = zext i1 %54 to i8
  store i8 %55, i8* %17, align 1
  %56 = load i8, i8* %17, align 1
  %57 = trunc i8 %56 to i1
  br i1 %57, label %58, label %149

; <label>:58:                                     ; preds = %6
  %59 = load %class.KV.7*, %class.KV.7** %12, align 8
  %60 = load i32, i32* %16, align 4
  %61 = zext i32 %60 to i64
  %62 = getelementptr inbounds %class.KV.7, %class.KV.7* %59, i64 %61
  %63 = getelementptr inbounds %class.KV.7, %class.KV.7* %62, i32 0, i32 0
  %64 = bitcast %"union.KV<key, key, 8>::Key"* %63 to i64*
  %65 = load i64, i64* %64, align 8
  %66 = and i64 %65, 1
  %67 = icmp eq i64 %66, 0
  br i1 %67, label %68, label %130

; <label>:68:                                     ; preds = %58
  %69 = load %class.KV.7*, %class.KV.7** %12, align 8
  %70 = load i32, i32* %16, align 4
  %71 = zext i32 %70 to i64
  %72 = getelementptr inbounds %class.KV.7, %class.KV.7* %69, i64 %71
  %73 = getelementptr inbounds %class.KV.7, %class.KV.7* %72, i32 0, i32 0
  %74 = bitcast %"union.KV<key, key, 8>::Key"* %73 to %class.key**
  %75 = load %class.key*, %class.key** %74, align 8
  %76 = load %class.key*, %class.key** %9, align 8
  %77 = call zeroext i1 @_ZNK3keyeqERKS_(%class.key* %75, %class.key* dereferenceable(8) %76)
  br i1 %77, label %78, label %90

; <label>:78:                                     ; preds = %68
  %79 = load %class.KV.7*, %class.KV.7** %12, align 8
  %80 = load i32, i32* %15, align 4
  %81 = load i32, i32* %16, align 4
  %82 = load %class.key*, %class.key** %9, align 8
  %83 = load %class.key*, %class.key** %10, align 8
  call void @_ZN2KVI3keyS0_Lj8EEC2EPKS0_S3_(%class.KV.7* %19, %class.key* %82, %class.key* %83)
  %84 = call %class.KV.7* @_ZN2KVI3keyS0_Lj8EE11update_nodeEPKS1_jjRS2_(%class.KV.7* %79, i32 %80, i32 %81, %class.KV.7* dereferenceable(16) %19)
  store %class.KV.7* %84, %class.KV.7** %18, align 8
  %85 = load %class.KV.6*, %class.KV.6** %7, align 8
  %86 = getelementptr inbounds %class.KV.6, %class.KV.6* %85, i32 0, i32 0
  %87 = bitcast %"union.KV<key, key, 7>::Key"* %86 to i64*
  %88 = load i64, i64* %87, align 8
  %89 = load %class.KV.7*, %class.KV.7** %18, align 8
  call void @_ZN2KVI3keyS0_Lj7EEC2EmPKS_IS0_S0_Lj8EE(%class.KV.6* %0, i64 %88, %class.KV.7* %89)
  br label %198

; <label>:90:                                     ; preds = %68
  %91 = load i64*, i64** %11, align 8
  %92 = load i64, i64* %91, align 8
  %93 = add i64 %92, 1
  store i64 %93, i64* %91, align 8
  %94 = load %class.KV.7*, %class.KV.7** %12, align 8
  %95 = load i32, i32* %16, align 4
  %96 = zext i32 %95 to i64
  %97 = getelementptr inbounds %class.KV.7, %class.KV.7* %94, i64 %96
  %98 = getelementptr inbounds %class.KV.7, %class.KV.7* %97, i32 0, i32 0
  %99 = bitcast %"union.KV<key, key, 8>::Key"* %98 to %class.key**
  %100 = load %class.key*, %class.key** %99, align 8
  %101 = call i64 @_ZNK3key4hashEv(%class.key* %100)
  %102 = lshr i64 %101, 52
  %103 = load %class.KV.7*, %class.KV.7** %12, align 8
  %104 = load i32, i32* %16, align 4
  %105 = zext i32 %104 to i64
  %106 = getelementptr inbounds %class.KV.7, %class.KV.7* %103, i64 %105
  %107 = getelementptr inbounds %class.KV.7, %class.KV.7* %106, i32 0, i32 0
  %108 = bitcast %"union.KV<key, key, 8>::Key"* %107 to %class.key**
  %109 = load %class.key*, %class.key** %108, align 8
  %110 = load %class.KV.7*, %class.KV.7** %12, align 8
  %111 = load i32, i32* %16, align 4
  %112 = zext i32 %111 to i64
  %113 = getelementptr inbounds %class.KV.7, %class.KV.7* %110, i64 %112
  %114 = getelementptr inbounds %class.KV.7, %class.KV.7* %113, i32 0, i32 1
  %115 = bitcast %"union.KV<key, key, 8>::Val"* %114 to %class.key**
  %116 = load %class.key*, %class.key** %115, align 8
  %117 = load i64, i64* %8, align 8
  %118 = lshr i64 %117, 6
  %119 = load %class.key*, %class.key** %9, align 8
  %120 = load %class.key*, %class.key** %10, align 8
  call void @_ZN2KVI3keyS0_Lj8EE14new_inner_nodeEmPKS0_S3_mS3_S3_(%class.KV.7* sret %20, i64 %102, %class.key* %109, %class.key* %116, i64 %118, %class.key* %119, %class.key* %120)
  %121 = load %class.KV.7*, %class.KV.7** %12, align 8
  %122 = load i32, i32* %15, align 4
  %123 = load i32, i32* %16, align 4
  %124 = call %class.KV.7* @_ZN2KVI3keyS0_Lj8EE11update_nodeEPKS1_jjRS2_(%class.KV.7* %121, i32 %122, i32 %123, %class.KV.7* dereferenceable(16) %20)
  store %class.KV.7* %124, %class.KV.7** %21, align 8
  %125 = load %class.KV.6*, %class.KV.6** %7, align 8
  %126 = getelementptr inbounds %class.KV.6, %class.KV.6* %125, i32 0, i32 0
  %127 = bitcast %"union.KV<key, key, 7>::Key"* %126 to i64*
  %128 = load i64, i64* %127, align 8
  %129 = load %class.KV.7*, %class.KV.7** %21, align 8
  call void @_ZN2KVI3keyS0_Lj7EEC2EmPKS_IS0_S0_Lj8EE(%class.KV.6* %0, i64 %128, %class.KV.7* %129)
  br label %198

; <label>:130:                                    ; preds = %58
  %131 = load %class.KV.7*, %class.KV.7** %12, align 8
  %132 = load i32, i32* %16, align 4
  %133 = zext i32 %132 to i64
  %134 = getelementptr inbounds %class.KV.7, %class.KV.7* %131, i64 %133
  %135 = load i64, i64* %8, align 8
  %136 = lshr i64 %135, 6
  %137 = load %class.key*, %class.key** %9, align 8
  %138 = load %class.key*, %class.key** %10, align 8
  %139 = load i64*, i64** %11, align 8
  call void @_ZN2KVI3keyS0_Lj8EE12insert_innerERKS1_mPKS0_S5_Pm(%class.KV.7* sret %22, %class.KV.7* dereferenceable(16) %134, i64 %136, %class.key* %137, %class.key* %138, i64* %139)
  %140 = load %class.KV.7*, %class.KV.7** %12, align 8
  %141 = load i32, i32* %15, align 4
  %142 = load i32, i32* %16, align 4
  %143 = call %class.KV.7* @_ZN2KVI3keyS0_Lj8EE11update_nodeEPKS1_jjRS2_(%class.KV.7* %140, i32 %141, i32 %142, %class.KV.7* dereferenceable(16) %22)
  store %class.KV.7* %143, %class.KV.7** %23, align 8
  %144 = load %class.KV.6*, %class.KV.6** %7, align 8
  %145 = getelementptr inbounds %class.KV.6, %class.KV.6* %144, i32 0, i32 0
  %146 = bitcast %"union.KV<key, key, 7>::Key"* %145 to i64*
  %147 = load i64, i64* %146, align 8
  %148 = load %class.KV.7*, %class.KV.7** %23, align 8
  call void @_ZN2KVI3keyS0_Lj7EEC2EmPKS_IS0_S0_Lj8EE(%class.KV.6* %0, i64 %147, %class.KV.7* %148)
  br label %198

; <label>:149:                                    ; preds = %6
  %150 = load i64*, i64** %11, align 8
  %151 = load i64, i64* %150, align 8
  %152 = add i64 %151, 1
  store i64 %152, i64* %150, align 8
  %153 = load i32, i32* %15, align 4
  %154 = add i32 %153, 1
  %155 = zext i32 %154 to i64
  %156 = mul i64 %155, 16
  %157 = call noalias i8* @malloc(i64 %156) #8
  %158 = bitcast i8* %157 to %class.KV.7*
  store %class.KV.7* %158, %class.KV.7** %24, align 8
  %159 = load %class.KV.7*, %class.KV.7** %24, align 8
  %160 = bitcast %class.KV.7* %159 to i8*
  %161 = load %class.KV.7*, %class.KV.7** %12, align 8
  %162 = bitcast %class.KV.7* %161 to i8*
  %163 = load i32, i32* %16, align 4
  %164 = zext i32 %163 to i64
  %165 = mul i64 %164, 16
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %160, i8* %162, i64 %165, i32 8, i1 false)
  %166 = load %class.KV.7*, %class.KV.7** %24, align 8
  %167 = load i32, i32* %16, align 4
  %168 = add i32 %167, 1
  %169 = zext i32 %168 to i64
  %170 = getelementptr inbounds %class.KV.7, %class.KV.7* %166, i64 %169
  %171 = bitcast %class.KV.7* %170 to i8*
  %172 = load %class.KV.7*, %class.KV.7** %12, align 8
  %173 = load i32, i32* %16, align 4
  %174 = zext i32 %173 to i64
  %175 = getelementptr inbounds %class.KV.7, %class.KV.7* %172, i64 %174
  %176 = bitcast %class.KV.7* %175 to i8*
  %177 = load i32, i32* %15, align 4
  %178 = load i32, i32* %16, align 4
  %179 = sub i32 %177, %178
  %180 = zext i32 %179 to i64
  %181 = mul i64 %180, 16
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %171, i8* %176, i64 %181, i32 8, i1 false)
  %182 = load %class.KV.7*, %class.KV.7** %24, align 8
  %183 = load i32, i32* %16, align 4
  %184 = zext i32 %183 to i64
  %185 = getelementptr inbounds %class.KV.7, %class.KV.7* %182, i64 %184
  %186 = bitcast %class.KV.7* %185 to i8*
  %187 = bitcast i8* %186 to %class.KV.7*
  %188 = load %class.key*, %class.key** %9, align 8
  %189 = load %class.key*, %class.key** %10, align 8
  call void @_ZN2KVI3keyS0_Lj8EEC2EPKS0_S3_(%class.KV.7* %187, %class.key* %188, %class.key* %189)
  %190 = load i64, i64* %13, align 8
  %191 = load i32, i32* %14, align 4
  %192 = zext i32 %191 to i64
  %193 = shl i64 1, %192
  %194 = or i64 %190, %193
  %195 = shl i64 %194, 1
  %196 = or i64 %195, 1
  %197 = load %class.KV.7*, %class.KV.7** %24, align 8
  call void @_ZN2KVI3keyS0_Lj7EEC2EmPKS_IS0_S0_Lj8EE(%class.KV.6* %0, i64 %196, %class.KV.7* %197)
  br label %198

; <label>:198:                                    ; preds = %149, %130, %90, %78
  ret void
}

; Function Attrs: noinline optnone sspstrong uwtable
define linkonce_odr %class.KV.7* @_ZN2KVI3keyS0_Lj8EE11update_nodeEPKS1_jjRS2_(%class.KV.7*, i32, i32, %class.KV.7* dereferenceable(16)) #2 comdat align 2 {
  %5 = alloca %class.KV.7*, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca %class.KV.7*, align 8
  %9 = alloca %class.KV.7*, align 8
  store %class.KV.7* %0, %class.KV.7** %5, align 8
  store i32 %1, i32* %6, align 4
  store i32 %2, i32* %7, align 4
  store %class.KV.7* %3, %class.KV.7** %8, align 8
  %10 = load i32, i32* %6, align 4
  %11 = zext i32 %10 to i64
  %12 = mul i64 %11, 16
  %13 = call noalias i8* @malloc(i64 %12) #8
  %14 = bitcast i8* %13 to %class.KV.7*
  store %class.KV.7* %14, %class.KV.7** %9, align 8
  %15 = load %class.KV.7*, %class.KV.7** %9, align 8
  %16 = bitcast %class.KV.7* %15 to i8*
  %17 = load %class.KV.7*, %class.KV.7** %5, align 8
  %18 = bitcast %class.KV.7* %17 to i8*
  %19 = load i32, i32* %6, align 4
  %20 = zext i32 %19 to i64
  %21 = mul i64 %20, 16
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %16, i8* %18, i64 %21, i32 8, i1 false)
  %22 = load %class.KV.7*, %class.KV.7** %9, align 8
  %23 = load i32, i32* %7, align 4
  %24 = zext i32 %23 to i64
  %25 = getelementptr inbounds %class.KV.7, %class.KV.7* %22, i64 %24
  %26 = bitcast %class.KV.7* %25 to i8*
  %27 = bitcast i8* %26 to %class.KV.7*
  %28 = load %class.KV.7*, %class.KV.7** %8, align 8
  call void @_ZN2KVI3keyS0_Lj8EEC2ERKS1_(%class.KV.7* %27, %class.KV.7* dereferenceable(16) %28)
  %29 = load %class.KV.7*, %class.KV.7** %9, align 8
  ret %class.KV.7* %29
}

; Function Attrs: noinline optnone sspstrong uwtable
define linkonce_odr void @_ZN2KVI3keyS0_Lj8EE12insert_innerERKS1_mPKS0_S5_Pm(%class.KV.7* noalias sret, %class.KV.7* dereferenceable(16), i64, %class.key*, %class.key*, i64*) #2 comdat align 2 {
  %7 = alloca %class.KV.7*, align 8
  %8 = alloca i64, align 8
  %9 = alloca %class.key*, align 8
  %10 = alloca %class.key*, align 8
  %11 = alloca i64*, align 8
  %12 = alloca %class.KV.8*, align 8
  %13 = alloca i64, align 8
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  %16 = alloca i32, align 4
  %17 = alloca i8, align 1
  %18 = alloca %class.KV.8*, align 8
  %19 = alloca %class.KV.8, align 8
  %20 = alloca %class.KV.8, align 8
  %21 = alloca %class.KV.8*, align 8
  %22 = alloca %class.KV.8, align 8
  %23 = alloca %class.KV.8*, align 8
  %24 = alloca %class.KV.8*, align 8
  store %class.KV.7* %1, %class.KV.7** %7, align 8
  store i64 %2, i64* %8, align 8
  store %class.key* %3, %class.key** %9, align 8
  store %class.key* %4, %class.key** %10, align 8
  store i64* %5, i64** %11, align 8
  %25 = load %class.KV.7*, %class.KV.7** %7, align 8
  %26 = getelementptr inbounds %class.KV.7, %class.KV.7* %25, i32 0, i32 1
  %27 = bitcast %"union.KV<key, key, 8>::Val"* %26 to %class.KV.8**
  %28 = load %class.KV.8*, %class.KV.8** %27, align 8
  store %class.KV.8* %28, %class.KV.8** %12, align 8
  %29 = load %class.KV.7*, %class.KV.7** %7, align 8
  %30 = getelementptr inbounds %class.KV.7, %class.KV.7* %29, i32 0, i32 0
  %31 = bitcast %"union.KV<key, key, 8>::Key"* %30 to i64*
  %32 = load i64, i64* %31, align 8
  %33 = lshr i64 %32, 1
  store i64 %33, i64* %13, align 8
  %34 = load i64, i64* %8, align 8
  %35 = and i64 %34, 63
  %36 = urem i64 %35, 63
  %37 = trunc i64 %36 to i32
  store i32 %37, i32* %14, align 4
  %38 = load i64, i64* %13, align 8
  %39 = call i64 @llvm.ctpop.i64(i64 %38)
  %40 = trunc i64 %39 to i32
  store i32 %40, i32* %15, align 4
  %41 = load i64, i64* %13, align 8
  %42 = shl i64 %41, 1
  %43 = load i32, i32* %14, align 4
  %44 = sub i32 63, %43
  %45 = zext i32 %44 to i64
  %46 = shl i64 %42, %45
  %47 = call i64 @llvm.ctpop.i64(i64 %46)
  %48 = trunc i64 %47 to i32
  store i32 %48, i32* %16, align 4
  %49 = load i64, i64* %13, align 8
  %50 = load i32, i32* %14, align 4
  %51 = zext i32 %50 to i64
  %52 = shl i64 1, %51
  %53 = and i64 %49, %52
  %54 = icmp ne i64 %53, 0
  %55 = zext i1 %54 to i8
  store i8 %55, i8* %17, align 1
  %56 = load i8, i8* %17, align 1
  %57 = trunc i8 %56 to i1
  br i1 %57, label %58, label %149

; <label>:58:                                     ; preds = %6
  %59 = load %class.KV.8*, %class.KV.8** %12, align 8
  %60 = load i32, i32* %16, align 4
  %61 = zext i32 %60 to i64
  %62 = getelementptr inbounds %class.KV.8, %class.KV.8* %59, i64 %61
  %63 = getelementptr inbounds %class.KV.8, %class.KV.8* %62, i32 0, i32 0
  %64 = bitcast %"union.KV<key, key, 9>::Key"* %63 to i64*
  %65 = load i64, i64* %64, align 8
  %66 = and i64 %65, 1
  %67 = icmp eq i64 %66, 0
  br i1 %67, label %68, label %130

; <label>:68:                                     ; preds = %58
  %69 = load %class.KV.8*, %class.KV.8** %12, align 8
  %70 = load i32, i32* %16, align 4
  %71 = zext i32 %70 to i64
  %72 = getelementptr inbounds %class.KV.8, %class.KV.8* %69, i64 %71
  %73 = getelementptr inbounds %class.KV.8, %class.KV.8* %72, i32 0, i32 0
  %74 = bitcast %"union.KV<key, key, 9>::Key"* %73 to %class.key**
  %75 = load %class.key*, %class.key** %74, align 8
  %76 = load %class.key*, %class.key** %9, align 8
  %77 = call zeroext i1 @_ZNK3keyeqERKS_(%class.key* %75, %class.key* dereferenceable(8) %76)
  br i1 %77, label %78, label %90

; <label>:78:                                     ; preds = %68
  %79 = load %class.KV.8*, %class.KV.8** %12, align 8
  %80 = load i32, i32* %15, align 4
  %81 = load i32, i32* %16, align 4
  %82 = load %class.key*, %class.key** %9, align 8
  %83 = load %class.key*, %class.key** %10, align 8
  call void @_ZN2KVI3keyS0_Lj9EEC2EPKS0_S3_(%class.KV.8* %19, %class.key* %82, %class.key* %83)
  %84 = call %class.KV.8* @_ZN2KVI3keyS0_Lj9EE11update_nodeEPKS1_jjRS2_(%class.KV.8* %79, i32 %80, i32 %81, %class.KV.8* dereferenceable(16) %19)
  store %class.KV.8* %84, %class.KV.8** %18, align 8
  %85 = load %class.KV.7*, %class.KV.7** %7, align 8
  %86 = getelementptr inbounds %class.KV.7, %class.KV.7* %85, i32 0, i32 0
  %87 = bitcast %"union.KV<key, key, 8>::Key"* %86 to i64*
  %88 = load i64, i64* %87, align 8
  %89 = load %class.KV.8*, %class.KV.8** %18, align 8
  call void @_ZN2KVI3keyS0_Lj8EEC2EmPKS_IS0_S0_Lj9EE(%class.KV.7* %0, i64 %88, %class.KV.8* %89)
  br label %198

; <label>:90:                                     ; preds = %68
  %91 = load i64*, i64** %11, align 8
  %92 = load i64, i64* %91, align 8
  %93 = add i64 %92, 1
  store i64 %93, i64* %91, align 8
  %94 = load %class.KV.8*, %class.KV.8** %12, align 8
  %95 = load i32, i32* %16, align 4
  %96 = zext i32 %95 to i64
  %97 = getelementptr inbounds %class.KV.8, %class.KV.8* %94, i64 %96
  %98 = getelementptr inbounds %class.KV.8, %class.KV.8* %97, i32 0, i32 0
  %99 = bitcast %"union.KV<key, key, 9>::Key"* %98 to %class.key**
  %100 = load %class.key*, %class.key** %99, align 8
  %101 = call i64 @_ZNK3key4hashEv(%class.key* %100)
  %102 = lshr i64 %101, 58
  %103 = load %class.KV.8*, %class.KV.8** %12, align 8
  %104 = load i32, i32* %16, align 4
  %105 = zext i32 %104 to i64
  %106 = getelementptr inbounds %class.KV.8, %class.KV.8* %103, i64 %105
  %107 = getelementptr inbounds %class.KV.8, %class.KV.8* %106, i32 0, i32 0
  %108 = bitcast %"union.KV<key, key, 9>::Key"* %107 to %class.key**
  %109 = load %class.key*, %class.key** %108, align 8
  %110 = load %class.KV.8*, %class.KV.8** %12, align 8
  %111 = load i32, i32* %16, align 4
  %112 = zext i32 %111 to i64
  %113 = getelementptr inbounds %class.KV.8, %class.KV.8* %110, i64 %112
  %114 = getelementptr inbounds %class.KV.8, %class.KV.8* %113, i32 0, i32 1
  %115 = bitcast %"union.KV<key, key, 9>::Val"* %114 to %class.key**
  %116 = load %class.key*, %class.key** %115, align 8
  %117 = load i64, i64* %8, align 8
  %118 = lshr i64 %117, 6
  %119 = load %class.key*, %class.key** %9, align 8
  %120 = load %class.key*, %class.key** %10, align 8
  call void @_ZN2KVI3keyS0_Lj9EE14new_inner_nodeEmPKS0_S3_mS3_S3_(%class.KV.8* sret %20, i64 %102, %class.key* %109, %class.key* %116, i64 %118, %class.key* %119, %class.key* %120)
  %121 = load %class.KV.8*, %class.KV.8** %12, align 8
  %122 = load i32, i32* %15, align 4
  %123 = load i32, i32* %16, align 4
  %124 = call %class.KV.8* @_ZN2KVI3keyS0_Lj9EE11update_nodeEPKS1_jjRS2_(%class.KV.8* %121, i32 %122, i32 %123, %class.KV.8* dereferenceable(16) %20)
  store %class.KV.8* %124, %class.KV.8** %21, align 8
  %125 = load %class.KV.7*, %class.KV.7** %7, align 8
  %126 = getelementptr inbounds %class.KV.7, %class.KV.7* %125, i32 0, i32 0
  %127 = bitcast %"union.KV<key, key, 8>::Key"* %126 to i64*
  %128 = load i64, i64* %127, align 8
  %129 = load %class.KV.8*, %class.KV.8** %21, align 8
  call void @_ZN2KVI3keyS0_Lj8EEC2EmPKS_IS0_S0_Lj9EE(%class.KV.7* %0, i64 %128, %class.KV.8* %129)
  br label %198

; <label>:130:                                    ; preds = %58
  %131 = load %class.KV.8*, %class.KV.8** %12, align 8
  %132 = load i32, i32* %16, align 4
  %133 = zext i32 %132 to i64
  %134 = getelementptr inbounds %class.KV.8, %class.KV.8* %131, i64 %133
  %135 = load i64, i64* %8, align 8
  %136 = lshr i64 %135, 6
  %137 = load %class.key*, %class.key** %9, align 8
  %138 = load %class.key*, %class.key** %10, align 8
  %139 = load i64*, i64** %11, align 8
  call void @_ZN2KVI3keyS0_Lj9EE12insert_innerERKS1_mPKS0_S5_Pm(%class.KV.8* sret %22, %class.KV.8* dereferenceable(16) %134, i64 %136, %class.key* %137, %class.key* %138, i64* %139)
  %140 = load %class.KV.8*, %class.KV.8** %12, align 8
  %141 = load i32, i32* %15, align 4
  %142 = load i32, i32* %16, align 4
  %143 = call %class.KV.8* @_ZN2KVI3keyS0_Lj9EE11update_nodeEPKS1_jjRS2_(%class.KV.8* %140, i32 %141, i32 %142, %class.KV.8* dereferenceable(16) %22)
  store %class.KV.8* %143, %class.KV.8** %23, align 8
  %144 = load %class.KV.7*, %class.KV.7** %7, align 8
  %145 = getelementptr inbounds %class.KV.7, %class.KV.7* %144, i32 0, i32 0
  %146 = bitcast %"union.KV<key, key, 8>::Key"* %145 to i64*
  %147 = load i64, i64* %146, align 8
  %148 = load %class.KV.8*, %class.KV.8** %23, align 8
  call void @_ZN2KVI3keyS0_Lj8EEC2EmPKS_IS0_S0_Lj9EE(%class.KV.7* %0, i64 %147, %class.KV.8* %148)
  br label %198

; <label>:149:                                    ; preds = %6
  %150 = load i64*, i64** %11, align 8
  %151 = load i64, i64* %150, align 8
  %152 = add i64 %151, 1
  store i64 %152, i64* %150, align 8
  %153 = load i32, i32* %15, align 4
  %154 = add i32 %153, 1
  %155 = zext i32 %154 to i64
  %156 = mul i64 %155, 16
  %157 = call noalias i8* @malloc(i64 %156) #8
  %158 = bitcast i8* %157 to %class.KV.8*
  store %class.KV.8* %158, %class.KV.8** %24, align 8
  %159 = load %class.KV.8*, %class.KV.8** %24, align 8
  %160 = bitcast %class.KV.8* %159 to i8*
  %161 = load %class.KV.8*, %class.KV.8** %12, align 8
  %162 = bitcast %class.KV.8* %161 to i8*
  %163 = load i32, i32* %16, align 4
  %164 = zext i32 %163 to i64
  %165 = mul i64 %164, 16
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %160, i8* %162, i64 %165, i32 8, i1 false)
  %166 = load %class.KV.8*, %class.KV.8** %24, align 8
  %167 = load i32, i32* %16, align 4
  %168 = add i32 %167, 1
  %169 = zext i32 %168 to i64
  %170 = getelementptr inbounds %class.KV.8, %class.KV.8* %166, i64 %169
  %171 = bitcast %class.KV.8* %170 to i8*
  %172 = load %class.KV.8*, %class.KV.8** %12, align 8
  %173 = load i32, i32* %16, align 4
  %174 = zext i32 %173 to i64
  %175 = getelementptr inbounds %class.KV.8, %class.KV.8* %172, i64 %174
  %176 = bitcast %class.KV.8* %175 to i8*
  %177 = load i32, i32* %15, align 4
  %178 = load i32, i32* %16, align 4
  %179 = sub i32 %177, %178
  %180 = zext i32 %179 to i64
  %181 = mul i64 %180, 16
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %171, i8* %176, i64 %181, i32 8, i1 false)
  %182 = load %class.KV.8*, %class.KV.8** %24, align 8
  %183 = load i32, i32* %16, align 4
  %184 = zext i32 %183 to i64
  %185 = getelementptr inbounds %class.KV.8, %class.KV.8* %182, i64 %184
  %186 = bitcast %class.KV.8* %185 to i8*
  %187 = bitcast i8* %186 to %class.KV.8*
  %188 = load %class.key*, %class.key** %9, align 8
  %189 = load %class.key*, %class.key** %10, align 8
  call void @_ZN2KVI3keyS0_Lj9EEC2EPKS0_S3_(%class.KV.8* %187, %class.key* %188, %class.key* %189)
  %190 = load i64, i64* %13, align 8
  %191 = load i32, i32* %14, align 4
  %192 = zext i32 %191 to i64
  %193 = shl i64 1, %192
  %194 = or i64 %190, %193
  %195 = shl i64 %194, 1
  %196 = or i64 %195, 1
  %197 = load %class.KV.8*, %class.KV.8** %24, align 8
  call void @_ZN2KVI3keyS0_Lj8EEC2EmPKS_IS0_S0_Lj9EE(%class.KV.7* %0, i64 %196, %class.KV.8* %197)
  br label %198

; <label>:198:                                    ; preds = %149, %130, %90, %78
  ret void
}

; Function Attrs: noinline optnone sspstrong uwtable
define linkonce_odr %class.KV.8* @_ZN2KVI3keyS0_Lj9EE11update_nodeEPKS1_jjRS2_(%class.KV.8*, i32, i32, %class.KV.8* dereferenceable(16)) #2 comdat align 2 {
  %5 = alloca %class.KV.8*, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca %class.KV.8*, align 8
  %9 = alloca %class.KV.8*, align 8
  store %class.KV.8* %0, %class.KV.8** %5, align 8
  store i32 %1, i32* %6, align 4
  store i32 %2, i32* %7, align 4
  store %class.KV.8* %3, %class.KV.8** %8, align 8
  %10 = load i32, i32* %6, align 4
  %11 = zext i32 %10 to i64
  %12 = mul i64 %11, 16
  %13 = call noalias i8* @malloc(i64 %12) #8
  %14 = bitcast i8* %13 to %class.KV.8*
  store %class.KV.8* %14, %class.KV.8** %9, align 8
  %15 = load %class.KV.8*, %class.KV.8** %9, align 8
  %16 = bitcast %class.KV.8* %15 to i8*
  %17 = load %class.KV.8*, %class.KV.8** %5, align 8
  %18 = bitcast %class.KV.8* %17 to i8*
  %19 = load i32, i32* %6, align 4
  %20 = zext i32 %19 to i64
  %21 = mul i64 %20, 16
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %16, i8* %18, i64 %21, i32 8, i1 false)
  %22 = load %class.KV.8*, %class.KV.8** %9, align 8
  %23 = load i32, i32* %7, align 4
  %24 = zext i32 %23 to i64
  %25 = getelementptr inbounds %class.KV.8, %class.KV.8* %22, i64 %24
  %26 = bitcast %class.KV.8* %25 to i8*
  %27 = bitcast i8* %26 to %class.KV.8*
  %28 = load %class.KV.8*, %class.KV.8** %8, align 8
  call void @_ZN2KVI3keyS0_Lj9EEC2ERKS1_(%class.KV.8* %27, %class.KV.8* dereferenceable(16) %28)
  %29 = load %class.KV.8*, %class.KV.8** %9, align 8
  ret %class.KV.8* %29
}

; Function Attrs: noinline optnone sspstrong uwtable
define linkonce_odr void @_ZN2KVI3keyS0_Lj9EE12insert_innerERKS1_mPKS0_S5_Pm(%class.KV.8* noalias sret, %class.KV.8* dereferenceable(16), i64, %class.key*, %class.key*, i64*) #2 comdat align 2 {
  %7 = alloca %class.KV.8*, align 8
  %8 = alloca i64, align 8
  %9 = alloca %class.key*, align 8
  %10 = alloca %class.key*, align 8
  %11 = alloca i64*, align 8
  %12 = alloca %class.KV.9*, align 8
  %13 = alloca i64, align 8
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  %16 = alloca i32, align 4
  %17 = alloca i8, align 1
  %18 = alloca %class.KV.9*, align 8
  %19 = alloca %class.KV.9, align 8
  %20 = alloca %class.KV.9, align 8
  %21 = alloca %class.KV.9*, align 8
  %22 = alloca %class.KV.9, align 8
  %23 = alloca %class.KV.9*, align 8
  %24 = alloca %class.KV.9*, align 8
  store %class.KV.8* %1, %class.KV.8** %7, align 8
  store i64 %2, i64* %8, align 8
  store %class.key* %3, %class.key** %9, align 8
  store %class.key* %4, %class.key** %10, align 8
  store i64* %5, i64** %11, align 8
  %25 = load %class.KV.8*, %class.KV.8** %7, align 8
  %26 = getelementptr inbounds %class.KV.8, %class.KV.8* %25, i32 0, i32 1
  %27 = bitcast %"union.KV<key, key, 9>::Val"* %26 to %class.KV.9**
  %28 = load %class.KV.9*, %class.KV.9** %27, align 8
  store %class.KV.9* %28, %class.KV.9** %12, align 8
  %29 = load %class.KV.8*, %class.KV.8** %7, align 8
  %30 = getelementptr inbounds %class.KV.8, %class.KV.8* %29, i32 0, i32 0
  %31 = bitcast %"union.KV<key, key, 9>::Key"* %30 to i64*
  %32 = load i64, i64* %31, align 8
  %33 = lshr i64 %32, 1
  store i64 %33, i64* %13, align 8
  %34 = load i64, i64* %8, align 8
  %35 = and i64 %34, 63
  %36 = urem i64 %35, 63
  %37 = trunc i64 %36 to i32
  store i32 %37, i32* %14, align 4
  %38 = load i64, i64* %13, align 8
  %39 = call i64 @llvm.ctpop.i64(i64 %38)
  %40 = trunc i64 %39 to i32
  store i32 %40, i32* %15, align 4
  %41 = load i64, i64* %13, align 8
  %42 = shl i64 %41, 1
  %43 = load i32, i32* %14, align 4
  %44 = sub i32 63, %43
  %45 = zext i32 %44 to i64
  %46 = shl i64 %42, %45
  %47 = call i64 @llvm.ctpop.i64(i64 %46)
  %48 = trunc i64 %47 to i32
  store i32 %48, i32* %16, align 4
  %49 = load i64, i64* %13, align 8
  %50 = load i32, i32* %14, align 4
  %51 = zext i32 %50 to i64
  %52 = shl i64 1, %51
  %53 = and i64 %49, %52
  %54 = icmp ne i64 %53, 0
  %55 = zext i1 %54 to i8
  store i8 %55, i8* %17, align 1
  %56 = load i8, i8* %17, align 1
  %57 = trunc i8 %56 to i1
  br i1 %57, label %58, label %149

; <label>:58:                                     ; preds = %6
  %59 = load %class.KV.9*, %class.KV.9** %12, align 8
  %60 = load i32, i32* %16, align 4
  %61 = zext i32 %60 to i64
  %62 = getelementptr inbounds %class.KV.9, %class.KV.9* %59, i64 %61
  %63 = getelementptr inbounds %class.KV.9, %class.KV.9* %62, i32 0, i32 0
  %64 = bitcast %"union.KV<key, key, 10>::Key"* %63 to i64*
  %65 = load i64, i64* %64, align 8
  %66 = and i64 %65, 1
  %67 = icmp eq i64 %66, 0
  br i1 %67, label %68, label %130

; <label>:68:                                     ; preds = %58
  %69 = load %class.KV.9*, %class.KV.9** %12, align 8
  %70 = load i32, i32* %16, align 4
  %71 = zext i32 %70 to i64
  %72 = getelementptr inbounds %class.KV.9, %class.KV.9* %69, i64 %71
  %73 = getelementptr inbounds %class.KV.9, %class.KV.9* %72, i32 0, i32 0
  %74 = bitcast %"union.KV<key, key, 10>::Key"* %73 to %class.key**
  %75 = load %class.key*, %class.key** %74, align 8
  %76 = load %class.key*, %class.key** %9, align 8
  %77 = call zeroext i1 @_ZNK3keyeqERKS_(%class.key* %75, %class.key* dereferenceable(8) %76)
  br i1 %77, label %78, label %90

; <label>:78:                                     ; preds = %68
  %79 = load %class.KV.9*, %class.KV.9** %12, align 8
  %80 = load i32, i32* %15, align 4
  %81 = load i32, i32* %16, align 4
  %82 = load %class.key*, %class.key** %9, align 8
  %83 = load %class.key*, %class.key** %10, align 8
  call void @_ZN2KVI3keyS0_Lj10EEC2EPKS0_S3_(%class.KV.9* %19, %class.key* %82, %class.key* %83)
  %84 = call %class.KV.9* @_ZN2KVI3keyS0_Lj10EE11update_nodeEPKS1_jjRS2_(%class.KV.9* %79, i32 %80, i32 %81, %class.KV.9* dereferenceable(16) %19)
  store %class.KV.9* %84, %class.KV.9** %18, align 8
  %85 = load %class.KV.8*, %class.KV.8** %7, align 8
  %86 = getelementptr inbounds %class.KV.8, %class.KV.8* %85, i32 0, i32 0
  %87 = bitcast %"union.KV<key, key, 9>::Key"* %86 to i64*
  %88 = load i64, i64* %87, align 8
  %89 = load %class.KV.9*, %class.KV.9** %18, align 8
  call void @_ZN2KVI3keyS0_Lj9EEC2EmPKS_IS0_S0_Lj10EE(%class.KV.8* %0, i64 %88, %class.KV.9* %89)
  br label %198

; <label>:90:                                     ; preds = %68
  %91 = load i64*, i64** %11, align 8
  %92 = load i64, i64* %91, align 8
  %93 = add i64 %92, 1
  store i64 %93, i64* %91, align 8
  %94 = load %class.KV.9*, %class.KV.9** %12, align 8
  %95 = load i32, i32* %16, align 4
  %96 = zext i32 %95 to i64
  %97 = getelementptr inbounds %class.KV.9, %class.KV.9* %94, i64 %96
  %98 = getelementptr inbounds %class.KV.9, %class.KV.9* %97, i32 0, i32 0
  %99 = bitcast %"union.KV<key, key, 10>::Key"* %98 to %class.key**
  %100 = load %class.key*, %class.key** %99, align 8
  %101 = call i64 @_ZNK3key4hashEv(%class.key* %100)
  %102 = lshr i64 %101, 0
  %103 = load %class.KV.9*, %class.KV.9** %12, align 8
  %104 = load i32, i32* %16, align 4
  %105 = zext i32 %104 to i64
  %106 = getelementptr inbounds %class.KV.9, %class.KV.9* %103, i64 %105
  %107 = getelementptr inbounds %class.KV.9, %class.KV.9* %106, i32 0, i32 0
  %108 = bitcast %"union.KV<key, key, 10>::Key"* %107 to %class.key**
  %109 = load %class.key*, %class.key** %108, align 8
  %110 = load %class.KV.9*, %class.KV.9** %12, align 8
  %111 = load i32, i32* %16, align 4
  %112 = zext i32 %111 to i64
  %113 = getelementptr inbounds %class.KV.9, %class.KV.9* %110, i64 %112
  %114 = getelementptr inbounds %class.KV.9, %class.KV.9* %113, i32 0, i32 1
  %115 = bitcast %"union.KV<key, key, 10>::Val"* %114 to %class.key**
  %116 = load %class.key*, %class.key** %115, align 8
  %117 = load i64, i64* %8, align 8
  %118 = lshr i64 %117, 6
  %119 = load %class.key*, %class.key** %9, align 8
  %120 = load %class.key*, %class.key** %10, align 8
  call void @_ZN2KVI3keyS0_Lj10EE14new_inner_nodeEmPKS0_S3_mS3_S3_(%class.KV.9* sret %20, i64 %102, %class.key* %109, %class.key* %116, i64 %118, %class.key* %119, %class.key* %120)
  %121 = load %class.KV.9*, %class.KV.9** %12, align 8
  %122 = load i32, i32* %15, align 4
  %123 = load i32, i32* %16, align 4
  %124 = call %class.KV.9* @_ZN2KVI3keyS0_Lj10EE11update_nodeEPKS1_jjRS2_(%class.KV.9* %121, i32 %122, i32 %123, %class.KV.9* dereferenceable(16) %20)
  store %class.KV.9* %124, %class.KV.9** %21, align 8
  %125 = load %class.KV.8*, %class.KV.8** %7, align 8
  %126 = getelementptr inbounds %class.KV.8, %class.KV.8* %125, i32 0, i32 0
  %127 = bitcast %"union.KV<key, key, 9>::Key"* %126 to i64*
  %128 = load i64, i64* %127, align 8
  %129 = load %class.KV.9*, %class.KV.9** %21, align 8
  call void @_ZN2KVI3keyS0_Lj9EEC2EmPKS_IS0_S0_Lj10EE(%class.KV.8* %0, i64 %128, %class.KV.9* %129)
  br label %198

; <label>:130:                                    ; preds = %58
  %131 = load %class.KV.9*, %class.KV.9** %12, align 8
  %132 = load i32, i32* %16, align 4
  %133 = zext i32 %132 to i64
  %134 = getelementptr inbounds %class.KV.9, %class.KV.9* %131, i64 %133
  %135 = load i64, i64* %8, align 8
  %136 = lshr i64 %135, 6
  %137 = load %class.key*, %class.key** %9, align 8
  %138 = load %class.key*, %class.key** %10, align 8
  %139 = load i64*, i64** %11, align 8
  call void @_ZN2KVI3keyS0_Lj10EE12insert_innerERKS1_mPKS0_S5_Pm(%class.KV.9* sret %22, %class.KV.9* dereferenceable(16) %134, i64 %136, %class.key* %137, %class.key* %138, i64* %139)
  %140 = load %class.KV.9*, %class.KV.9** %12, align 8
  %141 = load i32, i32* %15, align 4
  %142 = load i32, i32* %16, align 4
  %143 = call %class.KV.9* @_ZN2KVI3keyS0_Lj10EE11update_nodeEPKS1_jjRS2_(%class.KV.9* %140, i32 %141, i32 %142, %class.KV.9* dereferenceable(16) %22)
  store %class.KV.9* %143, %class.KV.9** %23, align 8
  %144 = load %class.KV.8*, %class.KV.8** %7, align 8
  %145 = getelementptr inbounds %class.KV.8, %class.KV.8* %144, i32 0, i32 0
  %146 = bitcast %"union.KV<key, key, 9>::Key"* %145 to i64*
  %147 = load i64, i64* %146, align 8
  %148 = load %class.KV.9*, %class.KV.9** %23, align 8
  call void @_ZN2KVI3keyS0_Lj9EEC2EmPKS_IS0_S0_Lj10EE(%class.KV.8* %0, i64 %147, %class.KV.9* %148)
  br label %198

; <label>:149:                                    ; preds = %6
  %150 = load i64*, i64** %11, align 8
  %151 = load i64, i64* %150, align 8
  %152 = add i64 %151, 1
  store i64 %152, i64* %150, align 8
  %153 = load i32, i32* %15, align 4
  %154 = add i32 %153, 1
  %155 = zext i32 %154 to i64
  %156 = mul i64 %155, 16
  %157 = call noalias i8* @malloc(i64 %156) #8
  %158 = bitcast i8* %157 to %class.KV.9*
  store %class.KV.9* %158, %class.KV.9** %24, align 8
  %159 = load %class.KV.9*, %class.KV.9** %24, align 8
  %160 = bitcast %class.KV.9* %159 to i8*
  %161 = load %class.KV.9*, %class.KV.9** %12, align 8
  %162 = bitcast %class.KV.9* %161 to i8*
  %163 = load i32, i32* %16, align 4
  %164 = zext i32 %163 to i64
  %165 = mul i64 %164, 16
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %160, i8* %162, i64 %165, i32 8, i1 false)
  %166 = load %class.KV.9*, %class.KV.9** %24, align 8
  %167 = load i32, i32* %16, align 4
  %168 = add i32 %167, 1
  %169 = zext i32 %168 to i64
  %170 = getelementptr inbounds %class.KV.9, %class.KV.9* %166, i64 %169
  %171 = bitcast %class.KV.9* %170 to i8*
  %172 = load %class.KV.9*, %class.KV.9** %12, align 8
  %173 = load i32, i32* %16, align 4
  %174 = zext i32 %173 to i64
  %175 = getelementptr inbounds %class.KV.9, %class.KV.9* %172, i64 %174
  %176 = bitcast %class.KV.9* %175 to i8*
  %177 = load i32, i32* %15, align 4
  %178 = load i32, i32* %16, align 4
  %179 = sub i32 %177, %178
  %180 = zext i32 %179 to i64
  %181 = mul i64 %180, 16
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %171, i8* %176, i64 %181, i32 8, i1 false)
  %182 = load %class.KV.9*, %class.KV.9** %24, align 8
  %183 = load i32, i32* %16, align 4
  %184 = zext i32 %183 to i64
  %185 = getelementptr inbounds %class.KV.9, %class.KV.9* %182, i64 %184
  %186 = bitcast %class.KV.9* %185 to i8*
  %187 = bitcast i8* %186 to %class.KV.9*
  %188 = load %class.key*, %class.key** %9, align 8
  %189 = load %class.key*, %class.key** %10, align 8
  call void @_ZN2KVI3keyS0_Lj10EEC2EPKS0_S3_(%class.KV.9* %187, %class.key* %188, %class.key* %189)
  %190 = load i64, i64* %13, align 8
  %191 = load i32, i32* %14, align 4
  %192 = zext i32 %191 to i64
  %193 = shl i64 1, %192
  %194 = or i64 %190, %193
  %195 = shl i64 %194, 1
  %196 = or i64 %195, 1
  %197 = load %class.KV.9*, %class.KV.9** %24, align 8
  call void @_ZN2KVI3keyS0_Lj9EEC2EmPKS_IS0_S0_Lj10EE(%class.KV.8* %0, i64 %196, %class.KV.9* %197)
  br label %198

; <label>:198:                                    ; preds = %149, %130, %90, %78
  ret void
}

; Function Attrs: noinline optnone sspstrong uwtable
define linkonce_odr %class.KV.9* @_ZN2KVI3keyS0_Lj10EE11update_nodeEPKS1_jjRS2_(%class.KV.9*, i32, i32, %class.KV.9* dereferenceable(16)) #2 comdat align 2 {
  %5 = alloca %class.KV.9*, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca %class.KV.9*, align 8
  %9 = alloca %class.KV.9*, align 8
  store %class.KV.9* %0, %class.KV.9** %5, align 8
  store i32 %1, i32* %6, align 4
  store i32 %2, i32* %7, align 4
  store %class.KV.9* %3, %class.KV.9** %8, align 8
  %10 = load i32, i32* %6, align 4
  %11 = zext i32 %10 to i64
  %12 = mul i64 %11, 16
  %13 = call noalias i8* @malloc(i64 %12) #8
  %14 = bitcast i8* %13 to %class.KV.9*
  store %class.KV.9* %14, %class.KV.9** %9, align 8
  %15 = load %class.KV.9*, %class.KV.9** %9, align 8
  %16 = bitcast %class.KV.9* %15 to i8*
  %17 = load %class.KV.9*, %class.KV.9** %5, align 8
  %18 = bitcast %class.KV.9* %17 to i8*
  %19 = load i32, i32* %6, align 4
  %20 = zext i32 %19 to i64
  %21 = mul i64 %20, 16
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %16, i8* %18, i64 %21, i32 8, i1 false)
  %22 = load %class.KV.9*, %class.KV.9** %9, align 8
  %23 = load i32, i32* %7, align 4
  %24 = zext i32 %23 to i64
  %25 = getelementptr inbounds %class.KV.9, %class.KV.9* %22, i64 %24
  %26 = bitcast %class.KV.9* %25 to i8*
  %27 = bitcast i8* %26 to %class.KV.9*
  %28 = load %class.KV.9*, %class.KV.9** %8, align 8
  call void @_ZN2KVI3keyS0_Lj10EEC2ERKS1_(%class.KV.9* %27, %class.KV.9* dereferenceable(16) %28)
  %29 = load %class.KV.9*, %class.KV.9** %9, align 8
  ret %class.KV.9* %29
}

; Function Attrs: noinline optnone sspstrong uwtable
define linkonce_odr void @_ZN2KVI3keyS0_Lj10EE12insert_innerERKS1_mPKS0_S5_Pm(%class.KV.9* noalias sret, %class.KV.9* dereferenceable(16), i64, %class.key*, %class.key*, i64*) #2 comdat align 2 {
  %7 = alloca %class.KV.9*, align 8
  %8 = alloca i64, align 8
  %9 = alloca %class.key*, align 8
  %10 = alloca %class.key*, align 8
  %11 = alloca i64*, align 8
  %12 = alloca %class.LL*, align 8
  %13 = alloca %class.LL*, align 8
  %14 = alloca %class.LL*, align 8
  store %class.KV.9* %1, %class.KV.9** %7, align 8
  store i64 %2, i64* %8, align 8
  store %class.key* %3, %class.key** %9, align 8
  store %class.key* %4, %class.key** %10, align 8
  store i64* %5, i64** %11, align 8
  %15 = load %class.KV.9*, %class.KV.9** %7, align 8
  %16 = getelementptr inbounds %class.KV.9, %class.KV.9* %15, i32 0, i32 0
  %17 = bitcast %"union.KV<key, key, 10>::Key"* %16 to i64*
  %18 = load i64, i64* %17, align 8
  %19 = and i64 %18, 1
  %20 = icmp eq i64 %19, 0
  br i1 %20, label %21, label %58

; <label>:21:                                     ; preds = %6
  %22 = load %class.KV.9*, %class.KV.9** %7, align 8
  %23 = getelementptr inbounds %class.KV.9, %class.KV.9* %22, i32 0, i32 0
  %24 = bitcast %"union.KV<key, key, 10>::Key"* %23 to %class.key**
  %25 = load %class.key*, %class.key** %24, align 8
  %26 = load %class.key*, %class.key** %9, align 8
  %27 = call zeroext i1 @_ZNK3keyeqERKS_(%class.key* %25, %class.key* dereferenceable(8) %26)
  br i1 %27, label %28, label %34

; <label>:28:                                     ; preds = %21
  %29 = load %class.KV.9*, %class.KV.9** %7, align 8
  %30 = getelementptr inbounds %class.KV.9, %class.KV.9* %29, i32 0, i32 0
  %31 = bitcast %"union.KV<key, key, 10>::Key"* %30 to %class.key**
  %32 = load %class.key*, %class.key** %31, align 8
  %33 = load %class.key*, %class.key** %10, align 8
  call void @_ZN2KVI3keyS0_Lj10EEC2EPKS0_S3_(%class.KV.9* %0, %class.key* %32, %class.key* %33)
  br label %84

; <label>:34:                                     ; preds = %21
  %35 = load i64*, i64** %11, align 8
  %36 = load i64, i64* %35, align 8
  %37 = add i64 %36, 1
  store i64 %37, i64* %35, align 8
  %38 = call noalias i8* @malloc(i64 24) #8
  %39 = bitcast i8* %38 to %class.LL*
  %40 = bitcast %class.LL* %39 to i8*
  %41 = bitcast i8* %40 to %class.LL*
  %42 = load %class.key*, %class.key** %9, align 8
  %43 = load %class.key*, %class.key** %10, align 8
  call void @_ZN2LLI3keyS0_EC2EPKS0_S3_PKS1_(%class.LL* %41, %class.key* %42, %class.key* %43, %class.LL* null)
  store %class.LL* %41, %class.LL** %12, align 8
  %44 = call noalias i8* @malloc(i64 24) #8
  %45 = bitcast i8* %44 to %class.LL*
  %46 = bitcast %class.LL* %45 to i8*
  %47 = bitcast i8* %46 to %class.LL*
  %48 = load %class.KV.9*, %class.KV.9** %7, align 8
  %49 = getelementptr inbounds %class.KV.9, %class.KV.9* %48, i32 0, i32 0
  %50 = bitcast %"union.KV<key, key, 10>::Key"* %49 to %class.key**
  %51 = load %class.key*, %class.key** %50, align 8
  %52 = load %class.KV.9*, %class.KV.9** %7, align 8
  %53 = getelementptr inbounds %class.KV.9, %class.KV.9* %52, i32 0, i32 1
  %54 = bitcast %"union.KV<key, key, 10>::Val"* %53 to %class.key**
  %55 = load %class.key*, %class.key** %54, align 8
  %56 = load %class.LL*, %class.LL** %12, align 8
  call void @_ZN2LLI3keyS0_EC2EPKS0_S3_PKS1_(%class.LL* %47, %class.key* %51, %class.key* %55, %class.LL* %56)
  store %class.LL* %47, %class.LL** %13, align 8
  %57 = load %class.LL*, %class.LL** %13, align 8
  call void @_ZN2KVI3keyS0_Lj10EEC2EmPK2LLIS0_S0_E(%class.KV.9* %0, i64 1, %class.LL* %57)
  br label %84

; <label>:58:                                     ; preds = %6
  %59 = load %class.KV.9*, %class.KV.9** %7, align 8
  %60 = getelementptr inbounds %class.KV.9, %class.KV.9* %59, i32 0, i32 1
  %61 = bitcast %"union.KV<key, key, 10>::Val"* %60 to %class.LL**
  %62 = load %class.LL*, %class.LL** %61, align 8
  %63 = icmp ne %class.LL* %62, null
  br i1 %63, label %64, label %73

; <label>:64:                                     ; preds = %58
  %65 = load %class.KV.9*, %class.KV.9** %7, align 8
  %66 = getelementptr inbounds %class.KV.9, %class.KV.9* %65, i32 0, i32 1
  %67 = bitcast %"union.KV<key, key, 10>::Val"* %66 to %class.LL**
  %68 = load %class.LL*, %class.LL** %67, align 8
  %69 = load %class.key*, %class.key** %9, align 8
  %70 = load %class.key*, %class.key** %10, align 8
  %71 = load i64*, i64** %11, align 8
  %72 = call %class.LL* @_ZNK2LLI3keyS0_E6insertEPKS0_S3_Pm(%class.LL* %68, %class.key* %69, %class.key* %70, i64* %71)
  call void @_ZN2KVI3keyS0_Lj10EEC2EmPK2LLIS0_S0_E(%class.KV.9* %0, i64 1, %class.LL* %72)
  br label %84

; <label>:73:                                     ; preds = %58
  %74 = load i64*, i64** %11, align 8
  %75 = load i64, i64* %74, align 8
  %76 = add i64 %75, 1
  store i64 %76, i64* %74, align 8
  %77 = call noalias i8* @malloc(i64 24) #8
  %78 = bitcast i8* %77 to %class.LL*
  %79 = bitcast %class.LL* %78 to i8*
  %80 = bitcast i8* %79 to %class.LL*
  %81 = load %class.key*, %class.key** %9, align 8
  %82 = load %class.key*, %class.key** %10, align 8
  call void @_ZN2LLI3keyS0_EC2EPKS0_S3_PKS1_(%class.LL* %80, %class.key* %81, %class.key* %82, %class.LL* null)
  store %class.LL* %80, %class.LL** %14, align 8
  %83 = load %class.LL*, %class.LL** %14, align 8
  call void @_ZN2KVI3keyS0_Lj10EEC2EmPK2LLIS0_S0_E(%class.KV.9* %0, i64 1, %class.LL* %83)
  br label %84

; <label>:84:                                     ; preds = %73, %64, %34, %28
  ret void
}

; Function Attrs: noinline optnone sspstrong uwtable
define linkonce_odr %class.LL* @_ZNK2LLI3keyS0_E6insertEPKS0_S3_Pm(%class.LL*, %class.key*, %class.key*, i64*) #2 comdat align 2 {
  %5 = alloca %class.LL*, align 8
  %6 = alloca %class.LL*, align 8
  %7 = alloca %class.key*, align 8
  %8 = alloca %class.key*, align 8
  %9 = alloca i64*, align 8
  %10 = alloca %class.LL*, align 8
  %11 = alloca %class.LL*, align 8
  store %class.LL* %0, %class.LL** %6, align 8
  store %class.key* %1, %class.key** %7, align 8
  store %class.key* %2, %class.key** %8, align 8
  store i64* %3, i64** %9, align 8
  %12 = load %class.LL*, %class.LL** %6, align 8
  %13 = getelementptr inbounds %class.LL, %class.LL* %12, i32 0, i32 0
  %14 = load %class.key*, %class.key** %13, align 8
  %15 = load %class.key*, %class.key** %7, align 8
  %16 = call zeroext i1 @_ZNK3keyeqERKS_(%class.key* %14, %class.key* dereferenceable(8) %15)
  br i1 %16, label %17, label %27

; <label>:17:                                     ; preds = %4
  %18 = call noalias i8* @malloc(i64 24) #8
  %19 = bitcast i8* %18 to %class.LL*
  %20 = bitcast %class.LL* %19 to i8*
  %21 = bitcast i8* %20 to %class.LL*
  %22 = getelementptr inbounds %class.LL, %class.LL* %12, i32 0, i32 0
  %23 = load %class.key*, %class.key** %22, align 8
  %24 = load %class.key*, %class.key** %8, align 8
  %25 = getelementptr inbounds %class.LL, %class.LL* %12, i32 0, i32 2
  %26 = load %class.LL*, %class.LL** %25, align 8
  call void @_ZN2LLI3keyS0_EC2EPKS0_S3_PKS1_(%class.LL* %21, %class.key* %23, %class.key* %24, %class.LL* %26)
  store %class.LL* %21, %class.LL** %5, align 8
  br label %66

; <label>:27:                                     ; preds = %4
  %28 = getelementptr inbounds %class.LL, %class.LL* %12, i32 0, i32 2
  %29 = load %class.LL*, %class.LL** %28, align 8
  %30 = icmp ne %class.LL* %29, null
  br i1 %30, label %31, label %46

; <label>:31:                                     ; preds = %27
  %32 = call noalias i8* @malloc(i64 24) #8
  %33 = bitcast i8* %32 to %class.LL*
  %34 = bitcast %class.LL* %33 to i8*
  %35 = bitcast i8* %34 to %class.LL*
  %36 = getelementptr inbounds %class.LL, %class.LL* %12, i32 0, i32 0
  %37 = load %class.key*, %class.key** %36, align 8
  %38 = getelementptr inbounds %class.LL, %class.LL* %12, i32 0, i32 1
  %39 = load %class.key*, %class.key** %38, align 8
  %40 = getelementptr inbounds %class.LL, %class.LL* %12, i32 0, i32 2
  %41 = load %class.LL*, %class.LL** %40, align 8
  %42 = load %class.key*, %class.key** %7, align 8
  %43 = load %class.key*, %class.key** %8, align 8
  %44 = load i64*, i64** %9, align 8
  %45 = call %class.LL* @_ZNK2LLI3keyS0_E6insertEPKS0_S3_Pm(%class.LL* %41, %class.key* %42, %class.key* %43, i64* %44)
  call void @_ZN2LLI3keyS0_EC2EPKS0_S3_PKS1_(%class.LL* %35, %class.key* %37, %class.key* %39, %class.LL* %45)
  store %class.LL* %35, %class.LL** %5, align 8
  br label %66

; <label>:46:                                     ; preds = %27
  %47 = load i64*, i64** %9, align 8
  %48 = load i64, i64* %47, align 8
  %49 = add i64 %48, 1
  store i64 %49, i64* %47, align 8
  %50 = call noalias i8* @malloc(i64 24) #8
  %51 = bitcast i8* %50 to %class.LL*
  %52 = bitcast %class.LL* %51 to i8*
  %53 = bitcast i8* %52 to %class.LL*
  %54 = getelementptr inbounds %class.LL, %class.LL* %12, i32 0, i32 0
  %55 = load %class.key*, %class.key** %54, align 8
  %56 = getelementptr inbounds %class.LL, %class.LL* %12, i32 0, i32 1
  %57 = load %class.key*, %class.key** %56, align 8
  call void @_ZN2LLI3keyS0_EC2EPKS0_S3_PKS1_(%class.LL* %53, %class.key* %55, %class.key* %57, %class.LL* null)
  store %class.LL* %53, %class.LL** %10, align 8
  %58 = call noalias i8* @malloc(i64 24) #8
  %59 = bitcast i8* %58 to %class.LL*
  %60 = bitcast %class.LL* %59 to i8*
  %61 = bitcast i8* %60 to %class.LL*
  %62 = load %class.key*, %class.key** %7, align 8
  %63 = load %class.key*, %class.key** %8, align 8
  %64 = load %class.LL*, %class.LL** %10, align 8
  call void @_ZN2LLI3keyS0_EC2EPKS0_S3_PKS1_(%class.LL* %61, %class.key* %62, %class.key* %63, %class.LL* %64)
  store %class.LL* %61, %class.LL** %11, align 8
  %65 = load %class.LL*, %class.LL** %11, align 8
  store %class.LL* %65, %class.LL** %5, align 8
  br label %66

; <label>:66:                                     ; preds = %46, %31, %17
  %67 = load %class.LL*, %class.LL** %5, align 8
  ret %class.LL* %67
}

; Function Attrs: noinline optnone sspstrong uwtable
define linkonce_odr %class.key* @_ZN2KVI3keyS0_Lj0EE10inner_findERKS1_mPKS0_(%class.KV* dereferenceable(16), i64, %class.key*) #2 comdat align 2 {
  %4 = alloca %class.key*, align 8
  %5 = alloca %class.KV*, align 8
  %6 = alloca i64, align 8
  %7 = alloca %class.key*, align 8
  %8 = alloca i64, align 8
  %9 = alloca %class.KV.0*, align 8
  %10 = alloca i64, align 8
  %11 = alloca i8, align 1
  %12 = alloca i32, align 4
  store %class.KV* %0, %class.KV** %5, align 8
  store i64 %1, i64* %6, align 8
  store %class.key* %2, %class.key** %7, align 8
  %13 = load i64, i64* %6, align 8
  %14 = and i64 %13, 63
  %15 = urem i64 %14, 63
  store i64 %15, i64* %8, align 8
  %16 = load %class.KV*, %class.KV** %5, align 8
  %17 = getelementptr inbounds %class.KV, %class.KV* %16, i32 0, i32 1
  %18 = bitcast %"union.KV<key, key, 0>::Val"* %17 to %class.KV.0**
  %19 = load %class.KV.0*, %class.KV.0** %18, align 8
  store %class.KV.0* %19, %class.KV.0** %9, align 8
  %20 = load %class.KV*, %class.KV** %5, align 8
  %21 = getelementptr inbounds %class.KV, %class.KV* %20, i32 0, i32 0
  %22 = bitcast %"union.KV<key, key, 0>::Key"* %21 to i64*
  %23 = load i64, i64* %22, align 8
  %24 = lshr i64 %23, 1
  store i64 %24, i64* %10, align 8
  %25 = load i64, i64* %10, align 8
  %26 = load i64, i64* %8, align 8
  %27 = shl i64 1, %26
  %28 = and i64 %25, %27
  %29 = icmp ne i64 %28, 0
  %30 = zext i1 %29 to i8
  store i8 %30, i8* %11, align 1
  %31 = load i8, i8* %11, align 1
  %32 = trunc i8 %31 to i1
  br i1 %32, label %33, label %78

; <label>:33:                                     ; preds = %3
  %34 = load i64, i64* %10, align 8
  %35 = shl i64 %34, 1
  %36 = load i64, i64* %8, align 8
  %37 = sub i64 63, %36
  %38 = shl i64 %35, %37
  %39 = call i64 @llvm.ctpop.i64(i64 %38)
  %40 = trunc i64 %39 to i32
  store i32 %40, i32* %12, align 4
  %41 = load %class.KV.0*, %class.KV.0** %9, align 8
  %42 = load i32, i32* %12, align 4
  %43 = zext i32 %42 to i64
  %44 = getelementptr inbounds %class.KV.0, %class.KV.0* %41, i64 %43
  %45 = getelementptr inbounds %class.KV.0, %class.KV.0* %44, i32 0, i32 0
  %46 = bitcast %"union.KV<key, key, 1>::Key"* %45 to i64*
  %47 = load i64, i64* %46, align 8
  %48 = and i64 %47, 1
  %49 = icmp eq i64 %48, 0
  br i1 %49, label %50, label %69

; <label>:50:                                     ; preds = %33
  %51 = load %class.KV.0*, %class.KV.0** %9, align 8
  %52 = load i32, i32* %12, align 4
  %53 = zext i32 %52 to i64
  %54 = getelementptr inbounds %class.KV.0, %class.KV.0* %51, i64 %53
  %55 = getelementptr inbounds %class.KV.0, %class.KV.0* %54, i32 0, i32 0
  %56 = bitcast %"union.KV<key, key, 1>::Key"* %55 to %class.key**
  %57 = load %class.key*, %class.key** %56, align 8
  %58 = load %class.key*, %class.key** %7, align 8
  %59 = call zeroext i1 @_ZNK3keyeqERKS_(%class.key* %57, %class.key* dereferenceable(8) %58)
  br i1 %59, label %60, label %68

; <label>:60:                                     ; preds = %50
  %61 = load %class.KV.0*, %class.KV.0** %9, align 8
  %62 = load i32, i32* %12, align 4
  %63 = zext i32 %62 to i64
  %64 = getelementptr inbounds %class.KV.0, %class.KV.0* %61, i64 %63
  %65 = getelementptr inbounds %class.KV.0, %class.KV.0* %64, i32 0, i32 1
  %66 = bitcast %"union.KV<key, key, 1>::Val"* %65 to %class.key**
  %67 = load %class.key*, %class.key** %66, align 8
  store %class.key* %67, %class.key** %4, align 8
  br label %79

; <label>:68:                                     ; preds = %50
  store %class.key* null, %class.key** %4, align 8
  br label %79

; <label>:69:                                     ; preds = %33
  %70 = load %class.KV.0*, %class.KV.0** %9, align 8
  %71 = load i32, i32* %12, align 4
  %72 = zext i32 %71 to i64
  %73 = getelementptr inbounds %class.KV.0, %class.KV.0* %70, i64 %72
  %74 = load i64, i64* %6, align 8
  %75 = lshr i64 %74, 6
  %76 = load %class.key*, %class.key** %7, align 8
  %77 = call %class.key* @_ZN2KVI3keyS0_Lj1EE10inner_findERKS1_mPKS0_(%class.KV.0* dereferenceable(16) %73, i64 %75, %class.key* %76)
  store %class.key* %77, %class.key** %4, align 8
  br label %79

; <label>:78:                                     ; preds = %3
  store %class.key* null, %class.key** %4, align 8
  br label %79

; <label>:79:                                     ; preds = %78, %69, %68, %60
  %80 = load %class.key*, %class.key** %4, align 8
  ret %class.key* %80
}

; Function Attrs: noinline optnone sspstrong uwtable
define linkonce_odr %class.key* @_ZN2KVI3keyS0_Lj1EE10inner_findERKS1_mPKS0_(%class.KV.0* dereferenceable(16), i64, %class.key*) #2 comdat align 2 {
  %4 = alloca %class.key*, align 8
  %5 = alloca %class.KV.0*, align 8
  %6 = alloca i64, align 8
  %7 = alloca %class.key*, align 8
  %8 = alloca i64, align 8
  %9 = alloca %class.KV.1*, align 8
  %10 = alloca i64, align 8
  %11 = alloca i8, align 1
  %12 = alloca i32, align 4
  store %class.KV.0* %0, %class.KV.0** %5, align 8
  store i64 %1, i64* %6, align 8
  store %class.key* %2, %class.key** %7, align 8
  %13 = load i64, i64* %6, align 8
  %14 = and i64 %13, 63
  %15 = urem i64 %14, 63
  store i64 %15, i64* %8, align 8
  %16 = load %class.KV.0*, %class.KV.0** %5, align 8
  %17 = getelementptr inbounds %class.KV.0, %class.KV.0* %16, i32 0, i32 1
  %18 = bitcast %"union.KV<key, key, 1>::Val"* %17 to %class.KV.1**
  %19 = load %class.KV.1*, %class.KV.1** %18, align 8
  store %class.KV.1* %19, %class.KV.1** %9, align 8
  %20 = load %class.KV.0*, %class.KV.0** %5, align 8
  %21 = getelementptr inbounds %class.KV.0, %class.KV.0* %20, i32 0, i32 0
  %22 = bitcast %"union.KV<key, key, 1>::Key"* %21 to i64*
  %23 = load i64, i64* %22, align 8
  %24 = lshr i64 %23, 1
  store i64 %24, i64* %10, align 8
  %25 = load i64, i64* %10, align 8
  %26 = load i64, i64* %8, align 8
  %27 = shl i64 1, %26
  %28 = and i64 %25, %27
  %29 = icmp ne i64 %28, 0
  %30 = zext i1 %29 to i8
  store i8 %30, i8* %11, align 1
  %31 = load i8, i8* %11, align 1
  %32 = trunc i8 %31 to i1
  br i1 %32, label %33, label %78

; <label>:33:                                     ; preds = %3
  %34 = load i64, i64* %10, align 8
  %35 = shl i64 %34, 1
  %36 = load i64, i64* %8, align 8
  %37 = sub i64 63, %36
  %38 = shl i64 %35, %37
  %39 = call i64 @llvm.ctpop.i64(i64 %38)
  %40 = trunc i64 %39 to i32
  store i32 %40, i32* %12, align 4
  %41 = load %class.KV.1*, %class.KV.1** %9, align 8
  %42 = load i32, i32* %12, align 4
  %43 = zext i32 %42 to i64
  %44 = getelementptr inbounds %class.KV.1, %class.KV.1* %41, i64 %43
  %45 = getelementptr inbounds %class.KV.1, %class.KV.1* %44, i32 0, i32 0
  %46 = bitcast %"union.KV<key, key, 2>::Key"* %45 to i64*
  %47 = load i64, i64* %46, align 8
  %48 = and i64 %47, 1
  %49 = icmp eq i64 %48, 0
  br i1 %49, label %50, label %69

; <label>:50:                                     ; preds = %33
  %51 = load %class.KV.1*, %class.KV.1** %9, align 8
  %52 = load i32, i32* %12, align 4
  %53 = zext i32 %52 to i64
  %54 = getelementptr inbounds %class.KV.1, %class.KV.1* %51, i64 %53
  %55 = getelementptr inbounds %class.KV.1, %class.KV.1* %54, i32 0, i32 0
  %56 = bitcast %"union.KV<key, key, 2>::Key"* %55 to %class.key**
  %57 = load %class.key*, %class.key** %56, align 8
  %58 = load %class.key*, %class.key** %7, align 8
  %59 = call zeroext i1 @_ZNK3keyeqERKS_(%class.key* %57, %class.key* dereferenceable(8) %58)
  br i1 %59, label %60, label %68

; <label>:60:                                     ; preds = %50
  %61 = load %class.KV.1*, %class.KV.1** %9, align 8
  %62 = load i32, i32* %12, align 4
  %63 = zext i32 %62 to i64
  %64 = getelementptr inbounds %class.KV.1, %class.KV.1* %61, i64 %63
  %65 = getelementptr inbounds %class.KV.1, %class.KV.1* %64, i32 0, i32 1
  %66 = bitcast %"union.KV<key, key, 2>::Val"* %65 to %class.key**
  %67 = load %class.key*, %class.key** %66, align 8
  store %class.key* %67, %class.key** %4, align 8
  br label %79

; <label>:68:                                     ; preds = %50
  store %class.key* null, %class.key** %4, align 8
  br label %79

; <label>:69:                                     ; preds = %33
  %70 = load %class.KV.1*, %class.KV.1** %9, align 8
  %71 = load i32, i32* %12, align 4
  %72 = zext i32 %71 to i64
  %73 = getelementptr inbounds %class.KV.1, %class.KV.1* %70, i64 %72
  %74 = load i64, i64* %6, align 8
  %75 = lshr i64 %74, 6
  %76 = load %class.key*, %class.key** %7, align 8
  %77 = call %class.key* @_ZN2KVI3keyS0_Lj2EE10inner_findERKS1_mPKS0_(%class.KV.1* dereferenceable(16) %73, i64 %75, %class.key* %76)
  store %class.key* %77, %class.key** %4, align 8
  br label %79

; <label>:78:                                     ; preds = %3
  store %class.key* null, %class.key** %4, align 8
  br label %79

; <label>:79:                                     ; preds = %78, %69, %68, %60
  %80 = load %class.key*, %class.key** %4, align 8
  ret %class.key* %80
}

; Function Attrs: noinline optnone sspstrong uwtable
define linkonce_odr %class.key* @_ZN2KVI3keyS0_Lj2EE10inner_findERKS1_mPKS0_(%class.KV.1* dereferenceable(16), i64, %class.key*) #2 comdat align 2 {
  %4 = alloca %class.key*, align 8
  %5 = alloca %class.KV.1*, align 8
  %6 = alloca i64, align 8
  %7 = alloca %class.key*, align 8
  %8 = alloca i64, align 8
  %9 = alloca %class.KV.2*, align 8
  %10 = alloca i64, align 8
  %11 = alloca i8, align 1
  %12 = alloca i32, align 4
  store %class.KV.1* %0, %class.KV.1** %5, align 8
  store i64 %1, i64* %6, align 8
  store %class.key* %2, %class.key** %7, align 8
  %13 = load i64, i64* %6, align 8
  %14 = and i64 %13, 63
  %15 = urem i64 %14, 63
  store i64 %15, i64* %8, align 8
  %16 = load %class.KV.1*, %class.KV.1** %5, align 8
  %17 = getelementptr inbounds %class.KV.1, %class.KV.1* %16, i32 0, i32 1
  %18 = bitcast %"union.KV<key, key, 2>::Val"* %17 to %class.KV.2**
  %19 = load %class.KV.2*, %class.KV.2** %18, align 8
  store %class.KV.2* %19, %class.KV.2** %9, align 8
  %20 = load %class.KV.1*, %class.KV.1** %5, align 8
  %21 = getelementptr inbounds %class.KV.1, %class.KV.1* %20, i32 0, i32 0
  %22 = bitcast %"union.KV<key, key, 2>::Key"* %21 to i64*
  %23 = load i64, i64* %22, align 8
  %24 = lshr i64 %23, 1
  store i64 %24, i64* %10, align 8
  %25 = load i64, i64* %10, align 8
  %26 = load i64, i64* %8, align 8
  %27 = shl i64 1, %26
  %28 = and i64 %25, %27
  %29 = icmp ne i64 %28, 0
  %30 = zext i1 %29 to i8
  store i8 %30, i8* %11, align 1
  %31 = load i8, i8* %11, align 1
  %32 = trunc i8 %31 to i1
  br i1 %32, label %33, label %78

; <label>:33:                                     ; preds = %3
  %34 = load i64, i64* %10, align 8
  %35 = shl i64 %34, 1
  %36 = load i64, i64* %8, align 8
  %37 = sub i64 63, %36
  %38 = shl i64 %35, %37
  %39 = call i64 @llvm.ctpop.i64(i64 %38)
  %40 = trunc i64 %39 to i32
  store i32 %40, i32* %12, align 4
  %41 = load %class.KV.2*, %class.KV.2** %9, align 8
  %42 = load i32, i32* %12, align 4
  %43 = zext i32 %42 to i64
  %44 = getelementptr inbounds %class.KV.2, %class.KV.2* %41, i64 %43
  %45 = getelementptr inbounds %class.KV.2, %class.KV.2* %44, i32 0, i32 0
  %46 = bitcast %"union.KV<key, key, 3>::Key"* %45 to i64*
  %47 = load i64, i64* %46, align 8
  %48 = and i64 %47, 1
  %49 = icmp eq i64 %48, 0
  br i1 %49, label %50, label %69

; <label>:50:                                     ; preds = %33
  %51 = load %class.KV.2*, %class.KV.2** %9, align 8
  %52 = load i32, i32* %12, align 4
  %53 = zext i32 %52 to i64
  %54 = getelementptr inbounds %class.KV.2, %class.KV.2* %51, i64 %53
  %55 = getelementptr inbounds %class.KV.2, %class.KV.2* %54, i32 0, i32 0
  %56 = bitcast %"union.KV<key, key, 3>::Key"* %55 to %class.key**
  %57 = load %class.key*, %class.key** %56, align 8
  %58 = load %class.key*, %class.key** %7, align 8
  %59 = call zeroext i1 @_ZNK3keyeqERKS_(%class.key* %57, %class.key* dereferenceable(8) %58)
  br i1 %59, label %60, label %68

; <label>:60:                                     ; preds = %50
  %61 = load %class.KV.2*, %class.KV.2** %9, align 8
  %62 = load i32, i32* %12, align 4
  %63 = zext i32 %62 to i64
  %64 = getelementptr inbounds %class.KV.2, %class.KV.2* %61, i64 %63
  %65 = getelementptr inbounds %class.KV.2, %class.KV.2* %64, i32 0, i32 1
  %66 = bitcast %"union.KV<key, key, 3>::Val"* %65 to %class.key**
  %67 = load %class.key*, %class.key** %66, align 8
  store %class.key* %67, %class.key** %4, align 8
  br label %79

; <label>:68:                                     ; preds = %50
  store %class.key* null, %class.key** %4, align 8
  br label %79

; <label>:69:                                     ; preds = %33
  %70 = load %class.KV.2*, %class.KV.2** %9, align 8
  %71 = load i32, i32* %12, align 4
  %72 = zext i32 %71 to i64
  %73 = getelementptr inbounds %class.KV.2, %class.KV.2* %70, i64 %72
  %74 = load i64, i64* %6, align 8
  %75 = lshr i64 %74, 6
  %76 = load %class.key*, %class.key** %7, align 8
  %77 = call %class.key* @_ZN2KVI3keyS0_Lj3EE10inner_findERKS1_mPKS0_(%class.KV.2* dereferenceable(16) %73, i64 %75, %class.key* %76)
  store %class.key* %77, %class.key** %4, align 8
  br label %79

; <label>:78:                                     ; preds = %3
  store %class.key* null, %class.key** %4, align 8
  br label %79

; <label>:79:                                     ; preds = %78, %69, %68, %60
  %80 = load %class.key*, %class.key** %4, align 8
  ret %class.key* %80
}

; Function Attrs: noinline optnone sspstrong uwtable
define linkonce_odr %class.key* @_ZN2KVI3keyS0_Lj3EE10inner_findERKS1_mPKS0_(%class.KV.2* dereferenceable(16), i64, %class.key*) #2 comdat align 2 {
  %4 = alloca %class.key*, align 8
  %5 = alloca %class.KV.2*, align 8
  %6 = alloca i64, align 8
  %7 = alloca %class.key*, align 8
  %8 = alloca i64, align 8
  %9 = alloca %class.KV.3*, align 8
  %10 = alloca i64, align 8
  %11 = alloca i8, align 1
  %12 = alloca i32, align 4
  store %class.KV.2* %0, %class.KV.2** %5, align 8
  store i64 %1, i64* %6, align 8
  store %class.key* %2, %class.key** %7, align 8
  %13 = load i64, i64* %6, align 8
  %14 = and i64 %13, 63
  %15 = urem i64 %14, 63
  store i64 %15, i64* %8, align 8
  %16 = load %class.KV.2*, %class.KV.2** %5, align 8
  %17 = getelementptr inbounds %class.KV.2, %class.KV.2* %16, i32 0, i32 1
  %18 = bitcast %"union.KV<key, key, 3>::Val"* %17 to %class.KV.3**
  %19 = load %class.KV.3*, %class.KV.3** %18, align 8
  store %class.KV.3* %19, %class.KV.3** %9, align 8
  %20 = load %class.KV.2*, %class.KV.2** %5, align 8
  %21 = getelementptr inbounds %class.KV.2, %class.KV.2* %20, i32 0, i32 0
  %22 = bitcast %"union.KV<key, key, 3>::Key"* %21 to i64*
  %23 = load i64, i64* %22, align 8
  %24 = lshr i64 %23, 1
  store i64 %24, i64* %10, align 8
  %25 = load i64, i64* %10, align 8
  %26 = load i64, i64* %8, align 8
  %27 = shl i64 1, %26
  %28 = and i64 %25, %27
  %29 = icmp ne i64 %28, 0
  %30 = zext i1 %29 to i8
  store i8 %30, i8* %11, align 1
  %31 = load i8, i8* %11, align 1
  %32 = trunc i8 %31 to i1
  br i1 %32, label %33, label %78

; <label>:33:                                     ; preds = %3
  %34 = load i64, i64* %10, align 8
  %35 = shl i64 %34, 1
  %36 = load i64, i64* %8, align 8
  %37 = sub i64 63, %36
  %38 = shl i64 %35, %37
  %39 = call i64 @llvm.ctpop.i64(i64 %38)
  %40 = trunc i64 %39 to i32
  store i32 %40, i32* %12, align 4
  %41 = load %class.KV.3*, %class.KV.3** %9, align 8
  %42 = load i32, i32* %12, align 4
  %43 = zext i32 %42 to i64
  %44 = getelementptr inbounds %class.KV.3, %class.KV.3* %41, i64 %43
  %45 = getelementptr inbounds %class.KV.3, %class.KV.3* %44, i32 0, i32 0
  %46 = bitcast %"union.KV<key, key, 4>::Key"* %45 to i64*
  %47 = load i64, i64* %46, align 8
  %48 = and i64 %47, 1
  %49 = icmp eq i64 %48, 0
  br i1 %49, label %50, label %69

; <label>:50:                                     ; preds = %33
  %51 = load %class.KV.3*, %class.KV.3** %9, align 8
  %52 = load i32, i32* %12, align 4
  %53 = zext i32 %52 to i64
  %54 = getelementptr inbounds %class.KV.3, %class.KV.3* %51, i64 %53
  %55 = getelementptr inbounds %class.KV.3, %class.KV.3* %54, i32 0, i32 0
  %56 = bitcast %"union.KV<key, key, 4>::Key"* %55 to %class.key**
  %57 = load %class.key*, %class.key** %56, align 8
  %58 = load %class.key*, %class.key** %7, align 8
  %59 = call zeroext i1 @_ZNK3keyeqERKS_(%class.key* %57, %class.key* dereferenceable(8) %58)
  br i1 %59, label %60, label %68

; <label>:60:                                     ; preds = %50
  %61 = load %class.KV.3*, %class.KV.3** %9, align 8
  %62 = load i32, i32* %12, align 4
  %63 = zext i32 %62 to i64
  %64 = getelementptr inbounds %class.KV.3, %class.KV.3* %61, i64 %63
  %65 = getelementptr inbounds %class.KV.3, %class.KV.3* %64, i32 0, i32 1
  %66 = bitcast %"union.KV<key, key, 4>::Val"* %65 to %class.key**
  %67 = load %class.key*, %class.key** %66, align 8
  store %class.key* %67, %class.key** %4, align 8
  br label %79

; <label>:68:                                     ; preds = %50
  store %class.key* null, %class.key** %4, align 8
  br label %79

; <label>:69:                                     ; preds = %33
  %70 = load %class.KV.3*, %class.KV.3** %9, align 8
  %71 = load i32, i32* %12, align 4
  %72 = zext i32 %71 to i64
  %73 = getelementptr inbounds %class.KV.3, %class.KV.3* %70, i64 %72
  %74 = load i64, i64* %6, align 8
  %75 = lshr i64 %74, 6
  %76 = load %class.key*, %class.key** %7, align 8
  %77 = call %class.key* @_ZN2KVI3keyS0_Lj4EE10inner_findERKS1_mPKS0_(%class.KV.3* dereferenceable(16) %73, i64 %75, %class.key* %76)
  store %class.key* %77, %class.key** %4, align 8
  br label %79

; <label>:78:                                     ; preds = %3
  store %class.key* null, %class.key** %4, align 8
  br label %79

; <label>:79:                                     ; preds = %78, %69, %68, %60
  %80 = load %class.key*, %class.key** %4, align 8
  ret %class.key* %80
}

; Function Attrs: noinline optnone sspstrong uwtable
define linkonce_odr %class.key* @_ZN2KVI3keyS0_Lj4EE10inner_findERKS1_mPKS0_(%class.KV.3* dereferenceable(16), i64, %class.key*) #2 comdat align 2 {
  %4 = alloca %class.key*, align 8
  %5 = alloca %class.KV.3*, align 8
  %6 = alloca i64, align 8
  %7 = alloca %class.key*, align 8
  %8 = alloca i64, align 8
  %9 = alloca %class.KV.4*, align 8
  %10 = alloca i64, align 8
  %11 = alloca i8, align 1
  %12 = alloca i32, align 4
  store %class.KV.3* %0, %class.KV.3** %5, align 8
  store i64 %1, i64* %6, align 8
  store %class.key* %2, %class.key** %7, align 8
  %13 = load i64, i64* %6, align 8
  %14 = and i64 %13, 63
  %15 = urem i64 %14, 63
  store i64 %15, i64* %8, align 8
  %16 = load %class.KV.3*, %class.KV.3** %5, align 8
  %17 = getelementptr inbounds %class.KV.3, %class.KV.3* %16, i32 0, i32 1
  %18 = bitcast %"union.KV<key, key, 4>::Val"* %17 to %class.KV.4**
  %19 = load %class.KV.4*, %class.KV.4** %18, align 8
  store %class.KV.4* %19, %class.KV.4** %9, align 8
  %20 = load %class.KV.3*, %class.KV.3** %5, align 8
  %21 = getelementptr inbounds %class.KV.3, %class.KV.3* %20, i32 0, i32 0
  %22 = bitcast %"union.KV<key, key, 4>::Key"* %21 to i64*
  %23 = load i64, i64* %22, align 8
  %24 = lshr i64 %23, 1
  store i64 %24, i64* %10, align 8
  %25 = load i64, i64* %10, align 8
  %26 = load i64, i64* %8, align 8
  %27 = shl i64 1, %26
  %28 = and i64 %25, %27
  %29 = icmp ne i64 %28, 0
  %30 = zext i1 %29 to i8
  store i8 %30, i8* %11, align 1
  %31 = load i8, i8* %11, align 1
  %32 = trunc i8 %31 to i1
  br i1 %32, label %33, label %78

; <label>:33:                                     ; preds = %3
  %34 = load i64, i64* %10, align 8
  %35 = shl i64 %34, 1
  %36 = load i64, i64* %8, align 8
  %37 = sub i64 63, %36
  %38 = shl i64 %35, %37
  %39 = call i64 @llvm.ctpop.i64(i64 %38)
  %40 = trunc i64 %39 to i32
  store i32 %40, i32* %12, align 4
  %41 = load %class.KV.4*, %class.KV.4** %9, align 8
  %42 = load i32, i32* %12, align 4
  %43 = zext i32 %42 to i64
  %44 = getelementptr inbounds %class.KV.4, %class.KV.4* %41, i64 %43
  %45 = getelementptr inbounds %class.KV.4, %class.KV.4* %44, i32 0, i32 0
  %46 = bitcast %"union.KV<key, key, 5>::Key"* %45 to i64*
  %47 = load i64, i64* %46, align 8
  %48 = and i64 %47, 1
  %49 = icmp eq i64 %48, 0
  br i1 %49, label %50, label %69

; <label>:50:                                     ; preds = %33
  %51 = load %class.KV.4*, %class.KV.4** %9, align 8
  %52 = load i32, i32* %12, align 4
  %53 = zext i32 %52 to i64
  %54 = getelementptr inbounds %class.KV.4, %class.KV.4* %51, i64 %53
  %55 = getelementptr inbounds %class.KV.4, %class.KV.4* %54, i32 0, i32 0
  %56 = bitcast %"union.KV<key, key, 5>::Key"* %55 to %class.key**
  %57 = load %class.key*, %class.key** %56, align 8
  %58 = load %class.key*, %class.key** %7, align 8
  %59 = call zeroext i1 @_ZNK3keyeqERKS_(%class.key* %57, %class.key* dereferenceable(8) %58)
  br i1 %59, label %60, label %68

; <label>:60:                                     ; preds = %50
  %61 = load %class.KV.4*, %class.KV.4** %9, align 8
  %62 = load i32, i32* %12, align 4
  %63 = zext i32 %62 to i64
  %64 = getelementptr inbounds %class.KV.4, %class.KV.4* %61, i64 %63
  %65 = getelementptr inbounds %class.KV.4, %class.KV.4* %64, i32 0, i32 1
  %66 = bitcast %"union.KV<key, key, 5>::Val"* %65 to %class.key**
  %67 = load %class.key*, %class.key** %66, align 8
  store %class.key* %67, %class.key** %4, align 8
  br label %79

; <label>:68:                                     ; preds = %50
  store %class.key* null, %class.key** %4, align 8
  br label %79

; <label>:69:                                     ; preds = %33
  %70 = load %class.KV.4*, %class.KV.4** %9, align 8
  %71 = load i32, i32* %12, align 4
  %72 = zext i32 %71 to i64
  %73 = getelementptr inbounds %class.KV.4, %class.KV.4* %70, i64 %72
  %74 = load i64, i64* %6, align 8
  %75 = lshr i64 %74, 6
  %76 = load %class.key*, %class.key** %7, align 8
  %77 = call %class.key* @_ZN2KVI3keyS0_Lj5EE10inner_findERKS1_mPKS0_(%class.KV.4* dereferenceable(16) %73, i64 %75, %class.key* %76)
  store %class.key* %77, %class.key** %4, align 8
  br label %79

; <label>:78:                                     ; preds = %3
  store %class.key* null, %class.key** %4, align 8
  br label %79

; <label>:79:                                     ; preds = %78, %69, %68, %60
  %80 = load %class.key*, %class.key** %4, align 8
  ret %class.key* %80
}

; Function Attrs: noinline optnone sspstrong uwtable
define linkonce_odr %class.key* @_ZN2KVI3keyS0_Lj5EE10inner_findERKS1_mPKS0_(%class.KV.4* dereferenceable(16), i64, %class.key*) #2 comdat align 2 {
  %4 = alloca %class.key*, align 8
  %5 = alloca %class.KV.4*, align 8
  %6 = alloca i64, align 8
  %7 = alloca %class.key*, align 8
  %8 = alloca i64, align 8
  %9 = alloca %class.KV.5*, align 8
  %10 = alloca i64, align 8
  %11 = alloca i8, align 1
  %12 = alloca i32, align 4
  store %class.KV.4* %0, %class.KV.4** %5, align 8
  store i64 %1, i64* %6, align 8
  store %class.key* %2, %class.key** %7, align 8
  %13 = load i64, i64* %6, align 8
  %14 = and i64 %13, 63
  %15 = urem i64 %14, 63
  store i64 %15, i64* %8, align 8
  %16 = load %class.KV.4*, %class.KV.4** %5, align 8
  %17 = getelementptr inbounds %class.KV.4, %class.KV.4* %16, i32 0, i32 1
  %18 = bitcast %"union.KV<key, key, 5>::Val"* %17 to %class.KV.5**
  %19 = load %class.KV.5*, %class.KV.5** %18, align 8
  store %class.KV.5* %19, %class.KV.5** %9, align 8
  %20 = load %class.KV.4*, %class.KV.4** %5, align 8
  %21 = getelementptr inbounds %class.KV.4, %class.KV.4* %20, i32 0, i32 0
  %22 = bitcast %"union.KV<key, key, 5>::Key"* %21 to i64*
  %23 = load i64, i64* %22, align 8
  %24 = lshr i64 %23, 1
  store i64 %24, i64* %10, align 8
  %25 = load i64, i64* %10, align 8
  %26 = load i64, i64* %8, align 8
  %27 = shl i64 1, %26
  %28 = and i64 %25, %27
  %29 = icmp ne i64 %28, 0
  %30 = zext i1 %29 to i8
  store i8 %30, i8* %11, align 1
  %31 = load i8, i8* %11, align 1
  %32 = trunc i8 %31 to i1
  br i1 %32, label %33, label %78

; <label>:33:                                     ; preds = %3
  %34 = load i64, i64* %10, align 8
  %35 = shl i64 %34, 1
  %36 = load i64, i64* %8, align 8
  %37 = sub i64 63, %36
  %38 = shl i64 %35, %37
  %39 = call i64 @llvm.ctpop.i64(i64 %38)
  %40 = trunc i64 %39 to i32
  store i32 %40, i32* %12, align 4
  %41 = load %class.KV.5*, %class.KV.5** %9, align 8
  %42 = load i32, i32* %12, align 4
  %43 = zext i32 %42 to i64
  %44 = getelementptr inbounds %class.KV.5, %class.KV.5* %41, i64 %43
  %45 = getelementptr inbounds %class.KV.5, %class.KV.5* %44, i32 0, i32 0
  %46 = bitcast %"union.KV<key, key, 6>::Key"* %45 to i64*
  %47 = load i64, i64* %46, align 8
  %48 = and i64 %47, 1
  %49 = icmp eq i64 %48, 0
  br i1 %49, label %50, label %69

; <label>:50:                                     ; preds = %33
  %51 = load %class.KV.5*, %class.KV.5** %9, align 8
  %52 = load i32, i32* %12, align 4
  %53 = zext i32 %52 to i64
  %54 = getelementptr inbounds %class.KV.5, %class.KV.5* %51, i64 %53
  %55 = getelementptr inbounds %class.KV.5, %class.KV.5* %54, i32 0, i32 0
  %56 = bitcast %"union.KV<key, key, 6>::Key"* %55 to %class.key**
  %57 = load %class.key*, %class.key** %56, align 8
  %58 = load %class.key*, %class.key** %7, align 8
  %59 = call zeroext i1 @_ZNK3keyeqERKS_(%class.key* %57, %class.key* dereferenceable(8) %58)
  br i1 %59, label %60, label %68

; <label>:60:                                     ; preds = %50
  %61 = load %class.KV.5*, %class.KV.5** %9, align 8
  %62 = load i32, i32* %12, align 4
  %63 = zext i32 %62 to i64
  %64 = getelementptr inbounds %class.KV.5, %class.KV.5* %61, i64 %63
  %65 = getelementptr inbounds %class.KV.5, %class.KV.5* %64, i32 0, i32 1
  %66 = bitcast %"union.KV<key, key, 6>::Val"* %65 to %class.key**
  %67 = load %class.key*, %class.key** %66, align 8
  store %class.key* %67, %class.key** %4, align 8
  br label %79

; <label>:68:                                     ; preds = %50
  store %class.key* null, %class.key** %4, align 8
  br label %79

; <label>:69:                                     ; preds = %33
  %70 = load %class.KV.5*, %class.KV.5** %9, align 8
  %71 = load i32, i32* %12, align 4
  %72 = zext i32 %71 to i64
  %73 = getelementptr inbounds %class.KV.5, %class.KV.5* %70, i64 %72
  %74 = load i64, i64* %6, align 8
  %75 = lshr i64 %74, 6
  %76 = load %class.key*, %class.key** %7, align 8
  %77 = call %class.key* @_ZN2KVI3keyS0_Lj6EE10inner_findERKS1_mPKS0_(%class.KV.5* dereferenceable(16) %73, i64 %75, %class.key* %76)
  store %class.key* %77, %class.key** %4, align 8
  br label %79

; <label>:78:                                     ; preds = %3
  store %class.key* null, %class.key** %4, align 8
  br label %79

; <label>:79:                                     ; preds = %78, %69, %68, %60
  %80 = load %class.key*, %class.key** %4, align 8
  ret %class.key* %80
}

; Function Attrs: noinline optnone sspstrong uwtable
define linkonce_odr %class.key* @_ZN2KVI3keyS0_Lj6EE10inner_findERKS1_mPKS0_(%class.KV.5* dereferenceable(16), i64, %class.key*) #2 comdat align 2 {
  %4 = alloca %class.key*, align 8
  %5 = alloca %class.KV.5*, align 8
  %6 = alloca i64, align 8
  %7 = alloca %class.key*, align 8
  %8 = alloca i64, align 8
  %9 = alloca %class.KV.6*, align 8
  %10 = alloca i64, align 8
  %11 = alloca i8, align 1
  %12 = alloca i32, align 4
  store %class.KV.5* %0, %class.KV.5** %5, align 8
  store i64 %1, i64* %6, align 8
  store %class.key* %2, %class.key** %7, align 8
  %13 = load i64, i64* %6, align 8
  %14 = and i64 %13, 63
  %15 = urem i64 %14, 63
  store i64 %15, i64* %8, align 8
  %16 = load %class.KV.5*, %class.KV.5** %5, align 8
  %17 = getelementptr inbounds %class.KV.5, %class.KV.5* %16, i32 0, i32 1
  %18 = bitcast %"union.KV<key, key, 6>::Val"* %17 to %class.KV.6**
  %19 = load %class.KV.6*, %class.KV.6** %18, align 8
  store %class.KV.6* %19, %class.KV.6** %9, align 8
  %20 = load %class.KV.5*, %class.KV.5** %5, align 8
  %21 = getelementptr inbounds %class.KV.5, %class.KV.5* %20, i32 0, i32 0
  %22 = bitcast %"union.KV<key, key, 6>::Key"* %21 to i64*
  %23 = load i64, i64* %22, align 8
  %24 = lshr i64 %23, 1
  store i64 %24, i64* %10, align 8
  %25 = load i64, i64* %10, align 8
  %26 = load i64, i64* %8, align 8
  %27 = shl i64 1, %26
  %28 = and i64 %25, %27
  %29 = icmp ne i64 %28, 0
  %30 = zext i1 %29 to i8
  store i8 %30, i8* %11, align 1
  %31 = load i8, i8* %11, align 1
  %32 = trunc i8 %31 to i1
  br i1 %32, label %33, label %78

; <label>:33:                                     ; preds = %3
  %34 = load i64, i64* %10, align 8
  %35 = shl i64 %34, 1
  %36 = load i64, i64* %8, align 8
  %37 = sub i64 63, %36
  %38 = shl i64 %35, %37
  %39 = call i64 @llvm.ctpop.i64(i64 %38)
  %40 = trunc i64 %39 to i32
  store i32 %40, i32* %12, align 4
  %41 = load %class.KV.6*, %class.KV.6** %9, align 8
  %42 = load i32, i32* %12, align 4
  %43 = zext i32 %42 to i64
  %44 = getelementptr inbounds %class.KV.6, %class.KV.6* %41, i64 %43
  %45 = getelementptr inbounds %class.KV.6, %class.KV.6* %44, i32 0, i32 0
  %46 = bitcast %"union.KV<key, key, 7>::Key"* %45 to i64*
  %47 = load i64, i64* %46, align 8
  %48 = and i64 %47, 1
  %49 = icmp eq i64 %48, 0
  br i1 %49, label %50, label %69

; <label>:50:                                     ; preds = %33
  %51 = load %class.KV.6*, %class.KV.6** %9, align 8
  %52 = load i32, i32* %12, align 4
  %53 = zext i32 %52 to i64
  %54 = getelementptr inbounds %class.KV.6, %class.KV.6* %51, i64 %53
  %55 = getelementptr inbounds %class.KV.6, %class.KV.6* %54, i32 0, i32 0
  %56 = bitcast %"union.KV<key, key, 7>::Key"* %55 to %class.key**
  %57 = load %class.key*, %class.key** %56, align 8
  %58 = load %class.key*, %class.key** %7, align 8
  %59 = call zeroext i1 @_ZNK3keyeqERKS_(%class.key* %57, %class.key* dereferenceable(8) %58)
  br i1 %59, label %60, label %68

; <label>:60:                                     ; preds = %50
  %61 = load %class.KV.6*, %class.KV.6** %9, align 8
  %62 = load i32, i32* %12, align 4
  %63 = zext i32 %62 to i64
  %64 = getelementptr inbounds %class.KV.6, %class.KV.6* %61, i64 %63
  %65 = getelementptr inbounds %class.KV.6, %class.KV.6* %64, i32 0, i32 1
  %66 = bitcast %"union.KV<key, key, 7>::Val"* %65 to %class.key**
  %67 = load %class.key*, %class.key** %66, align 8
  store %class.key* %67, %class.key** %4, align 8
  br label %79

; <label>:68:                                     ; preds = %50
  store %class.key* null, %class.key** %4, align 8
  br label %79

; <label>:69:                                     ; preds = %33
  %70 = load %class.KV.6*, %class.KV.6** %9, align 8
  %71 = load i32, i32* %12, align 4
  %72 = zext i32 %71 to i64
  %73 = getelementptr inbounds %class.KV.6, %class.KV.6* %70, i64 %72
  %74 = load i64, i64* %6, align 8
  %75 = lshr i64 %74, 6
  %76 = load %class.key*, %class.key** %7, align 8
  %77 = call %class.key* @_ZN2KVI3keyS0_Lj7EE10inner_findERKS1_mPKS0_(%class.KV.6* dereferenceable(16) %73, i64 %75, %class.key* %76)
  store %class.key* %77, %class.key** %4, align 8
  br label %79

; <label>:78:                                     ; preds = %3
  store %class.key* null, %class.key** %4, align 8
  br label %79

; <label>:79:                                     ; preds = %78, %69, %68, %60
  %80 = load %class.key*, %class.key** %4, align 8
  ret %class.key* %80
}

; Function Attrs: noinline optnone sspstrong uwtable
define linkonce_odr %class.key* @_ZN2KVI3keyS0_Lj7EE10inner_findERKS1_mPKS0_(%class.KV.6* dereferenceable(16), i64, %class.key*) #2 comdat align 2 {
  %4 = alloca %class.key*, align 8
  %5 = alloca %class.KV.6*, align 8
  %6 = alloca i64, align 8
  %7 = alloca %class.key*, align 8
  %8 = alloca i64, align 8
  %9 = alloca %class.KV.7*, align 8
  %10 = alloca i64, align 8
  %11 = alloca i8, align 1
  %12 = alloca i32, align 4
  store %class.KV.6* %0, %class.KV.6** %5, align 8
  store i64 %1, i64* %6, align 8
  store %class.key* %2, %class.key** %7, align 8
  %13 = load i64, i64* %6, align 8
  %14 = and i64 %13, 63
  %15 = urem i64 %14, 63
  store i64 %15, i64* %8, align 8
  %16 = load %class.KV.6*, %class.KV.6** %5, align 8
  %17 = getelementptr inbounds %class.KV.6, %class.KV.6* %16, i32 0, i32 1
  %18 = bitcast %"union.KV<key, key, 7>::Val"* %17 to %class.KV.7**
  %19 = load %class.KV.7*, %class.KV.7** %18, align 8
  store %class.KV.7* %19, %class.KV.7** %9, align 8
  %20 = load %class.KV.6*, %class.KV.6** %5, align 8
  %21 = getelementptr inbounds %class.KV.6, %class.KV.6* %20, i32 0, i32 0
  %22 = bitcast %"union.KV<key, key, 7>::Key"* %21 to i64*
  %23 = load i64, i64* %22, align 8
  %24 = lshr i64 %23, 1
  store i64 %24, i64* %10, align 8
  %25 = load i64, i64* %10, align 8
  %26 = load i64, i64* %8, align 8
  %27 = shl i64 1, %26
  %28 = and i64 %25, %27
  %29 = icmp ne i64 %28, 0
  %30 = zext i1 %29 to i8
  store i8 %30, i8* %11, align 1
  %31 = load i8, i8* %11, align 1
  %32 = trunc i8 %31 to i1
  br i1 %32, label %33, label %78

; <label>:33:                                     ; preds = %3
  %34 = load i64, i64* %10, align 8
  %35 = shl i64 %34, 1
  %36 = load i64, i64* %8, align 8
  %37 = sub i64 63, %36
  %38 = shl i64 %35, %37
  %39 = call i64 @llvm.ctpop.i64(i64 %38)
  %40 = trunc i64 %39 to i32
  store i32 %40, i32* %12, align 4
  %41 = load %class.KV.7*, %class.KV.7** %9, align 8
  %42 = load i32, i32* %12, align 4
  %43 = zext i32 %42 to i64
  %44 = getelementptr inbounds %class.KV.7, %class.KV.7* %41, i64 %43
  %45 = getelementptr inbounds %class.KV.7, %class.KV.7* %44, i32 0, i32 0
  %46 = bitcast %"union.KV<key, key, 8>::Key"* %45 to i64*
  %47 = load i64, i64* %46, align 8
  %48 = and i64 %47, 1
  %49 = icmp eq i64 %48, 0
  br i1 %49, label %50, label %69

; <label>:50:                                     ; preds = %33
  %51 = load %class.KV.7*, %class.KV.7** %9, align 8
  %52 = load i32, i32* %12, align 4
  %53 = zext i32 %52 to i64
  %54 = getelementptr inbounds %class.KV.7, %class.KV.7* %51, i64 %53
  %55 = getelementptr inbounds %class.KV.7, %class.KV.7* %54, i32 0, i32 0
  %56 = bitcast %"union.KV<key, key, 8>::Key"* %55 to %class.key**
  %57 = load %class.key*, %class.key** %56, align 8
  %58 = load %class.key*, %class.key** %7, align 8
  %59 = call zeroext i1 @_ZNK3keyeqERKS_(%class.key* %57, %class.key* dereferenceable(8) %58)
  br i1 %59, label %60, label %68

; <label>:60:                                     ; preds = %50
  %61 = load %class.KV.7*, %class.KV.7** %9, align 8
  %62 = load i32, i32* %12, align 4
  %63 = zext i32 %62 to i64
  %64 = getelementptr inbounds %class.KV.7, %class.KV.7* %61, i64 %63
  %65 = getelementptr inbounds %class.KV.7, %class.KV.7* %64, i32 0, i32 1
  %66 = bitcast %"union.KV<key, key, 8>::Val"* %65 to %class.key**
  %67 = load %class.key*, %class.key** %66, align 8
  store %class.key* %67, %class.key** %4, align 8
  br label %79

; <label>:68:                                     ; preds = %50
  store %class.key* null, %class.key** %4, align 8
  br label %79

; <label>:69:                                     ; preds = %33
  %70 = load %class.KV.7*, %class.KV.7** %9, align 8
  %71 = load i32, i32* %12, align 4
  %72 = zext i32 %71 to i64
  %73 = getelementptr inbounds %class.KV.7, %class.KV.7* %70, i64 %72
  %74 = load i64, i64* %6, align 8
  %75 = lshr i64 %74, 6
  %76 = load %class.key*, %class.key** %7, align 8
  %77 = call %class.key* @_ZN2KVI3keyS0_Lj8EE10inner_findERKS1_mPKS0_(%class.KV.7* dereferenceable(16) %73, i64 %75, %class.key* %76)
  store %class.key* %77, %class.key** %4, align 8
  br label %79

; <label>:78:                                     ; preds = %3
  store %class.key* null, %class.key** %4, align 8
  br label %79

; <label>:79:                                     ; preds = %78, %69, %68, %60
  %80 = load %class.key*, %class.key** %4, align 8
  ret %class.key* %80
}

; Function Attrs: noinline optnone sspstrong uwtable
define linkonce_odr %class.key* @_ZN2KVI3keyS0_Lj8EE10inner_findERKS1_mPKS0_(%class.KV.7* dereferenceable(16), i64, %class.key*) #2 comdat align 2 {
  %4 = alloca %class.key*, align 8
  %5 = alloca %class.KV.7*, align 8
  %6 = alloca i64, align 8
  %7 = alloca %class.key*, align 8
  %8 = alloca i64, align 8
  %9 = alloca %class.KV.8*, align 8
  %10 = alloca i64, align 8
  %11 = alloca i8, align 1
  %12 = alloca i32, align 4
  store %class.KV.7* %0, %class.KV.7** %5, align 8
  store i64 %1, i64* %6, align 8
  store %class.key* %2, %class.key** %7, align 8
  %13 = load i64, i64* %6, align 8
  %14 = and i64 %13, 63
  %15 = urem i64 %14, 63
  store i64 %15, i64* %8, align 8
  %16 = load %class.KV.7*, %class.KV.7** %5, align 8
  %17 = getelementptr inbounds %class.KV.7, %class.KV.7* %16, i32 0, i32 1
  %18 = bitcast %"union.KV<key, key, 8>::Val"* %17 to %class.KV.8**
  %19 = load %class.KV.8*, %class.KV.8** %18, align 8
  store %class.KV.8* %19, %class.KV.8** %9, align 8
  %20 = load %class.KV.7*, %class.KV.7** %5, align 8
  %21 = getelementptr inbounds %class.KV.7, %class.KV.7* %20, i32 0, i32 0
  %22 = bitcast %"union.KV<key, key, 8>::Key"* %21 to i64*
  %23 = load i64, i64* %22, align 8
  %24 = lshr i64 %23, 1
  store i64 %24, i64* %10, align 8
  %25 = load i64, i64* %10, align 8
  %26 = load i64, i64* %8, align 8
  %27 = shl i64 1, %26
  %28 = and i64 %25, %27
  %29 = icmp ne i64 %28, 0
  %30 = zext i1 %29 to i8
  store i8 %30, i8* %11, align 1
  %31 = load i8, i8* %11, align 1
  %32 = trunc i8 %31 to i1
  br i1 %32, label %33, label %78

; <label>:33:                                     ; preds = %3
  %34 = load i64, i64* %10, align 8
  %35 = shl i64 %34, 1
  %36 = load i64, i64* %8, align 8
  %37 = sub i64 63, %36
  %38 = shl i64 %35, %37
  %39 = call i64 @llvm.ctpop.i64(i64 %38)
  %40 = trunc i64 %39 to i32
  store i32 %40, i32* %12, align 4
  %41 = load %class.KV.8*, %class.KV.8** %9, align 8
  %42 = load i32, i32* %12, align 4
  %43 = zext i32 %42 to i64
  %44 = getelementptr inbounds %class.KV.8, %class.KV.8* %41, i64 %43
  %45 = getelementptr inbounds %class.KV.8, %class.KV.8* %44, i32 0, i32 0
  %46 = bitcast %"union.KV<key, key, 9>::Key"* %45 to i64*
  %47 = load i64, i64* %46, align 8
  %48 = and i64 %47, 1
  %49 = icmp eq i64 %48, 0
  br i1 %49, label %50, label %69

; <label>:50:                                     ; preds = %33
  %51 = load %class.KV.8*, %class.KV.8** %9, align 8
  %52 = load i32, i32* %12, align 4
  %53 = zext i32 %52 to i64
  %54 = getelementptr inbounds %class.KV.8, %class.KV.8* %51, i64 %53
  %55 = getelementptr inbounds %class.KV.8, %class.KV.8* %54, i32 0, i32 0
  %56 = bitcast %"union.KV<key, key, 9>::Key"* %55 to %class.key**
  %57 = load %class.key*, %class.key** %56, align 8
  %58 = load %class.key*, %class.key** %7, align 8
  %59 = call zeroext i1 @_ZNK3keyeqERKS_(%class.key* %57, %class.key* dereferenceable(8) %58)
  br i1 %59, label %60, label %68

; <label>:60:                                     ; preds = %50
  %61 = load %class.KV.8*, %class.KV.8** %9, align 8
  %62 = load i32, i32* %12, align 4
  %63 = zext i32 %62 to i64
  %64 = getelementptr inbounds %class.KV.8, %class.KV.8* %61, i64 %63
  %65 = getelementptr inbounds %class.KV.8, %class.KV.8* %64, i32 0, i32 1
  %66 = bitcast %"union.KV<key, key, 9>::Val"* %65 to %class.key**
  %67 = load %class.key*, %class.key** %66, align 8
  store %class.key* %67, %class.key** %4, align 8
  br label %79

; <label>:68:                                     ; preds = %50
  store %class.key* null, %class.key** %4, align 8
  br label %79

; <label>:69:                                     ; preds = %33
  %70 = load %class.KV.8*, %class.KV.8** %9, align 8
  %71 = load i32, i32* %12, align 4
  %72 = zext i32 %71 to i64
  %73 = getelementptr inbounds %class.KV.8, %class.KV.8* %70, i64 %72
  %74 = load i64, i64* %6, align 8
  %75 = lshr i64 %74, 6
  %76 = load %class.key*, %class.key** %7, align 8
  %77 = call %class.key* @_ZN2KVI3keyS0_Lj9EE10inner_findERKS1_mPKS0_(%class.KV.8* dereferenceable(16) %73, i64 %75, %class.key* %76)
  store %class.key* %77, %class.key** %4, align 8
  br label %79

; <label>:78:                                     ; preds = %3
  store %class.key* null, %class.key** %4, align 8
  br label %79

; <label>:79:                                     ; preds = %78, %69, %68, %60
  %80 = load %class.key*, %class.key** %4, align 8
  ret %class.key* %80
}

; Function Attrs: noinline optnone sspstrong uwtable
define linkonce_odr %class.key* @_ZN2KVI3keyS0_Lj9EE10inner_findERKS1_mPKS0_(%class.KV.8* dereferenceable(16), i64, %class.key*) #2 comdat align 2 {
  %4 = alloca %class.key*, align 8
  %5 = alloca %class.KV.8*, align 8
  %6 = alloca i64, align 8
  %7 = alloca %class.key*, align 8
  %8 = alloca i64, align 8
  %9 = alloca %class.KV.9*, align 8
  %10 = alloca i64, align 8
  %11 = alloca i8, align 1
  %12 = alloca i32, align 4
  store %class.KV.8* %0, %class.KV.8** %5, align 8
  store i64 %1, i64* %6, align 8
  store %class.key* %2, %class.key** %7, align 8
  %13 = load i64, i64* %6, align 8
  %14 = and i64 %13, 63
  %15 = urem i64 %14, 63
  store i64 %15, i64* %8, align 8
  %16 = load %class.KV.8*, %class.KV.8** %5, align 8
  %17 = getelementptr inbounds %class.KV.8, %class.KV.8* %16, i32 0, i32 1
  %18 = bitcast %"union.KV<key, key, 9>::Val"* %17 to %class.KV.9**
  %19 = load %class.KV.9*, %class.KV.9** %18, align 8
  store %class.KV.9* %19, %class.KV.9** %9, align 8
  %20 = load %class.KV.8*, %class.KV.8** %5, align 8
  %21 = getelementptr inbounds %class.KV.8, %class.KV.8* %20, i32 0, i32 0
  %22 = bitcast %"union.KV<key, key, 9>::Key"* %21 to i64*
  %23 = load i64, i64* %22, align 8
  %24 = lshr i64 %23, 1
  store i64 %24, i64* %10, align 8
  %25 = load i64, i64* %10, align 8
  %26 = load i64, i64* %8, align 8
  %27 = shl i64 1, %26
  %28 = and i64 %25, %27
  %29 = icmp ne i64 %28, 0
  %30 = zext i1 %29 to i8
  store i8 %30, i8* %11, align 1
  %31 = load i8, i8* %11, align 1
  %32 = trunc i8 %31 to i1
  br i1 %32, label %33, label %78

; <label>:33:                                     ; preds = %3
  %34 = load i64, i64* %10, align 8
  %35 = shl i64 %34, 1
  %36 = load i64, i64* %8, align 8
  %37 = sub i64 63, %36
  %38 = shl i64 %35, %37
  %39 = call i64 @llvm.ctpop.i64(i64 %38)
  %40 = trunc i64 %39 to i32
  store i32 %40, i32* %12, align 4
  %41 = load %class.KV.9*, %class.KV.9** %9, align 8
  %42 = load i32, i32* %12, align 4
  %43 = zext i32 %42 to i64
  %44 = getelementptr inbounds %class.KV.9, %class.KV.9* %41, i64 %43
  %45 = getelementptr inbounds %class.KV.9, %class.KV.9* %44, i32 0, i32 0
  %46 = bitcast %"union.KV<key, key, 10>::Key"* %45 to i64*
  %47 = load i64, i64* %46, align 8
  %48 = and i64 %47, 1
  %49 = icmp eq i64 %48, 0
  br i1 %49, label %50, label %69

; <label>:50:                                     ; preds = %33
  %51 = load %class.KV.9*, %class.KV.9** %9, align 8
  %52 = load i32, i32* %12, align 4
  %53 = zext i32 %52 to i64
  %54 = getelementptr inbounds %class.KV.9, %class.KV.9* %51, i64 %53
  %55 = getelementptr inbounds %class.KV.9, %class.KV.9* %54, i32 0, i32 0
  %56 = bitcast %"union.KV<key, key, 10>::Key"* %55 to %class.key**
  %57 = load %class.key*, %class.key** %56, align 8
  %58 = load %class.key*, %class.key** %7, align 8
  %59 = call zeroext i1 @_ZNK3keyeqERKS_(%class.key* %57, %class.key* dereferenceable(8) %58)
  br i1 %59, label %60, label %68

; <label>:60:                                     ; preds = %50
  %61 = load %class.KV.9*, %class.KV.9** %9, align 8
  %62 = load i32, i32* %12, align 4
  %63 = zext i32 %62 to i64
  %64 = getelementptr inbounds %class.KV.9, %class.KV.9* %61, i64 %63
  %65 = getelementptr inbounds %class.KV.9, %class.KV.9* %64, i32 0, i32 1
  %66 = bitcast %"union.KV<key, key, 10>::Val"* %65 to %class.key**
  %67 = load %class.key*, %class.key** %66, align 8
  store %class.key* %67, %class.key** %4, align 8
  br label %79

; <label>:68:                                     ; preds = %50
  store %class.key* null, %class.key** %4, align 8
  br label %79

; <label>:69:                                     ; preds = %33
  %70 = load %class.KV.9*, %class.KV.9** %9, align 8
  %71 = load i32, i32* %12, align 4
  %72 = zext i32 %71 to i64
  %73 = getelementptr inbounds %class.KV.9, %class.KV.9* %70, i64 %72
  %74 = load i64, i64* %6, align 8
  %75 = lshr i64 %74, 6
  %76 = load %class.key*, %class.key** %7, align 8
  %77 = call %class.key* @_ZN2KVI3keyS0_Lj10EE10inner_findERKS1_mPKS0_(%class.KV.9* dereferenceable(16) %73, i64 %75, %class.key* %76)
  store %class.key* %77, %class.key** %4, align 8
  br label %79

; <label>:78:                                     ; preds = %3
  store %class.key* null, %class.key** %4, align 8
  br label %79

; <label>:79:                                     ; preds = %78, %69, %68, %60
  %80 = load %class.key*, %class.key** %4, align 8
  ret %class.key* %80
}

; Function Attrs: noinline optnone sspstrong uwtable
define linkonce_odr %class.key* @_ZN2KVI3keyS0_Lj10EE10inner_findERKS1_mPKS0_(%class.KV.9* dereferenceable(16), i64, %class.key*) #2 comdat align 2 {
  %4 = alloca %class.key*, align 8
  %5 = alloca %class.KV.9*, align 8
  %6 = alloca i64, align 8
  %7 = alloca %class.key*, align 8
  store %class.KV.9* %0, %class.KV.9** %5, align 8
  store i64 %1, i64* %6, align 8
  store %class.key* %2, %class.key** %7, align 8
  %8 = load %class.KV.9*, %class.KV.9** %5, align 8
  %9 = getelementptr inbounds %class.KV.9, %class.KV.9* %8, i32 0, i32 1
  %10 = bitcast %"union.KV<key, key, 10>::Val"* %9 to %class.LL**
  %11 = load %class.LL*, %class.LL** %10, align 8
  %12 = icmp ne %class.LL* %11, null
  br i1 %12, label %13, label %20

; <label>:13:                                     ; preds = %3
  %14 = load %class.KV.9*, %class.KV.9** %5, align 8
  %15 = getelementptr inbounds %class.KV.9, %class.KV.9* %14, i32 0, i32 1
  %16 = bitcast %"union.KV<key, key, 10>::Val"* %15 to %class.LL**
  %17 = load %class.LL*, %class.LL** %16, align 8
  %18 = load %class.key*, %class.key** %7, align 8
  %19 = call %class.key* @_ZNK2LLI3keyS0_E4findEPKS0_(%class.LL* %17, %class.key* %18)
  store %class.key* %19, %class.key** %4, align 8
  br label %21

; <label>:20:                                     ; preds = %3
  store %class.key* null, %class.key** %4, align 8
  br label %21

; <label>:21:                                     ; preds = %20, %13
  %22 = load %class.key*, %class.key** %4, align 8
  ret %class.key* %22
}

; Function Attrs: noinline optnone sspstrong uwtable
define linkonce_odr %class.key* @_ZNK2LLI3keyS0_E4findEPKS0_(%class.LL*, %class.key*) #2 comdat align 2 {
  %3 = alloca %class.key*, align 8
  %4 = alloca %class.LL*, align 8
  %5 = alloca %class.key*, align 8
  store %class.LL* %0, %class.LL** %4, align 8
  store %class.key* %1, %class.key** %5, align 8
  %6 = load %class.LL*, %class.LL** %4, align 8
  %7 = getelementptr inbounds %class.LL, %class.LL* %6, i32 0, i32 0
  %8 = load %class.key*, %class.key** %7, align 8
  %9 = load %class.key*, %class.key** %5, align 8
  %10 = call zeroext i1 @_ZNK3keyeqERKS_(%class.key* %8, %class.key* dereferenceable(8) %9)
  br i1 %10, label %11, label %14

; <label>:11:                                     ; preds = %2
  %12 = getelementptr inbounds %class.LL, %class.LL* %6, i32 0, i32 1
  %13 = load %class.key*, %class.key** %12, align 8
  store %class.key* %13, %class.key** %3, align 8
  br label %24

; <label>:14:                                     ; preds = %2
  %15 = getelementptr inbounds %class.LL, %class.LL* %6, i32 0, i32 2
  %16 = load %class.LL*, %class.LL** %15, align 8
  %17 = icmp ne %class.LL* %16, null
  br i1 %17, label %18, label %23

; <label>:18:                                     ; preds = %14
  %19 = getelementptr inbounds %class.LL, %class.LL* %6, i32 0, i32 2
  %20 = load %class.LL*, %class.LL** %19, align 8
  %21 = load %class.key*, %class.key** %5, align 8
  %22 = call %class.key* @_ZNK2LLI3keyS0_E4findEPKS0_(%class.LL* %20, %class.key* %21)
  store %class.key* %22, %class.key** %3, align 8
  br label %24

; <label>:23:                                     ; preds = %14
  store %class.key* null, %class.key** %3, align 8
  br label %24

; <label>:24:                                     ; preds = %23, %18, %11
  %25 = load %class.key*, %class.key** %3, align 8
  ret %class.key* %25
}

; Function Attrs: noinline optnone sspstrong uwtable
define linkonce_odr void @_ZN2KVI3keyS0_Lj0EE12remove_innerERKS1_mPKS0_Pm(%class.KV* noalias sret, %class.KV* dereferenceable(16), i64, %class.key*, i64*) #2 comdat align 2 {
  %6 = alloca %class.KV*, align 8
  %7 = alloca i64, align 8
  %8 = alloca %class.key*, align 8
  %9 = alloca i64*, align 8
  %10 = alloca %class.KV.0*, align 8
  %11 = alloca i64, align 8
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i8, align 1
  %15 = alloca i32, align 4
  %16 = alloca %class.KV.0*, align 8
  %17 = alloca i64, align 8
  %18 = alloca %class.KV.0, align 8
  %19 = alloca %class.KV.0*, align 8
  store %class.KV* %1, %class.KV** %6, align 8
  store i64 %2, i64* %7, align 8
  store %class.key* %3, %class.key** %8, align 8
  store i64* %4, i64** %9, align 8
  %20 = load %class.KV*, %class.KV** %6, align 8
  %21 = getelementptr inbounds %class.KV, %class.KV* %20, i32 0, i32 1
  %22 = bitcast %"union.KV<key, key, 0>::Val"* %21 to %class.KV.0**
  %23 = load %class.KV.0*, %class.KV.0** %22, align 8
  store %class.KV.0* %23, %class.KV.0** %10, align 8
  %24 = load %class.KV*, %class.KV** %6, align 8
  %25 = getelementptr inbounds %class.KV, %class.KV* %24, i32 0, i32 0
  %26 = bitcast %"union.KV<key, key, 0>::Key"* %25 to i64*
  %27 = load i64, i64* %26, align 8
  %28 = lshr i64 %27, 1
  store i64 %28, i64* %11, align 8
  %29 = load i64, i64* %7, align 8
  %30 = and i64 %29, 63
  %31 = urem i64 %30, 63
  %32 = trunc i64 %31 to i32
  store i32 %32, i32* %12, align 4
  %33 = load i64, i64* %11, align 8
  %34 = call i64 @llvm.ctpop.i64(i64 %33)
  %35 = trunc i64 %34 to i32
  store i32 %35, i32* %13, align 4
  %36 = load i64, i64* %11, align 8
  %37 = load i32, i32* %12, align 4
  %38 = zext i32 %37 to i64
  %39 = shl i64 1, %38
  %40 = and i64 %36, %39
  %41 = icmp ne i64 %40, 0
  %42 = zext i1 %41 to i8
  store i8 %42, i8* %14, align 1
  %43 = load i8, i8* %14, align 1
  %44 = trunc i8 %43 to i1
  br i1 %44, label %45, label %145

; <label>:45:                                     ; preds = %5
  %46 = load i64, i64* %11, align 8
  %47 = shl i64 %46, 1
  %48 = load i32, i32* %12, align 4
  %49 = sub i32 63, %48
  %50 = zext i32 %49 to i64
  %51 = shl i64 %47, %50
  %52 = call i64 @llvm.ctpop.i64(i64 %51)
  %53 = trunc i64 %52 to i32
  store i32 %53, i32* %15, align 4
  %54 = load %class.KV.0*, %class.KV.0** %10, align 8
  %55 = load i32, i32* %15, align 4
  %56 = zext i32 %55 to i64
  %57 = getelementptr inbounds %class.KV.0, %class.KV.0* %54, i64 %56
  %58 = getelementptr inbounds %class.KV.0, %class.KV.0* %57, i32 0, i32 0
  %59 = bitcast %"union.KV<key, key, 1>::Key"* %58 to i64*
  %60 = load i64, i64* %59, align 8
  %61 = and i64 %60, 1
  %62 = icmp eq i64 %61, 0
  br i1 %62, label %63, label %119

; <label>:63:                                     ; preds = %45
  %64 = load %class.KV.0*, %class.KV.0** %10, align 8
  %65 = load i32, i32* %15, align 4
  %66 = zext i32 %65 to i64
  %67 = getelementptr inbounds %class.KV.0, %class.KV.0* %64, i64 %66
  %68 = getelementptr inbounds %class.KV.0, %class.KV.0* %67, i32 0, i32 0
  %69 = bitcast %"union.KV<key, key, 1>::Key"* %68 to %class.key**
  %70 = load %class.key*, %class.key** %69, align 8
  %71 = load %class.key*, %class.key** %8, align 8
  %72 = call zeroext i1 @_ZNK3keyeqERKS_(%class.key* %70, %class.key* dereferenceable(8) %71)
  br i1 %72, label %73, label %117

; <label>:73:                                     ; preds = %63
  %74 = load i64*, i64** %9, align 8
  %75 = load i64, i64* %74, align 8
  %76 = add i64 %75, -1
  store i64 %76, i64* %74, align 8
  %77 = load i32, i32* %13, align 4
  %78 = sub i32 %77, 1
  %79 = zext i32 %78 to i64
  %80 = mul i64 %79, 16
  %81 = call noalias i8* @malloc(i64 %80) #8
  %82 = bitcast i8* %81 to %class.KV.0*
  store %class.KV.0* %82, %class.KV.0** %16, align 8
  %83 = load %class.KV.0*, %class.KV.0** %16, align 8
  %84 = bitcast %class.KV.0* %83 to i8*
  %85 = load %class.KV.0*, %class.KV.0** %10, align 8
  %86 = bitcast %class.KV.0* %85 to i8*
  %87 = load i32, i32* %15, align 4
  %88 = zext i32 %87 to i64
  %89 = mul i64 %88, 16
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %84, i8* %86, i64 %89, i32 8, i1 false)
  %90 = load %class.KV.0*, %class.KV.0** %16, align 8
  %91 = load i32, i32* %15, align 4
  %92 = zext i32 %91 to i64
  %93 = getelementptr inbounds %class.KV.0, %class.KV.0* %90, i64 %92
  %94 = bitcast %class.KV.0* %93 to i8*
  %95 = load %class.KV.0*, %class.KV.0** %10, align 8
  %96 = load i32, i32* %15, align 4
  %97 = add i32 %96, 1
  %98 = zext i32 %97 to i64
  %99 = getelementptr inbounds %class.KV.0, %class.KV.0* %95, i64 %98
  %100 = bitcast %class.KV.0* %99 to i8*
  %101 = load i32, i32* %13, align 4
  %102 = sub i32 %101, 1
  %103 = load i32, i32* %15, align 4
  %104 = sub i32 %102, %103
  %105 = zext i32 %104 to i64
  %106 = mul i64 %105, 16
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %94, i8* %100, i64 %106, i32 8, i1 false)
  %107 = load i64, i64* %11, align 8
  %108 = load i32, i32* %12, align 4
  %109 = zext i32 %108 to i64
  %110 = shl i64 1, %109
  %111 = xor i64 -1, %110
  %112 = and i64 %107, %111
  %113 = shl i64 %112, 1
  %114 = or i64 %113, 1
  store i64 %114, i64* %17, align 8
  %115 = load i64, i64* %17, align 8
  %116 = load %class.KV.0*, %class.KV.0** %16, align 8
  call void @_ZN2KVI3keyS0_Lj0EEC2EmPKS_IS0_S0_Lj1EE(%class.KV* %0, i64 %115, %class.KV.0* %116)
  br label %147

; <label>:117:                                    ; preds = %63
  %118 = load %class.KV*, %class.KV** %6, align 8
  call void @_ZN2KVI3keyS0_Lj0EEC2ERKS1_(%class.KV* %0, %class.KV* dereferenceable(16) %118)
  br label %147

; <label>:119:                                    ; preds = %45
  %120 = load %class.KV.0*, %class.KV.0** %10, align 8
  %121 = load i32, i32* %15, align 4
  %122 = zext i32 %121 to i64
  %123 = getelementptr inbounds %class.KV.0, %class.KV.0* %120, i64 %122
  %124 = load i64, i64* %7, align 8
  %125 = lshr i64 %124, 6
  %126 = load %class.key*, %class.key** %8, align 8
  %127 = load i64*, i64** %9, align 8
  call void @_ZN2KVI3keyS0_Lj1EE12remove_innerERKS1_mPKS0_Pm(%class.KV.0* sret %18, %class.KV.0* dereferenceable(16) %123, i64 %125, %class.key* %126, i64* %127)
  %128 = load %class.KV.0*, %class.KV.0** %10, align 8
  %129 = load i32, i32* %15, align 4
  %130 = zext i32 %129 to i64
  %131 = getelementptr inbounds %class.KV.0, %class.KV.0* %128, i64 %130
  %132 = call zeroext i1 @_ZNK2KVI3keyS0_Lj1EEeqERKS1_(%class.KV.0* %18, %class.KV.0* dereferenceable(16) %131)
  br i1 %132, label %133, label %135

; <label>:133:                                    ; preds = %119
  %134 = load %class.KV*, %class.KV** %6, align 8
  call void @_ZN2KVI3keyS0_Lj0EEC2ERKS1_(%class.KV* %0, %class.KV* dereferenceable(16) %134)
  br label %147

; <label>:135:                                    ; preds = %119
  %136 = load %class.KV.0*, %class.KV.0** %10, align 8
  %137 = load i32, i32* %13, align 4
  %138 = load i32, i32* %15, align 4
  %139 = call %class.KV.0* @_ZN2KVI3keyS0_Lj1EE11update_nodeEPKS1_jjRS2_(%class.KV.0* %136, i32 %137, i32 %138, %class.KV.0* dereferenceable(16) %18)
  store %class.KV.0* %139, %class.KV.0** %19, align 8
  %140 = load %class.KV*, %class.KV** %6, align 8
  %141 = getelementptr inbounds %class.KV, %class.KV* %140, i32 0, i32 0
  %142 = bitcast %"union.KV<key, key, 0>::Key"* %141 to i64*
  %143 = load i64, i64* %142, align 8
  %144 = load %class.KV.0*, %class.KV.0** %19, align 8
  call void @_ZN2KVI3keyS0_Lj0EEC2EmPKS_IS0_S0_Lj1EE(%class.KV* %0, i64 %143, %class.KV.0* %144)
  br label %147

; <label>:145:                                    ; preds = %5
  %146 = load %class.KV*, %class.KV** %6, align 8
  call void @_ZN2KVI3keyS0_Lj0EEC2ERKS1_(%class.KV* %0, %class.KV* dereferenceable(16) %146)
  br label %147

; <label>:147:                                    ; preds = %145, %135, %133, %117, %73
  ret void
}

; Function Attrs: noinline nounwind optnone sspstrong uwtable
define linkonce_odr zeroext i1 @_ZNK2KVI3keyS0_Lj0EEeqERKS1_(%class.KV*, %class.KV* dereferenceable(16)) #0 comdat align 2 {
  %3 = alloca %class.KV*, align 8
  %4 = alloca %class.KV*, align 8
  store %class.KV* %0, %class.KV** %3, align 8
  store %class.KV* %1, %class.KV** %4, align 8
  %5 = load %class.KV*, %class.KV** %3, align 8
  %6 = getelementptr inbounds %class.KV, %class.KV* %5, i32 0, i32 0
  %7 = bitcast %"union.KV<key, key, 0>::Key"* %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = load %class.KV*, %class.KV** %4, align 8
  %10 = getelementptr inbounds %class.KV, %class.KV* %9, i32 0, i32 0
  %11 = bitcast %"union.KV<key, key, 0>::Key"* %10 to i64*
  %12 = load i64, i64* %11, align 8
  %13 = icmp eq i64 %8, %12
  br i1 %13, label %14, label %23

; <label>:14:                                     ; preds = %2
  %15 = getelementptr inbounds %class.KV, %class.KV* %5, i32 0, i32 1
  %16 = bitcast %"union.KV<key, key, 0>::Val"* %15 to %class.KV.0**
  %17 = load %class.KV.0*, %class.KV.0** %16, align 8
  %18 = load %class.KV*, %class.KV** %4, align 8
  %19 = getelementptr inbounds %class.KV, %class.KV* %18, i32 0, i32 1
  %20 = bitcast %"union.KV<key, key, 0>::Val"* %19 to %class.KV.0**
  %21 = load %class.KV.0*, %class.KV.0** %20, align 8
  %22 = icmp eq %class.KV.0* %17, %21
  br label %23

; <label>:23:                                     ; preds = %14, %2
  %24 = phi i1 [ false, %2 ], [ %22, %14 ]
  ret i1 %24
}

; Function Attrs: noinline nounwind optnone sspstrong uwtable
define linkonce_odr void @_ZN2KVI3keyS0_Lj0EEC2ERKS1_(%class.KV*, %class.KV* dereferenceable(16)) unnamed_addr #0 comdat align 2 {
  %3 = alloca %class.KV*, align 8
  %4 = alloca %class.KV*, align 8
  store %class.KV* %0, %class.KV** %3, align 8
  store %class.KV* %1, %class.KV** %4, align 8
  %5 = load %class.KV*, %class.KV** %3, align 8
  %6 = getelementptr inbounds %class.KV, %class.KV* %5, i32 0, i32 0
  %7 = load %class.KV*, %class.KV** %4, align 8
  %8 = getelementptr inbounds %class.KV, %class.KV* %7, i32 0, i32 0
  %9 = bitcast %"union.KV<key, key, 0>::Key"* %6 to i8*
  %10 = bitcast %"union.KV<key, key, 0>::Key"* %8 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %9, i8* %10, i64 8, i32 8, i1 false)
  %11 = getelementptr inbounds %class.KV, %class.KV* %5, i32 0, i32 1
  %12 = load %class.KV*, %class.KV** %4, align 8
  %13 = getelementptr inbounds %class.KV, %class.KV* %12, i32 0, i32 1
  %14 = bitcast %"union.KV<key, key, 0>::Val"* %11 to i8*
  %15 = bitcast %"union.KV<key, key, 0>::Val"* %13 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %14, i8* %15, i64 8, i32 8, i1 false)
  ret void
}

; Function Attrs: noinline optnone sspstrong uwtable
define linkonce_odr void @_ZN2KVI3keyS0_Lj1EE12remove_innerERKS1_mPKS0_Pm(%class.KV.0* noalias sret, %class.KV.0* dereferenceable(16), i64, %class.key*, i64*) #2 comdat align 2 {
  %6 = alloca %class.KV.0*, align 8
  %7 = alloca i64, align 8
  %8 = alloca %class.key*, align 8
  %9 = alloca i64*, align 8
  %10 = alloca %class.KV.1*, align 8
  %11 = alloca i64, align 8
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i8, align 1
  %15 = alloca i32, align 4
  %16 = alloca %class.KV.1*, align 8
  %17 = alloca i64, align 8
  %18 = alloca %class.KV.1, align 8
  %19 = alloca %class.KV.1*, align 8
  store %class.KV.0* %1, %class.KV.0** %6, align 8
  store i64 %2, i64* %7, align 8
  store %class.key* %3, %class.key** %8, align 8
  store i64* %4, i64** %9, align 8
  %20 = load %class.KV.0*, %class.KV.0** %6, align 8
  %21 = getelementptr inbounds %class.KV.0, %class.KV.0* %20, i32 0, i32 1
  %22 = bitcast %"union.KV<key, key, 1>::Val"* %21 to %class.KV.1**
  %23 = load %class.KV.1*, %class.KV.1** %22, align 8
  store %class.KV.1* %23, %class.KV.1** %10, align 8
  %24 = load %class.KV.0*, %class.KV.0** %6, align 8
  %25 = getelementptr inbounds %class.KV.0, %class.KV.0* %24, i32 0, i32 0
  %26 = bitcast %"union.KV<key, key, 1>::Key"* %25 to i64*
  %27 = load i64, i64* %26, align 8
  %28 = lshr i64 %27, 1
  store i64 %28, i64* %11, align 8
  %29 = load i64, i64* %7, align 8
  %30 = and i64 %29, 63
  %31 = urem i64 %30, 63
  %32 = trunc i64 %31 to i32
  store i32 %32, i32* %12, align 4
  %33 = load i64, i64* %11, align 8
  %34 = call i64 @llvm.ctpop.i64(i64 %33)
  %35 = trunc i64 %34 to i32
  store i32 %35, i32* %13, align 4
  %36 = load i64, i64* %11, align 8
  %37 = load i32, i32* %12, align 4
  %38 = zext i32 %37 to i64
  %39 = shl i64 1, %38
  %40 = and i64 %36, %39
  %41 = icmp ne i64 %40, 0
  %42 = zext i1 %41 to i8
  store i8 %42, i8* %14, align 1
  %43 = load i8, i8* %14, align 1
  %44 = trunc i8 %43 to i1
  br i1 %44, label %45, label %145

; <label>:45:                                     ; preds = %5
  %46 = load i64, i64* %11, align 8
  %47 = shl i64 %46, 1
  %48 = load i32, i32* %12, align 4
  %49 = sub i32 63, %48
  %50 = zext i32 %49 to i64
  %51 = shl i64 %47, %50
  %52 = call i64 @llvm.ctpop.i64(i64 %51)
  %53 = trunc i64 %52 to i32
  store i32 %53, i32* %15, align 4
  %54 = load %class.KV.1*, %class.KV.1** %10, align 8
  %55 = load i32, i32* %15, align 4
  %56 = zext i32 %55 to i64
  %57 = getelementptr inbounds %class.KV.1, %class.KV.1* %54, i64 %56
  %58 = getelementptr inbounds %class.KV.1, %class.KV.1* %57, i32 0, i32 0
  %59 = bitcast %"union.KV<key, key, 2>::Key"* %58 to i64*
  %60 = load i64, i64* %59, align 8
  %61 = and i64 %60, 1
  %62 = icmp eq i64 %61, 0
  br i1 %62, label %63, label %119

; <label>:63:                                     ; preds = %45
  %64 = load %class.KV.1*, %class.KV.1** %10, align 8
  %65 = load i32, i32* %15, align 4
  %66 = zext i32 %65 to i64
  %67 = getelementptr inbounds %class.KV.1, %class.KV.1* %64, i64 %66
  %68 = getelementptr inbounds %class.KV.1, %class.KV.1* %67, i32 0, i32 0
  %69 = bitcast %"union.KV<key, key, 2>::Key"* %68 to %class.key**
  %70 = load %class.key*, %class.key** %69, align 8
  %71 = load %class.key*, %class.key** %8, align 8
  %72 = call zeroext i1 @_ZNK3keyeqERKS_(%class.key* %70, %class.key* dereferenceable(8) %71)
  br i1 %72, label %73, label %117

; <label>:73:                                     ; preds = %63
  %74 = load i64*, i64** %9, align 8
  %75 = load i64, i64* %74, align 8
  %76 = add i64 %75, -1
  store i64 %76, i64* %74, align 8
  %77 = load i32, i32* %13, align 4
  %78 = sub i32 %77, 1
  %79 = zext i32 %78 to i64
  %80 = mul i64 %79, 16
  %81 = call noalias i8* @malloc(i64 %80) #8
  %82 = bitcast i8* %81 to %class.KV.1*
  store %class.KV.1* %82, %class.KV.1** %16, align 8
  %83 = load %class.KV.1*, %class.KV.1** %16, align 8
  %84 = bitcast %class.KV.1* %83 to i8*
  %85 = load %class.KV.1*, %class.KV.1** %10, align 8
  %86 = bitcast %class.KV.1* %85 to i8*
  %87 = load i32, i32* %15, align 4
  %88 = zext i32 %87 to i64
  %89 = mul i64 %88, 16
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %84, i8* %86, i64 %89, i32 8, i1 false)
  %90 = load %class.KV.1*, %class.KV.1** %16, align 8
  %91 = load i32, i32* %15, align 4
  %92 = zext i32 %91 to i64
  %93 = getelementptr inbounds %class.KV.1, %class.KV.1* %90, i64 %92
  %94 = bitcast %class.KV.1* %93 to i8*
  %95 = load %class.KV.1*, %class.KV.1** %10, align 8
  %96 = load i32, i32* %15, align 4
  %97 = add i32 %96, 1
  %98 = zext i32 %97 to i64
  %99 = getelementptr inbounds %class.KV.1, %class.KV.1* %95, i64 %98
  %100 = bitcast %class.KV.1* %99 to i8*
  %101 = load i32, i32* %13, align 4
  %102 = sub i32 %101, 1
  %103 = load i32, i32* %15, align 4
  %104 = sub i32 %102, %103
  %105 = zext i32 %104 to i64
  %106 = mul i64 %105, 16
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %94, i8* %100, i64 %106, i32 8, i1 false)
  %107 = load i64, i64* %11, align 8
  %108 = load i32, i32* %12, align 4
  %109 = zext i32 %108 to i64
  %110 = shl i64 1, %109
  %111 = xor i64 -1, %110
  %112 = and i64 %107, %111
  %113 = shl i64 %112, 1
  %114 = or i64 %113, 1
  store i64 %114, i64* %17, align 8
  %115 = load i64, i64* %17, align 8
  %116 = load %class.KV.1*, %class.KV.1** %16, align 8
  call void @_ZN2KVI3keyS0_Lj1EEC2EmPKS_IS0_S0_Lj2EE(%class.KV.0* %0, i64 %115, %class.KV.1* %116)
  br label %147

; <label>:117:                                    ; preds = %63
  %118 = load %class.KV.0*, %class.KV.0** %6, align 8
  call void @_ZN2KVI3keyS0_Lj1EEC2ERKS1_(%class.KV.0* %0, %class.KV.0* dereferenceable(16) %118)
  br label %147

; <label>:119:                                    ; preds = %45
  %120 = load %class.KV.1*, %class.KV.1** %10, align 8
  %121 = load i32, i32* %15, align 4
  %122 = zext i32 %121 to i64
  %123 = getelementptr inbounds %class.KV.1, %class.KV.1* %120, i64 %122
  %124 = load i64, i64* %7, align 8
  %125 = lshr i64 %124, 6
  %126 = load %class.key*, %class.key** %8, align 8
  %127 = load i64*, i64** %9, align 8
  call void @_ZN2KVI3keyS0_Lj2EE12remove_innerERKS1_mPKS0_Pm(%class.KV.1* sret %18, %class.KV.1* dereferenceable(16) %123, i64 %125, %class.key* %126, i64* %127)
  %128 = load %class.KV.1*, %class.KV.1** %10, align 8
  %129 = load i32, i32* %15, align 4
  %130 = zext i32 %129 to i64
  %131 = getelementptr inbounds %class.KV.1, %class.KV.1* %128, i64 %130
  %132 = call zeroext i1 @_ZNK2KVI3keyS0_Lj2EEeqERKS1_(%class.KV.1* %18, %class.KV.1* dereferenceable(16) %131)
  br i1 %132, label %133, label %135

; <label>:133:                                    ; preds = %119
  %134 = load %class.KV.0*, %class.KV.0** %6, align 8
  call void @_ZN2KVI3keyS0_Lj1EEC2ERKS1_(%class.KV.0* %0, %class.KV.0* dereferenceable(16) %134)
  br label %147

; <label>:135:                                    ; preds = %119
  %136 = load %class.KV.1*, %class.KV.1** %10, align 8
  %137 = load i32, i32* %13, align 4
  %138 = load i32, i32* %15, align 4
  %139 = call %class.KV.1* @_ZN2KVI3keyS0_Lj2EE11update_nodeEPKS1_jjRS2_(%class.KV.1* %136, i32 %137, i32 %138, %class.KV.1* dereferenceable(16) %18)
  store %class.KV.1* %139, %class.KV.1** %19, align 8
  %140 = load %class.KV.0*, %class.KV.0** %6, align 8
  %141 = getelementptr inbounds %class.KV.0, %class.KV.0* %140, i32 0, i32 0
  %142 = bitcast %"union.KV<key, key, 1>::Key"* %141 to i64*
  %143 = load i64, i64* %142, align 8
  %144 = load %class.KV.1*, %class.KV.1** %19, align 8
  call void @_ZN2KVI3keyS0_Lj1EEC2EmPKS_IS0_S0_Lj2EE(%class.KV.0* %0, i64 %143, %class.KV.1* %144)
  br label %147

; <label>:145:                                    ; preds = %5
  %146 = load %class.KV.0*, %class.KV.0** %6, align 8
  call void @_ZN2KVI3keyS0_Lj1EEC2ERKS1_(%class.KV.0* %0, %class.KV.0* dereferenceable(16) %146)
  br label %147

; <label>:147:                                    ; preds = %145, %135, %133, %117, %73
  ret void
}

; Function Attrs: noinline nounwind optnone sspstrong uwtable
define linkonce_odr zeroext i1 @_ZNK2KVI3keyS0_Lj1EEeqERKS1_(%class.KV.0*, %class.KV.0* dereferenceable(16)) #0 comdat align 2 {
  %3 = alloca %class.KV.0*, align 8
  %4 = alloca %class.KV.0*, align 8
  store %class.KV.0* %0, %class.KV.0** %3, align 8
  store %class.KV.0* %1, %class.KV.0** %4, align 8
  %5 = load %class.KV.0*, %class.KV.0** %3, align 8
  %6 = getelementptr inbounds %class.KV.0, %class.KV.0* %5, i32 0, i32 0
  %7 = bitcast %"union.KV<key, key, 1>::Key"* %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = load %class.KV.0*, %class.KV.0** %4, align 8
  %10 = getelementptr inbounds %class.KV.0, %class.KV.0* %9, i32 0, i32 0
  %11 = bitcast %"union.KV<key, key, 1>::Key"* %10 to i64*
  %12 = load i64, i64* %11, align 8
  %13 = icmp eq i64 %8, %12
  br i1 %13, label %14, label %23

; <label>:14:                                     ; preds = %2
  %15 = getelementptr inbounds %class.KV.0, %class.KV.0* %5, i32 0, i32 1
  %16 = bitcast %"union.KV<key, key, 1>::Val"* %15 to %class.KV.1**
  %17 = load %class.KV.1*, %class.KV.1** %16, align 8
  %18 = load %class.KV.0*, %class.KV.0** %4, align 8
  %19 = getelementptr inbounds %class.KV.0, %class.KV.0* %18, i32 0, i32 1
  %20 = bitcast %"union.KV<key, key, 1>::Val"* %19 to %class.KV.1**
  %21 = load %class.KV.1*, %class.KV.1** %20, align 8
  %22 = icmp eq %class.KV.1* %17, %21
  br label %23

; <label>:23:                                     ; preds = %14, %2
  %24 = phi i1 [ false, %2 ], [ %22, %14 ]
  ret i1 %24
}

; Function Attrs: noinline optnone sspstrong uwtable
define linkonce_odr void @_ZN2KVI3keyS0_Lj2EE12remove_innerERKS1_mPKS0_Pm(%class.KV.1* noalias sret, %class.KV.1* dereferenceable(16), i64, %class.key*, i64*) #2 comdat align 2 {
  %6 = alloca %class.KV.1*, align 8
  %7 = alloca i64, align 8
  %8 = alloca %class.key*, align 8
  %9 = alloca i64*, align 8
  %10 = alloca %class.KV.2*, align 8
  %11 = alloca i64, align 8
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i8, align 1
  %15 = alloca i32, align 4
  %16 = alloca %class.KV.2*, align 8
  %17 = alloca i64, align 8
  %18 = alloca %class.KV.2, align 8
  %19 = alloca %class.KV.2*, align 8
  store %class.KV.1* %1, %class.KV.1** %6, align 8
  store i64 %2, i64* %7, align 8
  store %class.key* %3, %class.key** %8, align 8
  store i64* %4, i64** %9, align 8
  %20 = load %class.KV.1*, %class.KV.1** %6, align 8
  %21 = getelementptr inbounds %class.KV.1, %class.KV.1* %20, i32 0, i32 1
  %22 = bitcast %"union.KV<key, key, 2>::Val"* %21 to %class.KV.2**
  %23 = load %class.KV.2*, %class.KV.2** %22, align 8
  store %class.KV.2* %23, %class.KV.2** %10, align 8
  %24 = load %class.KV.1*, %class.KV.1** %6, align 8
  %25 = getelementptr inbounds %class.KV.1, %class.KV.1* %24, i32 0, i32 0
  %26 = bitcast %"union.KV<key, key, 2>::Key"* %25 to i64*
  %27 = load i64, i64* %26, align 8
  %28 = lshr i64 %27, 1
  store i64 %28, i64* %11, align 8
  %29 = load i64, i64* %7, align 8
  %30 = and i64 %29, 63
  %31 = urem i64 %30, 63
  %32 = trunc i64 %31 to i32
  store i32 %32, i32* %12, align 4
  %33 = load i64, i64* %11, align 8
  %34 = call i64 @llvm.ctpop.i64(i64 %33)
  %35 = trunc i64 %34 to i32
  store i32 %35, i32* %13, align 4
  %36 = load i64, i64* %11, align 8
  %37 = load i32, i32* %12, align 4
  %38 = zext i32 %37 to i64
  %39 = shl i64 1, %38
  %40 = and i64 %36, %39
  %41 = icmp ne i64 %40, 0
  %42 = zext i1 %41 to i8
  store i8 %42, i8* %14, align 1
  %43 = load i8, i8* %14, align 1
  %44 = trunc i8 %43 to i1
  br i1 %44, label %45, label %145

; <label>:45:                                     ; preds = %5
  %46 = load i64, i64* %11, align 8
  %47 = shl i64 %46, 1
  %48 = load i32, i32* %12, align 4
  %49 = sub i32 63, %48
  %50 = zext i32 %49 to i64
  %51 = shl i64 %47, %50
  %52 = call i64 @llvm.ctpop.i64(i64 %51)
  %53 = trunc i64 %52 to i32
  store i32 %53, i32* %15, align 4
  %54 = load %class.KV.2*, %class.KV.2** %10, align 8
  %55 = load i32, i32* %15, align 4
  %56 = zext i32 %55 to i64
  %57 = getelementptr inbounds %class.KV.2, %class.KV.2* %54, i64 %56
  %58 = getelementptr inbounds %class.KV.2, %class.KV.2* %57, i32 0, i32 0
  %59 = bitcast %"union.KV<key, key, 3>::Key"* %58 to i64*
  %60 = load i64, i64* %59, align 8
  %61 = and i64 %60, 1
  %62 = icmp eq i64 %61, 0
  br i1 %62, label %63, label %119

; <label>:63:                                     ; preds = %45
  %64 = load %class.KV.2*, %class.KV.2** %10, align 8
  %65 = load i32, i32* %15, align 4
  %66 = zext i32 %65 to i64
  %67 = getelementptr inbounds %class.KV.2, %class.KV.2* %64, i64 %66
  %68 = getelementptr inbounds %class.KV.2, %class.KV.2* %67, i32 0, i32 0
  %69 = bitcast %"union.KV<key, key, 3>::Key"* %68 to %class.key**
  %70 = load %class.key*, %class.key** %69, align 8
  %71 = load %class.key*, %class.key** %8, align 8
  %72 = call zeroext i1 @_ZNK3keyeqERKS_(%class.key* %70, %class.key* dereferenceable(8) %71)
  br i1 %72, label %73, label %117

; <label>:73:                                     ; preds = %63
  %74 = load i64*, i64** %9, align 8
  %75 = load i64, i64* %74, align 8
  %76 = add i64 %75, -1
  store i64 %76, i64* %74, align 8
  %77 = load i32, i32* %13, align 4
  %78 = sub i32 %77, 1
  %79 = zext i32 %78 to i64
  %80 = mul i64 %79, 16
  %81 = call noalias i8* @malloc(i64 %80) #8
  %82 = bitcast i8* %81 to %class.KV.2*
  store %class.KV.2* %82, %class.KV.2** %16, align 8
  %83 = load %class.KV.2*, %class.KV.2** %16, align 8
  %84 = bitcast %class.KV.2* %83 to i8*
  %85 = load %class.KV.2*, %class.KV.2** %10, align 8
  %86 = bitcast %class.KV.2* %85 to i8*
  %87 = load i32, i32* %15, align 4
  %88 = zext i32 %87 to i64
  %89 = mul i64 %88, 16
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %84, i8* %86, i64 %89, i32 8, i1 false)
  %90 = load %class.KV.2*, %class.KV.2** %16, align 8
  %91 = load i32, i32* %15, align 4
  %92 = zext i32 %91 to i64
  %93 = getelementptr inbounds %class.KV.2, %class.KV.2* %90, i64 %92
  %94 = bitcast %class.KV.2* %93 to i8*
  %95 = load %class.KV.2*, %class.KV.2** %10, align 8
  %96 = load i32, i32* %15, align 4
  %97 = add i32 %96, 1
  %98 = zext i32 %97 to i64
  %99 = getelementptr inbounds %class.KV.2, %class.KV.2* %95, i64 %98
  %100 = bitcast %class.KV.2* %99 to i8*
  %101 = load i32, i32* %13, align 4
  %102 = sub i32 %101, 1
  %103 = load i32, i32* %15, align 4
  %104 = sub i32 %102, %103
  %105 = zext i32 %104 to i64
  %106 = mul i64 %105, 16
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %94, i8* %100, i64 %106, i32 8, i1 false)
  %107 = load i64, i64* %11, align 8
  %108 = load i32, i32* %12, align 4
  %109 = zext i32 %108 to i64
  %110 = shl i64 1, %109
  %111 = xor i64 -1, %110
  %112 = and i64 %107, %111
  %113 = shl i64 %112, 1
  %114 = or i64 %113, 1
  store i64 %114, i64* %17, align 8
  %115 = load i64, i64* %17, align 8
  %116 = load %class.KV.2*, %class.KV.2** %16, align 8
  call void @_ZN2KVI3keyS0_Lj2EEC2EmPKS_IS0_S0_Lj3EE(%class.KV.1* %0, i64 %115, %class.KV.2* %116)
  br label %147

; <label>:117:                                    ; preds = %63
  %118 = load %class.KV.1*, %class.KV.1** %6, align 8
  call void @_ZN2KVI3keyS0_Lj2EEC2ERKS1_(%class.KV.1* %0, %class.KV.1* dereferenceable(16) %118)
  br label %147

; <label>:119:                                    ; preds = %45
  %120 = load %class.KV.2*, %class.KV.2** %10, align 8
  %121 = load i32, i32* %15, align 4
  %122 = zext i32 %121 to i64
  %123 = getelementptr inbounds %class.KV.2, %class.KV.2* %120, i64 %122
  %124 = load i64, i64* %7, align 8
  %125 = lshr i64 %124, 6
  %126 = load %class.key*, %class.key** %8, align 8
  %127 = load i64*, i64** %9, align 8
  call void @_ZN2KVI3keyS0_Lj3EE12remove_innerERKS1_mPKS0_Pm(%class.KV.2* sret %18, %class.KV.2* dereferenceable(16) %123, i64 %125, %class.key* %126, i64* %127)
  %128 = load %class.KV.2*, %class.KV.2** %10, align 8
  %129 = load i32, i32* %15, align 4
  %130 = zext i32 %129 to i64
  %131 = getelementptr inbounds %class.KV.2, %class.KV.2* %128, i64 %130
  %132 = call zeroext i1 @_ZNK2KVI3keyS0_Lj3EEeqERKS1_(%class.KV.2* %18, %class.KV.2* dereferenceable(16) %131)
  br i1 %132, label %133, label %135

; <label>:133:                                    ; preds = %119
  %134 = load %class.KV.1*, %class.KV.1** %6, align 8
  call void @_ZN2KVI3keyS0_Lj2EEC2ERKS1_(%class.KV.1* %0, %class.KV.1* dereferenceable(16) %134)
  br label %147

; <label>:135:                                    ; preds = %119
  %136 = load %class.KV.2*, %class.KV.2** %10, align 8
  %137 = load i32, i32* %13, align 4
  %138 = load i32, i32* %15, align 4
  %139 = call %class.KV.2* @_ZN2KVI3keyS0_Lj3EE11update_nodeEPKS1_jjRS2_(%class.KV.2* %136, i32 %137, i32 %138, %class.KV.2* dereferenceable(16) %18)
  store %class.KV.2* %139, %class.KV.2** %19, align 8
  %140 = load %class.KV.1*, %class.KV.1** %6, align 8
  %141 = getelementptr inbounds %class.KV.1, %class.KV.1* %140, i32 0, i32 0
  %142 = bitcast %"union.KV<key, key, 2>::Key"* %141 to i64*
  %143 = load i64, i64* %142, align 8
  %144 = load %class.KV.2*, %class.KV.2** %19, align 8
  call void @_ZN2KVI3keyS0_Lj2EEC2EmPKS_IS0_S0_Lj3EE(%class.KV.1* %0, i64 %143, %class.KV.2* %144)
  br label %147

; <label>:145:                                    ; preds = %5
  %146 = load %class.KV.1*, %class.KV.1** %6, align 8
  call void @_ZN2KVI3keyS0_Lj2EEC2ERKS1_(%class.KV.1* %0, %class.KV.1* dereferenceable(16) %146)
  br label %147

; <label>:147:                                    ; preds = %145, %135, %133, %117, %73
  ret void
}

; Function Attrs: noinline nounwind optnone sspstrong uwtable
define linkonce_odr zeroext i1 @_ZNK2KVI3keyS0_Lj2EEeqERKS1_(%class.KV.1*, %class.KV.1* dereferenceable(16)) #0 comdat align 2 {
  %3 = alloca %class.KV.1*, align 8
  %4 = alloca %class.KV.1*, align 8
  store %class.KV.1* %0, %class.KV.1** %3, align 8
  store %class.KV.1* %1, %class.KV.1** %4, align 8
  %5 = load %class.KV.1*, %class.KV.1** %3, align 8
  %6 = getelementptr inbounds %class.KV.1, %class.KV.1* %5, i32 0, i32 0
  %7 = bitcast %"union.KV<key, key, 2>::Key"* %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = load %class.KV.1*, %class.KV.1** %4, align 8
  %10 = getelementptr inbounds %class.KV.1, %class.KV.1* %9, i32 0, i32 0
  %11 = bitcast %"union.KV<key, key, 2>::Key"* %10 to i64*
  %12 = load i64, i64* %11, align 8
  %13 = icmp eq i64 %8, %12
  br i1 %13, label %14, label %23

; <label>:14:                                     ; preds = %2
  %15 = getelementptr inbounds %class.KV.1, %class.KV.1* %5, i32 0, i32 1
  %16 = bitcast %"union.KV<key, key, 2>::Val"* %15 to %class.KV.2**
  %17 = load %class.KV.2*, %class.KV.2** %16, align 8
  %18 = load %class.KV.1*, %class.KV.1** %4, align 8
  %19 = getelementptr inbounds %class.KV.1, %class.KV.1* %18, i32 0, i32 1
  %20 = bitcast %"union.KV<key, key, 2>::Val"* %19 to %class.KV.2**
  %21 = load %class.KV.2*, %class.KV.2** %20, align 8
  %22 = icmp eq %class.KV.2* %17, %21
  br label %23

; <label>:23:                                     ; preds = %14, %2
  %24 = phi i1 [ false, %2 ], [ %22, %14 ]
  ret i1 %24
}

; Function Attrs: noinline optnone sspstrong uwtable
define linkonce_odr void @_ZN2KVI3keyS0_Lj3EE12remove_innerERKS1_mPKS0_Pm(%class.KV.2* noalias sret, %class.KV.2* dereferenceable(16), i64, %class.key*, i64*) #2 comdat align 2 {
  %6 = alloca %class.KV.2*, align 8
  %7 = alloca i64, align 8
  %8 = alloca %class.key*, align 8
  %9 = alloca i64*, align 8
  %10 = alloca %class.KV.3*, align 8
  %11 = alloca i64, align 8
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i8, align 1
  %15 = alloca i32, align 4
  %16 = alloca %class.KV.3*, align 8
  %17 = alloca i64, align 8
  %18 = alloca %class.KV.3, align 8
  %19 = alloca %class.KV.3*, align 8
  store %class.KV.2* %1, %class.KV.2** %6, align 8
  store i64 %2, i64* %7, align 8
  store %class.key* %3, %class.key** %8, align 8
  store i64* %4, i64** %9, align 8
  %20 = load %class.KV.2*, %class.KV.2** %6, align 8
  %21 = getelementptr inbounds %class.KV.2, %class.KV.2* %20, i32 0, i32 1
  %22 = bitcast %"union.KV<key, key, 3>::Val"* %21 to %class.KV.3**
  %23 = load %class.KV.3*, %class.KV.3** %22, align 8
  store %class.KV.3* %23, %class.KV.3** %10, align 8
  %24 = load %class.KV.2*, %class.KV.2** %6, align 8
  %25 = getelementptr inbounds %class.KV.2, %class.KV.2* %24, i32 0, i32 0
  %26 = bitcast %"union.KV<key, key, 3>::Key"* %25 to i64*
  %27 = load i64, i64* %26, align 8
  %28 = lshr i64 %27, 1
  store i64 %28, i64* %11, align 8
  %29 = load i64, i64* %7, align 8
  %30 = and i64 %29, 63
  %31 = urem i64 %30, 63
  %32 = trunc i64 %31 to i32
  store i32 %32, i32* %12, align 4
  %33 = load i64, i64* %11, align 8
  %34 = call i64 @llvm.ctpop.i64(i64 %33)
  %35 = trunc i64 %34 to i32
  store i32 %35, i32* %13, align 4
  %36 = load i64, i64* %11, align 8
  %37 = load i32, i32* %12, align 4
  %38 = zext i32 %37 to i64
  %39 = shl i64 1, %38
  %40 = and i64 %36, %39
  %41 = icmp ne i64 %40, 0
  %42 = zext i1 %41 to i8
  store i8 %42, i8* %14, align 1
  %43 = load i8, i8* %14, align 1
  %44 = trunc i8 %43 to i1
  br i1 %44, label %45, label %145

; <label>:45:                                     ; preds = %5
  %46 = load i64, i64* %11, align 8
  %47 = shl i64 %46, 1
  %48 = load i32, i32* %12, align 4
  %49 = sub i32 63, %48
  %50 = zext i32 %49 to i64
  %51 = shl i64 %47, %50
  %52 = call i64 @llvm.ctpop.i64(i64 %51)
  %53 = trunc i64 %52 to i32
  store i32 %53, i32* %15, align 4
  %54 = load %class.KV.3*, %class.KV.3** %10, align 8
  %55 = load i32, i32* %15, align 4
  %56 = zext i32 %55 to i64
  %57 = getelementptr inbounds %class.KV.3, %class.KV.3* %54, i64 %56
  %58 = getelementptr inbounds %class.KV.3, %class.KV.3* %57, i32 0, i32 0
  %59 = bitcast %"union.KV<key, key, 4>::Key"* %58 to i64*
  %60 = load i64, i64* %59, align 8
  %61 = and i64 %60, 1
  %62 = icmp eq i64 %61, 0
  br i1 %62, label %63, label %119

; <label>:63:                                     ; preds = %45
  %64 = load %class.KV.3*, %class.KV.3** %10, align 8
  %65 = load i32, i32* %15, align 4
  %66 = zext i32 %65 to i64
  %67 = getelementptr inbounds %class.KV.3, %class.KV.3* %64, i64 %66
  %68 = getelementptr inbounds %class.KV.3, %class.KV.3* %67, i32 0, i32 0
  %69 = bitcast %"union.KV<key, key, 4>::Key"* %68 to %class.key**
  %70 = load %class.key*, %class.key** %69, align 8
  %71 = load %class.key*, %class.key** %8, align 8
  %72 = call zeroext i1 @_ZNK3keyeqERKS_(%class.key* %70, %class.key* dereferenceable(8) %71)
  br i1 %72, label %73, label %117

; <label>:73:                                     ; preds = %63
  %74 = load i64*, i64** %9, align 8
  %75 = load i64, i64* %74, align 8
  %76 = add i64 %75, -1
  store i64 %76, i64* %74, align 8
  %77 = load i32, i32* %13, align 4
  %78 = sub i32 %77, 1
  %79 = zext i32 %78 to i64
  %80 = mul i64 %79, 16
  %81 = call noalias i8* @malloc(i64 %80) #8
  %82 = bitcast i8* %81 to %class.KV.3*
  store %class.KV.3* %82, %class.KV.3** %16, align 8
  %83 = load %class.KV.3*, %class.KV.3** %16, align 8
  %84 = bitcast %class.KV.3* %83 to i8*
  %85 = load %class.KV.3*, %class.KV.3** %10, align 8
  %86 = bitcast %class.KV.3* %85 to i8*
  %87 = load i32, i32* %15, align 4
  %88 = zext i32 %87 to i64
  %89 = mul i64 %88, 16
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %84, i8* %86, i64 %89, i32 8, i1 false)
  %90 = load %class.KV.3*, %class.KV.3** %16, align 8
  %91 = load i32, i32* %15, align 4
  %92 = zext i32 %91 to i64
  %93 = getelementptr inbounds %class.KV.3, %class.KV.3* %90, i64 %92
  %94 = bitcast %class.KV.3* %93 to i8*
  %95 = load %class.KV.3*, %class.KV.3** %10, align 8
  %96 = load i32, i32* %15, align 4
  %97 = add i32 %96, 1
  %98 = zext i32 %97 to i64
  %99 = getelementptr inbounds %class.KV.3, %class.KV.3* %95, i64 %98
  %100 = bitcast %class.KV.3* %99 to i8*
  %101 = load i32, i32* %13, align 4
  %102 = sub i32 %101, 1
  %103 = load i32, i32* %15, align 4
  %104 = sub i32 %102, %103
  %105 = zext i32 %104 to i64
  %106 = mul i64 %105, 16
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %94, i8* %100, i64 %106, i32 8, i1 false)
  %107 = load i64, i64* %11, align 8
  %108 = load i32, i32* %12, align 4
  %109 = zext i32 %108 to i64
  %110 = shl i64 1, %109
  %111 = xor i64 -1, %110
  %112 = and i64 %107, %111
  %113 = shl i64 %112, 1
  %114 = or i64 %113, 1
  store i64 %114, i64* %17, align 8
  %115 = load i64, i64* %17, align 8
  %116 = load %class.KV.3*, %class.KV.3** %16, align 8
  call void @_ZN2KVI3keyS0_Lj3EEC2EmPKS_IS0_S0_Lj4EE(%class.KV.2* %0, i64 %115, %class.KV.3* %116)
  br label %147

; <label>:117:                                    ; preds = %63
  %118 = load %class.KV.2*, %class.KV.2** %6, align 8
  call void @_ZN2KVI3keyS0_Lj3EEC2ERKS1_(%class.KV.2* %0, %class.KV.2* dereferenceable(16) %118)
  br label %147

; <label>:119:                                    ; preds = %45
  %120 = load %class.KV.3*, %class.KV.3** %10, align 8
  %121 = load i32, i32* %15, align 4
  %122 = zext i32 %121 to i64
  %123 = getelementptr inbounds %class.KV.3, %class.KV.3* %120, i64 %122
  %124 = load i64, i64* %7, align 8
  %125 = lshr i64 %124, 6
  %126 = load %class.key*, %class.key** %8, align 8
  %127 = load i64*, i64** %9, align 8
  call void @_ZN2KVI3keyS0_Lj4EE12remove_innerERKS1_mPKS0_Pm(%class.KV.3* sret %18, %class.KV.3* dereferenceable(16) %123, i64 %125, %class.key* %126, i64* %127)
  %128 = load %class.KV.3*, %class.KV.3** %10, align 8
  %129 = load i32, i32* %15, align 4
  %130 = zext i32 %129 to i64
  %131 = getelementptr inbounds %class.KV.3, %class.KV.3* %128, i64 %130
  %132 = call zeroext i1 @_ZNK2KVI3keyS0_Lj4EEeqERKS1_(%class.KV.3* %18, %class.KV.3* dereferenceable(16) %131)
  br i1 %132, label %133, label %135

; <label>:133:                                    ; preds = %119
  %134 = load %class.KV.2*, %class.KV.2** %6, align 8
  call void @_ZN2KVI3keyS0_Lj3EEC2ERKS1_(%class.KV.2* %0, %class.KV.2* dereferenceable(16) %134)
  br label %147

; <label>:135:                                    ; preds = %119
  %136 = load %class.KV.3*, %class.KV.3** %10, align 8
  %137 = load i32, i32* %13, align 4
  %138 = load i32, i32* %15, align 4
  %139 = call %class.KV.3* @_ZN2KVI3keyS0_Lj4EE11update_nodeEPKS1_jjRS2_(%class.KV.3* %136, i32 %137, i32 %138, %class.KV.3* dereferenceable(16) %18)
  store %class.KV.3* %139, %class.KV.3** %19, align 8
  %140 = load %class.KV.2*, %class.KV.2** %6, align 8
  %141 = getelementptr inbounds %class.KV.2, %class.KV.2* %140, i32 0, i32 0
  %142 = bitcast %"union.KV<key, key, 3>::Key"* %141 to i64*
  %143 = load i64, i64* %142, align 8
  %144 = load %class.KV.3*, %class.KV.3** %19, align 8
  call void @_ZN2KVI3keyS0_Lj3EEC2EmPKS_IS0_S0_Lj4EE(%class.KV.2* %0, i64 %143, %class.KV.3* %144)
  br label %147

; <label>:145:                                    ; preds = %5
  %146 = load %class.KV.2*, %class.KV.2** %6, align 8
  call void @_ZN2KVI3keyS0_Lj3EEC2ERKS1_(%class.KV.2* %0, %class.KV.2* dereferenceable(16) %146)
  br label %147

; <label>:147:                                    ; preds = %145, %135, %133, %117, %73
  ret void
}

; Function Attrs: noinline nounwind optnone sspstrong uwtable
define linkonce_odr zeroext i1 @_ZNK2KVI3keyS0_Lj3EEeqERKS1_(%class.KV.2*, %class.KV.2* dereferenceable(16)) #0 comdat align 2 {
  %3 = alloca %class.KV.2*, align 8
  %4 = alloca %class.KV.2*, align 8
  store %class.KV.2* %0, %class.KV.2** %3, align 8
  store %class.KV.2* %1, %class.KV.2** %4, align 8
  %5 = load %class.KV.2*, %class.KV.2** %3, align 8
  %6 = getelementptr inbounds %class.KV.2, %class.KV.2* %5, i32 0, i32 0
  %7 = bitcast %"union.KV<key, key, 3>::Key"* %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = load %class.KV.2*, %class.KV.2** %4, align 8
  %10 = getelementptr inbounds %class.KV.2, %class.KV.2* %9, i32 0, i32 0
  %11 = bitcast %"union.KV<key, key, 3>::Key"* %10 to i64*
  %12 = load i64, i64* %11, align 8
  %13 = icmp eq i64 %8, %12
  br i1 %13, label %14, label %23

; <label>:14:                                     ; preds = %2
  %15 = getelementptr inbounds %class.KV.2, %class.KV.2* %5, i32 0, i32 1
  %16 = bitcast %"union.KV<key, key, 3>::Val"* %15 to %class.KV.3**
  %17 = load %class.KV.3*, %class.KV.3** %16, align 8
  %18 = load %class.KV.2*, %class.KV.2** %4, align 8
  %19 = getelementptr inbounds %class.KV.2, %class.KV.2* %18, i32 0, i32 1
  %20 = bitcast %"union.KV<key, key, 3>::Val"* %19 to %class.KV.3**
  %21 = load %class.KV.3*, %class.KV.3** %20, align 8
  %22 = icmp eq %class.KV.3* %17, %21
  br label %23

; <label>:23:                                     ; preds = %14, %2
  %24 = phi i1 [ false, %2 ], [ %22, %14 ]
  ret i1 %24
}

; Function Attrs: noinline optnone sspstrong uwtable
define linkonce_odr void @_ZN2KVI3keyS0_Lj4EE12remove_innerERKS1_mPKS0_Pm(%class.KV.3* noalias sret, %class.KV.3* dereferenceable(16), i64, %class.key*, i64*) #2 comdat align 2 {
  %6 = alloca %class.KV.3*, align 8
  %7 = alloca i64, align 8
  %8 = alloca %class.key*, align 8
  %9 = alloca i64*, align 8
  %10 = alloca %class.KV.4*, align 8
  %11 = alloca i64, align 8
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i8, align 1
  %15 = alloca i32, align 4
  %16 = alloca %class.KV.4*, align 8
  %17 = alloca i64, align 8
  %18 = alloca %class.KV.4, align 8
  %19 = alloca %class.KV.4*, align 8
  store %class.KV.3* %1, %class.KV.3** %6, align 8
  store i64 %2, i64* %7, align 8
  store %class.key* %3, %class.key** %8, align 8
  store i64* %4, i64** %9, align 8
  %20 = load %class.KV.3*, %class.KV.3** %6, align 8
  %21 = getelementptr inbounds %class.KV.3, %class.KV.3* %20, i32 0, i32 1
  %22 = bitcast %"union.KV<key, key, 4>::Val"* %21 to %class.KV.4**
  %23 = load %class.KV.4*, %class.KV.4** %22, align 8
  store %class.KV.4* %23, %class.KV.4** %10, align 8
  %24 = load %class.KV.3*, %class.KV.3** %6, align 8
  %25 = getelementptr inbounds %class.KV.3, %class.KV.3* %24, i32 0, i32 0
  %26 = bitcast %"union.KV<key, key, 4>::Key"* %25 to i64*
  %27 = load i64, i64* %26, align 8
  %28 = lshr i64 %27, 1
  store i64 %28, i64* %11, align 8
  %29 = load i64, i64* %7, align 8
  %30 = and i64 %29, 63
  %31 = urem i64 %30, 63
  %32 = trunc i64 %31 to i32
  store i32 %32, i32* %12, align 4
  %33 = load i64, i64* %11, align 8
  %34 = call i64 @llvm.ctpop.i64(i64 %33)
  %35 = trunc i64 %34 to i32
  store i32 %35, i32* %13, align 4
  %36 = load i64, i64* %11, align 8
  %37 = load i32, i32* %12, align 4
  %38 = zext i32 %37 to i64
  %39 = shl i64 1, %38
  %40 = and i64 %36, %39
  %41 = icmp ne i64 %40, 0
  %42 = zext i1 %41 to i8
  store i8 %42, i8* %14, align 1
  %43 = load i8, i8* %14, align 1
  %44 = trunc i8 %43 to i1
  br i1 %44, label %45, label %145

; <label>:45:                                     ; preds = %5
  %46 = load i64, i64* %11, align 8
  %47 = shl i64 %46, 1
  %48 = load i32, i32* %12, align 4
  %49 = sub i32 63, %48
  %50 = zext i32 %49 to i64
  %51 = shl i64 %47, %50
  %52 = call i64 @llvm.ctpop.i64(i64 %51)
  %53 = trunc i64 %52 to i32
  store i32 %53, i32* %15, align 4
  %54 = load %class.KV.4*, %class.KV.4** %10, align 8
  %55 = load i32, i32* %15, align 4
  %56 = zext i32 %55 to i64
  %57 = getelementptr inbounds %class.KV.4, %class.KV.4* %54, i64 %56
  %58 = getelementptr inbounds %class.KV.4, %class.KV.4* %57, i32 0, i32 0
  %59 = bitcast %"union.KV<key, key, 5>::Key"* %58 to i64*
  %60 = load i64, i64* %59, align 8
  %61 = and i64 %60, 1
  %62 = icmp eq i64 %61, 0
  br i1 %62, label %63, label %119

; <label>:63:                                     ; preds = %45
  %64 = load %class.KV.4*, %class.KV.4** %10, align 8
  %65 = load i32, i32* %15, align 4
  %66 = zext i32 %65 to i64
  %67 = getelementptr inbounds %class.KV.4, %class.KV.4* %64, i64 %66
  %68 = getelementptr inbounds %class.KV.4, %class.KV.4* %67, i32 0, i32 0
  %69 = bitcast %"union.KV<key, key, 5>::Key"* %68 to %class.key**
  %70 = load %class.key*, %class.key** %69, align 8
  %71 = load %class.key*, %class.key** %8, align 8
  %72 = call zeroext i1 @_ZNK3keyeqERKS_(%class.key* %70, %class.key* dereferenceable(8) %71)
  br i1 %72, label %73, label %117

; <label>:73:                                     ; preds = %63
  %74 = load i64*, i64** %9, align 8
  %75 = load i64, i64* %74, align 8
  %76 = add i64 %75, -1
  store i64 %76, i64* %74, align 8
  %77 = load i32, i32* %13, align 4
  %78 = sub i32 %77, 1
  %79 = zext i32 %78 to i64
  %80 = mul i64 %79, 16
  %81 = call noalias i8* @malloc(i64 %80) #8
  %82 = bitcast i8* %81 to %class.KV.4*
  store %class.KV.4* %82, %class.KV.4** %16, align 8
  %83 = load %class.KV.4*, %class.KV.4** %16, align 8
  %84 = bitcast %class.KV.4* %83 to i8*
  %85 = load %class.KV.4*, %class.KV.4** %10, align 8
  %86 = bitcast %class.KV.4* %85 to i8*
  %87 = load i32, i32* %15, align 4
  %88 = zext i32 %87 to i64
  %89 = mul i64 %88, 16
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %84, i8* %86, i64 %89, i32 8, i1 false)
  %90 = load %class.KV.4*, %class.KV.4** %16, align 8
  %91 = load i32, i32* %15, align 4
  %92 = zext i32 %91 to i64
  %93 = getelementptr inbounds %class.KV.4, %class.KV.4* %90, i64 %92
  %94 = bitcast %class.KV.4* %93 to i8*
  %95 = load %class.KV.4*, %class.KV.4** %10, align 8
  %96 = load i32, i32* %15, align 4
  %97 = add i32 %96, 1
  %98 = zext i32 %97 to i64
  %99 = getelementptr inbounds %class.KV.4, %class.KV.4* %95, i64 %98
  %100 = bitcast %class.KV.4* %99 to i8*
  %101 = load i32, i32* %13, align 4
  %102 = sub i32 %101, 1
  %103 = load i32, i32* %15, align 4
  %104 = sub i32 %102, %103
  %105 = zext i32 %104 to i64
  %106 = mul i64 %105, 16
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %94, i8* %100, i64 %106, i32 8, i1 false)
  %107 = load i64, i64* %11, align 8
  %108 = load i32, i32* %12, align 4
  %109 = zext i32 %108 to i64
  %110 = shl i64 1, %109
  %111 = xor i64 -1, %110
  %112 = and i64 %107, %111
  %113 = shl i64 %112, 1
  %114 = or i64 %113, 1
  store i64 %114, i64* %17, align 8
  %115 = load i64, i64* %17, align 8
  %116 = load %class.KV.4*, %class.KV.4** %16, align 8
  call void @_ZN2KVI3keyS0_Lj4EEC2EmPKS_IS0_S0_Lj5EE(%class.KV.3* %0, i64 %115, %class.KV.4* %116)
  br label %147

; <label>:117:                                    ; preds = %63
  %118 = load %class.KV.3*, %class.KV.3** %6, align 8
  call void @_ZN2KVI3keyS0_Lj4EEC2ERKS1_(%class.KV.3* %0, %class.KV.3* dereferenceable(16) %118)
  br label %147

; <label>:119:                                    ; preds = %45
  %120 = load %class.KV.4*, %class.KV.4** %10, align 8
  %121 = load i32, i32* %15, align 4
  %122 = zext i32 %121 to i64
  %123 = getelementptr inbounds %class.KV.4, %class.KV.4* %120, i64 %122
  %124 = load i64, i64* %7, align 8
  %125 = lshr i64 %124, 6
  %126 = load %class.key*, %class.key** %8, align 8
  %127 = load i64*, i64** %9, align 8
  call void @_ZN2KVI3keyS0_Lj5EE12remove_innerERKS1_mPKS0_Pm(%class.KV.4* sret %18, %class.KV.4* dereferenceable(16) %123, i64 %125, %class.key* %126, i64* %127)
  %128 = load %class.KV.4*, %class.KV.4** %10, align 8
  %129 = load i32, i32* %15, align 4
  %130 = zext i32 %129 to i64
  %131 = getelementptr inbounds %class.KV.4, %class.KV.4* %128, i64 %130
  %132 = call zeroext i1 @_ZNK2KVI3keyS0_Lj5EEeqERKS1_(%class.KV.4* %18, %class.KV.4* dereferenceable(16) %131)
  br i1 %132, label %133, label %135

; <label>:133:                                    ; preds = %119
  %134 = load %class.KV.3*, %class.KV.3** %6, align 8
  call void @_ZN2KVI3keyS0_Lj4EEC2ERKS1_(%class.KV.3* %0, %class.KV.3* dereferenceable(16) %134)
  br label %147

; <label>:135:                                    ; preds = %119
  %136 = load %class.KV.4*, %class.KV.4** %10, align 8
  %137 = load i32, i32* %13, align 4
  %138 = load i32, i32* %15, align 4
  %139 = call %class.KV.4* @_ZN2KVI3keyS0_Lj5EE11update_nodeEPKS1_jjRS2_(%class.KV.4* %136, i32 %137, i32 %138, %class.KV.4* dereferenceable(16) %18)
  store %class.KV.4* %139, %class.KV.4** %19, align 8
  %140 = load %class.KV.3*, %class.KV.3** %6, align 8
  %141 = getelementptr inbounds %class.KV.3, %class.KV.3* %140, i32 0, i32 0
  %142 = bitcast %"union.KV<key, key, 4>::Key"* %141 to i64*
  %143 = load i64, i64* %142, align 8
  %144 = load %class.KV.4*, %class.KV.4** %19, align 8
  call void @_ZN2KVI3keyS0_Lj4EEC2EmPKS_IS0_S0_Lj5EE(%class.KV.3* %0, i64 %143, %class.KV.4* %144)
  br label %147

; <label>:145:                                    ; preds = %5
  %146 = load %class.KV.3*, %class.KV.3** %6, align 8
  call void @_ZN2KVI3keyS0_Lj4EEC2ERKS1_(%class.KV.3* %0, %class.KV.3* dereferenceable(16) %146)
  br label %147

; <label>:147:                                    ; preds = %145, %135, %133, %117, %73
  ret void
}

; Function Attrs: noinline nounwind optnone sspstrong uwtable
define linkonce_odr zeroext i1 @_ZNK2KVI3keyS0_Lj4EEeqERKS1_(%class.KV.3*, %class.KV.3* dereferenceable(16)) #0 comdat align 2 {
  %3 = alloca %class.KV.3*, align 8
  %4 = alloca %class.KV.3*, align 8
  store %class.KV.3* %0, %class.KV.3** %3, align 8
  store %class.KV.3* %1, %class.KV.3** %4, align 8
  %5 = load %class.KV.3*, %class.KV.3** %3, align 8
  %6 = getelementptr inbounds %class.KV.3, %class.KV.3* %5, i32 0, i32 0
  %7 = bitcast %"union.KV<key, key, 4>::Key"* %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = load %class.KV.3*, %class.KV.3** %4, align 8
  %10 = getelementptr inbounds %class.KV.3, %class.KV.3* %9, i32 0, i32 0
  %11 = bitcast %"union.KV<key, key, 4>::Key"* %10 to i64*
  %12 = load i64, i64* %11, align 8
  %13 = icmp eq i64 %8, %12
  br i1 %13, label %14, label %23

; <label>:14:                                     ; preds = %2
  %15 = getelementptr inbounds %class.KV.3, %class.KV.3* %5, i32 0, i32 1
  %16 = bitcast %"union.KV<key, key, 4>::Val"* %15 to %class.KV.4**
  %17 = load %class.KV.4*, %class.KV.4** %16, align 8
  %18 = load %class.KV.3*, %class.KV.3** %4, align 8
  %19 = getelementptr inbounds %class.KV.3, %class.KV.3* %18, i32 0, i32 1
  %20 = bitcast %"union.KV<key, key, 4>::Val"* %19 to %class.KV.4**
  %21 = load %class.KV.4*, %class.KV.4** %20, align 8
  %22 = icmp eq %class.KV.4* %17, %21
  br label %23

; <label>:23:                                     ; preds = %14, %2
  %24 = phi i1 [ false, %2 ], [ %22, %14 ]
  ret i1 %24
}

; Function Attrs: noinline optnone sspstrong uwtable
define linkonce_odr void @_ZN2KVI3keyS0_Lj5EE12remove_innerERKS1_mPKS0_Pm(%class.KV.4* noalias sret, %class.KV.4* dereferenceable(16), i64, %class.key*, i64*) #2 comdat align 2 {
  %6 = alloca %class.KV.4*, align 8
  %7 = alloca i64, align 8
  %8 = alloca %class.key*, align 8
  %9 = alloca i64*, align 8
  %10 = alloca %class.KV.5*, align 8
  %11 = alloca i64, align 8
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i8, align 1
  %15 = alloca i32, align 4
  %16 = alloca %class.KV.5*, align 8
  %17 = alloca i64, align 8
  %18 = alloca %class.KV.5, align 8
  %19 = alloca %class.KV.5*, align 8
  store %class.KV.4* %1, %class.KV.4** %6, align 8
  store i64 %2, i64* %7, align 8
  store %class.key* %3, %class.key** %8, align 8
  store i64* %4, i64** %9, align 8
  %20 = load %class.KV.4*, %class.KV.4** %6, align 8
  %21 = getelementptr inbounds %class.KV.4, %class.KV.4* %20, i32 0, i32 1
  %22 = bitcast %"union.KV<key, key, 5>::Val"* %21 to %class.KV.5**
  %23 = load %class.KV.5*, %class.KV.5** %22, align 8
  store %class.KV.5* %23, %class.KV.5** %10, align 8
  %24 = load %class.KV.4*, %class.KV.4** %6, align 8
  %25 = getelementptr inbounds %class.KV.4, %class.KV.4* %24, i32 0, i32 0
  %26 = bitcast %"union.KV<key, key, 5>::Key"* %25 to i64*
  %27 = load i64, i64* %26, align 8
  %28 = lshr i64 %27, 1
  store i64 %28, i64* %11, align 8
  %29 = load i64, i64* %7, align 8
  %30 = and i64 %29, 63
  %31 = urem i64 %30, 63
  %32 = trunc i64 %31 to i32
  store i32 %32, i32* %12, align 4
  %33 = load i64, i64* %11, align 8
  %34 = call i64 @llvm.ctpop.i64(i64 %33)
  %35 = trunc i64 %34 to i32
  store i32 %35, i32* %13, align 4
  %36 = load i64, i64* %11, align 8
  %37 = load i32, i32* %12, align 4
  %38 = zext i32 %37 to i64
  %39 = shl i64 1, %38
  %40 = and i64 %36, %39
  %41 = icmp ne i64 %40, 0
  %42 = zext i1 %41 to i8
  store i8 %42, i8* %14, align 1
  %43 = load i8, i8* %14, align 1
  %44 = trunc i8 %43 to i1
  br i1 %44, label %45, label %145

; <label>:45:                                     ; preds = %5
  %46 = load i64, i64* %11, align 8
  %47 = shl i64 %46, 1
  %48 = load i32, i32* %12, align 4
  %49 = sub i32 63, %48
  %50 = zext i32 %49 to i64
  %51 = shl i64 %47, %50
  %52 = call i64 @llvm.ctpop.i64(i64 %51)
  %53 = trunc i64 %52 to i32
  store i32 %53, i32* %15, align 4
  %54 = load %class.KV.5*, %class.KV.5** %10, align 8
  %55 = load i32, i32* %15, align 4
  %56 = zext i32 %55 to i64
  %57 = getelementptr inbounds %class.KV.5, %class.KV.5* %54, i64 %56
  %58 = getelementptr inbounds %class.KV.5, %class.KV.5* %57, i32 0, i32 0
  %59 = bitcast %"union.KV<key, key, 6>::Key"* %58 to i64*
  %60 = load i64, i64* %59, align 8
  %61 = and i64 %60, 1
  %62 = icmp eq i64 %61, 0
  br i1 %62, label %63, label %119

; <label>:63:                                     ; preds = %45
  %64 = load %class.KV.5*, %class.KV.5** %10, align 8
  %65 = load i32, i32* %15, align 4
  %66 = zext i32 %65 to i64
  %67 = getelementptr inbounds %class.KV.5, %class.KV.5* %64, i64 %66
  %68 = getelementptr inbounds %class.KV.5, %class.KV.5* %67, i32 0, i32 0
  %69 = bitcast %"union.KV<key, key, 6>::Key"* %68 to %class.key**
  %70 = load %class.key*, %class.key** %69, align 8
  %71 = load %class.key*, %class.key** %8, align 8
  %72 = call zeroext i1 @_ZNK3keyeqERKS_(%class.key* %70, %class.key* dereferenceable(8) %71)
  br i1 %72, label %73, label %117

; <label>:73:                                     ; preds = %63
  %74 = load i64*, i64** %9, align 8
  %75 = load i64, i64* %74, align 8
  %76 = add i64 %75, -1
  store i64 %76, i64* %74, align 8
  %77 = load i32, i32* %13, align 4
  %78 = sub i32 %77, 1
  %79 = zext i32 %78 to i64
  %80 = mul i64 %79, 16
  %81 = call noalias i8* @malloc(i64 %80) #8
  %82 = bitcast i8* %81 to %class.KV.5*
  store %class.KV.5* %82, %class.KV.5** %16, align 8
  %83 = load %class.KV.5*, %class.KV.5** %16, align 8
  %84 = bitcast %class.KV.5* %83 to i8*
  %85 = load %class.KV.5*, %class.KV.5** %10, align 8
  %86 = bitcast %class.KV.5* %85 to i8*
  %87 = load i32, i32* %15, align 4
  %88 = zext i32 %87 to i64
  %89 = mul i64 %88, 16
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %84, i8* %86, i64 %89, i32 8, i1 false)
  %90 = load %class.KV.5*, %class.KV.5** %16, align 8
  %91 = load i32, i32* %15, align 4
  %92 = zext i32 %91 to i64
  %93 = getelementptr inbounds %class.KV.5, %class.KV.5* %90, i64 %92
  %94 = bitcast %class.KV.5* %93 to i8*
  %95 = load %class.KV.5*, %class.KV.5** %10, align 8
  %96 = load i32, i32* %15, align 4
  %97 = add i32 %96, 1
  %98 = zext i32 %97 to i64
  %99 = getelementptr inbounds %class.KV.5, %class.KV.5* %95, i64 %98
  %100 = bitcast %class.KV.5* %99 to i8*
  %101 = load i32, i32* %13, align 4
  %102 = sub i32 %101, 1
  %103 = load i32, i32* %15, align 4
  %104 = sub i32 %102, %103
  %105 = zext i32 %104 to i64
  %106 = mul i64 %105, 16
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %94, i8* %100, i64 %106, i32 8, i1 false)
  %107 = load i64, i64* %11, align 8
  %108 = load i32, i32* %12, align 4
  %109 = zext i32 %108 to i64
  %110 = shl i64 1, %109
  %111 = xor i64 -1, %110
  %112 = and i64 %107, %111
  %113 = shl i64 %112, 1
  %114 = or i64 %113, 1
  store i64 %114, i64* %17, align 8
  %115 = load i64, i64* %17, align 8
  %116 = load %class.KV.5*, %class.KV.5** %16, align 8
  call void @_ZN2KVI3keyS0_Lj5EEC2EmPKS_IS0_S0_Lj6EE(%class.KV.4* %0, i64 %115, %class.KV.5* %116)
  br label %147

; <label>:117:                                    ; preds = %63
  %118 = load %class.KV.4*, %class.KV.4** %6, align 8
  call void @_ZN2KVI3keyS0_Lj5EEC2ERKS1_(%class.KV.4* %0, %class.KV.4* dereferenceable(16) %118)
  br label %147

; <label>:119:                                    ; preds = %45
  %120 = load %class.KV.5*, %class.KV.5** %10, align 8
  %121 = load i32, i32* %15, align 4
  %122 = zext i32 %121 to i64
  %123 = getelementptr inbounds %class.KV.5, %class.KV.5* %120, i64 %122
  %124 = load i64, i64* %7, align 8
  %125 = lshr i64 %124, 6
  %126 = load %class.key*, %class.key** %8, align 8
  %127 = load i64*, i64** %9, align 8
  call void @_ZN2KVI3keyS0_Lj6EE12remove_innerERKS1_mPKS0_Pm(%class.KV.5* sret %18, %class.KV.5* dereferenceable(16) %123, i64 %125, %class.key* %126, i64* %127)
  %128 = load %class.KV.5*, %class.KV.5** %10, align 8
  %129 = load i32, i32* %15, align 4
  %130 = zext i32 %129 to i64
  %131 = getelementptr inbounds %class.KV.5, %class.KV.5* %128, i64 %130
  %132 = call zeroext i1 @_ZNK2KVI3keyS0_Lj6EEeqERKS1_(%class.KV.5* %18, %class.KV.5* dereferenceable(16) %131)
  br i1 %132, label %133, label %135

; <label>:133:                                    ; preds = %119
  %134 = load %class.KV.4*, %class.KV.4** %6, align 8
  call void @_ZN2KVI3keyS0_Lj5EEC2ERKS1_(%class.KV.4* %0, %class.KV.4* dereferenceable(16) %134)
  br label %147

; <label>:135:                                    ; preds = %119
  %136 = load %class.KV.5*, %class.KV.5** %10, align 8
  %137 = load i32, i32* %13, align 4
  %138 = load i32, i32* %15, align 4
  %139 = call %class.KV.5* @_ZN2KVI3keyS0_Lj6EE11update_nodeEPKS1_jjRS2_(%class.KV.5* %136, i32 %137, i32 %138, %class.KV.5* dereferenceable(16) %18)
  store %class.KV.5* %139, %class.KV.5** %19, align 8
  %140 = load %class.KV.4*, %class.KV.4** %6, align 8
  %141 = getelementptr inbounds %class.KV.4, %class.KV.4* %140, i32 0, i32 0
  %142 = bitcast %"union.KV<key, key, 5>::Key"* %141 to i64*
  %143 = load i64, i64* %142, align 8
  %144 = load %class.KV.5*, %class.KV.5** %19, align 8
  call void @_ZN2KVI3keyS0_Lj5EEC2EmPKS_IS0_S0_Lj6EE(%class.KV.4* %0, i64 %143, %class.KV.5* %144)
  br label %147

; <label>:145:                                    ; preds = %5
  %146 = load %class.KV.4*, %class.KV.4** %6, align 8
  call void @_ZN2KVI3keyS0_Lj5EEC2ERKS1_(%class.KV.4* %0, %class.KV.4* dereferenceable(16) %146)
  br label %147

; <label>:147:                                    ; preds = %145, %135, %133, %117, %73
  ret void
}

; Function Attrs: noinline nounwind optnone sspstrong uwtable
define linkonce_odr zeroext i1 @_ZNK2KVI3keyS0_Lj5EEeqERKS1_(%class.KV.4*, %class.KV.4* dereferenceable(16)) #0 comdat align 2 {
  %3 = alloca %class.KV.4*, align 8
  %4 = alloca %class.KV.4*, align 8
  store %class.KV.4* %0, %class.KV.4** %3, align 8
  store %class.KV.4* %1, %class.KV.4** %4, align 8
  %5 = load %class.KV.4*, %class.KV.4** %3, align 8
  %6 = getelementptr inbounds %class.KV.4, %class.KV.4* %5, i32 0, i32 0
  %7 = bitcast %"union.KV<key, key, 5>::Key"* %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = load %class.KV.4*, %class.KV.4** %4, align 8
  %10 = getelementptr inbounds %class.KV.4, %class.KV.4* %9, i32 0, i32 0
  %11 = bitcast %"union.KV<key, key, 5>::Key"* %10 to i64*
  %12 = load i64, i64* %11, align 8
  %13 = icmp eq i64 %8, %12
  br i1 %13, label %14, label %23

; <label>:14:                                     ; preds = %2
  %15 = getelementptr inbounds %class.KV.4, %class.KV.4* %5, i32 0, i32 1
  %16 = bitcast %"union.KV<key, key, 5>::Val"* %15 to %class.KV.5**
  %17 = load %class.KV.5*, %class.KV.5** %16, align 8
  %18 = load %class.KV.4*, %class.KV.4** %4, align 8
  %19 = getelementptr inbounds %class.KV.4, %class.KV.4* %18, i32 0, i32 1
  %20 = bitcast %"union.KV<key, key, 5>::Val"* %19 to %class.KV.5**
  %21 = load %class.KV.5*, %class.KV.5** %20, align 8
  %22 = icmp eq %class.KV.5* %17, %21
  br label %23

; <label>:23:                                     ; preds = %14, %2
  %24 = phi i1 [ false, %2 ], [ %22, %14 ]
  ret i1 %24
}

; Function Attrs: noinline optnone sspstrong uwtable
define linkonce_odr void @_ZN2KVI3keyS0_Lj6EE12remove_innerERKS1_mPKS0_Pm(%class.KV.5* noalias sret, %class.KV.5* dereferenceable(16), i64, %class.key*, i64*) #2 comdat align 2 {
  %6 = alloca %class.KV.5*, align 8
  %7 = alloca i64, align 8
  %8 = alloca %class.key*, align 8
  %9 = alloca i64*, align 8
  %10 = alloca %class.KV.6*, align 8
  %11 = alloca i64, align 8
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i8, align 1
  %15 = alloca i32, align 4
  %16 = alloca %class.KV.6*, align 8
  %17 = alloca i64, align 8
  %18 = alloca %class.KV.6, align 8
  %19 = alloca %class.KV.6*, align 8
  store %class.KV.5* %1, %class.KV.5** %6, align 8
  store i64 %2, i64* %7, align 8
  store %class.key* %3, %class.key** %8, align 8
  store i64* %4, i64** %9, align 8
  %20 = load %class.KV.5*, %class.KV.5** %6, align 8
  %21 = getelementptr inbounds %class.KV.5, %class.KV.5* %20, i32 0, i32 1
  %22 = bitcast %"union.KV<key, key, 6>::Val"* %21 to %class.KV.6**
  %23 = load %class.KV.6*, %class.KV.6** %22, align 8
  store %class.KV.6* %23, %class.KV.6** %10, align 8
  %24 = load %class.KV.5*, %class.KV.5** %6, align 8
  %25 = getelementptr inbounds %class.KV.5, %class.KV.5* %24, i32 0, i32 0
  %26 = bitcast %"union.KV<key, key, 6>::Key"* %25 to i64*
  %27 = load i64, i64* %26, align 8
  %28 = lshr i64 %27, 1
  store i64 %28, i64* %11, align 8
  %29 = load i64, i64* %7, align 8
  %30 = and i64 %29, 63
  %31 = urem i64 %30, 63
  %32 = trunc i64 %31 to i32
  store i32 %32, i32* %12, align 4
  %33 = load i64, i64* %11, align 8
  %34 = call i64 @llvm.ctpop.i64(i64 %33)
  %35 = trunc i64 %34 to i32
  store i32 %35, i32* %13, align 4
  %36 = load i64, i64* %11, align 8
  %37 = load i32, i32* %12, align 4
  %38 = zext i32 %37 to i64
  %39 = shl i64 1, %38
  %40 = and i64 %36, %39
  %41 = icmp ne i64 %40, 0
  %42 = zext i1 %41 to i8
  store i8 %42, i8* %14, align 1
  %43 = load i8, i8* %14, align 1
  %44 = trunc i8 %43 to i1
  br i1 %44, label %45, label %145

; <label>:45:                                     ; preds = %5
  %46 = load i64, i64* %11, align 8
  %47 = shl i64 %46, 1
  %48 = load i32, i32* %12, align 4
  %49 = sub i32 63, %48
  %50 = zext i32 %49 to i64
  %51 = shl i64 %47, %50
  %52 = call i64 @llvm.ctpop.i64(i64 %51)
  %53 = trunc i64 %52 to i32
  store i32 %53, i32* %15, align 4
  %54 = load %class.KV.6*, %class.KV.6** %10, align 8
  %55 = load i32, i32* %15, align 4
  %56 = zext i32 %55 to i64
  %57 = getelementptr inbounds %class.KV.6, %class.KV.6* %54, i64 %56
  %58 = getelementptr inbounds %class.KV.6, %class.KV.6* %57, i32 0, i32 0
  %59 = bitcast %"union.KV<key, key, 7>::Key"* %58 to i64*
  %60 = load i64, i64* %59, align 8
  %61 = and i64 %60, 1
  %62 = icmp eq i64 %61, 0
  br i1 %62, label %63, label %119

; <label>:63:                                     ; preds = %45
  %64 = load %class.KV.6*, %class.KV.6** %10, align 8
  %65 = load i32, i32* %15, align 4
  %66 = zext i32 %65 to i64
  %67 = getelementptr inbounds %class.KV.6, %class.KV.6* %64, i64 %66
  %68 = getelementptr inbounds %class.KV.6, %class.KV.6* %67, i32 0, i32 0
  %69 = bitcast %"union.KV<key, key, 7>::Key"* %68 to %class.key**
  %70 = load %class.key*, %class.key** %69, align 8
  %71 = load %class.key*, %class.key** %8, align 8
  %72 = call zeroext i1 @_ZNK3keyeqERKS_(%class.key* %70, %class.key* dereferenceable(8) %71)
  br i1 %72, label %73, label %117

; <label>:73:                                     ; preds = %63
  %74 = load i64*, i64** %9, align 8
  %75 = load i64, i64* %74, align 8
  %76 = add i64 %75, -1
  store i64 %76, i64* %74, align 8
  %77 = load i32, i32* %13, align 4
  %78 = sub i32 %77, 1
  %79 = zext i32 %78 to i64
  %80 = mul i64 %79, 16
  %81 = call noalias i8* @malloc(i64 %80) #8
  %82 = bitcast i8* %81 to %class.KV.6*
  store %class.KV.6* %82, %class.KV.6** %16, align 8
  %83 = load %class.KV.6*, %class.KV.6** %16, align 8
  %84 = bitcast %class.KV.6* %83 to i8*
  %85 = load %class.KV.6*, %class.KV.6** %10, align 8
  %86 = bitcast %class.KV.6* %85 to i8*
  %87 = load i32, i32* %15, align 4
  %88 = zext i32 %87 to i64
  %89 = mul i64 %88, 16
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %84, i8* %86, i64 %89, i32 8, i1 false)
  %90 = load %class.KV.6*, %class.KV.6** %16, align 8
  %91 = load i32, i32* %15, align 4
  %92 = zext i32 %91 to i64
  %93 = getelementptr inbounds %class.KV.6, %class.KV.6* %90, i64 %92
  %94 = bitcast %class.KV.6* %93 to i8*
  %95 = load %class.KV.6*, %class.KV.6** %10, align 8
  %96 = load i32, i32* %15, align 4
  %97 = add i32 %96, 1
  %98 = zext i32 %97 to i64
  %99 = getelementptr inbounds %class.KV.6, %class.KV.6* %95, i64 %98
  %100 = bitcast %class.KV.6* %99 to i8*
  %101 = load i32, i32* %13, align 4
  %102 = sub i32 %101, 1
  %103 = load i32, i32* %15, align 4
  %104 = sub i32 %102, %103
  %105 = zext i32 %104 to i64
  %106 = mul i64 %105, 16
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %94, i8* %100, i64 %106, i32 8, i1 false)
  %107 = load i64, i64* %11, align 8
  %108 = load i32, i32* %12, align 4
  %109 = zext i32 %108 to i64
  %110 = shl i64 1, %109
  %111 = xor i64 -1, %110
  %112 = and i64 %107, %111
  %113 = shl i64 %112, 1
  %114 = or i64 %113, 1
  store i64 %114, i64* %17, align 8
  %115 = load i64, i64* %17, align 8
  %116 = load %class.KV.6*, %class.KV.6** %16, align 8
  call void @_ZN2KVI3keyS0_Lj6EEC2EmPKS_IS0_S0_Lj7EE(%class.KV.5* %0, i64 %115, %class.KV.6* %116)
  br label %147

; <label>:117:                                    ; preds = %63
  %118 = load %class.KV.5*, %class.KV.5** %6, align 8
  call void @_ZN2KVI3keyS0_Lj6EEC2ERKS1_(%class.KV.5* %0, %class.KV.5* dereferenceable(16) %118)
  br label %147

; <label>:119:                                    ; preds = %45
  %120 = load %class.KV.6*, %class.KV.6** %10, align 8
  %121 = load i32, i32* %15, align 4
  %122 = zext i32 %121 to i64
  %123 = getelementptr inbounds %class.KV.6, %class.KV.6* %120, i64 %122
  %124 = load i64, i64* %7, align 8
  %125 = lshr i64 %124, 6
  %126 = load %class.key*, %class.key** %8, align 8
  %127 = load i64*, i64** %9, align 8
  call void @_ZN2KVI3keyS0_Lj7EE12remove_innerERKS1_mPKS0_Pm(%class.KV.6* sret %18, %class.KV.6* dereferenceable(16) %123, i64 %125, %class.key* %126, i64* %127)
  %128 = load %class.KV.6*, %class.KV.6** %10, align 8
  %129 = load i32, i32* %15, align 4
  %130 = zext i32 %129 to i64
  %131 = getelementptr inbounds %class.KV.6, %class.KV.6* %128, i64 %130
  %132 = call zeroext i1 @_ZNK2KVI3keyS0_Lj7EEeqERKS1_(%class.KV.6* %18, %class.KV.6* dereferenceable(16) %131)
  br i1 %132, label %133, label %135

; <label>:133:                                    ; preds = %119
  %134 = load %class.KV.5*, %class.KV.5** %6, align 8
  call void @_ZN2KVI3keyS0_Lj6EEC2ERKS1_(%class.KV.5* %0, %class.KV.5* dereferenceable(16) %134)
  br label %147

; <label>:135:                                    ; preds = %119
  %136 = load %class.KV.6*, %class.KV.6** %10, align 8
  %137 = load i32, i32* %13, align 4
  %138 = load i32, i32* %15, align 4
  %139 = call %class.KV.6* @_ZN2KVI3keyS0_Lj7EE11update_nodeEPKS1_jjRS2_(%class.KV.6* %136, i32 %137, i32 %138, %class.KV.6* dereferenceable(16) %18)
  store %class.KV.6* %139, %class.KV.6** %19, align 8
  %140 = load %class.KV.5*, %class.KV.5** %6, align 8
  %141 = getelementptr inbounds %class.KV.5, %class.KV.5* %140, i32 0, i32 0
  %142 = bitcast %"union.KV<key, key, 6>::Key"* %141 to i64*
  %143 = load i64, i64* %142, align 8
  %144 = load %class.KV.6*, %class.KV.6** %19, align 8
  call void @_ZN2KVI3keyS0_Lj6EEC2EmPKS_IS0_S0_Lj7EE(%class.KV.5* %0, i64 %143, %class.KV.6* %144)
  br label %147

; <label>:145:                                    ; preds = %5
  %146 = load %class.KV.5*, %class.KV.5** %6, align 8
  call void @_ZN2KVI3keyS0_Lj6EEC2ERKS1_(%class.KV.5* %0, %class.KV.5* dereferenceable(16) %146)
  br label %147

; <label>:147:                                    ; preds = %145, %135, %133, %117, %73
  ret void
}

; Function Attrs: noinline nounwind optnone sspstrong uwtable
define linkonce_odr zeroext i1 @_ZNK2KVI3keyS0_Lj6EEeqERKS1_(%class.KV.5*, %class.KV.5* dereferenceable(16)) #0 comdat align 2 {
  %3 = alloca %class.KV.5*, align 8
  %4 = alloca %class.KV.5*, align 8
  store %class.KV.5* %0, %class.KV.5** %3, align 8
  store %class.KV.5* %1, %class.KV.5** %4, align 8
  %5 = load %class.KV.5*, %class.KV.5** %3, align 8
  %6 = getelementptr inbounds %class.KV.5, %class.KV.5* %5, i32 0, i32 0
  %7 = bitcast %"union.KV<key, key, 6>::Key"* %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = load %class.KV.5*, %class.KV.5** %4, align 8
  %10 = getelementptr inbounds %class.KV.5, %class.KV.5* %9, i32 0, i32 0
  %11 = bitcast %"union.KV<key, key, 6>::Key"* %10 to i64*
  %12 = load i64, i64* %11, align 8
  %13 = icmp eq i64 %8, %12
  br i1 %13, label %14, label %23

; <label>:14:                                     ; preds = %2
  %15 = getelementptr inbounds %class.KV.5, %class.KV.5* %5, i32 0, i32 1
  %16 = bitcast %"union.KV<key, key, 6>::Val"* %15 to %class.KV.6**
  %17 = load %class.KV.6*, %class.KV.6** %16, align 8
  %18 = load %class.KV.5*, %class.KV.5** %4, align 8
  %19 = getelementptr inbounds %class.KV.5, %class.KV.5* %18, i32 0, i32 1
  %20 = bitcast %"union.KV<key, key, 6>::Val"* %19 to %class.KV.6**
  %21 = load %class.KV.6*, %class.KV.6** %20, align 8
  %22 = icmp eq %class.KV.6* %17, %21
  br label %23

; <label>:23:                                     ; preds = %14, %2
  %24 = phi i1 [ false, %2 ], [ %22, %14 ]
  ret i1 %24
}

; Function Attrs: noinline optnone sspstrong uwtable
define linkonce_odr void @_ZN2KVI3keyS0_Lj7EE12remove_innerERKS1_mPKS0_Pm(%class.KV.6* noalias sret, %class.KV.6* dereferenceable(16), i64, %class.key*, i64*) #2 comdat align 2 {
  %6 = alloca %class.KV.6*, align 8
  %7 = alloca i64, align 8
  %8 = alloca %class.key*, align 8
  %9 = alloca i64*, align 8
  %10 = alloca %class.KV.7*, align 8
  %11 = alloca i64, align 8
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i8, align 1
  %15 = alloca i32, align 4
  %16 = alloca %class.KV.7*, align 8
  %17 = alloca i64, align 8
  %18 = alloca %class.KV.7, align 8
  %19 = alloca %class.KV.7*, align 8
  store %class.KV.6* %1, %class.KV.6** %6, align 8
  store i64 %2, i64* %7, align 8
  store %class.key* %3, %class.key** %8, align 8
  store i64* %4, i64** %9, align 8
  %20 = load %class.KV.6*, %class.KV.6** %6, align 8
  %21 = getelementptr inbounds %class.KV.6, %class.KV.6* %20, i32 0, i32 1
  %22 = bitcast %"union.KV<key, key, 7>::Val"* %21 to %class.KV.7**
  %23 = load %class.KV.7*, %class.KV.7** %22, align 8
  store %class.KV.7* %23, %class.KV.7** %10, align 8
  %24 = load %class.KV.6*, %class.KV.6** %6, align 8
  %25 = getelementptr inbounds %class.KV.6, %class.KV.6* %24, i32 0, i32 0
  %26 = bitcast %"union.KV<key, key, 7>::Key"* %25 to i64*
  %27 = load i64, i64* %26, align 8
  %28 = lshr i64 %27, 1
  store i64 %28, i64* %11, align 8
  %29 = load i64, i64* %7, align 8
  %30 = and i64 %29, 63
  %31 = urem i64 %30, 63
  %32 = trunc i64 %31 to i32
  store i32 %32, i32* %12, align 4
  %33 = load i64, i64* %11, align 8
  %34 = call i64 @llvm.ctpop.i64(i64 %33)
  %35 = trunc i64 %34 to i32
  store i32 %35, i32* %13, align 4
  %36 = load i64, i64* %11, align 8
  %37 = load i32, i32* %12, align 4
  %38 = zext i32 %37 to i64
  %39 = shl i64 1, %38
  %40 = and i64 %36, %39
  %41 = icmp ne i64 %40, 0
  %42 = zext i1 %41 to i8
  store i8 %42, i8* %14, align 1
  %43 = load i8, i8* %14, align 1
  %44 = trunc i8 %43 to i1
  br i1 %44, label %45, label %145

; <label>:45:                                     ; preds = %5
  %46 = load i64, i64* %11, align 8
  %47 = shl i64 %46, 1
  %48 = load i32, i32* %12, align 4
  %49 = sub i32 63, %48
  %50 = zext i32 %49 to i64
  %51 = shl i64 %47, %50
  %52 = call i64 @llvm.ctpop.i64(i64 %51)
  %53 = trunc i64 %52 to i32
  store i32 %53, i32* %15, align 4
  %54 = load %class.KV.7*, %class.KV.7** %10, align 8
  %55 = load i32, i32* %15, align 4
  %56 = zext i32 %55 to i64
  %57 = getelementptr inbounds %class.KV.7, %class.KV.7* %54, i64 %56
  %58 = getelementptr inbounds %class.KV.7, %class.KV.7* %57, i32 0, i32 0
  %59 = bitcast %"union.KV<key, key, 8>::Key"* %58 to i64*
  %60 = load i64, i64* %59, align 8
  %61 = and i64 %60, 1
  %62 = icmp eq i64 %61, 0
  br i1 %62, label %63, label %119

; <label>:63:                                     ; preds = %45
  %64 = load %class.KV.7*, %class.KV.7** %10, align 8
  %65 = load i32, i32* %15, align 4
  %66 = zext i32 %65 to i64
  %67 = getelementptr inbounds %class.KV.7, %class.KV.7* %64, i64 %66
  %68 = getelementptr inbounds %class.KV.7, %class.KV.7* %67, i32 0, i32 0
  %69 = bitcast %"union.KV<key, key, 8>::Key"* %68 to %class.key**
  %70 = load %class.key*, %class.key** %69, align 8
  %71 = load %class.key*, %class.key** %8, align 8
  %72 = call zeroext i1 @_ZNK3keyeqERKS_(%class.key* %70, %class.key* dereferenceable(8) %71)
  br i1 %72, label %73, label %117

; <label>:73:                                     ; preds = %63
  %74 = load i64*, i64** %9, align 8
  %75 = load i64, i64* %74, align 8
  %76 = add i64 %75, -1
  store i64 %76, i64* %74, align 8
  %77 = load i32, i32* %13, align 4
  %78 = sub i32 %77, 1
  %79 = zext i32 %78 to i64
  %80 = mul i64 %79, 16
  %81 = call noalias i8* @malloc(i64 %80) #8
  %82 = bitcast i8* %81 to %class.KV.7*
  store %class.KV.7* %82, %class.KV.7** %16, align 8
  %83 = load %class.KV.7*, %class.KV.7** %16, align 8
  %84 = bitcast %class.KV.7* %83 to i8*
  %85 = load %class.KV.7*, %class.KV.7** %10, align 8
  %86 = bitcast %class.KV.7* %85 to i8*
  %87 = load i32, i32* %15, align 4
  %88 = zext i32 %87 to i64
  %89 = mul i64 %88, 16
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %84, i8* %86, i64 %89, i32 8, i1 false)
  %90 = load %class.KV.7*, %class.KV.7** %16, align 8
  %91 = load i32, i32* %15, align 4
  %92 = zext i32 %91 to i64
  %93 = getelementptr inbounds %class.KV.7, %class.KV.7* %90, i64 %92
  %94 = bitcast %class.KV.7* %93 to i8*
  %95 = load %class.KV.7*, %class.KV.7** %10, align 8
  %96 = load i32, i32* %15, align 4
  %97 = add i32 %96, 1
  %98 = zext i32 %97 to i64
  %99 = getelementptr inbounds %class.KV.7, %class.KV.7* %95, i64 %98
  %100 = bitcast %class.KV.7* %99 to i8*
  %101 = load i32, i32* %13, align 4
  %102 = sub i32 %101, 1
  %103 = load i32, i32* %15, align 4
  %104 = sub i32 %102, %103
  %105 = zext i32 %104 to i64
  %106 = mul i64 %105, 16
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %94, i8* %100, i64 %106, i32 8, i1 false)
  %107 = load i64, i64* %11, align 8
  %108 = load i32, i32* %12, align 4
  %109 = zext i32 %108 to i64
  %110 = shl i64 1, %109
  %111 = xor i64 -1, %110
  %112 = and i64 %107, %111
  %113 = shl i64 %112, 1
  %114 = or i64 %113, 1
  store i64 %114, i64* %17, align 8
  %115 = load i64, i64* %17, align 8
  %116 = load %class.KV.7*, %class.KV.7** %16, align 8
  call void @_ZN2KVI3keyS0_Lj7EEC2EmPKS_IS0_S0_Lj8EE(%class.KV.6* %0, i64 %115, %class.KV.7* %116)
  br label %147

; <label>:117:                                    ; preds = %63
  %118 = load %class.KV.6*, %class.KV.6** %6, align 8
  call void @_ZN2KVI3keyS0_Lj7EEC2ERKS1_(%class.KV.6* %0, %class.KV.6* dereferenceable(16) %118)
  br label %147

; <label>:119:                                    ; preds = %45
  %120 = load %class.KV.7*, %class.KV.7** %10, align 8
  %121 = load i32, i32* %15, align 4
  %122 = zext i32 %121 to i64
  %123 = getelementptr inbounds %class.KV.7, %class.KV.7* %120, i64 %122
  %124 = load i64, i64* %7, align 8
  %125 = lshr i64 %124, 6
  %126 = load %class.key*, %class.key** %8, align 8
  %127 = load i64*, i64** %9, align 8
  call void @_ZN2KVI3keyS0_Lj8EE12remove_innerERKS1_mPKS0_Pm(%class.KV.7* sret %18, %class.KV.7* dereferenceable(16) %123, i64 %125, %class.key* %126, i64* %127)
  %128 = load %class.KV.7*, %class.KV.7** %10, align 8
  %129 = load i32, i32* %15, align 4
  %130 = zext i32 %129 to i64
  %131 = getelementptr inbounds %class.KV.7, %class.KV.7* %128, i64 %130
  %132 = call zeroext i1 @_ZNK2KVI3keyS0_Lj8EEeqERKS1_(%class.KV.7* %18, %class.KV.7* dereferenceable(16) %131)
  br i1 %132, label %133, label %135

; <label>:133:                                    ; preds = %119
  %134 = load %class.KV.6*, %class.KV.6** %6, align 8
  call void @_ZN2KVI3keyS0_Lj7EEC2ERKS1_(%class.KV.6* %0, %class.KV.6* dereferenceable(16) %134)
  br label %147

; <label>:135:                                    ; preds = %119
  %136 = load %class.KV.7*, %class.KV.7** %10, align 8
  %137 = load i32, i32* %13, align 4
  %138 = load i32, i32* %15, align 4
  %139 = call %class.KV.7* @_ZN2KVI3keyS0_Lj8EE11update_nodeEPKS1_jjRS2_(%class.KV.7* %136, i32 %137, i32 %138, %class.KV.7* dereferenceable(16) %18)
  store %class.KV.7* %139, %class.KV.7** %19, align 8
  %140 = load %class.KV.6*, %class.KV.6** %6, align 8
  %141 = getelementptr inbounds %class.KV.6, %class.KV.6* %140, i32 0, i32 0
  %142 = bitcast %"union.KV<key, key, 7>::Key"* %141 to i64*
  %143 = load i64, i64* %142, align 8
  %144 = load %class.KV.7*, %class.KV.7** %19, align 8
  call void @_ZN2KVI3keyS0_Lj7EEC2EmPKS_IS0_S0_Lj8EE(%class.KV.6* %0, i64 %143, %class.KV.7* %144)
  br label %147

; <label>:145:                                    ; preds = %5
  %146 = load %class.KV.6*, %class.KV.6** %6, align 8
  call void @_ZN2KVI3keyS0_Lj7EEC2ERKS1_(%class.KV.6* %0, %class.KV.6* dereferenceable(16) %146)
  br label %147

; <label>:147:                                    ; preds = %145, %135, %133, %117, %73
  ret void
}

; Function Attrs: noinline nounwind optnone sspstrong uwtable
define linkonce_odr zeroext i1 @_ZNK2KVI3keyS0_Lj7EEeqERKS1_(%class.KV.6*, %class.KV.6* dereferenceable(16)) #0 comdat align 2 {
  %3 = alloca %class.KV.6*, align 8
  %4 = alloca %class.KV.6*, align 8
  store %class.KV.6* %0, %class.KV.6** %3, align 8
  store %class.KV.6* %1, %class.KV.6** %4, align 8
  %5 = load %class.KV.6*, %class.KV.6** %3, align 8
  %6 = getelementptr inbounds %class.KV.6, %class.KV.6* %5, i32 0, i32 0
  %7 = bitcast %"union.KV<key, key, 7>::Key"* %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = load %class.KV.6*, %class.KV.6** %4, align 8
  %10 = getelementptr inbounds %class.KV.6, %class.KV.6* %9, i32 0, i32 0
  %11 = bitcast %"union.KV<key, key, 7>::Key"* %10 to i64*
  %12 = load i64, i64* %11, align 8
  %13 = icmp eq i64 %8, %12
  br i1 %13, label %14, label %23

; <label>:14:                                     ; preds = %2
  %15 = getelementptr inbounds %class.KV.6, %class.KV.6* %5, i32 0, i32 1
  %16 = bitcast %"union.KV<key, key, 7>::Val"* %15 to %class.KV.7**
  %17 = load %class.KV.7*, %class.KV.7** %16, align 8
  %18 = load %class.KV.6*, %class.KV.6** %4, align 8
  %19 = getelementptr inbounds %class.KV.6, %class.KV.6* %18, i32 0, i32 1
  %20 = bitcast %"union.KV<key, key, 7>::Val"* %19 to %class.KV.7**
  %21 = load %class.KV.7*, %class.KV.7** %20, align 8
  %22 = icmp eq %class.KV.7* %17, %21
  br label %23

; <label>:23:                                     ; preds = %14, %2
  %24 = phi i1 [ false, %2 ], [ %22, %14 ]
  ret i1 %24
}

; Function Attrs: noinline optnone sspstrong uwtable
define linkonce_odr void @_ZN2KVI3keyS0_Lj8EE12remove_innerERKS1_mPKS0_Pm(%class.KV.7* noalias sret, %class.KV.7* dereferenceable(16), i64, %class.key*, i64*) #2 comdat align 2 {
  %6 = alloca %class.KV.7*, align 8
  %7 = alloca i64, align 8
  %8 = alloca %class.key*, align 8
  %9 = alloca i64*, align 8
  %10 = alloca %class.KV.8*, align 8
  %11 = alloca i64, align 8
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i8, align 1
  %15 = alloca i32, align 4
  %16 = alloca %class.KV.8*, align 8
  %17 = alloca i64, align 8
  %18 = alloca %class.KV.8, align 8
  %19 = alloca %class.KV.8*, align 8
  store %class.KV.7* %1, %class.KV.7** %6, align 8
  store i64 %2, i64* %7, align 8
  store %class.key* %3, %class.key** %8, align 8
  store i64* %4, i64** %9, align 8
  %20 = load %class.KV.7*, %class.KV.7** %6, align 8
  %21 = getelementptr inbounds %class.KV.7, %class.KV.7* %20, i32 0, i32 1
  %22 = bitcast %"union.KV<key, key, 8>::Val"* %21 to %class.KV.8**
  %23 = load %class.KV.8*, %class.KV.8** %22, align 8
  store %class.KV.8* %23, %class.KV.8** %10, align 8
  %24 = load %class.KV.7*, %class.KV.7** %6, align 8
  %25 = getelementptr inbounds %class.KV.7, %class.KV.7* %24, i32 0, i32 0
  %26 = bitcast %"union.KV<key, key, 8>::Key"* %25 to i64*
  %27 = load i64, i64* %26, align 8
  %28 = lshr i64 %27, 1
  store i64 %28, i64* %11, align 8
  %29 = load i64, i64* %7, align 8
  %30 = and i64 %29, 63
  %31 = urem i64 %30, 63
  %32 = trunc i64 %31 to i32
  store i32 %32, i32* %12, align 4
  %33 = load i64, i64* %11, align 8
  %34 = call i64 @llvm.ctpop.i64(i64 %33)
  %35 = trunc i64 %34 to i32
  store i32 %35, i32* %13, align 4
  %36 = load i64, i64* %11, align 8
  %37 = load i32, i32* %12, align 4
  %38 = zext i32 %37 to i64
  %39 = shl i64 1, %38
  %40 = and i64 %36, %39
  %41 = icmp ne i64 %40, 0
  %42 = zext i1 %41 to i8
  store i8 %42, i8* %14, align 1
  %43 = load i8, i8* %14, align 1
  %44 = trunc i8 %43 to i1
  br i1 %44, label %45, label %145

; <label>:45:                                     ; preds = %5
  %46 = load i64, i64* %11, align 8
  %47 = shl i64 %46, 1
  %48 = load i32, i32* %12, align 4
  %49 = sub i32 63, %48
  %50 = zext i32 %49 to i64
  %51 = shl i64 %47, %50
  %52 = call i64 @llvm.ctpop.i64(i64 %51)
  %53 = trunc i64 %52 to i32
  store i32 %53, i32* %15, align 4
  %54 = load %class.KV.8*, %class.KV.8** %10, align 8
  %55 = load i32, i32* %15, align 4
  %56 = zext i32 %55 to i64
  %57 = getelementptr inbounds %class.KV.8, %class.KV.8* %54, i64 %56
  %58 = getelementptr inbounds %class.KV.8, %class.KV.8* %57, i32 0, i32 0
  %59 = bitcast %"union.KV<key, key, 9>::Key"* %58 to i64*
  %60 = load i64, i64* %59, align 8
  %61 = and i64 %60, 1
  %62 = icmp eq i64 %61, 0
  br i1 %62, label %63, label %119

; <label>:63:                                     ; preds = %45
  %64 = load %class.KV.8*, %class.KV.8** %10, align 8
  %65 = load i32, i32* %15, align 4
  %66 = zext i32 %65 to i64
  %67 = getelementptr inbounds %class.KV.8, %class.KV.8* %64, i64 %66
  %68 = getelementptr inbounds %class.KV.8, %class.KV.8* %67, i32 0, i32 0
  %69 = bitcast %"union.KV<key, key, 9>::Key"* %68 to %class.key**
  %70 = load %class.key*, %class.key** %69, align 8
  %71 = load %class.key*, %class.key** %8, align 8
  %72 = call zeroext i1 @_ZNK3keyeqERKS_(%class.key* %70, %class.key* dereferenceable(8) %71)
  br i1 %72, label %73, label %117

; <label>:73:                                     ; preds = %63
  %74 = load i64*, i64** %9, align 8
  %75 = load i64, i64* %74, align 8
  %76 = add i64 %75, -1
  store i64 %76, i64* %74, align 8
  %77 = load i32, i32* %13, align 4
  %78 = sub i32 %77, 1
  %79 = zext i32 %78 to i64
  %80 = mul i64 %79, 16
  %81 = call noalias i8* @malloc(i64 %80) #8
  %82 = bitcast i8* %81 to %class.KV.8*
  store %class.KV.8* %82, %class.KV.8** %16, align 8
  %83 = load %class.KV.8*, %class.KV.8** %16, align 8
  %84 = bitcast %class.KV.8* %83 to i8*
  %85 = load %class.KV.8*, %class.KV.8** %10, align 8
  %86 = bitcast %class.KV.8* %85 to i8*
  %87 = load i32, i32* %15, align 4
  %88 = zext i32 %87 to i64
  %89 = mul i64 %88, 16
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %84, i8* %86, i64 %89, i32 8, i1 false)
  %90 = load %class.KV.8*, %class.KV.8** %16, align 8
  %91 = load i32, i32* %15, align 4
  %92 = zext i32 %91 to i64
  %93 = getelementptr inbounds %class.KV.8, %class.KV.8* %90, i64 %92
  %94 = bitcast %class.KV.8* %93 to i8*
  %95 = load %class.KV.8*, %class.KV.8** %10, align 8
  %96 = load i32, i32* %15, align 4
  %97 = add i32 %96, 1
  %98 = zext i32 %97 to i64
  %99 = getelementptr inbounds %class.KV.8, %class.KV.8* %95, i64 %98
  %100 = bitcast %class.KV.8* %99 to i8*
  %101 = load i32, i32* %13, align 4
  %102 = sub i32 %101, 1
  %103 = load i32, i32* %15, align 4
  %104 = sub i32 %102, %103
  %105 = zext i32 %104 to i64
  %106 = mul i64 %105, 16
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %94, i8* %100, i64 %106, i32 8, i1 false)
  %107 = load i64, i64* %11, align 8
  %108 = load i32, i32* %12, align 4
  %109 = zext i32 %108 to i64
  %110 = shl i64 1, %109
  %111 = xor i64 -1, %110
  %112 = and i64 %107, %111
  %113 = shl i64 %112, 1
  %114 = or i64 %113, 1
  store i64 %114, i64* %17, align 8
  %115 = load i64, i64* %17, align 8
  %116 = load %class.KV.8*, %class.KV.8** %16, align 8
  call void @_ZN2KVI3keyS0_Lj8EEC2EmPKS_IS0_S0_Lj9EE(%class.KV.7* %0, i64 %115, %class.KV.8* %116)
  br label %147

; <label>:117:                                    ; preds = %63
  %118 = load %class.KV.7*, %class.KV.7** %6, align 8
  call void @_ZN2KVI3keyS0_Lj8EEC2ERKS1_(%class.KV.7* %0, %class.KV.7* dereferenceable(16) %118)
  br label %147

; <label>:119:                                    ; preds = %45
  %120 = load %class.KV.8*, %class.KV.8** %10, align 8
  %121 = load i32, i32* %15, align 4
  %122 = zext i32 %121 to i64
  %123 = getelementptr inbounds %class.KV.8, %class.KV.8* %120, i64 %122
  %124 = load i64, i64* %7, align 8
  %125 = lshr i64 %124, 6
  %126 = load %class.key*, %class.key** %8, align 8
  %127 = load i64*, i64** %9, align 8
  call void @_ZN2KVI3keyS0_Lj9EE12remove_innerERKS1_mPKS0_Pm(%class.KV.8* sret %18, %class.KV.8* dereferenceable(16) %123, i64 %125, %class.key* %126, i64* %127)
  %128 = load %class.KV.8*, %class.KV.8** %10, align 8
  %129 = load i32, i32* %15, align 4
  %130 = zext i32 %129 to i64
  %131 = getelementptr inbounds %class.KV.8, %class.KV.8* %128, i64 %130
  %132 = call zeroext i1 @_ZNK2KVI3keyS0_Lj9EEeqERKS1_(%class.KV.8* %18, %class.KV.8* dereferenceable(16) %131)
  br i1 %132, label %133, label %135

; <label>:133:                                    ; preds = %119
  %134 = load %class.KV.7*, %class.KV.7** %6, align 8
  call void @_ZN2KVI3keyS0_Lj8EEC2ERKS1_(%class.KV.7* %0, %class.KV.7* dereferenceable(16) %134)
  br label %147

; <label>:135:                                    ; preds = %119
  %136 = load %class.KV.8*, %class.KV.8** %10, align 8
  %137 = load i32, i32* %13, align 4
  %138 = load i32, i32* %15, align 4
  %139 = call %class.KV.8* @_ZN2KVI3keyS0_Lj9EE11update_nodeEPKS1_jjRS2_(%class.KV.8* %136, i32 %137, i32 %138, %class.KV.8* dereferenceable(16) %18)
  store %class.KV.8* %139, %class.KV.8** %19, align 8
  %140 = load %class.KV.7*, %class.KV.7** %6, align 8
  %141 = getelementptr inbounds %class.KV.7, %class.KV.7* %140, i32 0, i32 0
  %142 = bitcast %"union.KV<key, key, 8>::Key"* %141 to i64*
  %143 = load i64, i64* %142, align 8
  %144 = load %class.KV.8*, %class.KV.8** %19, align 8
  call void @_ZN2KVI3keyS0_Lj8EEC2EmPKS_IS0_S0_Lj9EE(%class.KV.7* %0, i64 %143, %class.KV.8* %144)
  br label %147

; <label>:145:                                    ; preds = %5
  %146 = load %class.KV.7*, %class.KV.7** %6, align 8
  call void @_ZN2KVI3keyS0_Lj8EEC2ERKS1_(%class.KV.7* %0, %class.KV.7* dereferenceable(16) %146)
  br label %147

; <label>:147:                                    ; preds = %145, %135, %133, %117, %73
  ret void
}

; Function Attrs: noinline nounwind optnone sspstrong uwtable
define linkonce_odr zeroext i1 @_ZNK2KVI3keyS0_Lj8EEeqERKS1_(%class.KV.7*, %class.KV.7* dereferenceable(16)) #0 comdat align 2 {
  %3 = alloca %class.KV.7*, align 8
  %4 = alloca %class.KV.7*, align 8
  store %class.KV.7* %0, %class.KV.7** %3, align 8
  store %class.KV.7* %1, %class.KV.7** %4, align 8
  %5 = load %class.KV.7*, %class.KV.7** %3, align 8
  %6 = getelementptr inbounds %class.KV.7, %class.KV.7* %5, i32 0, i32 0
  %7 = bitcast %"union.KV<key, key, 8>::Key"* %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = load %class.KV.7*, %class.KV.7** %4, align 8
  %10 = getelementptr inbounds %class.KV.7, %class.KV.7* %9, i32 0, i32 0
  %11 = bitcast %"union.KV<key, key, 8>::Key"* %10 to i64*
  %12 = load i64, i64* %11, align 8
  %13 = icmp eq i64 %8, %12
  br i1 %13, label %14, label %23

; <label>:14:                                     ; preds = %2
  %15 = getelementptr inbounds %class.KV.7, %class.KV.7* %5, i32 0, i32 1
  %16 = bitcast %"union.KV<key, key, 8>::Val"* %15 to %class.KV.8**
  %17 = load %class.KV.8*, %class.KV.8** %16, align 8
  %18 = load %class.KV.7*, %class.KV.7** %4, align 8
  %19 = getelementptr inbounds %class.KV.7, %class.KV.7* %18, i32 0, i32 1
  %20 = bitcast %"union.KV<key, key, 8>::Val"* %19 to %class.KV.8**
  %21 = load %class.KV.8*, %class.KV.8** %20, align 8
  %22 = icmp eq %class.KV.8* %17, %21
  br label %23

; <label>:23:                                     ; preds = %14, %2
  %24 = phi i1 [ false, %2 ], [ %22, %14 ]
  ret i1 %24
}

; Function Attrs: noinline optnone sspstrong uwtable
define linkonce_odr void @_ZN2KVI3keyS0_Lj9EE12remove_innerERKS1_mPKS0_Pm(%class.KV.8* noalias sret, %class.KV.8* dereferenceable(16), i64, %class.key*, i64*) #2 comdat align 2 {
  %6 = alloca %class.KV.8*, align 8
  %7 = alloca i64, align 8
  %8 = alloca %class.key*, align 8
  %9 = alloca i64*, align 8
  %10 = alloca %class.KV.9*, align 8
  %11 = alloca i64, align 8
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i8, align 1
  %15 = alloca i32, align 4
  %16 = alloca %class.KV.9*, align 8
  %17 = alloca i64, align 8
  %18 = alloca %class.KV.9, align 8
  %19 = alloca %class.KV.9*, align 8
  store %class.KV.8* %1, %class.KV.8** %6, align 8
  store i64 %2, i64* %7, align 8
  store %class.key* %3, %class.key** %8, align 8
  store i64* %4, i64** %9, align 8
  %20 = load %class.KV.8*, %class.KV.8** %6, align 8
  %21 = getelementptr inbounds %class.KV.8, %class.KV.8* %20, i32 0, i32 1
  %22 = bitcast %"union.KV<key, key, 9>::Val"* %21 to %class.KV.9**
  %23 = load %class.KV.9*, %class.KV.9** %22, align 8
  store %class.KV.9* %23, %class.KV.9** %10, align 8
  %24 = load %class.KV.8*, %class.KV.8** %6, align 8
  %25 = getelementptr inbounds %class.KV.8, %class.KV.8* %24, i32 0, i32 0
  %26 = bitcast %"union.KV<key, key, 9>::Key"* %25 to i64*
  %27 = load i64, i64* %26, align 8
  %28 = lshr i64 %27, 1
  store i64 %28, i64* %11, align 8
  %29 = load i64, i64* %7, align 8
  %30 = and i64 %29, 63
  %31 = urem i64 %30, 63
  %32 = trunc i64 %31 to i32
  store i32 %32, i32* %12, align 4
  %33 = load i64, i64* %11, align 8
  %34 = call i64 @llvm.ctpop.i64(i64 %33)
  %35 = trunc i64 %34 to i32
  store i32 %35, i32* %13, align 4
  %36 = load i64, i64* %11, align 8
  %37 = load i32, i32* %12, align 4
  %38 = zext i32 %37 to i64
  %39 = shl i64 1, %38
  %40 = and i64 %36, %39
  %41 = icmp ne i64 %40, 0
  %42 = zext i1 %41 to i8
  store i8 %42, i8* %14, align 1
  %43 = load i8, i8* %14, align 1
  %44 = trunc i8 %43 to i1
  br i1 %44, label %45, label %145

; <label>:45:                                     ; preds = %5
  %46 = load i64, i64* %11, align 8
  %47 = shl i64 %46, 1
  %48 = load i32, i32* %12, align 4
  %49 = sub i32 63, %48
  %50 = zext i32 %49 to i64
  %51 = shl i64 %47, %50
  %52 = call i64 @llvm.ctpop.i64(i64 %51)
  %53 = trunc i64 %52 to i32
  store i32 %53, i32* %15, align 4
  %54 = load %class.KV.9*, %class.KV.9** %10, align 8
  %55 = load i32, i32* %15, align 4
  %56 = zext i32 %55 to i64
  %57 = getelementptr inbounds %class.KV.9, %class.KV.9* %54, i64 %56
  %58 = getelementptr inbounds %class.KV.9, %class.KV.9* %57, i32 0, i32 0
  %59 = bitcast %"union.KV<key, key, 10>::Key"* %58 to i64*
  %60 = load i64, i64* %59, align 8
  %61 = and i64 %60, 1
  %62 = icmp eq i64 %61, 0
  br i1 %62, label %63, label %119

; <label>:63:                                     ; preds = %45
  %64 = load %class.KV.9*, %class.KV.9** %10, align 8
  %65 = load i32, i32* %15, align 4
  %66 = zext i32 %65 to i64
  %67 = getelementptr inbounds %class.KV.9, %class.KV.9* %64, i64 %66
  %68 = getelementptr inbounds %class.KV.9, %class.KV.9* %67, i32 0, i32 0
  %69 = bitcast %"union.KV<key, key, 10>::Key"* %68 to %class.key**
  %70 = load %class.key*, %class.key** %69, align 8
  %71 = load %class.key*, %class.key** %8, align 8
  %72 = call zeroext i1 @_ZNK3keyeqERKS_(%class.key* %70, %class.key* dereferenceable(8) %71)
  br i1 %72, label %73, label %117

; <label>:73:                                     ; preds = %63
  %74 = load i64*, i64** %9, align 8
  %75 = load i64, i64* %74, align 8
  %76 = add i64 %75, -1
  store i64 %76, i64* %74, align 8
  %77 = load i32, i32* %13, align 4
  %78 = sub i32 %77, 1
  %79 = zext i32 %78 to i64
  %80 = mul i64 %79, 16
  %81 = call noalias i8* @malloc(i64 %80) #8
  %82 = bitcast i8* %81 to %class.KV.9*
  store %class.KV.9* %82, %class.KV.9** %16, align 8
  %83 = load %class.KV.9*, %class.KV.9** %16, align 8
  %84 = bitcast %class.KV.9* %83 to i8*
  %85 = load %class.KV.9*, %class.KV.9** %10, align 8
  %86 = bitcast %class.KV.9* %85 to i8*
  %87 = load i32, i32* %15, align 4
  %88 = zext i32 %87 to i64
  %89 = mul i64 %88, 16
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %84, i8* %86, i64 %89, i32 8, i1 false)
  %90 = load %class.KV.9*, %class.KV.9** %16, align 8
  %91 = load i32, i32* %15, align 4
  %92 = zext i32 %91 to i64
  %93 = getelementptr inbounds %class.KV.9, %class.KV.9* %90, i64 %92
  %94 = bitcast %class.KV.9* %93 to i8*
  %95 = load %class.KV.9*, %class.KV.9** %10, align 8
  %96 = load i32, i32* %15, align 4
  %97 = add i32 %96, 1
  %98 = zext i32 %97 to i64
  %99 = getelementptr inbounds %class.KV.9, %class.KV.9* %95, i64 %98
  %100 = bitcast %class.KV.9* %99 to i8*
  %101 = load i32, i32* %13, align 4
  %102 = sub i32 %101, 1
  %103 = load i32, i32* %15, align 4
  %104 = sub i32 %102, %103
  %105 = zext i32 %104 to i64
  %106 = mul i64 %105, 16
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %94, i8* %100, i64 %106, i32 8, i1 false)
  %107 = load i64, i64* %11, align 8
  %108 = load i32, i32* %12, align 4
  %109 = zext i32 %108 to i64
  %110 = shl i64 1, %109
  %111 = xor i64 -1, %110
  %112 = and i64 %107, %111
  %113 = shl i64 %112, 1
  %114 = or i64 %113, 1
  store i64 %114, i64* %17, align 8
  %115 = load i64, i64* %17, align 8
  %116 = load %class.KV.9*, %class.KV.9** %16, align 8
  call void @_ZN2KVI3keyS0_Lj9EEC2EmPKS_IS0_S0_Lj10EE(%class.KV.8* %0, i64 %115, %class.KV.9* %116)
  br label %147

; <label>:117:                                    ; preds = %63
  %118 = load %class.KV.8*, %class.KV.8** %6, align 8
  call void @_ZN2KVI3keyS0_Lj9EEC2ERKS1_(%class.KV.8* %0, %class.KV.8* dereferenceable(16) %118)
  br label %147

; <label>:119:                                    ; preds = %45
  %120 = load %class.KV.9*, %class.KV.9** %10, align 8
  %121 = load i32, i32* %15, align 4
  %122 = zext i32 %121 to i64
  %123 = getelementptr inbounds %class.KV.9, %class.KV.9* %120, i64 %122
  %124 = load i64, i64* %7, align 8
  %125 = lshr i64 %124, 6
  %126 = load %class.key*, %class.key** %8, align 8
  %127 = load i64*, i64** %9, align 8
  call void @_ZN2KVI3keyS0_Lj10EE12remove_innerERKS1_mPKS0_Pm(%class.KV.9* sret %18, %class.KV.9* dereferenceable(16) %123, i64 %125, %class.key* %126, i64* %127)
  %128 = load %class.KV.9*, %class.KV.9** %10, align 8
  %129 = load i32, i32* %15, align 4
  %130 = zext i32 %129 to i64
  %131 = getelementptr inbounds %class.KV.9, %class.KV.9* %128, i64 %130
  %132 = call zeroext i1 @_ZNK2KVI3keyS0_Lj10EEeqERKS1_(%class.KV.9* %18, %class.KV.9* dereferenceable(16) %131)
  br i1 %132, label %133, label %135

; <label>:133:                                    ; preds = %119
  %134 = load %class.KV.8*, %class.KV.8** %6, align 8
  call void @_ZN2KVI3keyS0_Lj9EEC2ERKS1_(%class.KV.8* %0, %class.KV.8* dereferenceable(16) %134)
  br label %147

; <label>:135:                                    ; preds = %119
  %136 = load %class.KV.9*, %class.KV.9** %10, align 8
  %137 = load i32, i32* %13, align 4
  %138 = load i32, i32* %15, align 4
  %139 = call %class.KV.9* @_ZN2KVI3keyS0_Lj10EE11update_nodeEPKS1_jjRS2_(%class.KV.9* %136, i32 %137, i32 %138, %class.KV.9* dereferenceable(16) %18)
  store %class.KV.9* %139, %class.KV.9** %19, align 8
  %140 = load %class.KV.8*, %class.KV.8** %6, align 8
  %141 = getelementptr inbounds %class.KV.8, %class.KV.8* %140, i32 0, i32 0
  %142 = bitcast %"union.KV<key, key, 9>::Key"* %141 to i64*
  %143 = load i64, i64* %142, align 8
  %144 = load %class.KV.9*, %class.KV.9** %19, align 8
  call void @_ZN2KVI3keyS0_Lj9EEC2EmPKS_IS0_S0_Lj10EE(%class.KV.8* %0, i64 %143, %class.KV.9* %144)
  br label %147

; <label>:145:                                    ; preds = %5
  %146 = load %class.KV.8*, %class.KV.8** %6, align 8
  call void @_ZN2KVI3keyS0_Lj9EEC2ERKS1_(%class.KV.8* %0, %class.KV.8* dereferenceable(16) %146)
  br label %147

; <label>:147:                                    ; preds = %145, %135, %133, %117, %73
  ret void
}

; Function Attrs: noinline nounwind optnone sspstrong uwtable
define linkonce_odr zeroext i1 @_ZNK2KVI3keyS0_Lj9EEeqERKS1_(%class.KV.8*, %class.KV.8* dereferenceable(16)) #0 comdat align 2 {
  %3 = alloca %class.KV.8*, align 8
  %4 = alloca %class.KV.8*, align 8
  store %class.KV.8* %0, %class.KV.8** %3, align 8
  store %class.KV.8* %1, %class.KV.8** %4, align 8
  %5 = load %class.KV.8*, %class.KV.8** %3, align 8
  %6 = getelementptr inbounds %class.KV.8, %class.KV.8* %5, i32 0, i32 0
  %7 = bitcast %"union.KV<key, key, 9>::Key"* %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = load %class.KV.8*, %class.KV.8** %4, align 8
  %10 = getelementptr inbounds %class.KV.8, %class.KV.8* %9, i32 0, i32 0
  %11 = bitcast %"union.KV<key, key, 9>::Key"* %10 to i64*
  %12 = load i64, i64* %11, align 8
  %13 = icmp eq i64 %8, %12
  br i1 %13, label %14, label %23

; <label>:14:                                     ; preds = %2
  %15 = getelementptr inbounds %class.KV.8, %class.KV.8* %5, i32 0, i32 1
  %16 = bitcast %"union.KV<key, key, 9>::Val"* %15 to %class.KV.9**
  %17 = load %class.KV.9*, %class.KV.9** %16, align 8
  %18 = load %class.KV.8*, %class.KV.8** %4, align 8
  %19 = getelementptr inbounds %class.KV.8, %class.KV.8* %18, i32 0, i32 1
  %20 = bitcast %"union.KV<key, key, 9>::Val"* %19 to %class.KV.9**
  %21 = load %class.KV.9*, %class.KV.9** %20, align 8
  %22 = icmp eq %class.KV.9* %17, %21
  br label %23

; <label>:23:                                     ; preds = %14, %2
  %24 = phi i1 [ false, %2 ], [ %22, %14 ]
  ret i1 %24
}

; Function Attrs: noinline optnone sspstrong uwtable
define linkonce_odr void @_ZN2KVI3keyS0_Lj10EE12remove_innerERKS1_mPKS0_Pm(%class.KV.9* noalias sret, %class.KV.9* dereferenceable(16), i64, %class.key*, i64*) #2 comdat align 2 {
  %6 = alloca %class.KV.9*, align 8
  %7 = alloca i64, align 8
  %8 = alloca %class.key*, align 8
  %9 = alloca i64*, align 8
  %10 = alloca %class.LL*, align 8
  store %class.KV.9* %1, %class.KV.9** %6, align 8
  store i64 %2, i64* %7, align 8
  store %class.key* %3, %class.key** %8, align 8
  store i64* %4, i64** %9, align 8
  %11 = load %class.KV.9*, %class.KV.9** %6, align 8
  %12 = getelementptr inbounds %class.KV.9, %class.KV.9* %11, i32 0, i32 1
  %13 = bitcast %"union.KV<key, key, 10>::Val"* %12 to %class.LL**
  %14 = load %class.LL*, %class.LL** %13, align 8
  %15 = icmp ne %class.LL* %14, null
  br i1 %15, label %16, label %34

; <label>:16:                                     ; preds = %5
  %17 = load %class.KV.9*, %class.KV.9** %6, align 8
  %18 = getelementptr inbounds %class.KV.9, %class.KV.9* %17, i32 0, i32 1
  %19 = bitcast %"union.KV<key, key, 10>::Val"* %18 to %class.LL**
  %20 = load %class.LL*, %class.LL** %19, align 8
  %21 = load %class.key*, %class.key** %8, align 8
  %22 = load i64*, i64** %9, align 8
  %23 = call %class.LL* @_ZNK2LLI3keyS0_E6removeEPKS0_Pm(%class.LL* %20, %class.key* %21, i64* %22)
  store %class.LL* %23, %class.LL** %10, align 8
  %24 = load %class.LL*, %class.LL** %10, align 8
  %25 = load %class.KV.9*, %class.KV.9** %6, align 8
  %26 = getelementptr inbounds %class.KV.9, %class.KV.9* %25, i32 0, i32 1
  %27 = bitcast %"union.KV<key, key, 10>::Val"* %26 to %class.LL**
  %28 = load %class.LL*, %class.LL** %27, align 8
  %29 = icmp eq %class.LL* %24, %28
  br i1 %29, label %30, label %32

; <label>:30:                                     ; preds = %16
  %31 = load %class.KV.9*, %class.KV.9** %6, align 8
  call void @_ZN2KVI3keyS0_Lj10EEC2ERKS1_(%class.KV.9* %0, %class.KV.9* dereferenceable(16) %31)
  br label %36

; <label>:32:                                     ; preds = %16
  %33 = load %class.LL*, %class.LL** %10, align 8
  call void @_ZN2KVI3keyS0_Lj10EEC2EmPK2LLIS0_S0_E(%class.KV.9* %0, i64 1, %class.LL* %33)
  br label %36

; <label>:34:                                     ; preds = %5
  %35 = load %class.KV.9*, %class.KV.9** %6, align 8
  call void @_ZN2KVI3keyS0_Lj10EEC2ERKS1_(%class.KV.9* %0, %class.KV.9* dereferenceable(16) %35)
  br label %36

; <label>:36:                                     ; preds = %34, %32, %30
  ret void
}

; Function Attrs: noinline nounwind optnone sspstrong uwtable
define linkonce_odr zeroext i1 @_ZNK2KVI3keyS0_Lj10EEeqERKS1_(%class.KV.9*, %class.KV.9* dereferenceable(16)) #0 comdat align 2 {
  %3 = alloca %class.KV.9*, align 8
  %4 = alloca %class.KV.9*, align 8
  store %class.KV.9* %0, %class.KV.9** %3, align 8
  store %class.KV.9* %1, %class.KV.9** %4, align 8
  %5 = load %class.KV.9*, %class.KV.9** %3, align 8
  %6 = getelementptr inbounds %class.KV.9, %class.KV.9* %5, i32 0, i32 0
  %7 = bitcast %"union.KV<key, key, 10>::Key"* %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = load %class.KV.9*, %class.KV.9** %4, align 8
  %10 = getelementptr inbounds %class.KV.9, %class.KV.9* %9, i32 0, i32 0
  %11 = bitcast %"union.KV<key, key, 10>::Key"* %10 to i64*
  %12 = load i64, i64* %11, align 8
  %13 = icmp eq i64 %8, %12
  br i1 %13, label %14, label %23

; <label>:14:                                     ; preds = %2
  %15 = getelementptr inbounds %class.KV.9, %class.KV.9* %5, i32 0, i32 1
  %16 = bitcast %"union.KV<key, key, 10>::Val"* %15 to %class.key**
  %17 = load %class.key*, %class.key** %16, align 8
  %18 = load %class.KV.9*, %class.KV.9** %4, align 8
  %19 = getelementptr inbounds %class.KV.9, %class.KV.9* %18, i32 0, i32 1
  %20 = bitcast %"union.KV<key, key, 10>::Val"* %19 to %class.key**
  %21 = load %class.key*, %class.key** %20, align 8
  %22 = icmp eq %class.key* %17, %21
  br label %23

; <label>:23:                                     ; preds = %14, %2
  %24 = phi i1 [ false, %2 ], [ %22, %14 ]
  ret i1 %24
}

; Function Attrs: noinline optnone sspstrong uwtable
define linkonce_odr %class.LL* @_ZNK2LLI3keyS0_E6removeEPKS0_Pm(%class.LL*, %class.key*, i64*) #2 comdat align 2 {
  %4 = alloca %class.LL*, align 8
  %5 = alloca %class.LL*, align 8
  %6 = alloca %class.key*, align 8
  %7 = alloca i64*, align 8
  %8 = alloca %class.LL*, align 8
  store %class.LL* %0, %class.LL** %5, align 8
  store %class.key* %1, %class.key** %6, align 8
  store i64* %2, i64** %7, align 8
  %9 = load %class.LL*, %class.LL** %5, align 8
  %10 = getelementptr inbounds %class.LL, %class.LL* %9, i32 0, i32 0
  %11 = load %class.key*, %class.key** %10, align 8
  %12 = load %class.key*, %class.key** %6, align 8
  %13 = call zeroext i1 @_ZNK3keyeqERKS_(%class.key* %11, %class.key* dereferenceable(8) %12)
  br i1 %13, label %14, label %20

; <label>:14:                                     ; preds = %3
  %15 = load i64*, i64** %7, align 8
  %16 = load i64, i64* %15, align 8
  %17 = add i64 %16, -1
  store i64 %17, i64* %15, align 8
  %18 = getelementptr inbounds %class.LL, %class.LL* %9, i32 0, i32 2
  %19 = load %class.LL*, %class.LL** %18, align 8
  store %class.LL* %19, %class.LL** %4, align 8
  br label %46

; <label>:20:                                     ; preds = %3
  %21 = getelementptr inbounds %class.LL, %class.LL* %9, i32 0, i32 2
  %22 = load %class.LL*, %class.LL** %21, align 8
  %23 = icmp ne %class.LL* %22, null
  br i1 %23, label %24, label %45

; <label>:24:                                     ; preds = %20
  %25 = getelementptr inbounds %class.LL, %class.LL* %9, i32 0, i32 2
  %26 = load %class.LL*, %class.LL** %25, align 8
  %27 = load %class.key*, %class.key** %6, align 8
  %28 = load i64*, i64** %7, align 8
  %29 = call %class.LL* @_ZNK2LLI3keyS0_E6removeEPKS0_Pm(%class.LL* %26, %class.key* %27, i64* %28)
  store %class.LL* %29, %class.LL** %8, align 8
  %30 = getelementptr inbounds %class.LL, %class.LL* %9, i32 0, i32 2
  %31 = load %class.LL*, %class.LL** %30, align 8
  %32 = load %class.LL*, %class.LL** %8, align 8
  %33 = icmp eq %class.LL* %31, %32
  br i1 %33, label %34, label %35

; <label>:34:                                     ; preds = %24
  store %class.LL* %9, %class.LL** %4, align 8
  br label %46

; <label>:35:                                     ; preds = %24
  %36 = call noalias i8* @malloc(i64 24) #8
  %37 = bitcast i8* %36 to %class.LL*
  %38 = bitcast %class.LL* %37 to i8*
  %39 = bitcast i8* %38 to %class.LL*
  %40 = getelementptr inbounds %class.LL, %class.LL* %9, i32 0, i32 0
  %41 = load %class.key*, %class.key** %40, align 8
  %42 = getelementptr inbounds %class.LL, %class.LL* %9, i32 0, i32 1
  %43 = load %class.key*, %class.key** %42, align 8
  %44 = load %class.LL*, %class.LL** %8, align 8
  call void @_ZN2LLI3keyS0_EC2EPKS0_S3_PKS1_(%class.LL* %39, %class.key* %41, %class.key* %43, %class.LL* %44)
  store %class.LL* %39, %class.LL** %4, align 8
  br label %46

; <label>:45:                                     ; preds = %20
  store %class.LL* %9, %class.LL** %4, align 8
  br label %46

; <label>:46:                                     ; preds = %45, %35, %34, %14
  %47 = load %class.LL*, %class.LL** %4, align 8
  ret %class.LL* %47
}

attributes #0 = { noinline nounwind optnone sspstrong uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noinline optnone sspstrong uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { argmemonly nounwind }
attributes #7 = { nounwind readnone speculatable }
attributes #8 = { nounwind }
attributes #9 = { noreturn nounwind }
attributes #10 = { builtin nounwind }

!llvm.module.flags = !{!0, !1, !2}
!llvm.ident = !{!3}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i32 7, !"PIE Level", i32 2}
!3 = !{!"clang version 5.0.0 (tags/RELEASE_500/final)"}


;;;;;;

define void @proc_main() {
  %cloptr244120 = call i64* @alloc(i64 8)                                            ; malloc
  %eptr244121 = getelementptr inbounds i64, i64* %cloptr244120, i64 0                ; &cloptr244120[0]
  %f244122 = ptrtoint void(i64,i64)* @lam244118 to i64                               ; fptr cast; i64(...)* -> i64
  store i64 %f244122, i64* %eptr244121                                               ; store fptr
  %arg234307 = ptrtoint i64* %cloptr244120 to i64                                    ; closure cast; i64* -> i64
  %cloptr244123 = call i64* @alloc(i64 8)                                            ; malloc
  %eptr244124 = getelementptr inbounds i64, i64* %cloptr244123, i64 0                ; &cloptr244123[0]
  %f244125 = ptrtoint void(i64,i64)* @lam244109 to i64                               ; fptr cast; i64(...)* -> i64
  store i64 %f244125, i64* %eptr244124                                               ; store fptr
  %arg234306 = ptrtoint i64* %cloptr244123 to i64                                    ; closure cast; i64* -> i64
  %cloptr244126 = call i64* @alloc(i64 8)                                            ; malloc
  %eptr244127 = getelementptr inbounds i64, i64* %cloptr244126, i64 0                ; &cloptr244126[0]
  %f244128 = ptrtoint void(i64,i64)* @lam241634 to i64                               ; fptr cast; i64(...)* -> i64
  store i64 %f244128, i64* %eptr244127                                               ; store fptr
  %arg234305 = ptrtoint i64* %cloptr244126 to i64                                    ; closure cast; i64* -> i64
  %sym241593 = add i64 0, 0                                                          ; quoted ()
  %x241594 = call i64 @prim_cons(i64 %arg234305, i64 %sym241593)                     ; call prim_cons
  %x241595 = call i64 @prim_cons(i64 %arg234306, i64 %x241594)                       ; call prim_cons
  %cloptr244129 = inttoptr i64 %arg234307 to i64*                                    ; closure/env cast; i64 -> i64*
  %i0ptr244130 = getelementptr inbounds i64, i64* %cloptr244129, i64 0               ; &cloptr244129[0]
  %f244132 = load i64, i64* %i0ptr244130, align 8                                    ; load; *i0ptr244130
  %fptr244131 = inttoptr i64 %f244132 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr244131(i64 %arg234307, i64 %x241595)                ; tail call
  ret void
}


define i32 @main() {
  call fastcc void @proc_main()
  ret i32 0
}



define void @lam244118(i64 %env244119, i64 %rvp235866) {
  %check235867 = call i64 @prim_null_63(i64 %rvp235866)                              ; call prim_null_63
  %cmp244133 = icmp eq i64 %check235867, 15                                          ; false?
  br i1 %cmp244133, label %else244135, label %then244134                             ; if

then244134:
  %msg235871 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str244136, i32 0, i32 0)); quoted string
  %abort235869 = call i64 @prim_halt(i64 %msg235871)                                 ; call prim_halt
  %sym235874 = add i64 0, 0                                                          ; quoted ()
  %cloptr244137 = inttoptr i64 %abort235869 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr244138 = getelementptr inbounds i64, i64* %cloptr244137, i64 0               ; &cloptr244137[0]
  %f244140 = load i64, i64* %i0ptr244138, align 8                                    ; load; *i0ptr244138
  %fptr244139 = inttoptr i64 %f244140 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr244139(i64 %abort235869, i64 %sym235874)            ; tail call
  ret void

else244135:
  %cont234297 = call i64 @prim_car(i64 %rvp235866)                                   ; call prim_car
  %rvp235856 = call i64 @prim_cdr(i64 %rvp235866)                                    ; call prim_cdr
  %check235857 = call i64 @prim_null_63(i64 %rvp235856)                              ; call prim_null_63
  %cmp244141 = icmp eq i64 %check235857, 15                                          ; false?
  br i1 %cmp244141, label %else244143, label %then244142                             ; if

then244142:
  %msg235861 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str244144, i32 0, i32 0)); quoted string
  %abort235859 = call i64 @prim_halt(i64 %msg235861)                                 ; call prim_halt
  %sym235864 = add i64 0, 0                                                          ; quoted ()
  %cloptr244145 = inttoptr i64 %abort235859 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr244146 = getelementptr inbounds i64, i64* %cloptr244145, i64 0               ; &cloptr244145[0]
  %f244148 = load i64, i64* %i0ptr244146, align 8                                    ; load; *i0ptr244146
  %fptr244147 = inttoptr i64 %f244148 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr244147(i64 %abort235859, i64 %sym235864)            ; tail call
  ret void

else244143:
  %rest235863 = call i64 @prim_cdr(i64 %rvp235856)                                   ; call prim_cdr
  %empty235858 = call i64 @prim_null_63(i64 %rest235863)                             ; call prim_null_63
  %cmp244149 = icmp eq i64 %empty235858, 15                                          ; false?
  br i1 %cmp244149, label %else244151, label %then244150                             ; if

then244150:
  %yu233581233757 = call i64 @prim_car(i64 %rvp235856)                               ; call prim_car
  %na235852 = call i64 @prim_cdr(i64 %rvp235856)                                     ; call prim_cdr
  %sym235853 = add i64 0, 0                                                          ; quoted ()
  %x235854 = call i64 @prim_cons(i64 %yu233581233757, i64 %sym235853)                ; call prim_cons
  %x235855 = call i64 @prim_cons(i64 %cont234297, i64 %x235854)                      ; call prim_cons
  %cloptr244152 = inttoptr i64 %yu233581233757 to i64*                               ; closure/env cast; i64 -> i64*
  %i0ptr244153 = getelementptr inbounds i64, i64* %cloptr244152, i64 0               ; &cloptr244152[0]
  %f244155 = load i64, i64* %i0ptr244153, align 8                                    ; load; *i0ptr244153
  %fptr244154 = inttoptr i64 %f244155 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr244154(i64 %yu233581233757, i64 %x235855)           ; tail call
  ret void

else244151:
  %many235862 = call i64 @const_init_string(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @str244156, i32 0, i32 0)); quoted string
  %fail235860 = call i64 @prim_halt(i64 %many235862)                                 ; call prim_halt
  %sym235865 = add i64 0, 0                                                          ; quoted ()
  %cloptr244157 = inttoptr i64 %fail235860 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr244158 = getelementptr inbounds i64, i64* %cloptr244157, i64 0               ; &cloptr244157[0]
  %f244160 = load i64, i64* %i0ptr244158, align 8                                    ; load; *i0ptr244158
  %fptr244159 = inttoptr i64 %f244160 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr244159(i64 %fail235860, i64 %sym235865)             ; tail call
  ret void
}


define void @lam244109(i64 %env244110, i64 %rvp241488) {
  %check241489 = call i64 @prim_null_63(i64 %rvp241488)                              ; call prim_null_63
  %cmp244161 = icmp eq i64 %check241489, 15                                          ; false?
  br i1 %cmp244161, label %else244163, label %then244162                             ; if

then244162:
  %msg241493 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str244164, i32 0, i32 0)); quoted string
  %abort241491 = call i64 @prim_halt(i64 %msg241493)                                 ; call prim_halt
  %sym241496 = add i64 0, 0                                                          ; quoted ()
  %cloptr244165 = inttoptr i64 %abort241491 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr244166 = getelementptr inbounds i64, i64* %cloptr244165, i64 0               ; &cloptr244165[0]
  %f244168 = load i64, i64* %i0ptr244166, align 8                                    ; load; *i0ptr244166
  %fptr244167 = inttoptr i64 %f244168 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr244167(i64 %abort241491, i64 %sym241496)            ; tail call
  ret void

else244163:
  %_95234073 = call i64 @prim_car(i64 %rvp241488)                                    ; call prim_car
  %rvp241478 = call i64 @prim_cdr(i64 %rvp241488)                                    ; call prim_cdr
  %check241479 = call i64 @prim_null_63(i64 %rvp241478)                              ; call prim_null_63
  %cmp244169 = icmp eq i64 %check241479, 15                                          ; false?
  br i1 %cmp244169, label %else244171, label %then244170                             ; if

then244170:
  %msg241483 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str244172, i32 0, i32 0)); quoted string
  %abort241481 = call i64 @prim_halt(i64 %msg241483)                                 ; call prim_halt
  %sym241486 = add i64 0, 0                                                          ; quoted ()
  %cloptr244173 = inttoptr i64 %abort241481 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr244174 = getelementptr inbounds i64, i64* %cloptr244173, i64 0               ; &cloptr244173[0]
  %f244176 = load i64, i64* %i0ptr244174, align 8                                    ; load; *i0ptr244174
  %fptr244175 = inttoptr i64 %f244176 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr244175(i64 %abort241481, i64 %sym241486)            ; tail call
  ret void

else244171:
  %rest241485 = call i64 @prim_cdr(i64 %rvp241478)                                   ; call prim_cdr
  %empty241480 = call i64 @prim_null_63(i64 %rest241485)                             ; call prim_null_63
  %cmp244177 = icmp eq i64 %empty241480, 15                                          ; false?
  br i1 %cmp244177, label %else244179, label %then244178                             ; if

then244178:
  %Ycmb233580233756 = call i64 @prim_car(i64 %rvp241478)                             ; call prim_car
  %na235876 = call i64 @prim_cdr(i64 %rvp241478)                                     ; call prim_cdr
  %cloptr244180 = call i64* @alloc(i64 16)                                           ; malloc
  %eptr244182 = getelementptr inbounds i64, i64* %cloptr244180, i64 1                ; &eptr244182[1]
  store i64 %Ycmb233580233756, i64* %eptr244182                                      ; *eptr244182 = %Ycmb233580233756
  %eptr244181 = getelementptr inbounds i64, i64* %cloptr244180, i64 0                ; &cloptr244180[0]
  %f244183 = ptrtoint void(i64,i64)* @lam244105 to i64                               ; fptr cast; i64(...)* -> i64
  store i64 %f244183, i64* %eptr244181                                               ; store fptr
  %arg234312 = ptrtoint i64* %cloptr244180 to i64                                    ; closure cast; i64* -> i64
  %cloptr244184 = call i64* @alloc(i64 8)                                            ; malloc
  %eptr244185 = getelementptr inbounds i64, i64* %cloptr244184, i64 0                ; &cloptr244184[0]
  %f244186 = ptrtoint void(i64,i64)* @lam241673 to i64                               ; fptr cast; i64(...)* -> i64
  store i64 %f244186, i64* %eptr244185                                               ; store fptr
  %arg234311 = ptrtoint i64* %cloptr244184 to i64                                    ; closure cast; i64* -> i64
  %sym241475 = add i64 0, 0                                                          ; quoted ()
  %x241476 = call i64 @prim_cons(i64 %arg234311, i64 %sym241475)                     ; call prim_cons
  %x241477 = call i64 @prim_cons(i64 %arg234312, i64 %x241476)                       ; call prim_cons
  %cloptr244187 = inttoptr i64 %Ycmb233580233756 to i64*                             ; closure/env cast; i64 -> i64*
  %i0ptr244188 = getelementptr inbounds i64, i64* %cloptr244187, i64 0               ; &cloptr244187[0]
  %f244190 = load i64, i64* %i0ptr244188, align 8                                    ; load; *i0ptr244188
  %fptr244189 = inttoptr i64 %f244190 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr244189(i64 %Ycmb233580233756, i64 %x241477)         ; tail call
  ret void

else244179:
  %many241484 = call i64 @const_init_string(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @str244191, i32 0, i32 0)); quoted string
  %fail241482 = call i64 @prim_halt(i64 %many241484)                                 ; call prim_halt
  %sym241487 = add i64 0, 0                                                          ; quoted ()
  %cloptr244192 = inttoptr i64 %fail241482 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr244193 = getelementptr inbounds i64, i64* %cloptr244192, i64 0               ; &cloptr244192[0]
  %f244195 = load i64, i64* %i0ptr244193, align 8                                    ; load; *i0ptr244193
  %fptr244194 = inttoptr i64 %f244195 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr244194(i64 %fail241482, i64 %sym241487)             ; tail call
  ret void
}


define void @lam244105(i64 %env244106, i64 %rvp241370) {
  %envptr244196 = inttoptr i64 %env244106 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr244197 = getelementptr inbounds i64, i64* %envptr244196, i64 1              ; &envptr244196[1]
  %Ycmb233580233756 = load i64, i64* %envptr244197, align 8                          ; load; *envptr244197
  %check241371 = call i64 @prim_null_63(i64 %rvp241370)                              ; call prim_null_63
  %cmp244198 = icmp eq i64 %check241371, 15                                          ; false?
  br i1 %cmp244198, label %else244200, label %then244199                             ; if

then244199:
  %msg241375 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str244201, i32 0, i32 0)); quoted string
  %abort241373 = call i64 @prim_halt(i64 %msg241375)                                 ; call prim_halt
  %sym241378 = add i64 0, 0                                                          ; quoted ()
  %cloptr244202 = inttoptr i64 %abort241373 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr244203 = getelementptr inbounds i64, i64* %cloptr244202, i64 0               ; &cloptr244202[0]
  %f244205 = load i64, i64* %i0ptr244203, align 8                                    ; load; *i0ptr244203
  %fptr244204 = inttoptr i64 %f244205 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr244204(i64 %abort241373, i64 %sym241378)            ; tail call
  ret void

else244200:
  %_95234074 = call i64 @prim_car(i64 %rvp241370)                                    ; call prim_car
  %rvp241360 = call i64 @prim_cdr(i64 %rvp241370)                                    ; call prim_cdr
  %check241361 = call i64 @prim_null_63(i64 %rvp241360)                              ; call prim_null_63
  %cmp244206 = icmp eq i64 %check241361, 15                                          ; false?
  br i1 %cmp244206, label %else244208, label %then244207                             ; if

then244207:
  %msg241365 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str244209, i32 0, i32 0)); quoted string
  %abort241363 = call i64 @prim_halt(i64 %msg241365)                                 ; call prim_halt
  %sym241368 = add i64 0, 0                                                          ; quoted ()
  %cloptr244210 = inttoptr i64 %abort241363 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr244211 = getelementptr inbounds i64, i64* %cloptr244210, i64 0               ; &cloptr244210[0]
  %f244213 = load i64, i64* %i0ptr244211, align 8                                    ; load; *i0ptr244211
  %fptr244212 = inttoptr i64 %f244213 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr244212(i64 %abort241363, i64 %sym241368)            ; tail call
  ret void

else244208:
  %rest241367 = call i64 @prim_cdr(i64 %rvp241360)                                   ; call prim_cdr
  %empty241362 = call i64 @prim_null_63(i64 %rest241367)                             ; call prim_null_63
  %cmp244214 = icmp eq i64 %empty241362, 15                                          ; false?
  br i1 %cmp244214, label %else244216, label %then244215                             ; if

then244215:
  %_37foldr1233585233761 = call i64 @prim_car(i64 %rvp241360)                        ; call prim_car
  %na235878 = call i64 @prim_cdr(i64 %rvp241360)                                     ; call prim_cdr
  %cloptr244217 = call i64* @alloc(i64 24)                                           ; malloc
  %eptr244219 = getelementptr inbounds i64, i64* %cloptr244217, i64 1                ; &eptr244219[1]
  %eptr244220 = getelementptr inbounds i64, i64* %cloptr244217, i64 2                ; &eptr244220[2]
  store i64 %_37foldr1233585233761, i64* %eptr244219                                 ; *eptr244219 = %_37foldr1233585233761
  store i64 %Ycmb233580233756, i64* %eptr244220                                      ; *eptr244220 = %Ycmb233580233756
  %eptr244218 = getelementptr inbounds i64, i64* %cloptr244217, i64 0                ; &cloptr244217[0]
  %f244221 = ptrtoint void(i64,i64)* @lam244101 to i64                               ; fptr cast; i64(...)* -> i64
  store i64 %f244221, i64* %eptr244218                                               ; store fptr
  %arg234315 = ptrtoint i64* %cloptr244217 to i64                                    ; closure cast; i64* -> i64
  %cloptr244222 = call i64* @alloc(i64 8)                                            ; malloc
  %eptr244223 = getelementptr inbounds i64, i64* %cloptr244222, i64 0                ; &cloptr244222[0]
  %f244224 = ptrtoint void(i64,i64)* @lam241721 to i64                               ; fptr cast; i64(...)* -> i64
  store i64 %f244224, i64* %eptr244223                                               ; store fptr
  %arg234314 = ptrtoint i64* %cloptr244222 to i64                                    ; closure cast; i64* -> i64
  %sym241357 = add i64 0, 0                                                          ; quoted ()
  %x241358 = call i64 @prim_cons(i64 %arg234314, i64 %sym241357)                     ; call prim_cons
  %x241359 = call i64 @prim_cons(i64 %arg234315, i64 %x241358)                       ; call prim_cons
  %cloptr244225 = inttoptr i64 %Ycmb233580233756 to i64*                             ; closure/env cast; i64 -> i64*
  %i0ptr244226 = getelementptr inbounds i64, i64* %cloptr244225, i64 0               ; &cloptr244225[0]
  %f244228 = load i64, i64* %i0ptr244226, align 8                                    ; load; *i0ptr244226
  %fptr244227 = inttoptr i64 %f244228 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr244227(i64 %Ycmb233580233756, i64 %x241359)         ; tail call
  ret void

else244216:
  %many241366 = call i64 @const_init_string(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @str244229, i32 0, i32 0)); quoted string
  %fail241364 = call i64 @prim_halt(i64 %many241366)                                 ; call prim_halt
  %sym241369 = add i64 0, 0                                                          ; quoted ()
  %cloptr244230 = inttoptr i64 %fail241364 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr244231 = getelementptr inbounds i64, i64* %cloptr244230, i64 0               ; &cloptr244230[0]
  %f244233 = load i64, i64* %i0ptr244231, align 8                                    ; load; *i0ptr244231
  %fptr244232 = inttoptr i64 %f244233 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr244232(i64 %fail241364, i64 %sym241369)             ; tail call
  ret void
}


define void @lam244101(i64 %env244102, i64 %rvp241239) {
  %envptr244234 = inttoptr i64 %env244102 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr244235 = getelementptr inbounds i64, i64* %envptr244234, i64 2              ; &envptr244234[2]
  %Ycmb233580233756 = load i64, i64* %envptr244235, align 8                          ; load; *envptr244235
  %envptr244236 = inttoptr i64 %env244102 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr244237 = getelementptr inbounds i64, i64* %envptr244236, i64 1              ; &envptr244236[1]
  %_37foldr1233585233761 = load i64, i64* %envptr244237, align 8                     ; load; *envptr244237
  %check241240 = call i64 @prim_null_63(i64 %rvp241239)                              ; call prim_null_63
  %cmp244238 = icmp eq i64 %check241240, 15                                          ; false?
  br i1 %cmp244238, label %else244240, label %then244239                             ; if

then244239:
  %msg241244 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str244241, i32 0, i32 0)); quoted string
  %abort241242 = call i64 @prim_halt(i64 %msg241244)                                 ; call prim_halt
  %sym241247 = add i64 0, 0                                                          ; quoted ()
  %cloptr244242 = inttoptr i64 %abort241242 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr244243 = getelementptr inbounds i64, i64* %cloptr244242, i64 0               ; &cloptr244242[0]
  %f244245 = load i64, i64* %i0ptr244243, align 8                                    ; load; *i0ptr244243
  %fptr244244 = inttoptr i64 %f244245 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr244244(i64 %abort241242, i64 %sym241247)            ; tail call
  ret void

else244240:
  %_95234075 = call i64 @prim_car(i64 %rvp241239)                                    ; call prim_car
  %rvp241229 = call i64 @prim_cdr(i64 %rvp241239)                                    ; call prim_cdr
  %check241230 = call i64 @prim_null_63(i64 %rvp241229)                              ; call prim_null_63
  %cmp244246 = icmp eq i64 %check241230, 15                                          ; false?
  br i1 %cmp244246, label %else244248, label %then244247                             ; if

then244247:
  %msg241234 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str244249, i32 0, i32 0)); quoted string
  %abort241232 = call i64 @prim_halt(i64 %msg241234)                                 ; call prim_halt
  %sym241237 = add i64 0, 0                                                          ; quoted ()
  %cloptr244250 = inttoptr i64 %abort241232 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr244251 = getelementptr inbounds i64, i64* %cloptr244250, i64 0               ; &cloptr244250[0]
  %f244253 = load i64, i64* %i0ptr244251, align 8                                    ; load; *i0ptr244251
  %fptr244252 = inttoptr i64 %f244253 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr244252(i64 %abort241232, i64 %sym241237)            ; tail call
  ret void

else244248:
  %rest241236 = call i64 @prim_cdr(i64 %rvp241229)                                   ; call prim_cdr
  %empty241231 = call i64 @prim_null_63(i64 %rest241236)                             ; call prim_null_63
  %cmp244254 = icmp eq i64 %empty241231, 15                                          ; false?
  br i1 %cmp244254, label %else244256, label %then244255                             ; if

then244255:
  %_37map1233586233762 = call i64 @prim_car(i64 %rvp241229)                          ; call prim_car
  %na235880 = call i64 @prim_cdr(i64 %rvp241229)                                     ; call prim_cdr
  %cloptr244257 = call i64* @alloc(i64 32)                                           ; malloc
  %eptr244259 = getelementptr inbounds i64, i64* %cloptr244257, i64 1                ; &eptr244259[1]
  %eptr244260 = getelementptr inbounds i64, i64* %cloptr244257, i64 2                ; &eptr244260[2]
  %eptr244261 = getelementptr inbounds i64, i64* %cloptr244257, i64 3                ; &eptr244261[3]
  store i64 %_37foldr1233585233761, i64* %eptr244259                                 ; *eptr244259 = %_37foldr1233585233761
  store i64 %_37map1233586233762, i64* %eptr244260                                   ; *eptr244260 = %_37map1233586233762
  store i64 %Ycmb233580233756, i64* %eptr244261                                      ; *eptr244261 = %Ycmb233580233756
  %eptr244258 = getelementptr inbounds i64, i64* %cloptr244257, i64 0                ; &cloptr244257[0]
  %f244262 = ptrtoint void(i64,i64)* @lam244097 to i64                               ; fptr cast; i64(...)* -> i64
  store i64 %f244262, i64* %eptr244258                                               ; store fptr
  %arg234318 = ptrtoint i64* %cloptr244257 to i64                                    ; closure cast; i64* -> i64
  %cloptr244263 = call i64* @alloc(i64 8)                                            ; malloc
  %eptr244264 = getelementptr inbounds i64, i64* %cloptr244263, i64 0                ; &cloptr244263[0]
  %f244265 = ptrtoint void(i64,i64)* @lam241765 to i64                               ; fptr cast; i64(...)* -> i64
  store i64 %f244265, i64* %eptr244264                                               ; store fptr
  %arg234317 = ptrtoint i64* %cloptr244263 to i64                                    ; closure cast; i64* -> i64
  %sym241226 = add i64 0, 0                                                          ; quoted ()
  %x241227 = call i64 @prim_cons(i64 %arg234317, i64 %sym241226)                     ; call prim_cons
  %x241228 = call i64 @prim_cons(i64 %arg234318, i64 %x241227)                       ; call prim_cons
  %cloptr244266 = inttoptr i64 %Ycmb233580233756 to i64*                             ; closure/env cast; i64 -> i64*
  %i0ptr244267 = getelementptr inbounds i64, i64* %cloptr244266, i64 0               ; &cloptr244266[0]
  %f244269 = load i64, i64* %i0ptr244267, align 8                                    ; load; *i0ptr244267
  %fptr244268 = inttoptr i64 %f244269 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr244268(i64 %Ycmb233580233756, i64 %x241228)         ; tail call
  ret void

else244256:
  %many241235 = call i64 @const_init_string(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @str244270, i32 0, i32 0)); quoted string
  %fail241233 = call i64 @prim_halt(i64 %many241235)                                 ; call prim_halt
  %sym241238 = add i64 0, 0                                                          ; quoted ()
  %cloptr244271 = inttoptr i64 %fail241233 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr244272 = getelementptr inbounds i64, i64* %cloptr244271, i64 0               ; &cloptr244271[0]
  %f244274 = load i64, i64* %i0ptr244272, align 8                                    ; load; *i0ptr244272
  %fptr244273 = inttoptr i64 %f244274 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr244273(i64 %fail241233, i64 %sym241238)             ; tail call
  ret void
}


define void @lam244097(i64 %env244098, i64 %rvp241129) {
  %envptr244275 = inttoptr i64 %env244098 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr244276 = getelementptr inbounds i64, i64* %envptr244275, i64 3              ; &envptr244275[3]
  %Ycmb233580233756 = load i64, i64* %envptr244276, align 8                          ; load; *envptr244276
  %envptr244277 = inttoptr i64 %env244098 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr244278 = getelementptr inbounds i64, i64* %envptr244277, i64 2              ; &envptr244277[2]
  %_37map1233586233762 = load i64, i64* %envptr244278, align 8                       ; load; *envptr244278
  %envptr244279 = inttoptr i64 %env244098 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr244280 = getelementptr inbounds i64, i64* %envptr244279, i64 1              ; &envptr244279[1]
  %_37foldr1233585233761 = load i64, i64* %envptr244280, align 8                     ; load; *envptr244280
  %check241130 = call i64 @prim_null_63(i64 %rvp241129)                              ; call prim_null_63
  %cmp244281 = icmp eq i64 %check241130, 15                                          ; false?
  br i1 %cmp244281, label %else244283, label %then244282                             ; if

then244282:
  %msg241134 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str244284, i32 0, i32 0)); quoted string
  %abort241132 = call i64 @prim_halt(i64 %msg241134)                                 ; call prim_halt
  %sym241137 = add i64 0, 0                                                          ; quoted ()
  %cloptr244285 = inttoptr i64 %abort241132 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr244286 = getelementptr inbounds i64, i64* %cloptr244285, i64 0               ; &cloptr244285[0]
  %f244288 = load i64, i64* %i0ptr244286, align 8                                    ; load; *i0ptr244286
  %fptr244287 = inttoptr i64 %f244288 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr244287(i64 %abort241132, i64 %sym241137)            ; tail call
  ret void

else244283:
  %_95234076 = call i64 @prim_car(i64 %rvp241129)                                    ; call prim_car
  %rvp241119 = call i64 @prim_cdr(i64 %rvp241129)                                    ; call prim_cdr
  %check241120 = call i64 @prim_null_63(i64 %rvp241119)                              ; call prim_null_63
  %cmp244289 = icmp eq i64 %check241120, 15                                          ; false?
  br i1 %cmp244289, label %else244291, label %then244290                             ; if

then244290:
  %msg241124 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str244292, i32 0, i32 0)); quoted string
  %abort241122 = call i64 @prim_halt(i64 %msg241124)                                 ; call prim_halt
  %sym241127 = add i64 0, 0                                                          ; quoted ()
  %cloptr244293 = inttoptr i64 %abort241122 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr244294 = getelementptr inbounds i64, i64* %cloptr244293, i64 0               ; &cloptr244293[0]
  %f244296 = load i64, i64* %i0ptr244294, align 8                                    ; load; *i0ptr244294
  %fptr244295 = inttoptr i64 %f244296 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr244295(i64 %abort241122, i64 %sym241127)            ; tail call
  ret void

else244291:
  %rest241126 = call i64 @prim_cdr(i64 %rvp241119)                                   ; call prim_cdr
  %empty241121 = call i64 @prim_null_63(i64 %rest241126)                             ; call prim_null_63
  %cmp244297 = icmp eq i64 %empty241121, 15                                          ; false?
  br i1 %cmp244297, label %else244299, label %then244298                             ; if

then244298:
  %_37take233587233763 = call i64 @prim_car(i64 %rvp241119)                          ; call prim_car
  %na235882 = call i64 @prim_cdr(i64 %rvp241119)                                     ; call prim_cdr
  %cloptr244300 = call i64* @alloc(i64 40)                                           ; malloc
  %eptr244302 = getelementptr inbounds i64, i64* %cloptr244300, i64 1                ; &eptr244302[1]
  %eptr244303 = getelementptr inbounds i64, i64* %cloptr244300, i64 2                ; &eptr244303[2]
  %eptr244304 = getelementptr inbounds i64, i64* %cloptr244300, i64 3                ; &eptr244304[3]
  %eptr244305 = getelementptr inbounds i64, i64* %cloptr244300, i64 4                ; &eptr244305[4]
  store i64 %_37foldr1233585233761, i64* %eptr244302                                 ; *eptr244302 = %_37foldr1233585233761
  store i64 %_37map1233586233762, i64* %eptr244303                                   ; *eptr244303 = %_37map1233586233762
  store i64 %_37take233587233763, i64* %eptr244304                                   ; *eptr244304 = %_37take233587233763
  store i64 %Ycmb233580233756, i64* %eptr244305                                      ; *eptr244305 = %Ycmb233580233756
  %eptr244301 = getelementptr inbounds i64, i64* %cloptr244300, i64 0                ; &cloptr244300[0]
  %f244306 = ptrtoint void(i64,i64)* @lam244093 to i64                               ; fptr cast; i64(...)* -> i64
  store i64 %f244306, i64* %eptr244301                                               ; store fptr
  %arg234321 = ptrtoint i64* %cloptr244300 to i64                                    ; closure cast; i64* -> i64
  %cloptr244307 = call i64* @alloc(i64 8)                                            ; malloc
  %eptr244308 = getelementptr inbounds i64, i64* %cloptr244307, i64 0                ; &cloptr244307[0]
  %f244309 = ptrtoint void(i64,i64)* @lam241803 to i64                               ; fptr cast; i64(...)* -> i64
  store i64 %f244309, i64* %eptr244308                                               ; store fptr
  %arg234320 = ptrtoint i64* %cloptr244307 to i64                                    ; closure cast; i64* -> i64
  %sym241116 = add i64 0, 0                                                          ; quoted ()
  %x241117 = call i64 @prim_cons(i64 %arg234320, i64 %sym241116)                     ; call prim_cons
  %x241118 = call i64 @prim_cons(i64 %arg234321, i64 %x241117)                       ; call prim_cons
  %cloptr244310 = inttoptr i64 %Ycmb233580233756 to i64*                             ; closure/env cast; i64 -> i64*
  %i0ptr244311 = getelementptr inbounds i64, i64* %cloptr244310, i64 0               ; &cloptr244310[0]
  %f244313 = load i64, i64* %i0ptr244311, align 8                                    ; load; *i0ptr244311
  %fptr244312 = inttoptr i64 %f244313 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr244312(i64 %Ycmb233580233756, i64 %x241118)         ; tail call
  ret void

else244299:
  %many241125 = call i64 @const_init_string(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @str244314, i32 0, i32 0)); quoted string
  %fail241123 = call i64 @prim_halt(i64 %many241125)                                 ; call prim_halt
  %sym241128 = add i64 0, 0                                                          ; quoted ()
  %cloptr244315 = inttoptr i64 %fail241123 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr244316 = getelementptr inbounds i64, i64* %cloptr244315, i64 0               ; &cloptr244315[0]
  %f244318 = load i64, i64* %i0ptr244316, align 8                                    ; load; *i0ptr244316
  %fptr244317 = inttoptr i64 %f244318 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr244317(i64 %fail241123, i64 %sym241128)             ; tail call
  ret void
}


define void @lam244093(i64 %env244094, i64 %rvp241032) {
  %envptr244319 = inttoptr i64 %env244094 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr244320 = getelementptr inbounds i64, i64* %envptr244319, i64 4              ; &envptr244319[4]
  %Ycmb233580233756 = load i64, i64* %envptr244320, align 8                          ; load; *envptr244320
  %envptr244321 = inttoptr i64 %env244094 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr244322 = getelementptr inbounds i64, i64* %envptr244321, i64 3              ; &envptr244321[3]
  %_37take233587233763 = load i64, i64* %envptr244322, align 8                       ; load; *envptr244322
  %envptr244323 = inttoptr i64 %env244094 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr244324 = getelementptr inbounds i64, i64* %envptr244323, i64 2              ; &envptr244323[2]
  %_37map1233586233762 = load i64, i64* %envptr244324, align 8                       ; load; *envptr244324
  %envptr244325 = inttoptr i64 %env244094 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr244326 = getelementptr inbounds i64, i64* %envptr244325, i64 1              ; &envptr244325[1]
  %_37foldr1233585233761 = load i64, i64* %envptr244326, align 8                     ; load; *envptr244326
  %check241033 = call i64 @prim_null_63(i64 %rvp241032)                              ; call prim_null_63
  %cmp244327 = icmp eq i64 %check241033, 15                                          ; false?
  br i1 %cmp244327, label %else244329, label %then244328                             ; if

then244328:
  %msg241037 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str244330, i32 0, i32 0)); quoted string
  %abort241035 = call i64 @prim_halt(i64 %msg241037)                                 ; call prim_halt
  %sym241040 = add i64 0, 0                                                          ; quoted ()
  %cloptr244331 = inttoptr i64 %abort241035 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr244332 = getelementptr inbounds i64, i64* %cloptr244331, i64 0               ; &cloptr244331[0]
  %f244334 = load i64, i64* %i0ptr244332, align 8                                    ; load; *i0ptr244332
  %fptr244333 = inttoptr i64 %f244334 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr244333(i64 %abort241035, i64 %sym241040)            ; tail call
  ret void

else244329:
  %_95234077 = call i64 @prim_car(i64 %rvp241032)                                    ; call prim_car
  %rvp241022 = call i64 @prim_cdr(i64 %rvp241032)                                    ; call prim_cdr
  %check241023 = call i64 @prim_null_63(i64 %rvp241022)                              ; call prim_null_63
  %cmp244335 = icmp eq i64 %check241023, 15                                          ; false?
  br i1 %cmp244335, label %else244337, label %then244336                             ; if

then244336:
  %msg241027 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str244338, i32 0, i32 0)); quoted string
  %abort241025 = call i64 @prim_halt(i64 %msg241027)                                 ; call prim_halt
  %sym241030 = add i64 0, 0                                                          ; quoted ()
  %cloptr244339 = inttoptr i64 %abort241025 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr244340 = getelementptr inbounds i64, i64* %cloptr244339, i64 0               ; &cloptr244339[0]
  %f244342 = load i64, i64* %i0ptr244340, align 8                                    ; load; *i0ptr244340
  %fptr244341 = inttoptr i64 %f244342 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr244341(i64 %abort241025, i64 %sym241030)            ; tail call
  ret void

else244337:
  %rest241029 = call i64 @prim_cdr(i64 %rvp241022)                                   ; call prim_cdr
  %empty241024 = call i64 @prim_null_63(i64 %rest241029)                             ; call prim_null_63
  %cmp244343 = icmp eq i64 %empty241024, 15                                          ; false?
  br i1 %cmp244343, label %else244345, label %then244344                             ; if

then244344:
  %_37length233588233764 = call i64 @prim_car(i64 %rvp241022)                        ; call prim_car
  %na235884 = call i64 @prim_cdr(i64 %rvp241022)                                     ; call prim_cdr
  %cloptr244346 = call i64* @alloc(i64 48)                                           ; malloc
  %eptr244348 = getelementptr inbounds i64, i64* %cloptr244346, i64 1                ; &eptr244348[1]
  %eptr244349 = getelementptr inbounds i64, i64* %cloptr244346, i64 2                ; &eptr244349[2]
  %eptr244350 = getelementptr inbounds i64, i64* %cloptr244346, i64 3                ; &eptr244350[3]
  %eptr244351 = getelementptr inbounds i64, i64* %cloptr244346, i64 4                ; &eptr244351[4]
  %eptr244352 = getelementptr inbounds i64, i64* %cloptr244346, i64 5                ; &eptr244352[5]
  store i64 %_37length233588233764, i64* %eptr244348                                 ; *eptr244348 = %_37length233588233764
  store i64 %_37foldr1233585233761, i64* %eptr244349                                 ; *eptr244349 = %_37foldr1233585233761
  store i64 %_37map1233586233762, i64* %eptr244350                                   ; *eptr244350 = %_37map1233586233762
  store i64 %_37take233587233763, i64* %eptr244351                                   ; *eptr244351 = %_37take233587233763
  store i64 %Ycmb233580233756, i64* %eptr244352                                      ; *eptr244352 = %Ycmb233580233756
  %eptr244347 = getelementptr inbounds i64, i64* %cloptr244346, i64 0                ; &cloptr244346[0]
  %f244353 = ptrtoint void(i64,i64)* @lam244089 to i64                               ; fptr cast; i64(...)* -> i64
  store i64 %f244353, i64* %eptr244347                                               ; store fptr
  %arg234324 = ptrtoint i64* %cloptr244346 to i64                                    ; closure cast; i64* -> i64
  %cloptr244354 = call i64* @alloc(i64 8)                                            ; malloc
  %eptr244355 = getelementptr inbounds i64, i64* %cloptr244354, i64 0                ; &cloptr244354[0]
  %f244356 = ptrtoint void(i64,i64)* @lam241842 to i64                               ; fptr cast; i64(...)* -> i64
  store i64 %f244356, i64* %eptr244355                                               ; store fptr
  %arg234323 = ptrtoint i64* %cloptr244354 to i64                                    ; closure cast; i64* -> i64
  %sym241019 = add i64 0, 0                                                          ; quoted ()
  %x241020 = call i64 @prim_cons(i64 %arg234323, i64 %sym241019)                     ; call prim_cons
  %x241021 = call i64 @prim_cons(i64 %arg234324, i64 %x241020)                       ; call prim_cons
  %cloptr244357 = inttoptr i64 %Ycmb233580233756 to i64*                             ; closure/env cast; i64 -> i64*
  %i0ptr244358 = getelementptr inbounds i64, i64* %cloptr244357, i64 0               ; &cloptr244357[0]
  %f244360 = load i64, i64* %i0ptr244358, align 8                                    ; load; *i0ptr244358
  %fptr244359 = inttoptr i64 %f244360 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr244359(i64 %Ycmb233580233756, i64 %x241021)         ; tail call
  ret void

else244345:
  %many241028 = call i64 @const_init_string(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @str244361, i32 0, i32 0)); quoted string
  %fail241026 = call i64 @prim_halt(i64 %many241028)                                 ; call prim_halt
  %sym241031 = add i64 0, 0                                                          ; quoted ()
  %cloptr244362 = inttoptr i64 %fail241026 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr244363 = getelementptr inbounds i64, i64* %cloptr244362, i64 0               ; &cloptr244362[0]
  %f244365 = load i64, i64* %i0ptr244363, align 8                                    ; load; *i0ptr244363
  %fptr244364 = inttoptr i64 %f244365 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr244364(i64 %fail241026, i64 %sym241031)             ; tail call
  ret void
}


define void @lam244089(i64 %env244090, i64 %rvp240914) {
  %envptr244366 = inttoptr i64 %env244090 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr244367 = getelementptr inbounds i64, i64* %envptr244366, i64 5              ; &envptr244366[5]
  %Ycmb233580233756 = load i64, i64* %envptr244367, align 8                          ; load; *envptr244367
  %envptr244368 = inttoptr i64 %env244090 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr244369 = getelementptr inbounds i64, i64* %envptr244368, i64 4              ; &envptr244368[4]
  %_37take233587233763 = load i64, i64* %envptr244369, align 8                       ; load; *envptr244369
  %envptr244370 = inttoptr i64 %env244090 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr244371 = getelementptr inbounds i64, i64* %envptr244370, i64 3              ; &envptr244370[3]
  %_37map1233586233762 = load i64, i64* %envptr244371, align 8                       ; load; *envptr244371
  %envptr244372 = inttoptr i64 %env244090 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr244373 = getelementptr inbounds i64, i64* %envptr244372, i64 2              ; &envptr244372[2]
  %_37foldr1233585233761 = load i64, i64* %envptr244373, align 8                     ; load; *envptr244373
  %envptr244374 = inttoptr i64 %env244090 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr244375 = getelementptr inbounds i64, i64* %envptr244374, i64 1              ; &envptr244374[1]
  %_37length233588233764 = load i64, i64* %envptr244375, align 8                     ; load; *envptr244375
  %check240915 = call i64 @prim_null_63(i64 %rvp240914)                              ; call prim_null_63
  %cmp244376 = icmp eq i64 %check240915, 15                                          ; false?
  br i1 %cmp244376, label %else244378, label %then244377                             ; if

then244377:
  %msg240919 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str244379, i32 0, i32 0)); quoted string
  %abort240917 = call i64 @prim_halt(i64 %msg240919)                                 ; call prim_halt
  %sym240922 = add i64 0, 0                                                          ; quoted ()
  %cloptr244380 = inttoptr i64 %abort240917 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr244381 = getelementptr inbounds i64, i64* %cloptr244380, i64 0               ; &cloptr244380[0]
  %f244383 = load i64, i64* %i0ptr244381, align 8                                    ; load; *i0ptr244381
  %fptr244382 = inttoptr i64 %f244383 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr244382(i64 %abort240917, i64 %sym240922)            ; tail call
  ret void

else244378:
  %_95234078 = call i64 @prim_car(i64 %rvp240914)                                    ; call prim_car
  %rvp240904 = call i64 @prim_cdr(i64 %rvp240914)                                    ; call prim_cdr
  %check240905 = call i64 @prim_null_63(i64 %rvp240904)                              ; call prim_null_63
  %cmp244384 = icmp eq i64 %check240905, 15                                          ; false?
  br i1 %cmp244384, label %else244386, label %then244385                             ; if

then244385:
  %msg240909 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str244387, i32 0, i32 0)); quoted string
  %abort240907 = call i64 @prim_halt(i64 %msg240909)                                 ; call prim_halt
  %sym240912 = add i64 0, 0                                                          ; quoted ()
  %cloptr244388 = inttoptr i64 %abort240907 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr244389 = getelementptr inbounds i64, i64* %cloptr244388, i64 0               ; &cloptr244388[0]
  %f244391 = load i64, i64* %i0ptr244389, align 8                                    ; load; *i0ptr244389
  %fptr244390 = inttoptr i64 %f244391 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr244390(i64 %abort240907, i64 %sym240912)            ; tail call
  ret void

else244386:
  %rest240911 = call i64 @prim_cdr(i64 %rvp240904)                                   ; call prim_cdr
  %empty240906 = call i64 @prim_null_63(i64 %rest240911)                             ; call prim_null_63
  %cmp244392 = icmp eq i64 %empty240906, 15                                          ; false?
  br i1 %cmp244392, label %else244394, label %then244393                             ; if

then244393:
  %_37foldl1233589233765 = call i64 @prim_car(i64 %rvp240904)                        ; call prim_car
  %na235886 = call i64 @prim_cdr(i64 %rvp240904)                                     ; call prim_cdr
  %cloptr244395 = call i64* @alloc(i64 16)                                           ; malloc
  %eptr244397 = getelementptr inbounds i64, i64* %cloptr244395, i64 1                ; &eptr244397[1]
  store i64 %_37foldl1233589233765, i64* %eptr244397                                 ; *eptr244397 = %_37foldl1233589233765
  %eptr244396 = getelementptr inbounds i64, i64* %cloptr244395, i64 0                ; &cloptr244395[0]
  %f244398 = ptrtoint void(i64,i64)* @lam244085 to i64                               ; fptr cast; i64(...)* -> i64
  store i64 %f244398, i64* %eptr244396                                               ; store fptr
  %_37last233606233782 = ptrtoint i64* %cloptr244395 to i64                          ; closure cast; i64* -> i64
  %cloptr244399 = call i64* @alloc(i64 24)                                           ; malloc
  %eptr244401 = getelementptr inbounds i64, i64* %cloptr244399, i64 1                ; &eptr244401[1]
  %eptr244402 = getelementptr inbounds i64, i64* %cloptr244399, i64 2                ; &eptr244402[2]
  store i64 %_37length233588233764, i64* %eptr244401                                 ; *eptr244401 = %_37length233588233764
  store i64 %_37take233587233763, i64* %eptr244402                                   ; *eptr244402 = %_37take233587233763
  %eptr244400 = getelementptr inbounds i64, i64* %cloptr244399, i64 0                ; &cloptr244399[0]
  %f244403 = ptrtoint void(i64,i64)* @lam244063 to i64                               ; fptr cast; i64(...)* -> i64
  store i64 %f244403, i64* %eptr244400                                               ; store fptr
  %_37drop_45right233607233783 = ptrtoint i64* %cloptr244399 to i64                  ; closure cast; i64* -> i64
  %cloptr244404 = call i64* @alloc(i64 56)                                           ; malloc
  %eptr244406 = getelementptr inbounds i64, i64* %cloptr244404, i64 1                ; &eptr244406[1]
  %eptr244407 = getelementptr inbounds i64, i64* %cloptr244404, i64 2                ; &eptr244407[2]
  %eptr244408 = getelementptr inbounds i64, i64* %cloptr244404, i64 3                ; &eptr244408[3]
  %eptr244409 = getelementptr inbounds i64, i64* %cloptr244404, i64 4                ; &eptr244409[4]
  %eptr244410 = getelementptr inbounds i64, i64* %cloptr244404, i64 5                ; &eptr244410[5]
  %eptr244411 = getelementptr inbounds i64, i64* %cloptr244404, i64 6                ; &eptr244411[6]
  store i64 %_37foldl1233589233765, i64* %eptr244406                                 ; *eptr244406 = %_37foldl1233589233765
  store i64 %_37drop_45right233607233783, i64* %eptr244407                           ; *eptr244407 = %_37drop_45right233607233783
  store i64 %_37last233606233782, i64* %eptr244408                                   ; *eptr244408 = %_37last233606233782
  store i64 %_37length233588233764, i64* %eptr244409                                 ; *eptr244409 = %_37length233588233764
  store i64 %_37foldr1233585233761, i64* %eptr244410                                 ; *eptr244410 = %_37foldr1233585233761
  store i64 %Ycmb233580233756, i64* %eptr244411                                      ; *eptr244411 = %Ycmb233580233756
  %eptr244405 = getelementptr inbounds i64, i64* %cloptr244404, i64 0                ; &cloptr244404[0]
  %f244412 = ptrtoint void(i64,i64)* @lam244043 to i64                               ; fptr cast; i64(...)* -> i64
  store i64 %f244412, i64* %eptr244405                                               ; store fptr
  %arg234344 = ptrtoint i64* %cloptr244404 to i64                                    ; closure cast; i64* -> i64
  %cloptr244413 = call i64* @alloc(i64 24)                                           ; malloc
  %eptr244415 = getelementptr inbounds i64, i64* %cloptr244413, i64 1                ; &eptr244415[1]
  %eptr244416 = getelementptr inbounds i64, i64* %cloptr244413, i64 2                ; &eptr244416[2]
  store i64 %_37foldr1233585233761, i64* %eptr244415                                 ; *eptr244415 = %_37foldr1233585233761
  store i64 %_37map1233586233762, i64* %eptr244416                                   ; *eptr244416 = %_37map1233586233762
  %eptr244414 = getelementptr inbounds i64, i64* %cloptr244413, i64 0                ; &cloptr244413[0]
  %f244417 = ptrtoint void(i64,i64)* @lam241973 to i64                               ; fptr cast; i64(...)* -> i64
  store i64 %f244417, i64* %eptr244414                                               ; store fptr
  %arg234343 = ptrtoint i64* %cloptr244413 to i64                                    ; closure cast; i64* -> i64
  %sym240901 = add i64 0, 0                                                          ; quoted ()
  %x240902 = call i64 @prim_cons(i64 %arg234343, i64 %sym240901)                     ; call prim_cons
  %x240903 = call i64 @prim_cons(i64 %arg234344, i64 %x240902)                       ; call prim_cons
  %cloptr244418 = inttoptr i64 %Ycmb233580233756 to i64*                             ; closure/env cast; i64 -> i64*
  %i0ptr244419 = getelementptr inbounds i64, i64* %cloptr244418, i64 0               ; &cloptr244418[0]
  %f244421 = load i64, i64* %i0ptr244419, align 8                                    ; load; *i0ptr244419
  %fptr244420 = inttoptr i64 %f244421 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr244420(i64 %Ycmb233580233756, i64 %x240903)         ; tail call
  ret void

else244394:
  %many240910 = call i64 @const_init_string(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @str244422, i32 0, i32 0)); quoted string
  %fail240908 = call i64 @prim_halt(i64 %many240910)                                 ; call prim_halt
  %sym240913 = add i64 0, 0                                                          ; quoted ()
  %cloptr244423 = inttoptr i64 %fail240908 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr244424 = getelementptr inbounds i64, i64* %cloptr244423, i64 0               ; &cloptr244423[0]
  %f244426 = load i64, i64* %i0ptr244424, align 8                                    ; load; *i0ptr244424
  %fptr244425 = inttoptr i64 %f244426 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr244425(i64 %fail240908, i64 %sym240913)             ; tail call
  ret void
}


define void @lam244085(i64 %env244086, i64 %rvp235937) {
  %envptr244427 = inttoptr i64 %env244086 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr244428 = getelementptr inbounds i64, i64* %envptr244427, i64 1              ; &envptr244427[1]
  %_37foldl1233589233765 = load i64, i64* %envptr244428, align 8                     ; load; *envptr244428
  %check235938 = call i64 @prim_null_63(i64 %rvp235937)                              ; call prim_null_63
  %cmp244429 = icmp eq i64 %check235938, 15                                          ; false?
  br i1 %cmp244429, label %else244431, label %then244430                             ; if

then244430:
  %msg235942 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str244432, i32 0, i32 0)); quoted string
  %abort235940 = call i64 @prim_halt(i64 %msg235942)                                 ; call prim_halt
  %sym235945 = add i64 0, 0                                                          ; quoted ()
  %cloptr244433 = inttoptr i64 %abort235940 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr244434 = getelementptr inbounds i64, i64* %cloptr244433, i64 0               ; &cloptr244433[0]
  %f244436 = load i64, i64* %i0ptr244434, align 8                                    ; load; *i0ptr244434
  %fptr244435 = inttoptr i64 %f244436 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr244435(i64 %abort235940, i64 %sym235945)            ; tail call
  ret void

else244431:
  %cont234079 = call i64 @prim_car(i64 %rvp235937)                                   ; call prim_car
  %rvp235927 = call i64 @prim_cdr(i64 %rvp235937)                                    ; call prim_cdr
  %check235928 = call i64 @prim_null_63(i64 %rvp235927)                              ; call prim_null_63
  %cmp244437 = icmp eq i64 %check235928, 15                                          ; false?
  br i1 %cmp244437, label %else244439, label %then244438                             ; if

then244438:
  %msg235932 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str244440, i32 0, i32 0)); quoted string
  %abort235930 = call i64 @prim_halt(i64 %msg235932)                                 ; call prim_halt
  %sym235935 = add i64 0, 0                                                          ; quoted ()
  %cloptr244441 = inttoptr i64 %abort235930 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr244442 = getelementptr inbounds i64, i64* %cloptr244441, i64 0               ; &cloptr244441[0]
  %f244444 = load i64, i64* %i0ptr244442, align 8                                    ; load; *i0ptr244442
  %fptr244443 = inttoptr i64 %f244444 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr244443(i64 %abort235930, i64 %sym235935)            ; tail call
  ret void

else244439:
  %rest235934 = call i64 @prim_cdr(i64 %rvp235927)                                   ; call prim_cdr
  %empty235929 = call i64 @prim_null_63(i64 %rest235934)                             ; call prim_null_63
  %cmp244445 = icmp eq i64 %empty235929, 15                                          ; false?
  br i1 %cmp244445, label %else244447, label %then244446                             ; if

then244446:
  %lst233609233785 = call i64 @prim_car(i64 %rvp235927)                              ; call prim_car
  %na235888 = call i64 @prim_cdr(i64 %rvp235927)                                     ; call prim_cdr
  %cloptr244448 = call i64* @alloc(i64 8)                                            ; malloc
  %eptr244449 = getelementptr inbounds i64, i64* %cloptr244448, i64 0                ; &cloptr244448[0]
  %f244450 = ptrtoint void(i64,i64)* @lam244081 to i64                               ; fptr cast; i64(...)* -> i64
  store i64 %f244450, i64* %eptr244449                                               ; store fptr
  %arg234328 = ptrtoint i64* %cloptr244448 to i64                                    ; closure cast; i64* -> i64
  %arg234327 = add i64 0, 0                                                          ; quoted ()
  %sym235922 = add i64 0, 0                                                          ; quoted ()
  %x235923 = call i64 @prim_cons(i64 %lst233609233785, i64 %sym235922)               ; call prim_cons
  %x235924 = call i64 @prim_cons(i64 %arg234327, i64 %x235923)                       ; call prim_cons
  %x235925 = call i64 @prim_cons(i64 %arg234328, i64 %x235924)                       ; call prim_cons
  %x235926 = call i64 @prim_cons(i64 %cont234079, i64 %x235925)                      ; call prim_cons
  %cloptr244451 = inttoptr i64 %_37foldl1233589233765 to i64*                        ; closure/env cast; i64 -> i64*
  %i0ptr244452 = getelementptr inbounds i64, i64* %cloptr244451, i64 0               ; &cloptr244451[0]
  %f244454 = load i64, i64* %i0ptr244452, align 8                                    ; load; *i0ptr244452
  %fptr244453 = inttoptr i64 %f244454 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr244453(i64 %_37foldl1233589233765, i64 %x235926)    ; tail call
  ret void

else244447:
  %many235933 = call i64 @const_init_string(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @str244455, i32 0, i32 0)); quoted string
  %fail235931 = call i64 @prim_halt(i64 %many235933)                                 ; call prim_halt
  %sym235936 = add i64 0, 0                                                          ; quoted ()
  %cloptr244456 = inttoptr i64 %fail235931 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr244457 = getelementptr inbounds i64, i64* %cloptr244456, i64 0               ; &cloptr244456[0]
  %f244459 = load i64, i64* %i0ptr244457, align 8                                    ; load; *i0ptr244457
  %fptr244458 = inttoptr i64 %f244459 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr244458(i64 %fail235931, i64 %sym235936)             ; tail call
  ret void
}


define void @lam244081(i64 %env244082, i64 %rvp235913) {
  %check235914 = call i64 @prim_null_63(i64 %rvp235913)                              ; call prim_null_63
  %cmp244460 = icmp eq i64 %check235914, 15                                          ; false?
  br i1 %cmp244460, label %else244462, label %then244461                             ; if

then244461:
  %msg235918 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str244463, i32 0, i32 0)); quoted string
  %abort235916 = call i64 @prim_halt(i64 %msg235918)                                 ; call prim_halt
  %sym235921 = add i64 0, 0                                                          ; quoted ()
  %cloptr244464 = inttoptr i64 %abort235916 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr244465 = getelementptr inbounds i64, i64* %cloptr244464, i64 0               ; &cloptr244464[0]
  %f244467 = load i64, i64* %i0ptr244465, align 8                                    ; load; *i0ptr244465
  %fptr244466 = inttoptr i64 %f244467 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr244466(i64 %abort235916, i64 %sym235921)            ; tail call
  ret void

else244462:
  %cont234080 = call i64 @prim_car(i64 %rvp235913)                                   ; call prim_car
  %rvp235904 = call i64 @prim_cdr(i64 %rvp235913)                                    ; call prim_cdr
  %check235905 = call i64 @prim_null_63(i64 %rvp235904)                              ; call prim_null_63
  %cmp244468 = icmp eq i64 %check235905, 15                                          ; false?
  br i1 %cmp244468, label %else244470, label %then244469                             ; if

then244469:
  %msg235909 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str244471, i32 0, i32 0)); quoted string
  %abort235907 = call i64 @prim_halt(i64 %msg235909)                                 ; call prim_halt
  %sym235912 = add i64 0, 0                                                          ; quoted ()
  %cloptr244472 = inttoptr i64 %abort235907 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr244473 = getelementptr inbounds i64, i64* %cloptr244472, i64 0               ; &cloptr244472[0]
  %f244475 = load i64, i64* %i0ptr244473, align 8                                    ; load; *i0ptr244473
  %fptr244474 = inttoptr i64 %f244475 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr244474(i64 %abort235907, i64 %sym235912)            ; tail call
  ret void

else244470:
  %x233610233786 = call i64 @prim_car(i64 %rvp235904)                                ; call prim_car
  %rvp235894 = call i64 @prim_cdr(i64 %rvp235904)                                    ; call prim_cdr
  %check235895 = call i64 @prim_null_63(i64 %rvp235894)                              ; call prim_null_63
  %cmp244476 = icmp eq i64 %check235895, 15                                          ; false?
  br i1 %cmp244476, label %else244478, label %then244477                             ; if

then244477:
  %msg235899 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str244479, i32 0, i32 0)); quoted string
  %abort235897 = call i64 @prim_halt(i64 %msg235899)                                 ; call prim_halt
  %sym235902 = add i64 0, 0                                                          ; quoted ()
  %cloptr244480 = inttoptr i64 %abort235897 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr244481 = getelementptr inbounds i64, i64* %cloptr244480, i64 0               ; &cloptr244480[0]
  %f244483 = load i64, i64* %i0ptr244481, align 8                                    ; load; *i0ptr244481
  %fptr244482 = inttoptr i64 %f244483 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr244482(i64 %abort235897, i64 %sym235902)            ; tail call
  ret void

else244478:
  %rest235901 = call i64 @prim_cdr(i64 %rvp235894)                                   ; call prim_cdr
  %empty235896 = call i64 @prim_null_63(i64 %rest235901)                             ; call prim_null_63
  %cmp244484 = icmp eq i64 %empty235896, 15                                          ; false?
  br i1 %cmp244484, label %else244486, label %then244485                             ; if

then244485:
  %y233611233787 = call i64 @prim_car(i64 %rvp235894)                                ; call prim_car
  %na235890 = call i64 @prim_cdr(i64 %rvp235894)                                     ; call prim_cdr
  %arg234332 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %sym235891 = add i64 0, 0                                                          ; quoted ()
  %x235892 = call i64 @prim_cons(i64 %x233610233786, i64 %sym235891)                 ; call prim_cons
  %x235893 = call i64 @prim_cons(i64 %arg234332, i64 %x235892)                       ; call prim_cons
  %cloptr244487 = inttoptr i64 %cont234080 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr244488 = getelementptr inbounds i64, i64* %cloptr244487, i64 0               ; &cloptr244487[0]
  %f244490 = load i64, i64* %i0ptr244488, align 8                                    ; load; *i0ptr244488
  %fptr244489 = inttoptr i64 %f244490 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr244489(i64 %cont234080, i64 %x235893)               ; tail call
  ret void

else244486:
  %many235900 = call i64 @const_init_string(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @str244491, i32 0, i32 0)); quoted string
  %fail235898 = call i64 @prim_halt(i64 %many235900)                                 ; call prim_halt
  %sym235903 = add i64 0, 0                                                          ; quoted ()
  %cloptr244492 = inttoptr i64 %fail235898 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr244493 = getelementptr inbounds i64, i64* %cloptr244492, i64 0               ; &cloptr244492[0]
  %f244495 = load i64, i64* %i0ptr244493, align 8                                    ; load; *i0ptr244493
  %fptr244494 = inttoptr i64 %f244495 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr244494(i64 %fail235898, i64 %sym235903)             ; tail call
  ret void
}


define void @lam244063(i64 %env244064, i64 %rvp235995) {
  %envptr244496 = inttoptr i64 %env244064 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr244497 = getelementptr inbounds i64, i64* %envptr244496, i64 2              ; &envptr244496[2]
  %_37take233587233763 = load i64, i64* %envptr244497, align 8                       ; load; *envptr244497
  %envptr244498 = inttoptr i64 %env244064 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr244499 = getelementptr inbounds i64, i64* %envptr244498, i64 1              ; &envptr244498[1]
  %_37length233588233764 = load i64, i64* %envptr244499, align 8                     ; load; *envptr244499
  %check235996 = call i64 @prim_null_63(i64 %rvp235995)                              ; call prim_null_63
  %cmp244500 = icmp eq i64 %check235996, 15                                          ; false?
  br i1 %cmp244500, label %else244502, label %then244501                             ; if

then244501:
  %msg236000 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str244503, i32 0, i32 0)); quoted string
  %abort235998 = call i64 @prim_halt(i64 %msg236000)                                 ; call prim_halt
  %sym236003 = add i64 0, 0                                                          ; quoted ()
  %cloptr244504 = inttoptr i64 %abort235998 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr244505 = getelementptr inbounds i64, i64* %cloptr244504, i64 0               ; &cloptr244504[0]
  %f244507 = load i64, i64* %i0ptr244505, align 8                                    ; load; *i0ptr244505
  %fptr244506 = inttoptr i64 %f244507 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr244506(i64 %abort235998, i64 %sym236003)            ; tail call
  ret void

else244502:
  %cont234081 = call i64 @prim_car(i64 %rvp235995)                                   ; call prim_car
  %rvp235986 = call i64 @prim_cdr(i64 %rvp235995)                                    ; call prim_cdr
  %check235987 = call i64 @prim_null_63(i64 %rvp235986)                              ; call prim_null_63
  %cmp244508 = icmp eq i64 %check235987, 15                                          ; false?
  br i1 %cmp244508, label %else244510, label %then244509                             ; if

then244509:
  %msg235991 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str244511, i32 0, i32 0)); quoted string
  %abort235989 = call i64 @prim_halt(i64 %msg235991)                                 ; call prim_halt
  %sym235994 = add i64 0, 0                                                          ; quoted ()
  %cloptr244512 = inttoptr i64 %abort235989 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr244513 = getelementptr inbounds i64, i64* %cloptr244512, i64 0               ; &cloptr244512[0]
  %f244515 = load i64, i64* %i0ptr244513, align 8                                    ; load; *i0ptr244513
  %fptr244514 = inttoptr i64 %f244515 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr244514(i64 %abort235989, i64 %sym235994)            ; tail call
  ret void

else244510:
  %lst233612233788 = call i64 @prim_car(i64 %rvp235986)                              ; call prim_car
  %rvp235976 = call i64 @prim_cdr(i64 %rvp235986)                                    ; call prim_cdr
  %check235977 = call i64 @prim_null_63(i64 %rvp235976)                              ; call prim_null_63
  %cmp244516 = icmp eq i64 %check235977, 15                                          ; false?
  br i1 %cmp244516, label %else244518, label %then244517                             ; if

then244517:
  %msg235981 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str244519, i32 0, i32 0)); quoted string
  %abort235979 = call i64 @prim_halt(i64 %msg235981)                                 ; call prim_halt
  %sym235984 = add i64 0, 0                                                          ; quoted ()
  %cloptr244520 = inttoptr i64 %abort235979 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr244521 = getelementptr inbounds i64, i64* %cloptr244520, i64 0               ; &cloptr244520[0]
  %f244523 = load i64, i64* %i0ptr244521, align 8                                    ; load; *i0ptr244521
  %fptr244522 = inttoptr i64 %f244523 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr244522(i64 %abort235979, i64 %sym235984)            ; tail call
  ret void

else244518:
  %rest235983 = call i64 @prim_cdr(i64 %rvp235976)                                   ; call prim_cdr
  %empty235978 = call i64 @prim_null_63(i64 %rest235983)                             ; call prim_null_63
  %cmp244524 = icmp eq i64 %empty235978, 15                                          ; false?
  br i1 %cmp244524, label %else244526, label %then244525                             ; if

then244525:
  %n233613233789 = call i64 @prim_car(i64 %rvp235976)                                ; call prim_car
  %na235947 = call i64 @prim_cdr(i64 %rvp235976)                                     ; call prim_cdr
  %cloptr244527 = call i64* @alloc(i64 40)                                           ; malloc
  %eptr244529 = getelementptr inbounds i64, i64* %cloptr244527, i64 1                ; &eptr244529[1]
  %eptr244530 = getelementptr inbounds i64, i64* %cloptr244527, i64 2                ; &eptr244530[2]
  %eptr244531 = getelementptr inbounds i64, i64* %cloptr244527, i64 3                ; &eptr244531[3]
  %eptr244532 = getelementptr inbounds i64, i64* %cloptr244527, i64 4                ; &eptr244532[4]
  store i64 %lst233612233788, i64* %eptr244529                                       ; *eptr244529 = %lst233612233788
  store i64 %cont234081, i64* %eptr244530                                            ; *eptr244530 = %cont234081
  store i64 %_37take233587233763, i64* %eptr244531                                   ; *eptr244531 = %_37take233587233763
  store i64 %n233613233789, i64* %eptr244532                                         ; *eptr244532 = %n233613233789
  %eptr244528 = getelementptr inbounds i64, i64* %cloptr244527, i64 0                ; &cloptr244527[0]
  %f244533 = ptrtoint void(i64,i64)* @lam244059 to i64                               ; fptr cast; i64(...)* -> i64
  store i64 %f244533, i64* %eptr244528                                               ; store fptr
  %arg234335 = ptrtoint i64* %cloptr244527 to i64                                    ; closure cast; i64* -> i64
  %sym235973 = add i64 0, 0                                                          ; quoted ()
  %x235974 = call i64 @prim_cons(i64 %lst233612233788, i64 %sym235973)               ; call prim_cons
  %x235975 = call i64 @prim_cons(i64 %arg234335, i64 %x235974)                       ; call prim_cons
  %cloptr244534 = inttoptr i64 %_37length233588233764 to i64*                        ; closure/env cast; i64 -> i64*
  %i0ptr244535 = getelementptr inbounds i64, i64* %cloptr244534, i64 0               ; &cloptr244534[0]
  %f244537 = load i64, i64* %i0ptr244535, align 8                                    ; load; *i0ptr244535
  %fptr244536 = inttoptr i64 %f244537 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr244536(i64 %_37length233588233764, i64 %x235975)    ; tail call
  ret void

else244526:
  %many235982 = call i64 @const_init_string(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @str244538, i32 0, i32 0)); quoted string
  %fail235980 = call i64 @prim_halt(i64 %many235982)                                 ; call prim_halt
  %sym235985 = add i64 0, 0                                                          ; quoted ()
  %cloptr244539 = inttoptr i64 %fail235980 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr244540 = getelementptr inbounds i64, i64* %cloptr244539, i64 0               ; &cloptr244539[0]
  %f244542 = load i64, i64* %i0ptr244540, align 8                                    ; load; *i0ptr244540
  %fptr244541 = inttoptr i64 %f244542 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr244541(i64 %fail235980, i64 %sym235985)             ; tail call
  ret void
}


define void @lam244059(i64 %env244060, i64 %rvp235964) {
  %envptr244543 = inttoptr i64 %env244060 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr244544 = getelementptr inbounds i64, i64* %envptr244543, i64 4              ; &envptr244543[4]
  %n233613233789 = load i64, i64* %envptr244544, align 8                             ; load; *envptr244544
  %envptr244545 = inttoptr i64 %env244060 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr244546 = getelementptr inbounds i64, i64* %envptr244545, i64 3              ; &envptr244545[3]
  %_37take233587233763 = load i64, i64* %envptr244546, align 8                       ; load; *envptr244546
  %envptr244547 = inttoptr i64 %env244060 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr244548 = getelementptr inbounds i64, i64* %envptr244547, i64 2              ; &envptr244547[2]
  %cont234081 = load i64, i64* %envptr244548, align 8                                ; load; *envptr244548
  %envptr244549 = inttoptr i64 %env244060 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr244550 = getelementptr inbounds i64, i64* %envptr244549, i64 1              ; &envptr244549[1]
  %lst233612233788 = load i64, i64* %envptr244550, align 8                           ; load; *envptr244550
  %check235965 = call i64 @prim_null_63(i64 %rvp235964)                              ; call prim_null_63
  %cmp244551 = icmp eq i64 %check235965, 15                                          ; false?
  br i1 %cmp244551, label %else244553, label %then244552                             ; if

then244552:
  %msg235969 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str244554, i32 0, i32 0)); quoted string
  %abort235967 = call i64 @prim_halt(i64 %msg235969)                                 ; call prim_halt
  %sym235972 = add i64 0, 0                                                          ; quoted ()
  %cloptr244555 = inttoptr i64 %abort235967 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr244556 = getelementptr inbounds i64, i64* %cloptr244555, i64 0               ; &cloptr244555[0]
  %f244558 = load i64, i64* %i0ptr244556, align 8                                    ; load; *i0ptr244556
  %fptr244557 = inttoptr i64 %f244558 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr244557(i64 %abort235967, i64 %sym235972)            ; tail call
  ret void

else244553:
  %_95234082 = call i64 @prim_car(i64 %rvp235964)                                    ; call prim_car
  %rvp235954 = call i64 @prim_cdr(i64 %rvp235964)                                    ; call prim_cdr
  %check235955 = call i64 @prim_null_63(i64 %rvp235954)                              ; call prim_null_63
  %cmp244559 = icmp eq i64 %check235955, 15                                          ; false?
  br i1 %cmp244559, label %else244561, label %then244560                             ; if

then244560:
  %msg235959 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str244562, i32 0, i32 0)); quoted string
  %abort235957 = call i64 @prim_halt(i64 %msg235959)                                 ; call prim_halt
  %sym235962 = add i64 0, 0                                                          ; quoted ()
  %cloptr244563 = inttoptr i64 %abort235957 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr244564 = getelementptr inbounds i64, i64* %cloptr244563, i64 0               ; &cloptr244563[0]
  %f244566 = load i64, i64* %i0ptr244564, align 8                                    ; load; *i0ptr244564
  %fptr244565 = inttoptr i64 %f244566 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr244565(i64 %abort235957, i64 %sym235962)            ; tail call
  ret void

else244561:
  %rest235961 = call i64 @prim_cdr(i64 %rvp235954)                                   ; call prim_cdr
  %empty235956 = call i64 @prim_null_63(i64 %rest235961)                             ; call prim_null_63
  %cmp244567 = icmp eq i64 %empty235956, 15                                          ; false?
  br i1 %cmp244567, label %else244569, label %then244568                             ; if

then244568:
  %a233960 = call i64 @prim_car(i64 %rvp235954)                                      ; call prim_car
  %na235949 = call i64 @prim_cdr(i64 %rvp235954)                                     ; call prim_cdr
  %a233961 = call i64 @prim__45(i64 %a233960, i64 %n233613233789)                    ; call prim__45
  %sym235950 = add i64 0, 0                                                          ; quoted ()
  %x235951 = call i64 @prim_cons(i64 %a233961, i64 %sym235950)                       ; call prim_cons
  %x235952 = call i64 @prim_cons(i64 %lst233612233788, i64 %x235951)                 ; call prim_cons
  %x235953 = call i64 @prim_cons(i64 %cont234081, i64 %x235952)                      ; call prim_cons
  %cloptr244570 = inttoptr i64 %_37take233587233763 to i64*                          ; closure/env cast; i64 -> i64*
  %i0ptr244571 = getelementptr inbounds i64, i64* %cloptr244570, i64 0               ; &cloptr244570[0]
  %f244573 = load i64, i64* %i0ptr244571, align 8                                    ; load; *i0ptr244571
  %fptr244572 = inttoptr i64 %f244573 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr244572(i64 %_37take233587233763, i64 %x235953)      ; tail call
  ret void

else244569:
  %many235960 = call i64 @const_init_string(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @str244574, i32 0, i32 0)); quoted string
  %fail235958 = call i64 @prim_halt(i64 %many235960)                                 ; call prim_halt
  %sym235963 = add i64 0, 0                                                          ; quoted ()
  %cloptr244575 = inttoptr i64 %fail235958 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr244576 = getelementptr inbounds i64, i64* %cloptr244575, i64 0               ; &cloptr244575[0]
  %f244578 = load i64, i64* %i0ptr244576, align 8                                    ; load; *i0ptr244576
  %fptr244577 = inttoptr i64 %f244578 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr244577(i64 %fail235958, i64 %sym235963)             ; tail call
  ret void
}


define void @lam244043(i64 %env244044, i64 %rvp240577) {
  %envptr244579 = inttoptr i64 %env244044 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr244580 = getelementptr inbounds i64, i64* %envptr244579, i64 6              ; &envptr244579[6]
  %Ycmb233580233756 = load i64, i64* %envptr244580, align 8                          ; load; *envptr244580
  %envptr244581 = inttoptr i64 %env244044 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr244582 = getelementptr inbounds i64, i64* %envptr244581, i64 5              ; &envptr244581[5]
  %_37foldr1233585233761 = load i64, i64* %envptr244582, align 8                     ; load; *envptr244582
  %envptr244583 = inttoptr i64 %env244044 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr244584 = getelementptr inbounds i64, i64* %envptr244583, i64 4              ; &envptr244583[4]
  %_37length233588233764 = load i64, i64* %envptr244584, align 8                     ; load; *envptr244584
  %envptr244585 = inttoptr i64 %env244044 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr244586 = getelementptr inbounds i64, i64* %envptr244585, i64 3              ; &envptr244585[3]
  %_37last233606233782 = load i64, i64* %envptr244586, align 8                       ; load; *envptr244586
  %envptr244587 = inttoptr i64 %env244044 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr244588 = getelementptr inbounds i64, i64* %envptr244587, i64 2              ; &envptr244587[2]
  %_37drop_45right233607233783 = load i64, i64* %envptr244588, align 8               ; load; *envptr244588
  %envptr244589 = inttoptr i64 %env244044 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr244590 = getelementptr inbounds i64, i64* %envptr244589, i64 1              ; &envptr244589[1]
  %_37foldl1233589233765 = load i64, i64* %envptr244590, align 8                     ; load; *envptr244590
  %check240578 = call i64 @prim_null_63(i64 %rvp240577)                              ; call prim_null_63
  %cmp244591 = icmp eq i64 %check240578, 15                                          ; false?
  br i1 %cmp244591, label %else244593, label %then244592                             ; if

then244592:
  %msg240582 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str244594, i32 0, i32 0)); quoted string
  %abort240580 = call i64 @prim_halt(i64 %msg240582)                                 ; call prim_halt
  %sym240585 = add i64 0, 0                                                          ; quoted ()
  %cloptr244595 = inttoptr i64 %abort240580 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr244596 = getelementptr inbounds i64, i64* %cloptr244595, i64 0               ; &cloptr244595[0]
  %f244598 = load i64, i64* %i0ptr244596, align 8                                    ; load; *i0ptr244596
  %fptr244597 = inttoptr i64 %f244598 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr244597(i64 %abort240580, i64 %sym240585)            ; tail call
  ret void

else244593:
  %_95234083 = call i64 @prim_car(i64 %rvp240577)                                    ; call prim_car
  %rvp240567 = call i64 @prim_cdr(i64 %rvp240577)                                    ; call prim_cdr
  %check240568 = call i64 @prim_null_63(i64 %rvp240567)                              ; call prim_null_63
  %cmp244599 = icmp eq i64 %check240568, 15                                          ; false?
  br i1 %cmp244599, label %else244601, label %then244600                             ; if

then244600:
  %msg240572 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str244602, i32 0, i32 0)); quoted string
  %abort240570 = call i64 @prim_halt(i64 %msg240572)                                 ; call prim_halt
  %sym240575 = add i64 0, 0                                                          ; quoted ()
  %cloptr244603 = inttoptr i64 %abort240570 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr244604 = getelementptr inbounds i64, i64* %cloptr244603, i64 0               ; &cloptr244603[0]
  %f244606 = load i64, i64* %i0ptr244604, align 8                                    ; load; *i0ptr244604
  %fptr244605 = inttoptr i64 %f244606 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr244605(i64 %abort240570, i64 %sym240575)            ; tail call
  ret void

else244601:
  %rest240574 = call i64 @prim_cdr(i64 %rvp240567)                                   ; call prim_cdr
  %empty240569 = call i64 @prim_null_63(i64 %rest240574)                             ; call prim_null_63
  %cmp244607 = icmp eq i64 %empty240569, 15                                          ; false?
  br i1 %cmp244607, label %else244609, label %then244608                             ; if

then244608:
  %_37foldr233608233784 = call i64 @prim_car(i64 %rvp240567)                         ; call prim_car
  %na236005 = call i64 @prim_cdr(i64 %rvp240567)                                     ; call prim_cdr
  %cloptr244610 = call i64* @alloc(i64 16)                                           ; malloc
  %eptr244612 = getelementptr inbounds i64, i64* %cloptr244610, i64 1                ; &eptr244612[1]
  store i64 %_37foldr1233585233761, i64* %eptr244612                                 ; *eptr244612 = %_37foldr1233585233761
  %eptr244611 = getelementptr inbounds i64, i64* %cloptr244610, i64 0                ; &cloptr244610[0]
  %f244613 = ptrtoint void(i64,i64)* @lam244039 to i64                               ; fptr cast; i64(...)* -> i64
  store i64 %f244613, i64* %eptr244611                                               ; store fptr
  %_37map1233627233803 = ptrtoint i64* %cloptr244610 to i64                          ; closure cast; i64* -> i64
  %cloptr244614 = call i64* @alloc(i64 32)                                           ; malloc
  %eptr244616 = getelementptr inbounds i64, i64* %cloptr244614, i64 1                ; &eptr244616[1]
  %eptr244617 = getelementptr inbounds i64, i64* %cloptr244614, i64 2                ; &eptr244617[2]
  %eptr244618 = getelementptr inbounds i64, i64* %cloptr244614, i64 3                ; &eptr244618[3]
  store i64 %_37drop_45right233607233783, i64* %eptr244616                           ; *eptr244616 = %_37drop_45right233607233783
  store i64 %_37last233606233782, i64* %eptr244617                                   ; *eptr244617 = %_37last233606233782
  store i64 %_37foldr233608233784, i64* %eptr244618                                  ; *eptr244618 = %_37foldr233608233784
  %eptr244615 = getelementptr inbounds i64, i64* %cloptr244614, i64 0                ; &cloptr244614[0]
  %f244619 = ptrtoint void(i64,i64)* @lam244006 to i64                               ; fptr cast; i64(...)* -> i64
  store i64 %f244619, i64* %eptr244615                                               ; store fptr
  %_37map233628233804 = ptrtoint i64* %cloptr244614 to i64                           ; closure cast; i64* -> i64
  %cloptr244620 = call i64* @alloc(i64 24)                                           ; malloc
  %eptr244622 = getelementptr inbounds i64, i64* %cloptr244620, i64 1                ; &eptr244622[1]
  %eptr244623 = getelementptr inbounds i64, i64* %cloptr244620, i64 2                ; &eptr244623[2]
  store i64 %_37foldl1233589233765, i64* %eptr244622                                 ; *eptr244622 = %_37foldl1233589233765
  store i64 %_37length233588233764, i64* %eptr244623                                 ; *eptr244623 = %_37length233588233764
  %eptr244621 = getelementptr inbounds i64, i64* %cloptr244620, i64 0                ; &cloptr244620[0]
  %f244624 = ptrtoint void(i64,i64)* @lam243972 to i64                               ; fptr cast; i64(...)* -> i64
  store i64 %f244624, i64* %eptr244621                                               ; store fptr
  %arg234388 = ptrtoint i64* %cloptr244620 to i64                                    ; closure cast; i64* -> i64
  %cloptr244625 = call i64* @alloc(i64 32)                                           ; malloc
  %eptr244627 = getelementptr inbounds i64, i64* %cloptr244625, i64 1                ; &eptr244627[1]
  %eptr244628 = getelementptr inbounds i64, i64* %cloptr244625, i64 2                ; &eptr244628[2]
  %eptr244629 = getelementptr inbounds i64, i64* %cloptr244625, i64 3                ; &eptr244629[3]
  store i64 %_37foldr1233585233761, i64* %eptr244627                                 ; *eptr244627 = %_37foldr1233585233761
  store i64 %_37foldr233608233784, i64* %eptr244628                                  ; *eptr244628 = %_37foldr233608233784
  store i64 %_37map1233627233803, i64* %eptr244629                                   ; *eptr244629 = %_37map1233627233803
  %eptr244626 = getelementptr inbounds i64, i64* %cloptr244625, i64 0                ; &cloptr244625[0]
  %f244630 = ptrtoint void(i64,i64)* @lam242104 to i64                               ; fptr cast; i64(...)* -> i64
  store i64 %f244630, i64* %eptr244626                                               ; store fptr
  %arg234387 = ptrtoint i64* %cloptr244625 to i64                                    ; closure cast; i64* -> i64
  %sym240564 = add i64 0, 0                                                          ; quoted ()
  %x240565 = call i64 @prim_cons(i64 %arg234387, i64 %sym240564)                     ; call prim_cons
  %x240566 = call i64 @prim_cons(i64 %arg234388, i64 %x240565)                       ; call prim_cons
  %cloptr244631 = inttoptr i64 %Ycmb233580233756 to i64*                             ; closure/env cast; i64 -> i64*
  %i0ptr244632 = getelementptr inbounds i64, i64* %cloptr244631, i64 0               ; &cloptr244631[0]
  %f244634 = load i64, i64* %i0ptr244632, align 8                                    ; load; *i0ptr244632
  %fptr244633 = inttoptr i64 %f244634 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr244633(i64 %Ycmb233580233756, i64 %x240566)         ; tail call
  ret void

else244609:
  %many240573 = call i64 @const_init_string(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @str244635, i32 0, i32 0)); quoted string
  %fail240571 = call i64 @prim_halt(i64 %many240573)                                 ; call prim_halt
  %sym240576 = add i64 0, 0                                                          ; quoted ()
  %cloptr244636 = inttoptr i64 %fail240571 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr244637 = getelementptr inbounds i64, i64* %cloptr244636, i64 0               ; &cloptr244636[0]
  %f244639 = load i64, i64* %i0ptr244637, align 8                                    ; load; *i0ptr244637
  %fptr244638 = inttoptr i64 %f244639 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr244638(i64 %fail240571, i64 %sym240576)             ; tail call
  ret void
}


define void @lam244039(i64 %env244040, i64 %rvp236089) {
  %envptr244640 = inttoptr i64 %env244040 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr244641 = getelementptr inbounds i64, i64* %envptr244640, i64 1              ; &envptr244640[1]
  %_37foldr1233585233761 = load i64, i64* %envptr244641, align 8                     ; load; *envptr244641
  %check236090 = call i64 @prim_null_63(i64 %rvp236089)                              ; call prim_null_63
  %cmp244642 = icmp eq i64 %check236090, 15                                          ; false?
  br i1 %cmp244642, label %else244644, label %then244643                             ; if

then244643:
  %msg236094 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str244645, i32 0, i32 0)); quoted string
  %abort236092 = call i64 @prim_halt(i64 %msg236094)                                 ; call prim_halt
  %sym236097 = add i64 0, 0                                                          ; quoted ()
  %cloptr244646 = inttoptr i64 %abort236092 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr244647 = getelementptr inbounds i64, i64* %cloptr244646, i64 0               ; &cloptr244646[0]
  %f244649 = load i64, i64* %i0ptr244647, align 8                                    ; load; *i0ptr244647
  %fptr244648 = inttoptr i64 %f244649 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr244648(i64 %abort236092, i64 %sym236097)            ; tail call
  ret void

else244644:
  %cont234084 = call i64 @prim_car(i64 %rvp236089)                                   ; call prim_car
  %rvp236080 = call i64 @prim_cdr(i64 %rvp236089)                                    ; call prim_cdr
  %check236081 = call i64 @prim_null_63(i64 %rvp236080)                              ; call prim_null_63
  %cmp244650 = icmp eq i64 %check236081, 15                                          ; false?
  br i1 %cmp244650, label %else244652, label %then244651                             ; if

then244651:
  %msg236085 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str244653, i32 0, i32 0)); quoted string
  %abort236083 = call i64 @prim_halt(i64 %msg236085)                                 ; call prim_halt
  %sym236088 = add i64 0, 0                                                          ; quoted ()
  %cloptr244654 = inttoptr i64 %abort236083 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr244655 = getelementptr inbounds i64, i64* %cloptr244654, i64 0               ; &cloptr244654[0]
  %f244657 = load i64, i64* %i0ptr244655, align 8                                    ; load; *i0ptr244655
  %fptr244656 = inttoptr i64 %f244657 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr244656(i64 %abort236083, i64 %sym236088)            ; tail call
  ret void

else244652:
  %f233629233805 = call i64 @prim_car(i64 %rvp236080)                                ; call prim_car
  %rvp236070 = call i64 @prim_cdr(i64 %rvp236080)                                    ; call prim_cdr
  %check236071 = call i64 @prim_null_63(i64 %rvp236070)                              ; call prim_null_63
  %cmp244658 = icmp eq i64 %check236071, 15                                          ; false?
  br i1 %cmp244658, label %else244660, label %then244659                             ; if

then244659:
  %msg236075 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str244661, i32 0, i32 0)); quoted string
  %abort236073 = call i64 @prim_halt(i64 %msg236075)                                 ; call prim_halt
  %sym236078 = add i64 0, 0                                                          ; quoted ()
  %cloptr244662 = inttoptr i64 %abort236073 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr244663 = getelementptr inbounds i64, i64* %cloptr244662, i64 0               ; &cloptr244662[0]
  %f244665 = load i64, i64* %i0ptr244663, align 8                                    ; load; *i0ptr244663
  %fptr244664 = inttoptr i64 %f244665 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr244664(i64 %abort236073, i64 %sym236078)            ; tail call
  ret void

else244660:
  %rest236077 = call i64 @prim_cdr(i64 %rvp236070)                                   ; call prim_cdr
  %empty236072 = call i64 @prim_null_63(i64 %rest236077)                             ; call prim_null_63
  %cmp244666 = icmp eq i64 %empty236072, 15                                          ; false?
  br i1 %cmp244666, label %else244668, label %then244667                             ; if

then244667:
  %lst233630233806 = call i64 @prim_car(i64 %rvp236070)                              ; call prim_car
  %na236007 = call i64 @prim_cdr(i64 %rvp236070)                                     ; call prim_cdr
  %cloptr244669 = call i64* @alloc(i64 16)                                           ; malloc
  %eptr244671 = getelementptr inbounds i64, i64* %cloptr244669, i64 1                ; &eptr244671[1]
  store i64 %f233629233805, i64* %eptr244671                                         ; *eptr244671 = %f233629233805
  %eptr244670 = getelementptr inbounds i64, i64* %cloptr244669, i64 0                ; &cloptr244669[0]
  %f244672 = ptrtoint void(i64,i64)* @lam244035 to i64                               ; fptr cast; i64(...)* -> i64
  store i64 %f244672, i64* %eptr244670                                               ; store fptr
  %arg234348 = ptrtoint i64* %cloptr244669 to i64                                    ; closure cast; i64* -> i64
  %arg234347 = add i64 0, 0                                                          ; quoted ()
  %sym236065 = add i64 0, 0                                                          ; quoted ()
  %x236066 = call i64 @prim_cons(i64 %lst233630233806, i64 %sym236065)               ; call prim_cons
  %x236067 = call i64 @prim_cons(i64 %arg234347, i64 %x236066)                       ; call prim_cons
  %x236068 = call i64 @prim_cons(i64 %arg234348, i64 %x236067)                       ; call prim_cons
  %x236069 = call i64 @prim_cons(i64 %cont234084, i64 %x236068)                      ; call prim_cons
  %cloptr244673 = inttoptr i64 %_37foldr1233585233761 to i64*                        ; closure/env cast; i64 -> i64*
  %i0ptr244674 = getelementptr inbounds i64, i64* %cloptr244673, i64 0               ; &cloptr244673[0]
  %f244676 = load i64, i64* %i0ptr244674, align 8                                    ; load; *i0ptr244674
  %fptr244675 = inttoptr i64 %f244676 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr244675(i64 %_37foldr1233585233761, i64 %x236069)    ; tail call
  ret void

else244668:
  %many236076 = call i64 @const_init_string(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @str244677, i32 0, i32 0)); quoted string
  %fail236074 = call i64 @prim_halt(i64 %many236076)                                 ; call prim_halt
  %sym236079 = add i64 0, 0                                                          ; quoted ()
  %cloptr244678 = inttoptr i64 %fail236074 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr244679 = getelementptr inbounds i64, i64* %cloptr244678, i64 0               ; &cloptr244678[0]
  %f244681 = load i64, i64* %i0ptr244679, align 8                                    ; load; *i0ptr244679
  %fptr244680 = inttoptr i64 %f244681 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr244680(i64 %fail236074, i64 %sym236079)             ; tail call
  ret void
}


define void @lam244035(i64 %env244036, i64 %rvp236056) {
  %envptr244682 = inttoptr i64 %env244036 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr244683 = getelementptr inbounds i64, i64* %envptr244682, i64 1              ; &envptr244682[1]
  %f233629233805 = load i64, i64* %envptr244683, align 8                             ; load; *envptr244683
  %check236057 = call i64 @prim_null_63(i64 %rvp236056)                              ; call prim_null_63
  %cmp244684 = icmp eq i64 %check236057, 15                                          ; false?
  br i1 %cmp244684, label %else244686, label %then244685                             ; if

then244685:
  %msg236061 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str244687, i32 0, i32 0)); quoted string
  %abort236059 = call i64 @prim_halt(i64 %msg236061)                                 ; call prim_halt
  %sym236064 = add i64 0, 0                                                          ; quoted ()
  %cloptr244688 = inttoptr i64 %abort236059 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr244689 = getelementptr inbounds i64, i64* %cloptr244688, i64 0               ; &cloptr244688[0]
  %f244691 = load i64, i64* %i0ptr244689, align 8                                    ; load; *i0ptr244689
  %fptr244690 = inttoptr i64 %f244691 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr244690(i64 %abort236059, i64 %sym236064)            ; tail call
  ret void

else244686:
  %cont234085 = call i64 @prim_car(i64 %rvp236056)                                   ; call prim_car
  %rvp236047 = call i64 @prim_cdr(i64 %rvp236056)                                    ; call prim_cdr
  %check236048 = call i64 @prim_null_63(i64 %rvp236047)                              ; call prim_null_63
  %cmp244692 = icmp eq i64 %check236048, 15                                          ; false?
  br i1 %cmp244692, label %else244694, label %then244693                             ; if

then244693:
  %msg236052 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str244695, i32 0, i32 0)); quoted string
  %abort236050 = call i64 @prim_halt(i64 %msg236052)                                 ; call prim_halt
  %sym236055 = add i64 0, 0                                                          ; quoted ()
  %cloptr244696 = inttoptr i64 %abort236050 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr244697 = getelementptr inbounds i64, i64* %cloptr244696, i64 0               ; &cloptr244696[0]
  %f244699 = load i64, i64* %i0ptr244697, align 8                                    ; load; *i0ptr244697
  %fptr244698 = inttoptr i64 %f244699 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr244698(i64 %abort236050, i64 %sym236055)            ; tail call
  ret void

else244694:
  %v233631233807 = call i64 @prim_car(i64 %rvp236047)                                ; call prim_car
  %rvp236037 = call i64 @prim_cdr(i64 %rvp236047)                                    ; call prim_cdr
  %check236038 = call i64 @prim_null_63(i64 %rvp236037)                              ; call prim_null_63
  %cmp244700 = icmp eq i64 %check236038, 15                                          ; false?
  br i1 %cmp244700, label %else244702, label %then244701                             ; if

then244701:
  %msg236042 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str244703, i32 0, i32 0)); quoted string
  %abort236040 = call i64 @prim_halt(i64 %msg236042)                                 ; call prim_halt
  %sym236045 = add i64 0, 0                                                          ; quoted ()
  %cloptr244704 = inttoptr i64 %abort236040 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr244705 = getelementptr inbounds i64, i64* %cloptr244704, i64 0               ; &cloptr244704[0]
  %f244707 = load i64, i64* %i0ptr244705, align 8                                    ; load; *i0ptr244705
  %fptr244706 = inttoptr i64 %f244707 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr244706(i64 %abort236040, i64 %sym236045)            ; tail call
  ret void

else244702:
  %rest236044 = call i64 @prim_cdr(i64 %rvp236037)                                   ; call prim_cdr
  %empty236039 = call i64 @prim_null_63(i64 %rest236044)                             ; call prim_null_63
  %cmp244708 = icmp eq i64 %empty236039, 15                                          ; false?
  br i1 %cmp244708, label %else244710, label %then244709                             ; if

then244709:
  %r233632233808 = call i64 @prim_car(i64 %rvp236037)                                ; call prim_car
  %na236009 = call i64 @prim_cdr(i64 %rvp236037)                                     ; call prim_cdr
  %cloptr244711 = call i64* @alloc(i64 24)                                           ; malloc
  %eptr244713 = getelementptr inbounds i64, i64* %cloptr244711, i64 1                ; &eptr244713[1]
  %eptr244714 = getelementptr inbounds i64, i64* %cloptr244711, i64 2                ; &eptr244714[2]
  store i64 %r233632233808, i64* %eptr244713                                         ; *eptr244713 = %r233632233808
  store i64 %cont234085, i64* %eptr244714                                            ; *eptr244714 = %cont234085
  %eptr244712 = getelementptr inbounds i64, i64* %cloptr244711, i64 0                ; &cloptr244711[0]
  %f244715 = ptrtoint void(i64,i64)* @lam244031 to i64                               ; fptr cast; i64(...)* -> i64
  store i64 %f244715, i64* %eptr244712                                               ; store fptr
  %arg234352 = ptrtoint i64* %cloptr244711 to i64                                    ; closure cast; i64* -> i64
  %sym236034 = add i64 0, 0                                                          ; quoted ()
  %x236035 = call i64 @prim_cons(i64 %v233631233807, i64 %sym236034)                 ; call prim_cons
  %x236036 = call i64 @prim_cons(i64 %arg234352, i64 %x236035)                       ; call prim_cons
  %cloptr244716 = inttoptr i64 %f233629233805 to i64*                                ; closure/env cast; i64 -> i64*
  %i0ptr244717 = getelementptr inbounds i64, i64* %cloptr244716, i64 0               ; &cloptr244716[0]
  %f244719 = load i64, i64* %i0ptr244717, align 8                                    ; load; *i0ptr244717
  %fptr244718 = inttoptr i64 %f244719 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr244718(i64 %f233629233805, i64 %x236036)            ; tail call
  ret void

else244710:
  %many236043 = call i64 @const_init_string(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @str244720, i32 0, i32 0)); quoted string
  %fail236041 = call i64 @prim_halt(i64 %many236043)                                 ; call prim_halt
  %sym236046 = add i64 0, 0                                                          ; quoted ()
  %cloptr244721 = inttoptr i64 %fail236041 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr244722 = getelementptr inbounds i64, i64* %cloptr244721, i64 0               ; &cloptr244721[0]
  %f244724 = load i64, i64* %i0ptr244722, align 8                                    ; load; *i0ptr244722
  %fptr244723 = inttoptr i64 %f244724 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr244723(i64 %fail236041, i64 %sym236046)             ; tail call
  ret void
}


define void @lam244031(i64 %env244032, i64 %rvp236025) {
  %envptr244725 = inttoptr i64 %env244032 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr244726 = getelementptr inbounds i64, i64* %envptr244725, i64 2              ; &envptr244725[2]
  %cont234085 = load i64, i64* %envptr244726, align 8                                ; load; *envptr244726
  %envptr244727 = inttoptr i64 %env244032 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr244728 = getelementptr inbounds i64, i64* %envptr244727, i64 1              ; &envptr244727[1]
  %r233632233808 = load i64, i64* %envptr244728, align 8                             ; load; *envptr244728
  %check236026 = call i64 @prim_null_63(i64 %rvp236025)                              ; call prim_null_63
  %cmp244729 = icmp eq i64 %check236026, 15                                          ; false?
  br i1 %cmp244729, label %else244731, label %then244730                             ; if

then244730:
  %msg236030 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str244732, i32 0, i32 0)); quoted string
  %abort236028 = call i64 @prim_halt(i64 %msg236030)                                 ; call prim_halt
  %sym236033 = add i64 0, 0                                                          ; quoted ()
  %cloptr244733 = inttoptr i64 %abort236028 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr244734 = getelementptr inbounds i64, i64* %cloptr244733, i64 0               ; &cloptr244733[0]
  %f244736 = load i64, i64* %i0ptr244734, align 8                                    ; load; *i0ptr244734
  %fptr244735 = inttoptr i64 %f244736 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr244735(i64 %abort236028, i64 %sym236033)            ; tail call
  ret void

else244731:
  %_95234086 = call i64 @prim_car(i64 %rvp236025)                                    ; call prim_car
  %rvp236015 = call i64 @prim_cdr(i64 %rvp236025)                                    ; call prim_cdr
  %check236016 = call i64 @prim_null_63(i64 %rvp236015)                              ; call prim_null_63
  %cmp244737 = icmp eq i64 %check236016, 15                                          ; false?
  br i1 %cmp244737, label %else244739, label %then244738                             ; if

then244738:
  %msg236020 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str244740, i32 0, i32 0)); quoted string
  %abort236018 = call i64 @prim_halt(i64 %msg236020)                                 ; call prim_halt
  %sym236023 = add i64 0, 0                                                          ; quoted ()
  %cloptr244741 = inttoptr i64 %abort236018 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr244742 = getelementptr inbounds i64, i64* %cloptr244741, i64 0               ; &cloptr244741[0]
  %f244744 = load i64, i64* %i0ptr244742, align 8                                    ; load; *i0ptr244742
  %fptr244743 = inttoptr i64 %f244744 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr244743(i64 %abort236018, i64 %sym236023)            ; tail call
  ret void

else244739:
  %rest236022 = call i64 @prim_cdr(i64 %rvp236015)                                   ; call prim_cdr
  %empty236017 = call i64 @prim_null_63(i64 %rest236022)                             ; call prim_null_63
  %cmp244745 = icmp eq i64 %empty236017, 15                                          ; false?
  br i1 %cmp244745, label %else244747, label %then244746                             ; if

then244746:
  %a233970 = call i64 @prim_car(i64 %rvp236015)                                      ; call prim_car
  %na236011 = call i64 @prim_cdr(i64 %rvp236015)                                     ; call prim_cdr
  %retprim234087 = call i64 @prim_cons(i64 %a233970, i64 %r233632233808)             ; call prim_cons
  %arg234357 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %sym236012 = add i64 0, 0                                                          ; quoted ()
  %x236013 = call i64 @prim_cons(i64 %retprim234087, i64 %sym236012)                 ; call prim_cons
  %x236014 = call i64 @prim_cons(i64 %arg234357, i64 %x236013)                       ; call prim_cons
  %cloptr244748 = inttoptr i64 %cont234085 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr244749 = getelementptr inbounds i64, i64* %cloptr244748, i64 0               ; &cloptr244748[0]
  %f244751 = load i64, i64* %i0ptr244749, align 8                                    ; load; *i0ptr244749
  %fptr244750 = inttoptr i64 %f244751 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr244750(i64 %cont234085, i64 %x236014)               ; tail call
  ret void

else244747:
  %many236021 = call i64 @const_init_string(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @str244752, i32 0, i32 0)); quoted string
  %fail236019 = call i64 @prim_halt(i64 %many236021)                                 ; call prim_halt
  %sym236024 = add i64 0, 0                                                          ; quoted ()
  %cloptr244753 = inttoptr i64 %fail236019 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr244754 = getelementptr inbounds i64, i64* %cloptr244753, i64 0               ; &cloptr244753[0]
  %f244756 = load i64, i64* %i0ptr244754, align 8                                    ; load; *i0ptr244754
  %fptr244755 = inttoptr i64 %f244756 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr244755(i64 %fail236019, i64 %sym236024)             ; tail call
  ret void
}


define void @lam244006(i64 %env244007, i64 %args233633233809234089) {
  %envptr244757 = inttoptr i64 %env244007 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr244758 = getelementptr inbounds i64, i64* %envptr244757, i64 3              ; &envptr244757[3]
  %_37foldr233608233784 = load i64, i64* %envptr244758, align 8                      ; load; *envptr244758
  %envptr244759 = inttoptr i64 %env244007 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr244760 = getelementptr inbounds i64, i64* %envptr244759, i64 2              ; &envptr244759[2]
  %_37last233606233782 = load i64, i64* %envptr244760, align 8                       ; load; *envptr244760
  %envptr244761 = inttoptr i64 %env244007 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr244762 = getelementptr inbounds i64, i64* %envptr244761, i64 1              ; &envptr244761[1]
  %_37drop_45right233607233783 = load i64, i64* %envptr244762, align 8               ; load; *envptr244762
  %cont234088 = call i64 @prim_car(i64 %args233633233809234089)                      ; call prim_car
  %args233633233809 = call i64 @prim_cdr(i64 %args233633233809234089)                ; call prim_cdr
  %f233634233810 = call i64 @prim_car(i64 %args233633233809)                         ; call prim_car
  %lsts233635233811 = call i64 @prim_cdr(i64 %args233633233809)                      ; call prim_cdr
  %arg234364 = add i64 0, 0                                                          ; quoted ()
  %a233974 = call i64 @prim_cons(i64 %arg234364, i64 %lsts233635233811)              ; call prim_cons
  %cloptr244763 = call i64* @alloc(i64 32)                                           ; malloc
  %eptr244765 = getelementptr inbounds i64, i64* %cloptr244763, i64 1                ; &eptr244765[1]
  %eptr244766 = getelementptr inbounds i64, i64* %cloptr244763, i64 2                ; &eptr244766[2]
  %eptr244767 = getelementptr inbounds i64, i64* %cloptr244763, i64 3                ; &eptr244767[3]
  store i64 %f233634233810, i64* %eptr244765                                         ; *eptr244765 = %f233634233810
  store i64 %_37drop_45right233607233783, i64* %eptr244766                           ; *eptr244766 = %_37drop_45right233607233783
  store i64 %_37last233606233782, i64* %eptr244767                                   ; *eptr244767 = %_37last233606233782
  %eptr244764 = getelementptr inbounds i64, i64* %cloptr244763, i64 0                ; &cloptr244763[0]
  %f244768 = ptrtoint void(i64,i64)* @lam244003 to i64                               ; fptr cast; i64(...)* -> i64
  store i64 %f244768, i64* %eptr244764                                               ; store fptr
  %arg234366 = ptrtoint i64* %cloptr244763 to i64                                    ; closure cast; i64* -> i64
  %a233975 = call i64 @prim_cons(i64 %arg234366, i64 %a233974)                       ; call prim_cons
  %cps_45lst234097 = call i64 @prim_cons(i64 %cont234088, i64 %a233975)              ; call prim_cons
  %cloptr244769 = inttoptr i64 %_37foldr233608233784 to i64*                         ; closure/env cast; i64 -> i64*
  %i0ptr244770 = getelementptr inbounds i64, i64* %cloptr244769, i64 0               ; &cloptr244769[0]
  %f244772 = load i64, i64* %i0ptr244770, align 8                                    ; load; *i0ptr244770
  %fptr244771 = inttoptr i64 %f244772 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr244771(i64 %_37foldr233608233784, i64 %cps_45lst234097); tail call
  ret void
}


define void @lam244003(i64 %env244004, i64 %fargs233636233812234091) {
  %envptr244773 = inttoptr i64 %env244004 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr244774 = getelementptr inbounds i64, i64* %envptr244773, i64 3              ; &envptr244773[3]
  %_37last233606233782 = load i64, i64* %envptr244774, align 8                       ; load; *envptr244774
  %envptr244775 = inttoptr i64 %env244004 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr244776 = getelementptr inbounds i64, i64* %envptr244775, i64 2              ; &envptr244775[2]
  %_37drop_45right233607233783 = load i64, i64* %envptr244776, align 8               ; load; *envptr244776
  %envptr244777 = inttoptr i64 %env244004 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr244778 = getelementptr inbounds i64, i64* %envptr244777, i64 1              ; &envptr244777[1]
  %f233634233810 = load i64, i64* %envptr244778, align 8                             ; load; *envptr244778
  %cont234090 = call i64 @prim_car(i64 %fargs233636233812234091)                     ; call prim_car
  %fargs233636233812 = call i64 @prim_cdr(i64 %fargs233636233812234091)              ; call prim_cdr
  %cloptr244779 = call i64* @alloc(i64 40)                                           ; malloc
  %eptr244781 = getelementptr inbounds i64, i64* %cloptr244779, i64 1                ; &eptr244781[1]
  %eptr244782 = getelementptr inbounds i64, i64* %cloptr244779, i64 2                ; &eptr244782[2]
  %eptr244783 = getelementptr inbounds i64, i64* %cloptr244779, i64 3                ; &eptr244783[3]
  %eptr244784 = getelementptr inbounds i64, i64* %cloptr244779, i64 4                ; &eptr244784[4]
  store i64 %f233634233810, i64* %eptr244781                                         ; *eptr244781 = %f233634233810
  store i64 %_37last233606233782, i64* %eptr244782                                   ; *eptr244782 = %_37last233606233782
  store i64 %fargs233636233812, i64* %eptr244783                                     ; *eptr244783 = %fargs233636233812
  store i64 %cont234090, i64* %eptr244784                                            ; *eptr244784 = %cont234090
  %eptr244780 = getelementptr inbounds i64, i64* %cloptr244779, i64 0                ; &cloptr244779[0]
  %f244785 = ptrtoint void(i64,i64)* @lam244001 to i64                               ; fptr cast; i64(...)* -> i64
  store i64 %f244785, i64* %eptr244780                                               ; store fptr
  %arg234371 = ptrtoint i64* %cloptr244779 to i64                                    ; closure cast; i64* -> i64
  %arg234369 = call i64 @const_init_int(i64 1)                                       ; quoted int
  %sym236167 = add i64 0, 0                                                          ; quoted ()
  %x236168 = call i64 @prim_cons(i64 %arg234369, i64 %sym236167)                     ; call prim_cons
  %x236169 = call i64 @prim_cons(i64 %fargs233636233812, i64 %x236168)               ; call prim_cons
  %x236170 = call i64 @prim_cons(i64 %arg234371, i64 %x236169)                       ; call prim_cons
  %cloptr244786 = inttoptr i64 %_37drop_45right233607233783 to i64*                  ; closure/env cast; i64 -> i64*
  %i0ptr244787 = getelementptr inbounds i64, i64* %cloptr244786, i64 0               ; &cloptr244786[0]
  %f244789 = load i64, i64* %i0ptr244787, align 8                                    ; load; *i0ptr244787
  %fptr244788 = inttoptr i64 %f244789 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr244788(i64 %_37drop_45right233607233783, i64 %x236170); tail call
  ret void
}


define void @lam244001(i64 %env244002, i64 %rvp236158) {
  %envptr244790 = inttoptr i64 %env244002 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr244791 = getelementptr inbounds i64, i64* %envptr244790, i64 4              ; &envptr244790[4]
  %cont234090 = load i64, i64* %envptr244791, align 8                                ; load; *envptr244791
  %envptr244792 = inttoptr i64 %env244002 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr244793 = getelementptr inbounds i64, i64* %envptr244792, i64 3              ; &envptr244792[3]
  %fargs233636233812 = load i64, i64* %envptr244793, align 8                         ; load; *envptr244793
  %envptr244794 = inttoptr i64 %env244002 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr244795 = getelementptr inbounds i64, i64* %envptr244794, i64 2              ; &envptr244794[2]
  %_37last233606233782 = load i64, i64* %envptr244795, align 8                       ; load; *envptr244795
  %envptr244796 = inttoptr i64 %env244002 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr244797 = getelementptr inbounds i64, i64* %envptr244796, i64 1              ; &envptr244796[1]
  %f233634233810 = load i64, i64* %envptr244797, align 8                             ; load; *envptr244797
  %check236159 = call i64 @prim_null_63(i64 %rvp236158)                              ; call prim_null_63
  %cmp244798 = icmp eq i64 %check236159, 15                                          ; false?
  br i1 %cmp244798, label %else244800, label %then244799                             ; if

then244799:
  %msg236163 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str244801, i32 0, i32 0)); quoted string
  %abort236161 = call i64 @prim_halt(i64 %msg236163)                                 ; call prim_halt
  %sym236166 = add i64 0, 0                                                          ; quoted ()
  %cloptr244802 = inttoptr i64 %abort236161 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr244803 = getelementptr inbounds i64, i64* %cloptr244802, i64 0               ; &cloptr244802[0]
  %f244805 = load i64, i64* %i0ptr244803, align 8                                    ; load; *i0ptr244803
  %fptr244804 = inttoptr i64 %f244805 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr244804(i64 %abort236161, i64 %sym236166)            ; tail call
  ret void

else244800:
  %_95234092 = call i64 @prim_car(i64 %rvp236158)                                    ; call prim_car
  %rvp236148 = call i64 @prim_cdr(i64 %rvp236158)                                    ; call prim_cdr
  %check236149 = call i64 @prim_null_63(i64 %rvp236148)                              ; call prim_null_63
  %cmp244806 = icmp eq i64 %check236149, 15                                          ; false?
  br i1 %cmp244806, label %else244808, label %then244807                             ; if

then244807:
  %msg236153 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str244809, i32 0, i32 0)); quoted string
  %abort236151 = call i64 @prim_halt(i64 %msg236153)                                 ; call prim_halt
  %sym236156 = add i64 0, 0                                                          ; quoted ()
  %cloptr244810 = inttoptr i64 %abort236151 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr244811 = getelementptr inbounds i64, i64* %cloptr244810, i64 0               ; &cloptr244810[0]
  %f244813 = load i64, i64* %i0ptr244811, align 8                                    ; load; *i0ptr244811
  %fptr244812 = inttoptr i64 %f244813 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr244812(i64 %abort236151, i64 %sym236156)            ; tail call
  ret void

else244808:
  %rest236155 = call i64 @prim_cdr(i64 %rvp236148)                                   ; call prim_cdr
  %empty236150 = call i64 @prim_null_63(i64 %rest236155)                             ; call prim_null_63
  %cmp244814 = icmp eq i64 %empty236150, 15                                          ; false?
  br i1 %cmp244814, label %else244816, label %then244815                             ; if

then244815:
  %a233971 = call i64 @prim_car(i64 %rvp236148)                                      ; call prim_car
  %na236099 = call i64 @prim_cdr(i64 %rvp236148)                                     ; call prim_cdr
  %cloptr244817 = call i64* @alloc(i64 32)                                           ; malloc
  %eptr244819 = getelementptr inbounds i64, i64* %cloptr244817, i64 1                ; &eptr244819[1]
  %eptr244820 = getelementptr inbounds i64, i64* %cloptr244817, i64 2                ; &eptr244820[2]
  %eptr244821 = getelementptr inbounds i64, i64* %cloptr244817, i64 3                ; &eptr244821[3]
  store i64 %_37last233606233782, i64* %eptr244819                                   ; *eptr244819 = %_37last233606233782
  store i64 %fargs233636233812, i64* %eptr244820                                     ; *eptr244820 = %fargs233636233812
  store i64 %cont234090, i64* %eptr244821                                            ; *eptr244821 = %cont234090
  %eptr244818 = getelementptr inbounds i64, i64* %cloptr244817, i64 0                ; &cloptr244817[0]
  %f244822 = ptrtoint void(i64,i64)* @lam243997 to i64                               ; fptr cast; i64(...)* -> i64
  store i64 %f244822, i64* %eptr244818                                               ; store fptr
  %arg234374 = ptrtoint i64* %cloptr244817 to i64                                    ; closure cast; i64* -> i64
  %cps_45lst234096 = call i64 @prim_cons(i64 %arg234374, i64 %a233971)               ; call prim_cons
  %cloptr244823 = inttoptr i64 %f233634233810 to i64*                                ; closure/env cast; i64 -> i64*
  %i0ptr244824 = getelementptr inbounds i64, i64* %cloptr244823, i64 0               ; &cloptr244823[0]
  %f244826 = load i64, i64* %i0ptr244824, align 8                                    ; load; *i0ptr244824
  %fptr244825 = inttoptr i64 %f244826 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr244825(i64 %f233634233810, i64 %cps_45lst234096)    ; tail call
  ret void

else244816:
  %many236154 = call i64 @const_init_string(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @str244827, i32 0, i32 0)); quoted string
  %fail236152 = call i64 @prim_halt(i64 %many236154)                                 ; call prim_halt
  %sym236157 = add i64 0, 0                                                          ; quoted ()
  %cloptr244828 = inttoptr i64 %fail236152 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr244829 = getelementptr inbounds i64, i64* %cloptr244828, i64 0               ; &cloptr244828[0]
  %f244831 = load i64, i64* %i0ptr244829, align 8                                    ; load; *i0ptr244829
  %fptr244830 = inttoptr i64 %f244831 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr244830(i64 %fail236152, i64 %sym236157)             ; tail call
  ret void
}


define void @lam243997(i64 %env243998, i64 %rvp236139) {
  %envptr244832 = inttoptr i64 %env243998 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr244833 = getelementptr inbounds i64, i64* %envptr244832, i64 3              ; &envptr244832[3]
  %cont234090 = load i64, i64* %envptr244833, align 8                                ; load; *envptr244833
  %envptr244834 = inttoptr i64 %env243998 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr244835 = getelementptr inbounds i64, i64* %envptr244834, i64 2              ; &envptr244834[2]
  %fargs233636233812 = load i64, i64* %envptr244835, align 8                         ; load; *envptr244835
  %envptr244836 = inttoptr i64 %env243998 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr244837 = getelementptr inbounds i64, i64* %envptr244836, i64 1              ; &envptr244836[1]
  %_37last233606233782 = load i64, i64* %envptr244837, align 8                       ; load; *envptr244837
  %check236140 = call i64 @prim_null_63(i64 %rvp236139)                              ; call prim_null_63
  %cmp244838 = icmp eq i64 %check236140, 15                                          ; false?
  br i1 %cmp244838, label %else244840, label %then244839                             ; if

then244839:
  %msg236144 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str244841, i32 0, i32 0)); quoted string
  %abort236142 = call i64 @prim_halt(i64 %msg236144)                                 ; call prim_halt
  %sym236147 = add i64 0, 0                                                          ; quoted ()
  %cloptr244842 = inttoptr i64 %abort236142 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr244843 = getelementptr inbounds i64, i64* %cloptr244842, i64 0               ; &cloptr244842[0]
  %f244845 = load i64, i64* %i0ptr244843, align 8                                    ; load; *i0ptr244843
  %fptr244844 = inttoptr i64 %f244845 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr244844(i64 %abort236142, i64 %sym236147)            ; tail call
  ret void

else244840:
  %_95234093 = call i64 @prim_car(i64 %rvp236139)                                    ; call prim_car
  %rvp236129 = call i64 @prim_cdr(i64 %rvp236139)                                    ; call prim_cdr
  %check236130 = call i64 @prim_null_63(i64 %rvp236129)                              ; call prim_null_63
  %cmp244846 = icmp eq i64 %check236130, 15                                          ; false?
  br i1 %cmp244846, label %else244848, label %then244847                             ; if

then244847:
  %msg236134 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str244849, i32 0, i32 0)); quoted string
  %abort236132 = call i64 @prim_halt(i64 %msg236134)                                 ; call prim_halt
  %sym236137 = add i64 0, 0                                                          ; quoted ()
  %cloptr244850 = inttoptr i64 %abort236132 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr244851 = getelementptr inbounds i64, i64* %cloptr244850, i64 0               ; &cloptr244850[0]
  %f244853 = load i64, i64* %i0ptr244851, align 8                                    ; load; *i0ptr244851
  %fptr244852 = inttoptr i64 %f244853 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr244852(i64 %abort236132, i64 %sym236137)            ; tail call
  ret void

else244848:
  %rest236136 = call i64 @prim_cdr(i64 %rvp236129)                                   ; call prim_cdr
  %empty236131 = call i64 @prim_null_63(i64 %rest236136)                             ; call prim_null_63
  %cmp244854 = icmp eq i64 %empty236131, 15                                          ; false?
  br i1 %cmp244854, label %else244856, label %then244855                             ; if

then244855:
  %a233972 = call i64 @prim_car(i64 %rvp236129)                                      ; call prim_car
  %na236101 = call i64 @prim_cdr(i64 %rvp236129)                                     ; call prim_cdr
  %cloptr244857 = call i64* @alloc(i64 24)                                           ; malloc
  %eptr244859 = getelementptr inbounds i64, i64* %cloptr244857, i64 1                ; &eptr244859[1]
  %eptr244860 = getelementptr inbounds i64, i64* %cloptr244857, i64 2                ; &eptr244860[2]
  store i64 %a233972, i64* %eptr244859                                               ; *eptr244859 = %a233972
  store i64 %cont234090, i64* %eptr244860                                            ; *eptr244860 = %cont234090
  %eptr244858 = getelementptr inbounds i64, i64* %cloptr244857, i64 0                ; &cloptr244857[0]
  %f244861 = ptrtoint void(i64,i64)* @lam243993 to i64                               ; fptr cast; i64(...)* -> i64
  store i64 %f244861, i64* %eptr244858                                               ; store fptr
  %arg234376 = ptrtoint i64* %cloptr244857 to i64                                    ; closure cast; i64* -> i64
  %sym236126 = add i64 0, 0                                                          ; quoted ()
  %x236127 = call i64 @prim_cons(i64 %fargs233636233812, i64 %sym236126)             ; call prim_cons
  %x236128 = call i64 @prim_cons(i64 %arg234376, i64 %x236127)                       ; call prim_cons
  %cloptr244862 = inttoptr i64 %_37last233606233782 to i64*                          ; closure/env cast; i64 -> i64*
  %i0ptr244863 = getelementptr inbounds i64, i64* %cloptr244862, i64 0               ; &cloptr244862[0]
  %f244865 = load i64, i64* %i0ptr244863, align 8                                    ; load; *i0ptr244863
  %fptr244864 = inttoptr i64 %f244865 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr244864(i64 %_37last233606233782, i64 %x236128)      ; tail call
  ret void

else244856:
  %many236135 = call i64 @const_init_string(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @str244866, i32 0, i32 0)); quoted string
  %fail236133 = call i64 @prim_halt(i64 %many236135)                                 ; call prim_halt
  %sym236138 = add i64 0, 0                                                          ; quoted ()
  %cloptr244867 = inttoptr i64 %fail236133 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr244868 = getelementptr inbounds i64, i64* %cloptr244867, i64 0               ; &cloptr244867[0]
  %f244870 = load i64, i64* %i0ptr244868, align 8                                    ; load; *i0ptr244868
  %fptr244869 = inttoptr i64 %f244870 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr244869(i64 %fail236133, i64 %sym236138)             ; tail call
  ret void
}


define void @lam243993(i64 %env243994, i64 %rvp236117) {
  %envptr244871 = inttoptr i64 %env243994 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr244872 = getelementptr inbounds i64, i64* %envptr244871, i64 2              ; &envptr244871[2]
  %cont234090 = load i64, i64* %envptr244872, align 8                                ; load; *envptr244872
  %envptr244873 = inttoptr i64 %env243994 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr244874 = getelementptr inbounds i64, i64* %envptr244873, i64 1              ; &envptr244873[1]
  %a233972 = load i64, i64* %envptr244874, align 8                                   ; load; *envptr244874
  %check236118 = call i64 @prim_null_63(i64 %rvp236117)                              ; call prim_null_63
  %cmp244875 = icmp eq i64 %check236118, 15                                          ; false?
  br i1 %cmp244875, label %else244877, label %then244876                             ; if

then244876:
  %msg236122 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str244878, i32 0, i32 0)); quoted string
  %abort236120 = call i64 @prim_halt(i64 %msg236122)                                 ; call prim_halt
  %sym236125 = add i64 0, 0                                                          ; quoted ()
  %cloptr244879 = inttoptr i64 %abort236120 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr244880 = getelementptr inbounds i64, i64* %cloptr244879, i64 0               ; &cloptr244879[0]
  %f244882 = load i64, i64* %i0ptr244880, align 8                                    ; load; *i0ptr244880
  %fptr244881 = inttoptr i64 %f244882 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr244881(i64 %abort236120, i64 %sym236125)            ; tail call
  ret void

else244877:
  %_95234094 = call i64 @prim_car(i64 %rvp236117)                                    ; call prim_car
  %rvp236107 = call i64 @prim_cdr(i64 %rvp236117)                                    ; call prim_cdr
  %check236108 = call i64 @prim_null_63(i64 %rvp236107)                              ; call prim_null_63
  %cmp244883 = icmp eq i64 %check236108, 15                                          ; false?
  br i1 %cmp244883, label %else244885, label %then244884                             ; if

then244884:
  %msg236112 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str244886, i32 0, i32 0)); quoted string
  %abort236110 = call i64 @prim_halt(i64 %msg236112)                                 ; call prim_halt
  %sym236115 = add i64 0, 0                                                          ; quoted ()
  %cloptr244887 = inttoptr i64 %abort236110 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr244888 = getelementptr inbounds i64, i64* %cloptr244887, i64 0               ; &cloptr244887[0]
  %f244890 = load i64, i64* %i0ptr244888, align 8                                    ; load; *i0ptr244888
  %fptr244889 = inttoptr i64 %f244890 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr244889(i64 %abort236110, i64 %sym236115)            ; tail call
  ret void

else244885:
  %rest236114 = call i64 @prim_cdr(i64 %rvp236107)                                   ; call prim_cdr
  %empty236109 = call i64 @prim_null_63(i64 %rest236114)                             ; call prim_null_63
  %cmp244891 = icmp eq i64 %empty236109, 15                                          ; false?
  br i1 %cmp244891, label %else244893, label %then244892                             ; if

then244892:
  %a233973 = call i64 @prim_car(i64 %rvp236107)                                      ; call prim_car
  %na236103 = call i64 @prim_cdr(i64 %rvp236107)                                     ; call prim_cdr
  %retprim234095 = call i64 @prim_cons(i64 %a233972, i64 %a233973)                   ; call prim_cons
  %arg234381 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %sym236104 = add i64 0, 0                                                          ; quoted ()
  %x236105 = call i64 @prim_cons(i64 %retprim234095, i64 %sym236104)                 ; call prim_cons
  %x236106 = call i64 @prim_cons(i64 %arg234381, i64 %x236105)                       ; call prim_cons
  %cloptr244894 = inttoptr i64 %cont234090 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr244895 = getelementptr inbounds i64, i64* %cloptr244894, i64 0               ; &cloptr244894[0]
  %f244897 = load i64, i64* %i0ptr244895, align 8                                    ; load; *i0ptr244895
  %fptr244896 = inttoptr i64 %f244897 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr244896(i64 %cont234090, i64 %x236106)               ; tail call
  ret void

else244893:
  %many236113 = call i64 @const_init_string(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @str244898, i32 0, i32 0)); quoted string
  %fail236111 = call i64 @prim_halt(i64 %many236113)                                 ; call prim_halt
  %sym236116 = add i64 0, 0                                                          ; quoted ()
  %cloptr244899 = inttoptr i64 %fail236111 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr244900 = getelementptr inbounds i64, i64* %cloptr244899, i64 0               ; &cloptr244899[0]
  %f244902 = load i64, i64* %i0ptr244900, align 8                                    ; load; *i0ptr244900
  %fptr244901 = inttoptr i64 %f244902 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr244901(i64 %fail236111, i64 %sym236116)             ; tail call
  ret void
}


define void @lam243972(i64 %env243973, i64 %rvp240240) {
  %envptr244903 = inttoptr i64 %env243973 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr244904 = getelementptr inbounds i64, i64* %envptr244903, i64 2              ; &envptr244903[2]
  %_37length233588233764 = load i64, i64* %envptr244904, align 8                     ; load; *envptr244904
  %envptr244905 = inttoptr i64 %env243973 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr244906 = getelementptr inbounds i64, i64* %envptr244905, i64 1              ; &envptr244905[1]
  %_37foldl1233589233765 = load i64, i64* %envptr244906, align 8                     ; load; *envptr244906
  %check240241 = call i64 @prim_null_63(i64 %rvp240240)                              ; call prim_null_63
  %cmp244907 = icmp eq i64 %check240241, 15                                          ; false?
  br i1 %cmp244907, label %else244909, label %then244908                             ; if

then244908:
  %msg240245 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str244910, i32 0, i32 0)); quoted string
  %abort240243 = call i64 @prim_halt(i64 %msg240245)                                 ; call prim_halt
  %sym240248 = add i64 0, 0                                                          ; quoted ()
  %cloptr244911 = inttoptr i64 %abort240243 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr244912 = getelementptr inbounds i64, i64* %cloptr244911, i64 0               ; &cloptr244911[0]
  %f244914 = load i64, i64* %i0ptr244912, align 8                                    ; load; *i0ptr244912
  %fptr244913 = inttoptr i64 %f244914 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr244913(i64 %abort240243, i64 %sym240248)            ; tail call
  ret void

else244909:
  %_95234098 = call i64 @prim_car(i64 %rvp240240)                                    ; call prim_car
  %rvp240230 = call i64 @prim_cdr(i64 %rvp240240)                                    ; call prim_cdr
  %check240231 = call i64 @prim_null_63(i64 %rvp240230)                              ; call prim_null_63
  %cmp244915 = icmp eq i64 %check240231, 15                                          ; false?
  br i1 %cmp244915, label %else244917, label %then244916                             ; if

then244916:
  %msg240235 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str244918, i32 0, i32 0)); quoted string
  %abort240233 = call i64 @prim_halt(i64 %msg240235)                                 ; call prim_halt
  %sym240238 = add i64 0, 0                                                          ; quoted ()
  %cloptr244919 = inttoptr i64 %abort240233 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr244920 = getelementptr inbounds i64, i64* %cloptr244919, i64 0               ; &cloptr244919[0]
  %f244922 = load i64, i64* %i0ptr244920, align 8                                    ; load; *i0ptr244920
  %fptr244921 = inttoptr i64 %f244922 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr244921(i64 %abort240233, i64 %sym240238)            ; tail call
  ret void

else244917:
  %rest240237 = call i64 @prim_cdr(i64 %rvp240230)                                   ; call prim_cdr
  %empty240232 = call i64 @prim_null_63(i64 %rest240237)                             ; call prim_null_63
  %cmp244923 = icmp eq i64 %empty240232, 15                                          ; false?
  br i1 %cmp244923, label %else244925, label %then244924                             ; if

then244924:
  %_37foldl233637233813 = call i64 @prim_car(i64 %rvp240230)                         ; call prim_car
  %na236172 = call i64 @prim_cdr(i64 %rvp240230)                                     ; call prim_cdr
  %cloptr244926 = call i64* @alloc(i64 8)                                            ; malloc
  %eptr244927 = getelementptr inbounds i64, i64* %cloptr244926, i64 0                ; &cloptr244926[0]
  %f244928 = ptrtoint void(i64,i64)* @lam243968 to i64                               ; fptr cast; i64(...)* -> i64
  store i64 %f244928, i64* %eptr244927                                               ; store fptr
  %_37_62233638233814 = ptrtoint i64* %cloptr244926 to i64                           ; closure cast; i64* -> i64
  %cloptr244929 = call i64* @alloc(i64 8)                                            ; malloc
  %eptr244930 = getelementptr inbounds i64, i64* %cloptr244929, i64 0                ; &cloptr244929[0]
  %f244931 = ptrtoint void(i64,i64)* @lam243956 to i64                               ; fptr cast; i64(...)* -> i64
  store i64 %f244931, i64* %eptr244930                                               ; store fptr
  %_37_62_61233639233815 = ptrtoint i64* %cloptr244929 to i64                        ; closure cast; i64* -> i64
  %arg234403 = call i64 @const_init_int(i64 1)                                       ; quoted int
  %arg234402 = add i64 0, 0                                                          ; quoted ()
  %_37append233667233843 = call i64 @prim_make_45vector(i64 %arg234403, i64 %arg234402); call prim_make_45vector
  %arg234405 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %cloptr244932 = call i64* @alloc(i64 16)                                           ; malloc
  %eptr244934 = getelementptr inbounds i64, i64* %cloptr244932, i64 1                ; &eptr244934[1]
  store i64 %_37append233667233843, i64* %eptr244934                                 ; *eptr244934 = %_37append233667233843
  %eptr244933 = getelementptr inbounds i64, i64* %cloptr244932, i64 0                ; &cloptr244932[0]
  %f244935 = ptrtoint void(i64,i64)* @lam243941 to i64                               ; fptr cast; i64(...)* -> i64
  store i64 %f244935, i64* %eptr244933                                               ; store fptr
  %arg234404 = ptrtoint i64* %cloptr244932 to i64                                    ; closure cast; i64* -> i64
  %_950233668233844 = call i64 @prim_vector_45set_33(i64 %_37append233667233843, i64 %arg234405, i64 %arg234404); call prim_vector_45set_33
  %arg234424 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %retprim234233 = call i64 @prim_vector_45ref(i64 %_37append233667233843, i64 %arg234424); call prim_vector_45ref
  %cloptr244936 = call i64* @alloc(i64 32)                                           ; malloc
  %eptr244938 = getelementptr inbounds i64, i64* %cloptr244936, i64 1                ; &eptr244938[1]
  %eptr244939 = getelementptr inbounds i64, i64* %cloptr244936, i64 2                ; &eptr244939[2]
  %eptr244940 = getelementptr inbounds i64, i64* %cloptr244936, i64 3                ; &eptr244940[3]
  store i64 %_37foldl1233589233765, i64* %eptr244938                                 ; *eptr244938 = %_37foldl1233589233765
  store i64 %_37_62233638233814, i64* %eptr244939                                    ; *eptr244939 = %_37_62233638233814
  store i64 %_37length233588233764, i64* %eptr244940                                 ; *eptr244940 = %_37length233588233764
  %eptr244937 = getelementptr inbounds i64, i64* %cloptr244936, i64 0                ; &cloptr244936[0]
  %f244941 = ptrtoint void(i64,i64)* @lam243916 to i64                               ; fptr cast; i64(...)* -> i64
  store i64 %f244941, i64* %eptr244937                                               ; store fptr
  %arg234428 = ptrtoint i64* %cloptr244936 to i64                                    ; closure cast; i64* -> i64
  %arg234427 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %sym240227 = add i64 0, 0                                                          ; quoted ()
  %x240228 = call i64 @prim_cons(i64 %retprim234233, i64 %sym240227)                 ; call prim_cons
  %x240229 = call i64 @prim_cons(i64 %arg234427, i64 %x240228)                       ; call prim_cons
  %cloptr244942 = inttoptr i64 %arg234428 to i64*                                    ; closure/env cast; i64 -> i64*
  %i0ptr244943 = getelementptr inbounds i64, i64* %cloptr244942, i64 0               ; &cloptr244942[0]
  %f244945 = load i64, i64* %i0ptr244943, align 8                                    ; load; *i0ptr244943
  %fptr244944 = inttoptr i64 %f244945 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr244944(i64 %arg234428, i64 %x240229)                ; tail call
  ret void

else244925:
  %many240236 = call i64 @const_init_string(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @str244946, i32 0, i32 0)); quoted string
  %fail240234 = call i64 @prim_halt(i64 %many240236)                                 ; call prim_halt
  %sym240239 = add i64 0, 0                                                          ; quoted ()
  %cloptr244947 = inttoptr i64 %fail240234 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr244948 = getelementptr inbounds i64, i64* %cloptr244947, i64 0               ; &cloptr244947[0]
  %f244950 = load i64, i64* %i0ptr244948, align 8                                    ; load; *i0ptr244948
  %fptr244949 = inttoptr i64 %f244950 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr244949(i64 %fail240234, i64 %sym240239)             ; tail call
  ret void
}


define void @lam243968(i64 %env243969, i64 %rvp236197) {
  %check236198 = call i64 @prim_null_63(i64 %rvp236197)                              ; call prim_null_63
  %cmp244951 = icmp eq i64 %check236198, 15                                          ; false?
  br i1 %cmp244951, label %else244953, label %then244952                             ; if

then244952:
  %msg236202 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str244954, i32 0, i32 0)); quoted string
  %abort236200 = call i64 @prim_halt(i64 %msg236202)                                 ; call prim_halt
  %sym236205 = add i64 0, 0                                                          ; quoted ()
  %cloptr244955 = inttoptr i64 %abort236200 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr244956 = getelementptr inbounds i64, i64* %cloptr244955, i64 0               ; &cloptr244955[0]
  %f244958 = load i64, i64* %i0ptr244956, align 8                                    ; load; *i0ptr244956
  %fptr244957 = inttoptr i64 %f244958 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr244957(i64 %abort236200, i64 %sym236205)            ; tail call
  ret void

else244953:
  %cont234099 = call i64 @prim_car(i64 %rvp236197)                                   ; call prim_car
  %rvp236188 = call i64 @prim_cdr(i64 %rvp236197)                                    ; call prim_cdr
  %check236189 = call i64 @prim_null_63(i64 %rvp236188)                              ; call prim_null_63
  %cmp244959 = icmp eq i64 %check236189, 15                                          ; false?
  br i1 %cmp244959, label %else244961, label %then244960                             ; if

then244960:
  %msg236193 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str244962, i32 0, i32 0)); quoted string
  %abort236191 = call i64 @prim_halt(i64 %msg236193)                                 ; call prim_halt
  %sym236196 = add i64 0, 0                                                          ; quoted ()
  %cloptr244963 = inttoptr i64 %abort236191 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr244964 = getelementptr inbounds i64, i64* %cloptr244963, i64 0               ; &cloptr244963[0]
  %f244966 = load i64, i64* %i0ptr244964, align 8                                    ; load; *i0ptr244964
  %fptr244965 = inttoptr i64 %f244966 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr244965(i64 %abort236191, i64 %sym236196)            ; tail call
  ret void

else244961:
  %a233663233839 = call i64 @prim_car(i64 %rvp236188)                                ; call prim_car
  %rvp236178 = call i64 @prim_cdr(i64 %rvp236188)                                    ; call prim_cdr
  %check236179 = call i64 @prim_null_63(i64 %rvp236178)                              ; call prim_null_63
  %cmp244967 = icmp eq i64 %check236179, 15                                          ; false?
  br i1 %cmp244967, label %else244969, label %then244968                             ; if

then244968:
  %msg236183 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str244970, i32 0, i32 0)); quoted string
  %abort236181 = call i64 @prim_halt(i64 %msg236183)                                 ; call prim_halt
  %sym236186 = add i64 0, 0                                                          ; quoted ()
  %cloptr244971 = inttoptr i64 %abort236181 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr244972 = getelementptr inbounds i64, i64* %cloptr244971, i64 0               ; &cloptr244971[0]
  %f244974 = load i64, i64* %i0ptr244972, align 8                                    ; load; *i0ptr244972
  %fptr244973 = inttoptr i64 %f244974 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr244973(i64 %abort236181, i64 %sym236186)            ; tail call
  ret void

else244969:
  %rest236185 = call i64 @prim_cdr(i64 %rvp236178)                                   ; call prim_cdr
  %empty236180 = call i64 @prim_null_63(i64 %rest236185)                             ; call prim_null_63
  %cmp244975 = icmp eq i64 %empty236180, 15                                          ; false?
  br i1 %cmp244975, label %else244977, label %then244976                             ; if

then244976:
  %b233664233840 = call i64 @prim_car(i64 %rvp236178)                                ; call prim_car
  %na236174 = call i64 @prim_cdr(i64 %rvp236178)                                     ; call prim_cdr
  %a233983 = call i64 @prim__60_61(i64 %a233663233839, i64 %b233664233840)           ; call prim__60_61
  %retprim234100 = call i64 @prim_not(i64 %a233983)                                  ; call prim_not
  %arg234394 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %sym236175 = add i64 0, 0                                                          ; quoted ()
  %x236176 = call i64 @prim_cons(i64 %retprim234100, i64 %sym236175)                 ; call prim_cons
  %x236177 = call i64 @prim_cons(i64 %arg234394, i64 %x236176)                       ; call prim_cons
  %cloptr244978 = inttoptr i64 %cont234099 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr244979 = getelementptr inbounds i64, i64* %cloptr244978, i64 0               ; &cloptr244978[0]
  %f244981 = load i64, i64* %i0ptr244979, align 8                                    ; load; *i0ptr244979
  %fptr244980 = inttoptr i64 %f244981 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr244980(i64 %cont234099, i64 %x236177)               ; tail call
  ret void

else244977:
  %many236184 = call i64 @const_init_string(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @str244982, i32 0, i32 0)); quoted string
  %fail236182 = call i64 @prim_halt(i64 %many236184)                                 ; call prim_halt
  %sym236187 = add i64 0, 0                                                          ; quoted ()
  %cloptr244983 = inttoptr i64 %fail236182 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr244984 = getelementptr inbounds i64, i64* %cloptr244983, i64 0               ; &cloptr244983[0]
  %f244986 = load i64, i64* %i0ptr244984, align 8                                    ; load; *i0ptr244984
  %fptr244985 = inttoptr i64 %f244986 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr244985(i64 %fail236182, i64 %sym236187)             ; tail call
  ret void
}


define void @lam243956(i64 %env243957, i64 %rvp236230) {
  %check236231 = call i64 @prim_null_63(i64 %rvp236230)                              ; call prim_null_63
  %cmp244987 = icmp eq i64 %check236231, 15                                          ; false?
  br i1 %cmp244987, label %else244989, label %then244988                             ; if

then244988:
  %msg236235 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str244990, i32 0, i32 0)); quoted string
  %abort236233 = call i64 @prim_halt(i64 %msg236235)                                 ; call prim_halt
  %sym236238 = add i64 0, 0                                                          ; quoted ()
  %cloptr244991 = inttoptr i64 %abort236233 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr244992 = getelementptr inbounds i64, i64* %cloptr244991, i64 0               ; &cloptr244991[0]
  %f244994 = load i64, i64* %i0ptr244992, align 8                                    ; load; *i0ptr244992
  %fptr244993 = inttoptr i64 %f244994 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr244993(i64 %abort236233, i64 %sym236238)            ; tail call
  ret void

else244989:
  %cont234101 = call i64 @prim_car(i64 %rvp236230)                                   ; call prim_car
  %rvp236221 = call i64 @prim_cdr(i64 %rvp236230)                                    ; call prim_cdr
  %check236222 = call i64 @prim_null_63(i64 %rvp236221)                              ; call prim_null_63
  %cmp244995 = icmp eq i64 %check236222, 15                                          ; false?
  br i1 %cmp244995, label %else244997, label %then244996                             ; if

then244996:
  %msg236226 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str244998, i32 0, i32 0)); quoted string
  %abort236224 = call i64 @prim_halt(i64 %msg236226)                                 ; call prim_halt
  %sym236229 = add i64 0, 0                                                          ; quoted ()
  %cloptr244999 = inttoptr i64 %abort236224 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr245000 = getelementptr inbounds i64, i64* %cloptr244999, i64 0               ; &cloptr244999[0]
  %f245002 = load i64, i64* %i0ptr245000, align 8                                    ; load; *i0ptr245000
  %fptr245001 = inttoptr i64 %f245002 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr245001(i64 %abort236224, i64 %sym236229)            ; tail call
  ret void

else244997:
  %a233665233841 = call i64 @prim_car(i64 %rvp236221)                                ; call prim_car
  %rvp236211 = call i64 @prim_cdr(i64 %rvp236221)                                    ; call prim_cdr
  %check236212 = call i64 @prim_null_63(i64 %rvp236211)                              ; call prim_null_63
  %cmp245003 = icmp eq i64 %check236212, 15                                          ; false?
  br i1 %cmp245003, label %else245005, label %then245004                             ; if

then245004:
  %msg236216 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str245006, i32 0, i32 0)); quoted string
  %abort236214 = call i64 @prim_halt(i64 %msg236216)                                 ; call prim_halt
  %sym236219 = add i64 0, 0                                                          ; quoted ()
  %cloptr245007 = inttoptr i64 %abort236214 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr245008 = getelementptr inbounds i64, i64* %cloptr245007, i64 0               ; &cloptr245007[0]
  %f245010 = load i64, i64* %i0ptr245008, align 8                                    ; load; *i0ptr245008
  %fptr245009 = inttoptr i64 %f245010 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr245009(i64 %abort236214, i64 %sym236219)            ; tail call
  ret void

else245005:
  %rest236218 = call i64 @prim_cdr(i64 %rvp236211)                                   ; call prim_cdr
  %empty236213 = call i64 @prim_null_63(i64 %rest236218)                             ; call prim_null_63
  %cmp245011 = icmp eq i64 %empty236213, 15                                          ; false?
  br i1 %cmp245011, label %else245013, label %then245012                             ; if

then245012:
  %b233666233842 = call i64 @prim_car(i64 %rvp236211)                                ; call prim_car
  %na236207 = call i64 @prim_cdr(i64 %rvp236211)                                     ; call prim_cdr
  %a233984 = call i64 @prim__60(i64 %a233665233841, i64 %b233666233842)              ; call prim__60
  %retprim234102 = call i64 @prim_not(i64 %a233984)                                  ; call prim_not
  %arg234400 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %sym236208 = add i64 0, 0                                                          ; quoted ()
  %x236209 = call i64 @prim_cons(i64 %retprim234102, i64 %sym236208)                 ; call prim_cons
  %x236210 = call i64 @prim_cons(i64 %arg234400, i64 %x236209)                       ; call prim_cons
  %cloptr245014 = inttoptr i64 %cont234101 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr245015 = getelementptr inbounds i64, i64* %cloptr245014, i64 0               ; &cloptr245014[0]
  %f245017 = load i64, i64* %i0ptr245015, align 8                                    ; load; *i0ptr245015
  %fptr245016 = inttoptr i64 %f245017 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr245016(i64 %cont234101, i64 %x236210)               ; tail call
  ret void

else245013:
  %many236217 = call i64 @const_init_string(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @str245018, i32 0, i32 0)); quoted string
  %fail236215 = call i64 @prim_halt(i64 %many236217)                                 ; call prim_halt
  %sym236220 = add i64 0, 0                                                          ; quoted ()
  %cloptr245019 = inttoptr i64 %fail236215 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr245020 = getelementptr inbounds i64, i64* %cloptr245019, i64 0               ; &cloptr245019[0]
  %f245022 = load i64, i64* %i0ptr245020, align 8                                    ; load; *i0ptr245020
  %fptr245021 = inttoptr i64 %f245022 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr245021(i64 %fail236215, i64 %sym236220)             ; tail call
  ret void
}


define void @lam243941(i64 %env243942, i64 %rvp236291) {
  %envptr245023 = inttoptr i64 %env243942 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr245024 = getelementptr inbounds i64, i64* %envptr245023, i64 1              ; &envptr245023[1]
  %_37append233667233843 = load i64, i64* %envptr245024, align 8                     ; load; *envptr245024
  %check236292 = call i64 @prim_null_63(i64 %rvp236291)                              ; call prim_null_63
  %cmp245025 = icmp eq i64 %check236292, 15                                          ; false?
  br i1 %cmp245025, label %else245027, label %then245026                             ; if

then245026:
  %msg236296 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str245028, i32 0, i32 0)); quoted string
  %abort236294 = call i64 @prim_halt(i64 %msg236296)                                 ; call prim_halt
  %sym236299 = add i64 0, 0                                                          ; quoted ()
  %cloptr245029 = inttoptr i64 %abort236294 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr245030 = getelementptr inbounds i64, i64* %cloptr245029, i64 0               ; &cloptr245029[0]
  %f245032 = load i64, i64* %i0ptr245030, align 8                                    ; load; *i0ptr245030
  %fptr245031 = inttoptr i64 %f245032 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr245031(i64 %abort236294, i64 %sym236299)            ; tail call
  ret void

else245027:
  %cont234230 = call i64 @prim_car(i64 %rvp236291)                                   ; call prim_car
  %rvp236282 = call i64 @prim_cdr(i64 %rvp236291)                                    ; call prim_cdr
  %check236283 = call i64 @prim_null_63(i64 %rvp236282)                              ; call prim_null_63
  %cmp245033 = icmp eq i64 %check236283, 15                                          ; false?
  br i1 %cmp245033, label %else245035, label %then245034                             ; if

then245034:
  %msg236287 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str245036, i32 0, i32 0)); quoted string
  %abort236285 = call i64 @prim_halt(i64 %msg236287)                                 ; call prim_halt
  %sym236290 = add i64 0, 0                                                          ; quoted ()
  %cloptr245037 = inttoptr i64 %abort236285 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr245038 = getelementptr inbounds i64, i64* %cloptr245037, i64 0               ; &cloptr245037[0]
  %f245040 = load i64, i64* %i0ptr245038, align 8                                    ; load; *i0ptr245038
  %fptr245039 = inttoptr i64 %f245040 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr245039(i64 %abort236285, i64 %sym236290)            ; tail call
  ret void

else245035:
  %ls0233669233845 = call i64 @prim_car(i64 %rvp236282)                              ; call prim_car
  %rvp236272 = call i64 @prim_cdr(i64 %rvp236282)                                    ; call prim_cdr
  %check236273 = call i64 @prim_null_63(i64 %rvp236272)                              ; call prim_null_63
  %cmp245041 = icmp eq i64 %check236273, 15                                          ; false?
  br i1 %cmp245041, label %else245043, label %then245042                             ; if

then245042:
  %msg236277 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str245044, i32 0, i32 0)); quoted string
  %abort236275 = call i64 @prim_halt(i64 %msg236277)                                 ; call prim_halt
  %sym236280 = add i64 0, 0                                                          ; quoted ()
  %cloptr245045 = inttoptr i64 %abort236275 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr245046 = getelementptr inbounds i64, i64* %cloptr245045, i64 0               ; &cloptr245045[0]
  %f245048 = load i64, i64* %i0ptr245046, align 8                                    ; load; *i0ptr245046
  %fptr245047 = inttoptr i64 %f245048 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr245047(i64 %abort236275, i64 %sym236280)            ; tail call
  ret void

else245043:
  %rest236279 = call i64 @prim_cdr(i64 %rvp236272)                                   ; call prim_cdr
  %empty236274 = call i64 @prim_null_63(i64 %rest236279)                             ; call prim_null_63
  %cmp245049 = icmp eq i64 %empty236274, 15                                          ; false?
  br i1 %cmp245049, label %else245051, label %then245050                             ; if

then245050:
  %ls1233670233846 = call i64 @prim_car(i64 %rvp236272)                              ; call prim_car
  %na236240 = call i64 @prim_cdr(i64 %rvp236272)                                     ; call prim_cdr
  %a233985 = call i64 @prim_null_63(i64 %ls0233669233845)                            ; call prim_null_63
  %cmp245052 = icmp eq i64 %a233985, 15                                              ; false?
  br i1 %cmp245052, label %else245054, label %then245053                             ; if

then245053:
  %arg234409 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %sym236241 = add i64 0, 0                                                          ; quoted ()
  %x236242 = call i64 @prim_cons(i64 %ls1233670233846, i64 %sym236241)               ; call prim_cons
  %x236243 = call i64 @prim_cons(i64 %arg234409, i64 %x236242)                       ; call prim_cons
  %cloptr245055 = inttoptr i64 %cont234230 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr245056 = getelementptr inbounds i64, i64* %cloptr245055, i64 0               ; &cloptr245055[0]
  %f245058 = load i64, i64* %i0ptr245056, align 8                                    ; load; *i0ptr245056
  %fptr245057 = inttoptr i64 %f245058 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr245057(i64 %cont234230, i64 %x236243)               ; tail call
  ret void

else245054:
  %a233986 = call i64 @prim_car(i64 %ls0233669233845)                                ; call prim_car
  %arg234412 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %a233987 = call i64 @prim_vector_45ref(i64 %_37append233667233843, i64 %arg234412) ; call prim_vector_45ref
  %a233988 = call i64 @prim_cdr(i64 %ls0233669233845)                                ; call prim_cdr
  %cloptr245059 = call i64* @alloc(i64 24)                                           ; malloc
  %eptr245061 = getelementptr inbounds i64, i64* %cloptr245059, i64 1                ; &eptr245061[1]
  %eptr245062 = getelementptr inbounds i64, i64* %cloptr245059, i64 2                ; &eptr245062[2]
  store i64 %cont234230, i64* %eptr245061                                            ; *eptr245061 = %cont234230
  store i64 %a233986, i64* %eptr245062                                               ; *eptr245062 = %a233986
  %eptr245060 = getelementptr inbounds i64, i64* %cloptr245059, i64 0                ; &cloptr245059[0]
  %f245063 = ptrtoint void(i64,i64)* @lam243936 to i64                               ; fptr cast; i64(...)* -> i64
  store i64 %f245063, i64* %eptr245060                                               ; store fptr
  %arg234417 = ptrtoint i64* %cloptr245059 to i64                                    ; closure cast; i64* -> i64
  %sym236268 = add i64 0, 0                                                          ; quoted ()
  %x236269 = call i64 @prim_cons(i64 %ls1233670233846, i64 %sym236268)               ; call prim_cons
  %x236270 = call i64 @prim_cons(i64 %a233988, i64 %x236269)                         ; call prim_cons
  %x236271 = call i64 @prim_cons(i64 %arg234417, i64 %x236270)                       ; call prim_cons
  %cloptr245064 = inttoptr i64 %a233987 to i64*                                      ; closure/env cast; i64 -> i64*
  %i0ptr245065 = getelementptr inbounds i64, i64* %cloptr245064, i64 0               ; &cloptr245064[0]
  %f245067 = load i64, i64* %i0ptr245065, align 8                                    ; load; *i0ptr245065
  %fptr245066 = inttoptr i64 %f245067 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr245066(i64 %a233987, i64 %x236271)                  ; tail call
  ret void

else245051:
  %many236278 = call i64 @const_init_string(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @str245068, i32 0, i32 0)); quoted string
  %fail236276 = call i64 @prim_halt(i64 %many236278)                                 ; call prim_halt
  %sym236281 = add i64 0, 0                                                          ; quoted ()
  %cloptr245069 = inttoptr i64 %fail236276 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr245070 = getelementptr inbounds i64, i64* %cloptr245069, i64 0               ; &cloptr245069[0]
  %f245072 = load i64, i64* %i0ptr245070, align 8                                    ; load; *i0ptr245070
  %fptr245071 = inttoptr i64 %f245072 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr245071(i64 %fail236276, i64 %sym236281)             ; tail call
  ret void
}


define void @lam243936(i64 %env243937, i64 %rvp236259) {
  %envptr245073 = inttoptr i64 %env243937 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr245074 = getelementptr inbounds i64, i64* %envptr245073, i64 2              ; &envptr245073[2]
  %a233986 = load i64, i64* %envptr245074, align 8                                   ; load; *envptr245074
  %envptr245075 = inttoptr i64 %env243937 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr245076 = getelementptr inbounds i64, i64* %envptr245075, i64 1              ; &envptr245075[1]
  %cont234230 = load i64, i64* %envptr245076, align 8                                ; load; *envptr245076
  %check236260 = call i64 @prim_null_63(i64 %rvp236259)                              ; call prim_null_63
  %cmp245077 = icmp eq i64 %check236260, 15                                          ; false?
  br i1 %cmp245077, label %else245079, label %then245078                             ; if

then245078:
  %msg236264 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str245080, i32 0, i32 0)); quoted string
  %abort236262 = call i64 @prim_halt(i64 %msg236264)                                 ; call prim_halt
  %sym236267 = add i64 0, 0                                                          ; quoted ()
  %cloptr245081 = inttoptr i64 %abort236262 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr245082 = getelementptr inbounds i64, i64* %cloptr245081, i64 0               ; &cloptr245081[0]
  %f245084 = load i64, i64* %i0ptr245082, align 8                                    ; load; *i0ptr245082
  %fptr245083 = inttoptr i64 %f245084 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr245083(i64 %abort236262, i64 %sym236267)            ; tail call
  ret void

else245079:
  %_95234231 = call i64 @prim_car(i64 %rvp236259)                                    ; call prim_car
  %rvp236249 = call i64 @prim_cdr(i64 %rvp236259)                                    ; call prim_cdr
  %check236250 = call i64 @prim_null_63(i64 %rvp236249)                              ; call prim_null_63
  %cmp245085 = icmp eq i64 %check236250, 15                                          ; false?
  br i1 %cmp245085, label %else245087, label %then245086                             ; if

then245086:
  %msg236254 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str245088, i32 0, i32 0)); quoted string
  %abort236252 = call i64 @prim_halt(i64 %msg236254)                                 ; call prim_halt
  %sym236257 = add i64 0, 0                                                          ; quoted ()
  %cloptr245089 = inttoptr i64 %abort236252 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr245090 = getelementptr inbounds i64, i64* %cloptr245089, i64 0               ; &cloptr245089[0]
  %f245092 = load i64, i64* %i0ptr245090, align 8                                    ; load; *i0ptr245090
  %fptr245091 = inttoptr i64 %f245092 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr245091(i64 %abort236252, i64 %sym236257)            ; tail call
  ret void

else245087:
  %rest236256 = call i64 @prim_cdr(i64 %rvp236249)                                   ; call prim_cdr
  %empty236251 = call i64 @prim_null_63(i64 %rest236256)                             ; call prim_null_63
  %cmp245093 = icmp eq i64 %empty236251, 15                                          ; false?
  br i1 %cmp245093, label %else245095, label %then245094                             ; if

then245094:
  %a233989 = call i64 @prim_car(i64 %rvp236249)                                      ; call prim_car
  %na236245 = call i64 @prim_cdr(i64 %rvp236249)                                     ; call prim_cdr
  %retprim234232 = call i64 @prim_cons(i64 %a233986, i64 %a233989)                   ; call prim_cons
  %arg234422 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %sym236246 = add i64 0, 0                                                          ; quoted ()
  %x236247 = call i64 @prim_cons(i64 %retprim234232, i64 %sym236246)                 ; call prim_cons
  %x236248 = call i64 @prim_cons(i64 %arg234422, i64 %x236247)                       ; call prim_cons
  %cloptr245096 = inttoptr i64 %cont234230 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr245097 = getelementptr inbounds i64, i64* %cloptr245096, i64 0               ; &cloptr245096[0]
  %f245099 = load i64, i64* %i0ptr245097, align 8                                    ; load; *i0ptr245097
  %fptr245098 = inttoptr i64 %f245099 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr245098(i64 %cont234230, i64 %x236248)               ; tail call
  ret void

else245095:
  %many236255 = call i64 @const_init_string(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @str245100, i32 0, i32 0)); quoted string
  %fail236253 = call i64 @prim_halt(i64 %many236255)                                 ; call prim_halt
  %sym236258 = add i64 0, 0                                                          ; quoted ()
  %cloptr245101 = inttoptr i64 %fail236253 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr245102 = getelementptr inbounds i64, i64* %cloptr245101, i64 0               ; &cloptr245101[0]
  %f245104 = load i64, i64* %i0ptr245102, align 8                                    ; load; *i0ptr245102
  %fptr245103 = inttoptr i64 %f245104 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr245103(i64 %fail236253, i64 %sym236258)             ; tail call
  ret void
}


define void @lam243916(i64 %env243917, i64 %rvp240218) {
  %envptr245105 = inttoptr i64 %env243917 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr245106 = getelementptr inbounds i64, i64* %envptr245105, i64 3              ; &envptr245105[3]
  %_37length233588233764 = load i64, i64* %envptr245106, align 8                     ; load; *envptr245106
  %envptr245107 = inttoptr i64 %env243917 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr245108 = getelementptr inbounds i64, i64* %envptr245107, i64 2              ; &envptr245107[2]
  %_37_62233638233814 = load i64, i64* %envptr245108, align 8                        ; load; *envptr245108
  %envptr245109 = inttoptr i64 %env243917 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr245110 = getelementptr inbounds i64, i64* %envptr245109, i64 1              ; &envptr245109[1]
  %_37foldl1233589233765 = load i64, i64* %envptr245110, align 8                     ; load; *envptr245110
  %check240219 = call i64 @prim_null_63(i64 %rvp240218)                              ; call prim_null_63
  %cmp245111 = icmp eq i64 %check240219, 15                                          ; false?
  br i1 %cmp245111, label %else245113, label %then245112                             ; if

then245112:
  %msg240223 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str245114, i32 0, i32 0)); quoted string
  %abort240221 = call i64 @prim_halt(i64 %msg240223)                                 ; call prim_halt
  %sym240226 = add i64 0, 0                                                          ; quoted ()
  %cloptr245115 = inttoptr i64 %abort240221 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr245116 = getelementptr inbounds i64, i64* %cloptr245115, i64 0               ; &cloptr245115[0]
  %f245118 = load i64, i64* %i0ptr245116, align 8                                    ; load; *i0ptr245116
  %fptr245117 = inttoptr i64 %f245118 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr245117(i64 %abort240221, i64 %sym240226)            ; tail call
  ret void

else245113:
  %_95234103 = call i64 @prim_car(i64 %rvp240218)                                    ; call prim_car
  %rvp240208 = call i64 @prim_cdr(i64 %rvp240218)                                    ; call prim_cdr
  %check240209 = call i64 @prim_null_63(i64 %rvp240208)                              ; call prim_null_63
  %cmp245119 = icmp eq i64 %check240209, 15                                          ; false?
  br i1 %cmp245119, label %else245121, label %then245120                             ; if

then245120:
  %msg240213 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str245122, i32 0, i32 0)); quoted string
  %abort240211 = call i64 @prim_halt(i64 %msg240213)                                 ; call prim_halt
  %sym240216 = add i64 0, 0                                                          ; quoted ()
  %cloptr245123 = inttoptr i64 %abort240211 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr245124 = getelementptr inbounds i64, i64* %cloptr245123, i64 0               ; &cloptr245123[0]
  %f245126 = load i64, i64* %i0ptr245124, align 8                                    ; load; *i0ptr245124
  %fptr245125 = inttoptr i64 %f245126 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr245125(i64 %abort240211, i64 %sym240216)            ; tail call
  ret void

else245121:
  %rest240215 = call i64 @prim_cdr(i64 %rvp240208)                                   ; call prim_cdr
  %empty240210 = call i64 @prim_null_63(i64 %rest240215)                             ; call prim_null_63
  %cmp245127 = icmp eq i64 %empty240210, 15                                          ; false?
  br i1 %cmp245127, label %else245129, label %then245128                             ; if

then245128:
  %_37append233640233816 = call i64 @prim_car(i64 %rvp240208)                        ; call prim_car
  %na236301 = call i64 @prim_cdr(i64 %rvp240208)                                     ; call prim_cdr
  %cloptr245130 = call i64* @alloc(i64 8)                                            ; malloc
  %eptr245131 = getelementptr inbounds i64, i64* %cloptr245130, i64 0                ; &cloptr245130[0]
  %f245132 = ptrtoint void(i64,i64)* @lam243912 to i64                               ; fptr cast; i64(...)* -> i64
  store i64 %f245132, i64* %eptr245131                                               ; store fptr
  %_37list_63233641233817 = ptrtoint i64* %cloptr245130 to i64                       ; closure cast; i64* -> i64
  %cloptr245133 = call i64* @alloc(i64 8)                                            ; malloc
  %eptr245134 = getelementptr inbounds i64, i64* %cloptr245133, i64 0                ; &cloptr245133[0]
  %f245135 = ptrtoint void(i64,i64)* @lam243812 to i64                               ; fptr cast; i64(...)* -> i64
  store i64 %f245135, i64* %eptr245134                                               ; store fptr
  %_37drop233642233818 = ptrtoint i64* %cloptr245133 to i64                          ; closure cast; i64* -> i64
  %cloptr245136 = call i64* @alloc(i64 8)                                            ; malloc
  %eptr245137 = getelementptr inbounds i64, i64* %cloptr245136, i64 0                ; &cloptr245136[0]
  %f245138 = ptrtoint void(i64,i64)* @lam243712 to i64                               ; fptr cast; i64(...)* -> i64
  store i64 %f245138, i64* %eptr245137                                               ; store fptr
  %_37memv233643233819 = ptrtoint i64* %cloptr245136 to i64                          ; closure cast; i64* -> i64
  %cloptr245139 = call i64* @alloc(i64 16)                                           ; malloc
  %eptr245141 = getelementptr inbounds i64, i64* %cloptr245139, i64 1                ; &eptr245141[1]
  store i64 %_37foldl1233589233765, i64* %eptr245141                                 ; *eptr245141 = %_37foldl1233589233765
  %eptr245140 = getelementptr inbounds i64, i64* %cloptr245139, i64 0                ; &cloptr245139[0]
  %f245142 = ptrtoint void(i64,i64)* @lam243633 to i64                               ; fptr cast; i64(...)* -> i64
  store i64 %f245142, i64* %eptr245140                                               ; store fptr
  %_37_47233644233820 = ptrtoint i64* %cloptr245139 to i64                           ; closure cast; i64* -> i64
  %cloptr245143 = call i64* @alloc(i64 8)                                            ; malloc
  %eptr245144 = getelementptr inbounds i64, i64* %cloptr245143, i64 0                ; &cloptr245143[0]
  %f245145 = ptrtoint void(i64,i64)* @lam243613 to i64                               ; fptr cast; i64(...)* -> i64
  store i64 %f245145, i64* %eptr245144                                               ; store fptr
  %_37first233645233821 = ptrtoint i64* %cloptr245143 to i64                         ; closure cast; i64* -> i64
  %cloptr245146 = call i64* @alloc(i64 8)                                            ; malloc
  %eptr245147 = getelementptr inbounds i64, i64* %cloptr245146, i64 0                ; &cloptr245146[0]
  %f245148 = ptrtoint void(i64,i64)* @lam243603 to i64                               ; fptr cast; i64(...)* -> i64
  store i64 %f245148, i64* %eptr245147                                               ; store fptr
  %_37second233646233822 = ptrtoint i64* %cloptr245146 to i64                        ; closure cast; i64* -> i64
  %cloptr245149 = call i64* @alloc(i64 8)                                            ; malloc
  %eptr245150 = getelementptr inbounds i64, i64* %cloptr245149, i64 0                ; &cloptr245149[0]
  %f245151 = ptrtoint void(i64,i64)* @lam243593 to i64                               ; fptr cast; i64(...)* -> i64
  store i64 %f245151, i64* %eptr245150                                               ; store fptr
  %_37third233647233823 = ptrtoint i64* %cloptr245149 to i64                         ; closure cast; i64* -> i64
  %cloptr245152 = call i64* @alloc(i64 8)                                            ; malloc
  %eptr245153 = getelementptr inbounds i64, i64* %cloptr245152, i64 0                ; &cloptr245152[0]
  %f245154 = ptrtoint void(i64,i64)* @lam243583 to i64                               ; fptr cast; i64(...)* -> i64
  store i64 %f245154, i64* %eptr245153                                               ; store fptr
  %_37fourth233648233824 = ptrtoint i64* %cloptr245152 to i64                        ; closure cast; i64* -> i64
  %cloptr245155 = call i64* @alloc(i64 8)                                            ; malloc
  %eptr245156 = getelementptr inbounds i64, i64* %cloptr245155, i64 0                ; &cloptr245155[0]
  %f245157 = ptrtoint void(i64,i64)* @lam243573 to i64                               ; fptr cast; i64(...)* -> i64
  store i64 %f245157, i64* %eptr245156                                               ; store fptr
  %arg234680 = ptrtoint i64* %cloptr245155 to i64                                    ; closure cast; i64* -> i64
  %cloptr245158 = call i64* @alloc(i64 32)                                           ; malloc
  %eptr245160 = getelementptr inbounds i64, i64* %cloptr245158, i64 1                ; &eptr245160[1]
  %eptr245161 = getelementptr inbounds i64, i64* %cloptr245158, i64 2                ; &eptr245161[2]
  %eptr245162 = getelementptr inbounds i64, i64* %cloptr245158, i64 3                ; &eptr245162[3]
  store i64 %_37_62233638233814, i64* %eptr245160                                    ; *eptr245160 = %_37_62233638233814
  store i64 %_37length233588233764, i64* %eptr245161                                 ; *eptr245161 = %_37length233588233764
  store i64 %_37drop233642233818, i64* %eptr245162                                   ; *eptr245162 = %_37drop233642233818
  %eptr245159 = getelementptr inbounds i64, i64* %cloptr245158, i64 0                ; &cloptr245158[0]
  %f245163 = ptrtoint void(i64,i64)* @lam243569 to i64                               ; fptr cast; i64(...)* -> i64
  store i64 %f245163, i64* %eptr245159                                               ; store fptr
  %arg234679 = ptrtoint i64* %cloptr245158 to i64                                    ; closure cast; i64* -> i64
  %sym240206 = add i64 0, 0                                                          ; quoted ()
  %x240207 = call i64 @prim_cons(i64 %arg234679, i64 %sym240206)                     ; call prim_cons
  %cloptr245164 = inttoptr i64 %arg234680 to i64*                                    ; closure/env cast; i64 -> i64*
  %i0ptr245165 = getelementptr inbounds i64, i64* %cloptr245164, i64 0               ; &cloptr245164[0]
  %f245167 = load i64, i64* %i0ptr245165, align 8                                    ; load; *i0ptr245165
  %fptr245166 = inttoptr i64 %f245167 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr245166(i64 %arg234680, i64 %x240207)                ; tail call
  ret void

else245129:
  %many240214 = call i64 @const_init_string(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @str245168, i32 0, i32 0)); quoted string
  %fail240212 = call i64 @prim_halt(i64 %many240214)                                 ; call prim_halt
  %sym240217 = add i64 0, 0                                                          ; quoted ()
  %cloptr245169 = inttoptr i64 %fail240212 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr245170 = getelementptr inbounds i64, i64* %cloptr245169, i64 0               ; &cloptr245169[0]
  %f245172 = load i64, i64* %i0ptr245170, align 8                                    ; load; *i0ptr245170
  %fptr245171 = inttoptr i64 %f245172 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr245171(i64 %fail240212, i64 %sym240217)             ; tail call
  ret void
}


define void @lam243912(i64 %env243913, i64 %rvp236497) {
  %check236498 = call i64 @prim_null_63(i64 %rvp236497)                              ; call prim_null_63
  %cmp245173 = icmp eq i64 %check236498, 15                                          ; false?
  br i1 %cmp245173, label %else245175, label %then245174                             ; if

then245174:
  %msg236502 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str245176, i32 0, i32 0)); quoted string
  %abort236500 = call i64 @prim_halt(i64 %msg236502)                                 ; call prim_halt
  %sym236505 = add i64 0, 0                                                          ; quoted ()
  %cloptr245177 = inttoptr i64 %abort236500 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr245178 = getelementptr inbounds i64, i64* %cloptr245177, i64 0               ; &cloptr245177[0]
  %f245180 = load i64, i64* %i0ptr245178, align 8                                    ; load; *i0ptr245178
  %fptr245179 = inttoptr i64 %f245180 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr245179(i64 %abort236500, i64 %sym236505)            ; tail call
  ret void

else245175:
  %cont234104 = call i64 @prim_car(i64 %rvp236497)                                   ; call prim_car
  %rvp236487 = call i64 @prim_cdr(i64 %rvp236497)                                    ; call prim_cdr
  %check236488 = call i64 @prim_null_63(i64 %rvp236487)                              ; call prim_null_63
  %cmp245181 = icmp eq i64 %check236488, 15                                          ; false?
  br i1 %cmp245181, label %else245183, label %then245182                             ; if

then245182:
  %msg236492 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str245184, i32 0, i32 0)); quoted string
  %abort236490 = call i64 @prim_halt(i64 %msg236492)                                 ; call prim_halt
  %sym236495 = add i64 0, 0                                                          ; quoted ()
  %cloptr245185 = inttoptr i64 %abort236490 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr245186 = getelementptr inbounds i64, i64* %cloptr245185, i64 0               ; &cloptr245185[0]
  %f245188 = load i64, i64* %i0ptr245186, align 8                                    ; load; *i0ptr245186
  %fptr245187 = inttoptr i64 %f245188 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr245187(i64 %abort236490, i64 %sym236495)            ; tail call
  ret void

else245183:
  %rest236494 = call i64 @prim_cdr(i64 %rvp236487)                                   ; call prim_cdr
  %empty236489 = call i64 @prim_null_63(i64 %rest236494)                             ; call prim_null_63
  %cmp245189 = icmp eq i64 %empty236489, 15                                          ; false?
  br i1 %cmp245189, label %else245191, label %then245190                             ; if

then245190:
  %a233671233847 = call i64 @prim_car(i64 %rvp236487)                                ; call prim_car
  %na236303 = call i64 @prim_cdr(i64 %rvp236487)                                     ; call prim_cdr
  %arg234430 = call i64 @const_init_int(i64 1)                                       ; quoted int
  %a233671233848 = call i64 @prim_make_45vector(i64 %arg234430, i64 %a233671233847)  ; call prim_make_45vector
  %cloptr245192 = call i64* @alloc(i64 8)                                            ; malloc
  %eptr245193 = getelementptr inbounds i64, i64* %cloptr245192, i64 0                ; &cloptr245192[0]
  %f245194 = ptrtoint void(i64,i64)* @lam243907 to i64                               ; fptr cast; i64(...)* -> i64
  store i64 %f245194, i64* %eptr245193                                               ; store fptr
  %arg234433 = ptrtoint i64* %cloptr245192 to i64                                    ; closure cast; i64* -> i64
  %cloptr245195 = call i64* @alloc(i64 24)                                           ; malloc
  %eptr245197 = getelementptr inbounds i64, i64* %cloptr245195, i64 1                ; &eptr245197[1]
  %eptr245198 = getelementptr inbounds i64, i64* %cloptr245195, i64 2                ; &eptr245198[2]
  store i64 %a233671233848, i64* %eptr245197                                         ; *eptr245197 = %a233671233848
  store i64 %cont234104, i64* %eptr245198                                            ; *eptr245198 = %cont234104
  %eptr245196 = getelementptr inbounds i64, i64* %cloptr245195, i64 0                ; &cloptr245195[0]
  %f245199 = ptrtoint void(i64,i64)* @lam243897 to i64                               ; fptr cast; i64(...)* -> i64
  store i64 %f245199, i64* %eptr245196                                               ; store fptr
  %arg234432 = ptrtoint i64* %cloptr245195 to i64                                    ; closure cast; i64* -> i64
  %cloptr245200 = call i64* @alloc(i64 24)                                           ; malloc
  %eptr245202 = getelementptr inbounds i64, i64* %cloptr245200, i64 1                ; &eptr245202[1]
  %eptr245203 = getelementptr inbounds i64, i64* %cloptr245200, i64 2                ; &eptr245203[2]
  store i64 %a233671233848, i64* %eptr245202                                         ; *eptr245202 = %a233671233848
  store i64 %cont234104, i64* %eptr245203                                            ; *eptr245203 = %cont234104
  %eptr245201 = getelementptr inbounds i64, i64* %cloptr245200, i64 0                ; &cloptr245200[0]
  %f245204 = ptrtoint void(i64,i64)* @lam243857 to i64                               ; fptr cast; i64(...)* -> i64
  store i64 %f245204, i64* %eptr245201                                               ; store fptr
  %arg234431 = ptrtoint i64* %cloptr245200 to i64                                    ; closure cast; i64* -> i64
  %sym236484 = add i64 0, 0                                                          ; quoted ()
  %x236485 = call i64 @prim_cons(i64 %arg234431, i64 %sym236484)                     ; call prim_cons
  %x236486 = call i64 @prim_cons(i64 %arg234432, i64 %x236485)                       ; call prim_cons
  %cloptr245205 = inttoptr i64 %arg234433 to i64*                                    ; closure/env cast; i64 -> i64*
  %i0ptr245206 = getelementptr inbounds i64, i64* %cloptr245205, i64 0               ; &cloptr245205[0]
  %f245208 = load i64, i64* %i0ptr245206, align 8                                    ; load; *i0ptr245206
  %fptr245207 = inttoptr i64 %f245208 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr245207(i64 %arg234433, i64 %x236486)                ; tail call
  ret void

else245191:
  %many236493 = call i64 @const_init_string(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @str245209, i32 0, i32 0)); quoted string
  %fail236491 = call i64 @prim_halt(i64 %many236493)                                 ; call prim_halt
  %sym236496 = add i64 0, 0                                                          ; quoted ()
  %cloptr245210 = inttoptr i64 %fail236491 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr245211 = getelementptr inbounds i64, i64* %cloptr245210, i64 0               ; &cloptr245210[0]
  %f245213 = load i64, i64* %i0ptr245211, align 8                                    ; load; *i0ptr245211
  %fptr245212 = inttoptr i64 %f245213 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr245212(i64 %fail236491, i64 %sym236496)             ; tail call
  ret void
}


define void @lam243907(i64 %env243908, i64 %rvp236319) {
  %check236320 = call i64 @prim_null_63(i64 %rvp236319)                              ; call prim_null_63
  %cmp245214 = icmp eq i64 %check236320, 15                                          ; false?
  br i1 %cmp245214, label %else245216, label %then245215                             ; if

then245215:
  %msg236324 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str245217, i32 0, i32 0)); quoted string
  %abort236322 = call i64 @prim_halt(i64 %msg236324)                                 ; call prim_halt
  %sym236327 = add i64 0, 0                                                          ; quoted ()
  %cloptr245218 = inttoptr i64 %abort236322 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr245219 = getelementptr inbounds i64, i64* %cloptr245218, i64 0               ; &cloptr245218[0]
  %f245221 = load i64, i64* %i0ptr245219, align 8                                    ; load; *i0ptr245219
  %fptr245220 = inttoptr i64 %f245221 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr245220(i64 %abort236322, i64 %sym236327)            ; tail call
  ret void

else245216:
  %cont234110 = call i64 @prim_car(i64 %rvp236319)                                   ; call prim_car
  %rvp236309 = call i64 @prim_cdr(i64 %rvp236319)                                    ; call prim_cdr
  %check236310 = call i64 @prim_null_63(i64 %rvp236309)                              ; call prim_null_63
  %cmp245222 = icmp eq i64 %check236310, 15                                          ; false?
  br i1 %cmp245222, label %else245224, label %then245223                             ; if

then245223:
  %msg236314 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str245225, i32 0, i32 0)); quoted string
  %abort236312 = call i64 @prim_halt(i64 %msg236314)                                 ; call prim_halt
  %sym236317 = add i64 0, 0                                                          ; quoted ()
  %cloptr245226 = inttoptr i64 %abort236312 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr245227 = getelementptr inbounds i64, i64* %cloptr245226, i64 0               ; &cloptr245226[0]
  %f245229 = load i64, i64* %i0ptr245227, align 8                                    ; load; *i0ptr245227
  %fptr245228 = inttoptr i64 %f245229 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr245228(i64 %abort236312, i64 %sym236317)            ; tail call
  ret void

else245224:
  %rest236316 = call i64 @prim_cdr(i64 %rvp236309)                                   ; call prim_cdr
  %empty236311 = call i64 @prim_null_63(i64 %rest236316)                             ; call prim_null_63
  %cmp245230 = icmp eq i64 %empty236311, 15                                          ; false?
  br i1 %cmp245230, label %else245232, label %then245231                             ; if

then245231:
  %k233673233850 = call i64 @prim_car(i64 %rvp236309)                                ; call prim_car
  %na236305 = call i64 @prim_cdr(i64 %rvp236309)                                     ; call prim_cdr
  %arg234435 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %sym236306 = add i64 0, 0                                                          ; quoted ()
  %x236307 = call i64 @prim_cons(i64 %k233673233850, i64 %sym236306)                 ; call prim_cons
  %x236308 = call i64 @prim_cons(i64 %arg234435, i64 %x236307)                       ; call prim_cons
  %cloptr245233 = inttoptr i64 %cont234110 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr245234 = getelementptr inbounds i64, i64* %cloptr245233, i64 0               ; &cloptr245233[0]
  %f245236 = load i64, i64* %i0ptr245234, align 8                                    ; load; *i0ptr245234
  %fptr245235 = inttoptr i64 %f245236 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr245235(i64 %cont234110, i64 %x236308)               ; tail call
  ret void

else245232:
  %many236315 = call i64 @const_init_string(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @str245237, i32 0, i32 0)); quoted string
  %fail236313 = call i64 @prim_halt(i64 %many236315)                                 ; call prim_halt
  %sym236318 = add i64 0, 0                                                          ; quoted ()
  %cloptr245238 = inttoptr i64 %fail236313 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr245239 = getelementptr inbounds i64, i64* %cloptr245238, i64 0               ; &cloptr245238[0]
  %f245241 = load i64, i64* %i0ptr245239, align 8                                    ; load; *i0ptr245239
  %fptr245240 = inttoptr i64 %f245241 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr245240(i64 %fail236313, i64 %sym236318)             ; tail call
  ret void
}


define void @lam243897(i64 %env243898, i64 %rvp236397) {
  %envptr245242 = inttoptr i64 %env243898 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr245243 = getelementptr inbounds i64, i64* %envptr245242, i64 2              ; &envptr245242[2]
  %cont234104 = load i64, i64* %envptr245243, align 8                                ; load; *envptr245243
  %envptr245244 = inttoptr i64 %env243898 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr245245 = getelementptr inbounds i64, i64* %envptr245244, i64 1              ; &envptr245244[1]
  %a233671233848 = load i64, i64* %envptr245245, align 8                             ; load; *envptr245245
  %check236398 = call i64 @prim_null_63(i64 %rvp236397)                              ; call prim_null_63
  %cmp245246 = icmp eq i64 %check236398, 15                                          ; false?
  br i1 %cmp245246, label %else245248, label %then245247                             ; if

then245247:
  %msg236402 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str245249, i32 0, i32 0)); quoted string
  %abort236400 = call i64 @prim_halt(i64 %msg236402)                                 ; call prim_halt
  %sym236405 = add i64 0, 0                                                          ; quoted ()
  %cloptr245250 = inttoptr i64 %abort236400 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr245251 = getelementptr inbounds i64, i64* %cloptr245250, i64 0               ; &cloptr245250[0]
  %f245253 = load i64, i64* %i0ptr245251, align 8                                    ; load; *i0ptr245251
  %fptr245252 = inttoptr i64 %f245253 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr245252(i64 %abort236400, i64 %sym236405)            ; tail call
  ret void

else245248:
  %_95234105 = call i64 @prim_car(i64 %rvp236397)                                    ; call prim_car
  %rvp236387 = call i64 @prim_cdr(i64 %rvp236397)                                    ; call prim_cdr
  %check236388 = call i64 @prim_null_63(i64 %rvp236387)                              ; call prim_null_63
  %cmp245254 = icmp eq i64 %check236388, 15                                          ; false?
  br i1 %cmp245254, label %else245256, label %then245255                             ; if

then245255:
  %msg236392 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str245257, i32 0, i32 0)); quoted string
  %abort236390 = call i64 @prim_halt(i64 %msg236392)                                 ; call prim_halt
  %sym236395 = add i64 0, 0                                                          ; quoted ()
  %cloptr245258 = inttoptr i64 %abort236390 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr245259 = getelementptr inbounds i64, i64* %cloptr245258, i64 0               ; &cloptr245258[0]
  %f245261 = load i64, i64* %i0ptr245259, align 8                                    ; load; *i0ptr245259
  %fptr245260 = inttoptr i64 %f245261 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr245260(i64 %abort236390, i64 %sym236395)            ; tail call
  ret void

else245256:
  %rest236394 = call i64 @prim_cdr(i64 %rvp236387)                                   ; call prim_cdr
  %empty236389 = call i64 @prim_null_63(i64 %rest236394)                             ; call prim_null_63
  %cmp245262 = icmp eq i64 %empty236389, 15                                          ; false?
  br i1 %cmp245262, label %else245264, label %then245263                             ; if

then245263:
  %cc233672233849 = call i64 @prim_car(i64 %rvp236387)                               ; call prim_car
  %na236329 = call i64 @prim_cdr(i64 %rvp236387)                                     ; call prim_cdr
  %arg234437 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %a233990 = call i64 @prim_vector_45ref(i64 %a233671233848, i64 %arg234437)         ; call prim_vector_45ref
  %a233991 = call i64 @prim_null_63(i64 %a233990)                                    ; call prim_null_63
  %cmp245265 = icmp eq i64 %a233991, 15                                              ; false?
  br i1 %cmp245265, label %else245267, label %then245266                             ; if

then245266:
  %arg234441 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %arg234440 = call i64 @const_init_true()                                           ; quoted #t
  %sym236330 = add i64 0, 0                                                          ; quoted ()
  %x236331 = call i64 @prim_cons(i64 %arg234440, i64 %sym236330)                     ; call prim_cons
  %x236332 = call i64 @prim_cons(i64 %arg234441, i64 %x236331)                       ; call prim_cons
  %cloptr245268 = inttoptr i64 %cont234104 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr245269 = getelementptr inbounds i64, i64* %cloptr245268, i64 0               ; &cloptr245268[0]
  %f245271 = load i64, i64* %i0ptr245269, align 8                                    ; load; *i0ptr245269
  %fptr245270 = inttoptr i64 %f245271 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr245270(i64 %cont234104, i64 %x236332)               ; tail call
  ret void

else245267:
  %arg234443 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %a233992 = call i64 @prim_vector_45ref(i64 %a233671233848, i64 %arg234443)         ; call prim_vector_45ref
  %a233993 = call i64 @prim_cons_63(i64 %a233992)                                    ; call prim_cons_63
  %cmp245272 = icmp eq i64 %a233993, 15                                              ; false?
  br i1 %cmp245272, label %else245274, label %then245273                             ; if

then245273:
  %arg234446 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %a233994 = call i64 @prim_vector_45ref(i64 %a233671233848, i64 %arg234446)         ; call prim_vector_45ref
  %retprim234109 = call i64 @prim_cdr(i64 %a233994)                                  ; call prim_cdr
  %cloptr245275 = call i64* @alloc(i64 32)                                           ; malloc
  %eptr245277 = getelementptr inbounds i64, i64* %cloptr245275, i64 1                ; &eptr245277[1]
  %eptr245278 = getelementptr inbounds i64, i64* %cloptr245275, i64 2                ; &eptr245278[2]
  %eptr245279 = getelementptr inbounds i64, i64* %cloptr245275, i64 3                ; &eptr245279[3]
  store i64 %a233671233848, i64* %eptr245277                                         ; *eptr245277 = %a233671233848
  store i64 %cont234104, i64* %eptr245278                                            ; *eptr245278 = %cont234104
  store i64 %cc233672233849, i64* %eptr245279                                        ; *eptr245279 = %cc233672233849
  %eptr245276 = getelementptr inbounds i64, i64* %cloptr245275, i64 0                ; &cloptr245275[0]
  %f245280 = ptrtoint void(i64,i64)* @lam243887 to i64                               ; fptr cast; i64(...)* -> i64
  store i64 %f245280, i64* %eptr245276                                               ; store fptr
  %arg234451 = ptrtoint i64* %cloptr245275 to i64                                    ; closure cast; i64* -> i64
  %arg234450 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %sym236381 = add i64 0, 0                                                          ; quoted ()
  %x236382 = call i64 @prim_cons(i64 %retprim234109, i64 %sym236381)                 ; call prim_cons
  %x236383 = call i64 @prim_cons(i64 %arg234450, i64 %x236382)                       ; call prim_cons
  %cloptr245281 = inttoptr i64 %arg234451 to i64*                                    ; closure/env cast; i64 -> i64*
  %i0ptr245282 = getelementptr inbounds i64, i64* %cloptr245281, i64 0               ; &cloptr245281[0]
  %f245284 = load i64, i64* %i0ptr245282, align 8                                    ; load; *i0ptr245282
  %fptr245283 = inttoptr i64 %f245284 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr245283(i64 %arg234451, i64 %x236383)                ; tail call
  ret void

else245274:
  %arg234465 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %arg234464 = call i64 @const_init_false()                                          ; quoted #f
  %sym236384 = add i64 0, 0                                                          ; quoted ()
  %x236385 = call i64 @prim_cons(i64 %arg234464, i64 %sym236384)                     ; call prim_cons
  %x236386 = call i64 @prim_cons(i64 %arg234465, i64 %x236385)                       ; call prim_cons
  %cloptr245285 = inttoptr i64 %cont234104 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr245286 = getelementptr inbounds i64, i64* %cloptr245285, i64 0               ; &cloptr245285[0]
  %f245288 = load i64, i64* %i0ptr245286, align 8                                    ; load; *i0ptr245286
  %fptr245287 = inttoptr i64 %f245288 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr245287(i64 %cont234104, i64 %x236386)               ; tail call
  ret void

else245264:
  %many236393 = call i64 @const_init_string(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @str245289, i32 0, i32 0)); quoted string
  %fail236391 = call i64 @prim_halt(i64 %many236393)                                 ; call prim_halt
  %sym236396 = add i64 0, 0                                                          ; quoted ()
  %cloptr245290 = inttoptr i64 %fail236391 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr245291 = getelementptr inbounds i64, i64* %cloptr245290, i64 0               ; &cloptr245290[0]
  %f245293 = load i64, i64* %i0ptr245291, align 8                                    ; load; *i0ptr245291
  %fptr245292 = inttoptr i64 %f245293 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr245292(i64 %fail236391, i64 %sym236396)             ; tail call
  ret void
}


define void @lam243887(i64 %env243888, i64 %rvp236372) {
  %envptr245294 = inttoptr i64 %env243888 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr245295 = getelementptr inbounds i64, i64* %envptr245294, i64 3              ; &envptr245294[3]
  %cc233672233849 = load i64, i64* %envptr245295, align 8                            ; load; *envptr245295
  %envptr245296 = inttoptr i64 %env243888 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr245297 = getelementptr inbounds i64, i64* %envptr245296, i64 2              ; &envptr245296[2]
  %cont234104 = load i64, i64* %envptr245297, align 8                                ; load; *envptr245297
  %envptr245298 = inttoptr i64 %env243888 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr245299 = getelementptr inbounds i64, i64* %envptr245298, i64 1              ; &envptr245298[1]
  %a233671233848 = load i64, i64* %envptr245299, align 8                             ; load; *envptr245299
  %check236373 = call i64 @prim_null_63(i64 %rvp236372)                              ; call prim_null_63
  %cmp245300 = icmp eq i64 %check236373, 15                                          ; false?
  br i1 %cmp245300, label %else245302, label %then245301                             ; if

then245301:
  %msg236377 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str245303, i32 0, i32 0)); quoted string
  %abort236375 = call i64 @prim_halt(i64 %msg236377)                                 ; call prim_halt
  %sym236380 = add i64 0, 0                                                          ; quoted ()
  %cloptr245304 = inttoptr i64 %abort236375 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr245305 = getelementptr inbounds i64, i64* %cloptr245304, i64 0               ; &cloptr245304[0]
  %f245307 = load i64, i64* %i0ptr245305, align 8                                    ; load; *i0ptr245305
  %fptr245306 = inttoptr i64 %f245307 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr245306(i64 %abort236375, i64 %sym236380)            ; tail call
  ret void

else245302:
  %_95234106 = call i64 @prim_car(i64 %rvp236372)                                    ; call prim_car
  %rvp236362 = call i64 @prim_cdr(i64 %rvp236372)                                    ; call prim_cdr
  %check236363 = call i64 @prim_null_63(i64 %rvp236362)                              ; call prim_null_63
  %cmp245308 = icmp eq i64 %check236363, 15                                          ; false?
  br i1 %cmp245308, label %else245310, label %then245309                             ; if

then245309:
  %msg236367 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str245311, i32 0, i32 0)); quoted string
  %abort236365 = call i64 @prim_halt(i64 %msg236367)                                 ; call prim_halt
  %sym236370 = add i64 0, 0                                                          ; quoted ()
  %cloptr245312 = inttoptr i64 %abort236365 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr245313 = getelementptr inbounds i64, i64* %cloptr245312, i64 0               ; &cloptr245312[0]
  %f245315 = load i64, i64* %i0ptr245313, align 8                                    ; load; *i0ptr245313
  %fptr245314 = inttoptr i64 %f245315 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr245314(i64 %abort236365, i64 %sym236370)            ; tail call
  ret void

else245310:
  %rest236369 = call i64 @prim_cdr(i64 %rvp236362)                                   ; call prim_cdr
  %empty236364 = call i64 @prim_null_63(i64 %rest236369)                             ; call prim_null_63
  %cmp245316 = icmp eq i64 %empty236364, 15                                          ; false?
  br i1 %cmp245316, label %else245318, label %then245317                             ; if

then245317:
  %b233674233851 = call i64 @prim_car(i64 %rvp236362)                                ; call prim_car
  %na236334 = call i64 @prim_cdr(i64 %rvp236362)                                     ; call prim_cdr
  %arg234452 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %a233995 = call i64 @prim_vector_45ref(i64 %a233671233848, i64 %arg234452)         ; call prim_vector_45ref
  %a233996 = call i64 @prim_cdr(i64 %a233995)                                        ; call prim_cdr
  %arg234456 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %retprim234108 = call i64 @prim_vector_45set_33(i64 %a233671233848, i64 %arg234456, i64 %a233996); call prim_vector_45set_33
  %cloptr245319 = call i64* @alloc(i64 24)                                           ; malloc
  %eptr245321 = getelementptr inbounds i64, i64* %cloptr245319, i64 1                ; &eptr245321[1]
  %eptr245322 = getelementptr inbounds i64, i64* %cloptr245319, i64 2                ; &eptr245322[2]
  store i64 %cont234104, i64* %eptr245321                                            ; *eptr245321 = %cont234104
  store i64 %cc233672233849, i64* %eptr245322                                        ; *eptr245322 = %cc233672233849
  %eptr245320 = getelementptr inbounds i64, i64* %cloptr245319, i64 0                ; &cloptr245319[0]
  %f245323 = ptrtoint void(i64,i64)* @lam243881 to i64                               ; fptr cast; i64(...)* -> i64
  store i64 %f245323, i64* %eptr245320                                               ; store fptr
  %arg234460 = ptrtoint i64* %cloptr245319 to i64                                    ; closure cast; i64* -> i64
  %arg234459 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %sym236359 = add i64 0, 0                                                          ; quoted ()
  %x236360 = call i64 @prim_cons(i64 %retprim234108, i64 %sym236359)                 ; call prim_cons
  %x236361 = call i64 @prim_cons(i64 %arg234459, i64 %x236360)                       ; call prim_cons
  %cloptr245324 = inttoptr i64 %arg234460 to i64*                                    ; closure/env cast; i64 -> i64*
  %i0ptr245325 = getelementptr inbounds i64, i64* %cloptr245324, i64 0               ; &cloptr245324[0]
  %f245327 = load i64, i64* %i0ptr245325, align 8                                    ; load; *i0ptr245325
  %fptr245326 = inttoptr i64 %f245327 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr245326(i64 %arg234460, i64 %x236361)                ; tail call
  ret void

else245318:
  %many236368 = call i64 @const_init_string(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @str245328, i32 0, i32 0)); quoted string
  %fail236366 = call i64 @prim_halt(i64 %many236368)                                 ; call prim_halt
  %sym236371 = add i64 0, 0                                                          ; quoted ()
  %cloptr245329 = inttoptr i64 %fail236366 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr245330 = getelementptr inbounds i64, i64* %cloptr245329, i64 0               ; &cloptr245329[0]
  %f245332 = load i64, i64* %i0ptr245330, align 8                                    ; load; *i0ptr245330
  %fptr245331 = inttoptr i64 %f245332 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr245331(i64 %fail236366, i64 %sym236371)             ; tail call
  ret void
}


define void @lam243881(i64 %env243882, i64 %rvp236350) {
  %envptr245333 = inttoptr i64 %env243882 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr245334 = getelementptr inbounds i64, i64* %envptr245333, i64 2              ; &envptr245333[2]
  %cc233672233849 = load i64, i64* %envptr245334, align 8                            ; load; *envptr245334
  %envptr245335 = inttoptr i64 %env243882 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr245336 = getelementptr inbounds i64, i64* %envptr245335, i64 1              ; &envptr245335[1]
  %cont234104 = load i64, i64* %envptr245336, align 8                                ; load; *envptr245336
  %check236351 = call i64 @prim_null_63(i64 %rvp236350)                              ; call prim_null_63
  %cmp245337 = icmp eq i64 %check236351, 15                                          ; false?
  br i1 %cmp245337, label %else245339, label %then245338                             ; if

then245338:
  %msg236355 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str245340, i32 0, i32 0)); quoted string
  %abort236353 = call i64 @prim_halt(i64 %msg236355)                                 ; call prim_halt
  %sym236358 = add i64 0, 0                                                          ; quoted ()
  %cloptr245341 = inttoptr i64 %abort236353 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr245342 = getelementptr inbounds i64, i64* %cloptr245341, i64 0               ; &cloptr245341[0]
  %f245344 = load i64, i64* %i0ptr245342, align 8                                    ; load; *i0ptr245342
  %fptr245343 = inttoptr i64 %f245344 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr245343(i64 %abort236353, i64 %sym236358)            ; tail call
  ret void

else245339:
  %_95234107 = call i64 @prim_car(i64 %rvp236350)                                    ; call prim_car
  %rvp236340 = call i64 @prim_cdr(i64 %rvp236350)                                    ; call prim_cdr
  %check236341 = call i64 @prim_null_63(i64 %rvp236340)                              ; call prim_null_63
  %cmp245345 = icmp eq i64 %check236341, 15                                          ; false?
  br i1 %cmp245345, label %else245347, label %then245346                             ; if

then245346:
  %msg236345 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str245348, i32 0, i32 0)); quoted string
  %abort236343 = call i64 @prim_halt(i64 %msg236345)                                 ; call prim_halt
  %sym236348 = add i64 0, 0                                                          ; quoted ()
  %cloptr245349 = inttoptr i64 %abort236343 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr245350 = getelementptr inbounds i64, i64* %cloptr245349, i64 0               ; &cloptr245349[0]
  %f245352 = load i64, i64* %i0ptr245350, align 8                                    ; load; *i0ptr245350
  %fptr245351 = inttoptr i64 %f245352 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr245351(i64 %abort236343, i64 %sym236348)            ; tail call
  ret void

else245347:
  %rest236347 = call i64 @prim_cdr(i64 %rvp236340)                                   ; call prim_cdr
  %empty236342 = call i64 @prim_null_63(i64 %rest236347)                             ; call prim_null_63
  %cmp245353 = icmp eq i64 %empty236342, 15                                          ; false?
  br i1 %cmp245353, label %else245355, label %then245354                             ; if

then245354:
  %_950233675233852 = call i64 @prim_car(i64 %rvp236340)                             ; call prim_car
  %na236336 = call i64 @prim_cdr(i64 %rvp236340)                                     ; call prim_cdr
  %sym236337 = add i64 0, 0                                                          ; quoted ()
  %x236338 = call i64 @prim_cons(i64 %cc233672233849, i64 %sym236337)                ; call prim_cons
  %x236339 = call i64 @prim_cons(i64 %cont234104, i64 %x236338)                      ; call prim_cons
  %cloptr245356 = inttoptr i64 %cc233672233849 to i64*                               ; closure/env cast; i64 -> i64*
  %i0ptr245357 = getelementptr inbounds i64, i64* %cloptr245356, i64 0               ; &cloptr245356[0]
  %f245359 = load i64, i64* %i0ptr245357, align 8                                    ; load; *i0ptr245357
  %fptr245358 = inttoptr i64 %f245359 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr245358(i64 %cc233672233849, i64 %x236339)           ; tail call
  ret void

else245355:
  %many236346 = call i64 @const_init_string(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @str245360, i32 0, i32 0)); quoted string
  %fail236344 = call i64 @prim_halt(i64 %many236346)                                 ; call prim_halt
  %sym236349 = add i64 0, 0                                                          ; quoted ()
  %cloptr245361 = inttoptr i64 %fail236344 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr245362 = getelementptr inbounds i64, i64* %cloptr245361, i64 0               ; &cloptr245361[0]
  %f245364 = load i64, i64* %i0ptr245362, align 8                                    ; load; *i0ptr245362
  %fptr245363 = inttoptr i64 %f245364 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr245363(i64 %fail236344, i64 %sym236349)             ; tail call
  ret void
}


define void @lam243857(i64 %env243858, i64 %rvp236475) {
  %envptr245365 = inttoptr i64 %env243858 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr245366 = getelementptr inbounds i64, i64* %envptr245365, i64 2              ; &envptr245365[2]
  %cont234104 = load i64, i64* %envptr245366, align 8                                ; load; *envptr245366
  %envptr245367 = inttoptr i64 %env243858 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr245368 = getelementptr inbounds i64, i64* %envptr245367, i64 1              ; &envptr245367[1]
  %a233671233848 = load i64, i64* %envptr245368, align 8                             ; load; *envptr245368
  %check236476 = call i64 @prim_null_63(i64 %rvp236475)                              ; call prim_null_63
  %cmp245369 = icmp eq i64 %check236476, 15                                          ; false?
  br i1 %cmp245369, label %else245371, label %then245370                             ; if

then245370:
  %msg236480 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str245372, i32 0, i32 0)); quoted string
  %abort236478 = call i64 @prim_halt(i64 %msg236480)                                 ; call prim_halt
  %sym236483 = add i64 0, 0                                                          ; quoted ()
  %cloptr245373 = inttoptr i64 %abort236478 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr245374 = getelementptr inbounds i64, i64* %cloptr245373, i64 0               ; &cloptr245373[0]
  %f245376 = load i64, i64* %i0ptr245374, align 8                                    ; load; *i0ptr245374
  %fptr245375 = inttoptr i64 %f245376 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr245375(i64 %abort236478, i64 %sym236483)            ; tail call
  ret void

else245371:
  %_95234105 = call i64 @prim_car(i64 %rvp236475)                                    ; call prim_car
  %rvp236465 = call i64 @prim_cdr(i64 %rvp236475)                                    ; call prim_cdr
  %check236466 = call i64 @prim_null_63(i64 %rvp236465)                              ; call prim_null_63
  %cmp245377 = icmp eq i64 %check236466, 15                                          ; false?
  br i1 %cmp245377, label %else245379, label %then245378                             ; if

then245378:
  %msg236470 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str245380, i32 0, i32 0)); quoted string
  %abort236468 = call i64 @prim_halt(i64 %msg236470)                                 ; call prim_halt
  %sym236473 = add i64 0, 0                                                          ; quoted ()
  %cloptr245381 = inttoptr i64 %abort236468 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr245382 = getelementptr inbounds i64, i64* %cloptr245381, i64 0               ; &cloptr245381[0]
  %f245384 = load i64, i64* %i0ptr245382, align 8                                    ; load; *i0ptr245382
  %fptr245383 = inttoptr i64 %f245384 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr245383(i64 %abort236468, i64 %sym236473)            ; tail call
  ret void

else245379:
  %rest236472 = call i64 @prim_cdr(i64 %rvp236465)                                   ; call prim_cdr
  %empty236467 = call i64 @prim_null_63(i64 %rest236472)                             ; call prim_null_63
  %cmp245385 = icmp eq i64 %empty236467, 15                                          ; false?
  br i1 %cmp245385, label %else245387, label %then245386                             ; if

then245386:
  %cc233672233849 = call i64 @prim_car(i64 %rvp236465)                               ; call prim_car
  %na236407 = call i64 @prim_cdr(i64 %rvp236465)                                     ; call prim_cdr
  %arg234467 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %a233990 = call i64 @prim_vector_45ref(i64 %a233671233848, i64 %arg234467)         ; call prim_vector_45ref
  %a233991 = call i64 @prim_null_63(i64 %a233990)                                    ; call prim_null_63
  %cmp245388 = icmp eq i64 %a233991, 15                                              ; false?
  br i1 %cmp245388, label %else245390, label %then245389                             ; if

then245389:
  %arg234471 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %arg234470 = call i64 @const_init_true()                                           ; quoted #t
  %sym236408 = add i64 0, 0                                                          ; quoted ()
  %x236409 = call i64 @prim_cons(i64 %arg234470, i64 %sym236408)                     ; call prim_cons
  %x236410 = call i64 @prim_cons(i64 %arg234471, i64 %x236409)                       ; call prim_cons
  %cloptr245391 = inttoptr i64 %cont234104 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr245392 = getelementptr inbounds i64, i64* %cloptr245391, i64 0               ; &cloptr245391[0]
  %f245394 = load i64, i64* %i0ptr245392, align 8                                    ; load; *i0ptr245392
  %fptr245393 = inttoptr i64 %f245394 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr245393(i64 %cont234104, i64 %x236410)               ; tail call
  ret void

else245390:
  %arg234473 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %a233992 = call i64 @prim_vector_45ref(i64 %a233671233848, i64 %arg234473)         ; call prim_vector_45ref
  %a233993 = call i64 @prim_cons_63(i64 %a233992)                                    ; call prim_cons_63
  %cmp245395 = icmp eq i64 %a233993, 15                                              ; false?
  br i1 %cmp245395, label %else245397, label %then245396                             ; if

then245396:
  %arg234476 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %a233994 = call i64 @prim_vector_45ref(i64 %a233671233848, i64 %arg234476)         ; call prim_vector_45ref
  %retprim234109 = call i64 @prim_cdr(i64 %a233994)                                  ; call prim_cdr
  %cloptr245398 = call i64* @alloc(i64 32)                                           ; malloc
  %eptr245400 = getelementptr inbounds i64, i64* %cloptr245398, i64 1                ; &eptr245400[1]
  %eptr245401 = getelementptr inbounds i64, i64* %cloptr245398, i64 2                ; &eptr245401[2]
  %eptr245402 = getelementptr inbounds i64, i64* %cloptr245398, i64 3                ; &eptr245402[3]
  store i64 %a233671233848, i64* %eptr245400                                         ; *eptr245400 = %a233671233848
  store i64 %cont234104, i64* %eptr245401                                            ; *eptr245401 = %cont234104
  store i64 %cc233672233849, i64* %eptr245402                                        ; *eptr245402 = %cc233672233849
  %eptr245399 = getelementptr inbounds i64, i64* %cloptr245398, i64 0                ; &cloptr245398[0]
  %f245403 = ptrtoint void(i64,i64)* @lam243847 to i64                               ; fptr cast; i64(...)* -> i64
  store i64 %f245403, i64* %eptr245399                                               ; store fptr
  %arg234481 = ptrtoint i64* %cloptr245398 to i64                                    ; closure cast; i64* -> i64
  %arg234480 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %sym236459 = add i64 0, 0                                                          ; quoted ()
  %x236460 = call i64 @prim_cons(i64 %retprim234109, i64 %sym236459)                 ; call prim_cons
  %x236461 = call i64 @prim_cons(i64 %arg234480, i64 %x236460)                       ; call prim_cons
  %cloptr245404 = inttoptr i64 %arg234481 to i64*                                    ; closure/env cast; i64 -> i64*
  %i0ptr245405 = getelementptr inbounds i64, i64* %cloptr245404, i64 0               ; &cloptr245404[0]
  %f245407 = load i64, i64* %i0ptr245405, align 8                                    ; load; *i0ptr245405
  %fptr245406 = inttoptr i64 %f245407 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr245406(i64 %arg234481, i64 %x236461)                ; tail call
  ret void

else245397:
  %arg234495 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %arg234494 = call i64 @const_init_false()                                          ; quoted #f
  %sym236462 = add i64 0, 0                                                          ; quoted ()
  %x236463 = call i64 @prim_cons(i64 %arg234494, i64 %sym236462)                     ; call prim_cons
  %x236464 = call i64 @prim_cons(i64 %arg234495, i64 %x236463)                       ; call prim_cons
  %cloptr245408 = inttoptr i64 %cont234104 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr245409 = getelementptr inbounds i64, i64* %cloptr245408, i64 0               ; &cloptr245408[0]
  %f245411 = load i64, i64* %i0ptr245409, align 8                                    ; load; *i0ptr245409
  %fptr245410 = inttoptr i64 %f245411 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr245410(i64 %cont234104, i64 %x236464)               ; tail call
  ret void

else245387:
  %many236471 = call i64 @const_init_string(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @str245412, i32 0, i32 0)); quoted string
  %fail236469 = call i64 @prim_halt(i64 %many236471)                                 ; call prim_halt
  %sym236474 = add i64 0, 0                                                          ; quoted ()
  %cloptr245413 = inttoptr i64 %fail236469 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr245414 = getelementptr inbounds i64, i64* %cloptr245413, i64 0               ; &cloptr245413[0]
  %f245416 = load i64, i64* %i0ptr245414, align 8                                    ; load; *i0ptr245414
  %fptr245415 = inttoptr i64 %f245416 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr245415(i64 %fail236469, i64 %sym236474)             ; tail call
  ret void
}


define void @lam243847(i64 %env243848, i64 %rvp236450) {
  %envptr245417 = inttoptr i64 %env243848 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr245418 = getelementptr inbounds i64, i64* %envptr245417, i64 3              ; &envptr245417[3]
  %cc233672233849 = load i64, i64* %envptr245418, align 8                            ; load; *envptr245418
  %envptr245419 = inttoptr i64 %env243848 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr245420 = getelementptr inbounds i64, i64* %envptr245419, i64 2              ; &envptr245419[2]
  %cont234104 = load i64, i64* %envptr245420, align 8                                ; load; *envptr245420
  %envptr245421 = inttoptr i64 %env243848 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr245422 = getelementptr inbounds i64, i64* %envptr245421, i64 1              ; &envptr245421[1]
  %a233671233848 = load i64, i64* %envptr245422, align 8                             ; load; *envptr245422
  %check236451 = call i64 @prim_null_63(i64 %rvp236450)                              ; call prim_null_63
  %cmp245423 = icmp eq i64 %check236451, 15                                          ; false?
  br i1 %cmp245423, label %else245425, label %then245424                             ; if

then245424:
  %msg236455 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str245426, i32 0, i32 0)); quoted string
  %abort236453 = call i64 @prim_halt(i64 %msg236455)                                 ; call prim_halt
  %sym236458 = add i64 0, 0                                                          ; quoted ()
  %cloptr245427 = inttoptr i64 %abort236453 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr245428 = getelementptr inbounds i64, i64* %cloptr245427, i64 0               ; &cloptr245427[0]
  %f245430 = load i64, i64* %i0ptr245428, align 8                                    ; load; *i0ptr245428
  %fptr245429 = inttoptr i64 %f245430 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr245429(i64 %abort236453, i64 %sym236458)            ; tail call
  ret void

else245425:
  %_95234106 = call i64 @prim_car(i64 %rvp236450)                                    ; call prim_car
  %rvp236440 = call i64 @prim_cdr(i64 %rvp236450)                                    ; call prim_cdr
  %check236441 = call i64 @prim_null_63(i64 %rvp236440)                              ; call prim_null_63
  %cmp245431 = icmp eq i64 %check236441, 15                                          ; false?
  br i1 %cmp245431, label %else245433, label %then245432                             ; if

then245432:
  %msg236445 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str245434, i32 0, i32 0)); quoted string
  %abort236443 = call i64 @prim_halt(i64 %msg236445)                                 ; call prim_halt
  %sym236448 = add i64 0, 0                                                          ; quoted ()
  %cloptr245435 = inttoptr i64 %abort236443 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr245436 = getelementptr inbounds i64, i64* %cloptr245435, i64 0               ; &cloptr245435[0]
  %f245438 = load i64, i64* %i0ptr245436, align 8                                    ; load; *i0ptr245436
  %fptr245437 = inttoptr i64 %f245438 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr245437(i64 %abort236443, i64 %sym236448)            ; tail call
  ret void

else245433:
  %rest236447 = call i64 @prim_cdr(i64 %rvp236440)                                   ; call prim_cdr
  %empty236442 = call i64 @prim_null_63(i64 %rest236447)                             ; call prim_null_63
  %cmp245439 = icmp eq i64 %empty236442, 15                                          ; false?
  br i1 %cmp245439, label %else245441, label %then245440                             ; if

then245440:
  %b233674233851 = call i64 @prim_car(i64 %rvp236440)                                ; call prim_car
  %na236412 = call i64 @prim_cdr(i64 %rvp236440)                                     ; call prim_cdr
  %arg234482 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %a233995 = call i64 @prim_vector_45ref(i64 %a233671233848, i64 %arg234482)         ; call prim_vector_45ref
  %a233996 = call i64 @prim_cdr(i64 %a233995)                                        ; call prim_cdr
  %arg234486 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %retprim234108 = call i64 @prim_vector_45set_33(i64 %a233671233848, i64 %arg234486, i64 %a233996); call prim_vector_45set_33
  %cloptr245442 = call i64* @alloc(i64 24)                                           ; malloc
  %eptr245444 = getelementptr inbounds i64, i64* %cloptr245442, i64 1                ; &eptr245444[1]
  %eptr245445 = getelementptr inbounds i64, i64* %cloptr245442, i64 2                ; &eptr245445[2]
  store i64 %cont234104, i64* %eptr245444                                            ; *eptr245444 = %cont234104
  store i64 %cc233672233849, i64* %eptr245445                                        ; *eptr245445 = %cc233672233849
  %eptr245443 = getelementptr inbounds i64, i64* %cloptr245442, i64 0                ; &cloptr245442[0]
  %f245446 = ptrtoint void(i64,i64)* @lam243841 to i64                               ; fptr cast; i64(...)* -> i64
  store i64 %f245446, i64* %eptr245443                                               ; store fptr
  %arg234490 = ptrtoint i64* %cloptr245442 to i64                                    ; closure cast; i64* -> i64
  %arg234489 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %sym236437 = add i64 0, 0                                                          ; quoted ()
  %x236438 = call i64 @prim_cons(i64 %retprim234108, i64 %sym236437)                 ; call prim_cons
  %x236439 = call i64 @prim_cons(i64 %arg234489, i64 %x236438)                       ; call prim_cons
  %cloptr245447 = inttoptr i64 %arg234490 to i64*                                    ; closure/env cast; i64 -> i64*
  %i0ptr245448 = getelementptr inbounds i64, i64* %cloptr245447, i64 0               ; &cloptr245447[0]
  %f245450 = load i64, i64* %i0ptr245448, align 8                                    ; load; *i0ptr245448
  %fptr245449 = inttoptr i64 %f245450 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr245449(i64 %arg234490, i64 %x236439)                ; tail call
  ret void

else245441:
  %many236446 = call i64 @const_init_string(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @str245451, i32 0, i32 0)); quoted string
  %fail236444 = call i64 @prim_halt(i64 %many236446)                                 ; call prim_halt
  %sym236449 = add i64 0, 0                                                          ; quoted ()
  %cloptr245452 = inttoptr i64 %fail236444 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr245453 = getelementptr inbounds i64, i64* %cloptr245452, i64 0               ; &cloptr245452[0]
  %f245455 = load i64, i64* %i0ptr245453, align 8                                    ; load; *i0ptr245453
  %fptr245454 = inttoptr i64 %f245455 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr245454(i64 %fail236444, i64 %sym236449)             ; tail call
  ret void
}


define void @lam243841(i64 %env243842, i64 %rvp236428) {
  %envptr245456 = inttoptr i64 %env243842 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr245457 = getelementptr inbounds i64, i64* %envptr245456, i64 2              ; &envptr245456[2]
  %cc233672233849 = load i64, i64* %envptr245457, align 8                            ; load; *envptr245457
  %envptr245458 = inttoptr i64 %env243842 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr245459 = getelementptr inbounds i64, i64* %envptr245458, i64 1              ; &envptr245458[1]
  %cont234104 = load i64, i64* %envptr245459, align 8                                ; load; *envptr245459
  %check236429 = call i64 @prim_null_63(i64 %rvp236428)                              ; call prim_null_63
  %cmp245460 = icmp eq i64 %check236429, 15                                          ; false?
  br i1 %cmp245460, label %else245462, label %then245461                             ; if

then245461:
  %msg236433 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str245463, i32 0, i32 0)); quoted string
  %abort236431 = call i64 @prim_halt(i64 %msg236433)                                 ; call prim_halt
  %sym236436 = add i64 0, 0                                                          ; quoted ()
  %cloptr245464 = inttoptr i64 %abort236431 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr245465 = getelementptr inbounds i64, i64* %cloptr245464, i64 0               ; &cloptr245464[0]
  %f245467 = load i64, i64* %i0ptr245465, align 8                                    ; load; *i0ptr245465
  %fptr245466 = inttoptr i64 %f245467 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr245466(i64 %abort236431, i64 %sym236436)            ; tail call
  ret void

else245462:
  %_95234107 = call i64 @prim_car(i64 %rvp236428)                                    ; call prim_car
  %rvp236418 = call i64 @prim_cdr(i64 %rvp236428)                                    ; call prim_cdr
  %check236419 = call i64 @prim_null_63(i64 %rvp236418)                              ; call prim_null_63
  %cmp245468 = icmp eq i64 %check236419, 15                                          ; false?
  br i1 %cmp245468, label %else245470, label %then245469                             ; if

then245469:
  %msg236423 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str245471, i32 0, i32 0)); quoted string
  %abort236421 = call i64 @prim_halt(i64 %msg236423)                                 ; call prim_halt
  %sym236426 = add i64 0, 0                                                          ; quoted ()
  %cloptr245472 = inttoptr i64 %abort236421 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr245473 = getelementptr inbounds i64, i64* %cloptr245472, i64 0               ; &cloptr245472[0]
  %f245475 = load i64, i64* %i0ptr245473, align 8                                    ; load; *i0ptr245473
  %fptr245474 = inttoptr i64 %f245475 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr245474(i64 %abort236421, i64 %sym236426)            ; tail call
  ret void

else245470:
  %rest236425 = call i64 @prim_cdr(i64 %rvp236418)                                   ; call prim_cdr
  %empty236420 = call i64 @prim_null_63(i64 %rest236425)                             ; call prim_null_63
  %cmp245476 = icmp eq i64 %empty236420, 15                                          ; false?
  br i1 %cmp245476, label %else245478, label %then245477                             ; if

then245477:
  %_950233675233852 = call i64 @prim_car(i64 %rvp236418)                             ; call prim_car
  %na236414 = call i64 @prim_cdr(i64 %rvp236418)                                     ; call prim_cdr
  %sym236415 = add i64 0, 0                                                          ; quoted ()
  %x236416 = call i64 @prim_cons(i64 %cc233672233849, i64 %sym236415)                ; call prim_cons
  %x236417 = call i64 @prim_cons(i64 %cont234104, i64 %x236416)                      ; call prim_cons
  %cloptr245479 = inttoptr i64 %cc233672233849 to i64*                               ; closure/env cast; i64 -> i64*
  %i0ptr245480 = getelementptr inbounds i64, i64* %cloptr245479, i64 0               ; &cloptr245479[0]
  %f245482 = load i64, i64* %i0ptr245480, align 8                                    ; load; *i0ptr245480
  %fptr245481 = inttoptr i64 %f245482 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr245481(i64 %cc233672233849, i64 %x236417)           ; tail call
  ret void

else245478:
  %many236424 = call i64 @const_init_string(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @str245483, i32 0, i32 0)); quoted string
  %fail236422 = call i64 @prim_halt(i64 %many236424)                                 ; call prim_halt
  %sym236427 = add i64 0, 0                                                          ; quoted ()
  %cloptr245484 = inttoptr i64 %fail236422 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr245485 = getelementptr inbounds i64, i64* %cloptr245484, i64 0               ; &cloptr245484[0]
  %f245487 = load i64, i64* %i0ptr245485, align 8                                    ; load; *i0ptr245485
  %fptr245486 = inttoptr i64 %f245487 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr245486(i64 %fail236422, i64 %sym236427)             ; tail call
  ret void
}


define void @lam243812(i64 %env243813, i64 %rvp236704) {
  %check236705 = call i64 @prim_null_63(i64 %rvp236704)                              ; call prim_null_63
  %cmp245488 = icmp eq i64 %check236705, 15                                          ; false?
  br i1 %cmp245488, label %else245490, label %then245489                             ; if

then245489:
  %msg236709 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str245491, i32 0, i32 0)); quoted string
  %abort236707 = call i64 @prim_halt(i64 %msg236709)                                 ; call prim_halt
  %sym236712 = add i64 0, 0                                                          ; quoted ()
  %cloptr245492 = inttoptr i64 %abort236707 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr245493 = getelementptr inbounds i64, i64* %cloptr245492, i64 0               ; &cloptr245492[0]
  %f245495 = load i64, i64* %i0ptr245493, align 8                                    ; load; *i0ptr245493
  %fptr245494 = inttoptr i64 %f245495 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr245494(i64 %abort236707, i64 %sym236712)            ; tail call
  ret void

else245490:
  %cont234111 = call i64 @prim_car(i64 %rvp236704)                                   ; call prim_car
  %rvp236695 = call i64 @prim_cdr(i64 %rvp236704)                                    ; call prim_cdr
  %check236696 = call i64 @prim_null_63(i64 %rvp236695)                              ; call prim_null_63
  %cmp245496 = icmp eq i64 %check236696, 15                                          ; false?
  br i1 %cmp245496, label %else245498, label %then245497                             ; if

then245497:
  %msg236700 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str245499, i32 0, i32 0)); quoted string
  %abort236698 = call i64 @prim_halt(i64 %msg236700)                                 ; call prim_halt
  %sym236703 = add i64 0, 0                                                          ; quoted ()
  %cloptr245500 = inttoptr i64 %abort236698 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr245501 = getelementptr inbounds i64, i64* %cloptr245500, i64 0               ; &cloptr245500[0]
  %f245503 = load i64, i64* %i0ptr245501, align 8                                    ; load; *i0ptr245501
  %fptr245502 = inttoptr i64 %f245503 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr245502(i64 %abort236698, i64 %sym236703)            ; tail call
  ret void

else245498:
  %lst233676233853 = call i64 @prim_car(i64 %rvp236695)                              ; call prim_car
  %rvp236685 = call i64 @prim_cdr(i64 %rvp236695)                                    ; call prim_cdr
  %check236686 = call i64 @prim_null_63(i64 %rvp236685)                              ; call prim_null_63
  %cmp245504 = icmp eq i64 %check236686, 15                                          ; false?
  br i1 %cmp245504, label %else245506, label %then245505                             ; if

then245505:
  %msg236690 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str245507, i32 0, i32 0)); quoted string
  %abort236688 = call i64 @prim_halt(i64 %msg236690)                                 ; call prim_halt
  %sym236693 = add i64 0, 0                                                          ; quoted ()
  %cloptr245508 = inttoptr i64 %abort236688 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr245509 = getelementptr inbounds i64, i64* %cloptr245508, i64 0               ; &cloptr245508[0]
  %f245511 = load i64, i64* %i0ptr245509, align 8                                    ; load; *i0ptr245509
  %fptr245510 = inttoptr i64 %f245511 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr245510(i64 %abort236688, i64 %sym236693)            ; tail call
  ret void

else245506:
  %rest236692 = call i64 @prim_cdr(i64 %rvp236685)                                   ; call prim_cdr
  %empty236687 = call i64 @prim_null_63(i64 %rest236692)                             ; call prim_null_63
  %cmp245512 = icmp eq i64 %empty236687, 15                                          ; false?
  br i1 %cmp245512, label %else245514, label %then245513                             ; if

then245513:
  %n233677233854 = call i64 @prim_car(i64 %rvp236685)                                ; call prim_car
  %na236507 = call i64 @prim_cdr(i64 %rvp236685)                                     ; call prim_cdr
  %arg234498 = call i64 @const_init_int(i64 1)                                       ; quoted int
  %n233677233855 = call i64 @prim_make_45vector(i64 %arg234498, i64 %n233677233854)  ; call prim_make_45vector
  %arg234500 = call i64 @const_init_int(i64 1)                                       ; quoted int
  %lst233676233856 = call i64 @prim_make_45vector(i64 %arg234500, i64 %lst233676233853); call prim_make_45vector
  %cloptr245515 = call i64* @alloc(i64 8)                                            ; malloc
  %eptr245516 = getelementptr inbounds i64, i64* %cloptr245515, i64 0                ; &cloptr245515[0]
  %f245517 = ptrtoint void(i64,i64)* @lam243806 to i64                               ; fptr cast; i64(...)* -> i64
  store i64 %f245517, i64* %eptr245516                                               ; store fptr
  %arg234503 = ptrtoint i64* %cloptr245515 to i64                                    ; closure cast; i64* -> i64
  %cloptr245518 = call i64* @alloc(i64 32)                                           ; malloc
  %eptr245520 = getelementptr inbounds i64, i64* %cloptr245518, i64 1                ; &eptr245520[1]
  %eptr245521 = getelementptr inbounds i64, i64* %cloptr245518, i64 2                ; &eptr245521[2]
  %eptr245522 = getelementptr inbounds i64, i64* %cloptr245518, i64 3                ; &eptr245522[3]
  store i64 %lst233676233856, i64* %eptr245520                                       ; *eptr245520 = %lst233676233856
  store i64 %n233677233855, i64* %eptr245521                                         ; *eptr245521 = %n233677233855
  store i64 %cont234111, i64* %eptr245522                                            ; *eptr245522 = %cont234111
  %eptr245519 = getelementptr inbounds i64, i64* %cloptr245518, i64 0                ; &cloptr245518[0]
  %f245523 = ptrtoint void(i64,i64)* @lam243797 to i64                               ; fptr cast; i64(...)* -> i64
  store i64 %f245523, i64* %eptr245519                                               ; store fptr
  %arg234502 = ptrtoint i64* %cloptr245518 to i64                                    ; closure cast; i64* -> i64
  %cloptr245524 = call i64* @alloc(i64 32)                                           ; malloc
  %eptr245526 = getelementptr inbounds i64, i64* %cloptr245524, i64 1                ; &eptr245526[1]
  %eptr245527 = getelementptr inbounds i64, i64* %cloptr245524, i64 2                ; &eptr245527[2]
  %eptr245528 = getelementptr inbounds i64, i64* %cloptr245524, i64 3                ; &eptr245528[3]
  store i64 %lst233676233856, i64* %eptr245526                                       ; *eptr245526 = %lst233676233856
  store i64 %n233677233855, i64* %eptr245527                                         ; *eptr245527 = %n233677233855
  store i64 %cont234111, i64* %eptr245528                                            ; *eptr245528 = %cont234111
  %eptr245525 = getelementptr inbounds i64, i64* %cloptr245524, i64 0                ; &cloptr245524[0]
  %f245529 = ptrtoint void(i64,i64)* @lam243758 to i64                               ; fptr cast; i64(...)* -> i64
  store i64 %f245529, i64* %eptr245525                                               ; store fptr
  %arg234501 = ptrtoint i64* %cloptr245524 to i64                                    ; closure cast; i64* -> i64
  %sym236682 = add i64 0, 0                                                          ; quoted ()
  %x236683 = call i64 @prim_cons(i64 %arg234501, i64 %sym236682)                     ; call prim_cons
  %x236684 = call i64 @prim_cons(i64 %arg234502, i64 %x236683)                       ; call prim_cons
  %cloptr245530 = inttoptr i64 %arg234503 to i64*                                    ; closure/env cast; i64 -> i64*
  %i0ptr245531 = getelementptr inbounds i64, i64* %cloptr245530, i64 0               ; &cloptr245530[0]
  %f245533 = load i64, i64* %i0ptr245531, align 8                                    ; load; *i0ptr245531
  %fptr245532 = inttoptr i64 %f245533 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr245532(i64 %arg234503, i64 %x236684)                ; tail call
  ret void

else245514:
  %many236691 = call i64 @const_init_string(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @str245534, i32 0, i32 0)); quoted string
  %fail236689 = call i64 @prim_halt(i64 %many236691)                                 ; call prim_halt
  %sym236694 = add i64 0, 0                                                          ; quoted ()
  %cloptr245535 = inttoptr i64 %fail236689 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr245536 = getelementptr inbounds i64, i64* %cloptr245535, i64 0               ; &cloptr245535[0]
  %f245538 = load i64, i64* %i0ptr245536, align 8                                    ; load; *i0ptr245536
  %fptr245537 = inttoptr i64 %f245538 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr245537(i64 %fail236689, i64 %sym236694)             ; tail call
  ret void
}


define void @lam243806(i64 %env243807, i64 %rvp236523) {
  %check236524 = call i64 @prim_null_63(i64 %rvp236523)                              ; call prim_null_63
  %cmp245539 = icmp eq i64 %check236524, 15                                          ; false?
  br i1 %cmp245539, label %else245541, label %then245540                             ; if

then245540:
  %msg236528 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str245542, i32 0, i32 0)); quoted string
  %abort236526 = call i64 @prim_halt(i64 %msg236528)                                 ; call prim_halt
  %sym236531 = add i64 0, 0                                                          ; quoted ()
  %cloptr245543 = inttoptr i64 %abort236526 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr245544 = getelementptr inbounds i64, i64* %cloptr245543, i64 0               ; &cloptr245543[0]
  %f245546 = load i64, i64* %i0ptr245544, align 8                                    ; load; *i0ptr245544
  %fptr245545 = inttoptr i64 %f245546 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr245545(i64 %abort236526, i64 %sym236531)            ; tail call
  ret void

else245541:
  %cont234118 = call i64 @prim_car(i64 %rvp236523)                                   ; call prim_car
  %rvp236513 = call i64 @prim_cdr(i64 %rvp236523)                                    ; call prim_cdr
  %check236514 = call i64 @prim_null_63(i64 %rvp236513)                              ; call prim_null_63
  %cmp245547 = icmp eq i64 %check236514, 15                                          ; false?
  br i1 %cmp245547, label %else245549, label %then245548                             ; if

then245548:
  %msg236518 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str245550, i32 0, i32 0)); quoted string
  %abort236516 = call i64 @prim_halt(i64 %msg236518)                                 ; call prim_halt
  %sym236521 = add i64 0, 0                                                          ; quoted ()
  %cloptr245551 = inttoptr i64 %abort236516 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr245552 = getelementptr inbounds i64, i64* %cloptr245551, i64 0               ; &cloptr245551[0]
  %f245554 = load i64, i64* %i0ptr245552, align 8                                    ; load; *i0ptr245552
  %fptr245553 = inttoptr i64 %f245554 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr245553(i64 %abort236516, i64 %sym236521)            ; tail call
  ret void

else245549:
  %rest236520 = call i64 @prim_cdr(i64 %rvp236513)                                   ; call prim_cdr
  %empty236515 = call i64 @prim_null_63(i64 %rest236520)                             ; call prim_null_63
  %cmp245555 = icmp eq i64 %empty236515, 15                                          ; false?
  br i1 %cmp245555, label %else245557, label %then245556                             ; if

then245556:
  %u233679233858 = call i64 @prim_car(i64 %rvp236513)                                ; call prim_car
  %na236509 = call i64 @prim_cdr(i64 %rvp236513)                                     ; call prim_cdr
  %sym236510 = add i64 0, 0                                                          ; quoted ()
  %x236511 = call i64 @prim_cons(i64 %u233679233858, i64 %sym236510)                 ; call prim_cons
  %x236512 = call i64 @prim_cons(i64 %cont234118, i64 %x236511)                      ; call prim_cons
  %cloptr245558 = inttoptr i64 %u233679233858 to i64*                                ; closure/env cast; i64 -> i64*
  %i0ptr245559 = getelementptr inbounds i64, i64* %cloptr245558, i64 0               ; &cloptr245558[0]
  %f245561 = load i64, i64* %i0ptr245559, align 8                                    ; load; *i0ptr245559
  %fptr245560 = inttoptr i64 %f245561 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr245560(i64 %u233679233858, i64 %x236512)            ; tail call
  ret void

else245557:
  %many236519 = call i64 @const_init_string(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @str245562, i32 0, i32 0)); quoted string
  %fail236517 = call i64 @prim_halt(i64 %many236519)                                 ; call prim_halt
  %sym236522 = add i64 0, 0                                                          ; quoted ()
  %cloptr245563 = inttoptr i64 %fail236517 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr245564 = getelementptr inbounds i64, i64* %cloptr245563, i64 0               ; &cloptr245563[0]
  %f245566 = load i64, i64* %i0ptr245564, align 8                                    ; load; *i0ptr245564
  %fptr245565 = inttoptr i64 %f245566 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr245565(i64 %fail236517, i64 %sym236522)             ; tail call
  ret void
}


define void @lam243797(i64 %env243798, i64 %rvp236598) {
  %envptr245567 = inttoptr i64 %env243798 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr245568 = getelementptr inbounds i64, i64* %envptr245567, i64 3              ; &envptr245567[3]
  %cont234111 = load i64, i64* %envptr245568, align 8                                ; load; *envptr245568
  %envptr245569 = inttoptr i64 %env243798 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr245570 = getelementptr inbounds i64, i64* %envptr245569, i64 2              ; &envptr245569[2]
  %n233677233855 = load i64, i64* %envptr245570, align 8                             ; load; *envptr245570
  %envptr245571 = inttoptr i64 %env243798 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr245572 = getelementptr inbounds i64, i64* %envptr245571, i64 1              ; &envptr245571[1]
  %lst233676233856 = load i64, i64* %envptr245572, align 8                           ; load; *envptr245572
  %check236599 = call i64 @prim_null_63(i64 %rvp236598)                              ; call prim_null_63
  %cmp245573 = icmp eq i64 %check236599, 15                                          ; false?
  br i1 %cmp245573, label %else245575, label %then245574                             ; if

then245574:
  %msg236603 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str245576, i32 0, i32 0)); quoted string
  %abort236601 = call i64 @prim_halt(i64 %msg236603)                                 ; call prim_halt
  %sym236606 = add i64 0, 0                                                          ; quoted ()
  %cloptr245577 = inttoptr i64 %abort236601 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr245578 = getelementptr inbounds i64, i64* %cloptr245577, i64 0               ; &cloptr245577[0]
  %f245580 = load i64, i64* %i0ptr245578, align 8                                    ; load; *i0ptr245578
  %fptr245579 = inttoptr i64 %f245580 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr245579(i64 %abort236601, i64 %sym236606)            ; tail call
  ret void

else245575:
  %_95234112 = call i64 @prim_car(i64 %rvp236598)                                    ; call prim_car
  %rvp236588 = call i64 @prim_cdr(i64 %rvp236598)                                    ; call prim_cdr
  %check236589 = call i64 @prim_null_63(i64 %rvp236588)                              ; call prim_null_63
  %cmp245581 = icmp eq i64 %check236589, 15                                          ; false?
  br i1 %cmp245581, label %else245583, label %then245582                             ; if

then245582:
  %msg236593 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str245584, i32 0, i32 0)); quoted string
  %abort236591 = call i64 @prim_halt(i64 %msg236593)                                 ; call prim_halt
  %sym236596 = add i64 0, 0                                                          ; quoted ()
  %cloptr245585 = inttoptr i64 %abort236591 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr245586 = getelementptr inbounds i64, i64* %cloptr245585, i64 0               ; &cloptr245585[0]
  %f245588 = load i64, i64* %i0ptr245586, align 8                                    ; load; *i0ptr245586
  %fptr245587 = inttoptr i64 %f245588 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr245587(i64 %abort236591, i64 %sym236596)            ; tail call
  ret void

else245583:
  %rest236595 = call i64 @prim_cdr(i64 %rvp236588)                                   ; call prim_cdr
  %empty236590 = call i64 @prim_null_63(i64 %rest236595)                             ; call prim_null_63
  %cmp245589 = icmp eq i64 %empty236590, 15                                          ; false?
  br i1 %cmp245589, label %else245591, label %then245590                             ; if

then245590:
  %cc233678233857 = call i64 @prim_car(i64 %rvp236588)                               ; call prim_car
  %na236533 = call i64 @prim_cdr(i64 %rvp236588)                                     ; call prim_cdr
  %arg234507 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %a233997 = call i64 @prim_vector_45ref(i64 %n233677233855, i64 %arg234507)         ; call prim_vector_45ref
  %arg234510 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %a233998 = call i64 @prim__61(i64 %arg234510, i64 %a233997)                        ; call prim__61
  %cmp245592 = icmp eq i64 %a233998, 15                                              ; false?
  br i1 %cmp245592, label %else245594, label %then245593                             ; if

then245593:
  %arg234511 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %retprim234113 = call i64 @prim_vector_45ref(i64 %lst233676233856, i64 %arg234511) ; call prim_vector_45ref
  %arg234514 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %sym236534 = add i64 0, 0                                                          ; quoted ()
  %x236535 = call i64 @prim_cons(i64 %retprim234113, i64 %sym236534)                 ; call prim_cons
  %x236536 = call i64 @prim_cons(i64 %arg234514, i64 %x236535)                       ; call prim_cons
  %cloptr245595 = inttoptr i64 %cont234111 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr245596 = getelementptr inbounds i64, i64* %cloptr245595, i64 0               ; &cloptr245595[0]
  %f245598 = load i64, i64* %i0ptr245596, align 8                                    ; load; *i0ptr245596
  %fptr245597 = inttoptr i64 %f245598 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr245597(i64 %cont234111, i64 %x236536)               ; tail call
  ret void

else245594:
  %arg234516 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %a233999 = call i64 @prim_vector_45ref(i64 %lst233676233856, i64 %arg234516)       ; call prim_vector_45ref
  %a234000 = call i64 @prim_cdr(i64 %a233999)                                        ; call prim_cdr
  %arg234520 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %retprim234117 = call i64 @prim_vector_45set_33(i64 %lst233676233856, i64 %arg234520, i64 %a234000); call prim_vector_45set_33
  %cloptr245599 = call i64* @alloc(i64 32)                                           ; malloc
  %eptr245601 = getelementptr inbounds i64, i64* %cloptr245599, i64 1                ; &eptr245601[1]
  %eptr245602 = getelementptr inbounds i64, i64* %cloptr245599, i64 2                ; &eptr245602[2]
  %eptr245603 = getelementptr inbounds i64, i64* %cloptr245599, i64 3                ; &eptr245603[3]
  store i64 %cc233678233857, i64* %eptr245601                                        ; *eptr245601 = %cc233678233857
  store i64 %n233677233855, i64* %eptr245602                                         ; *eptr245602 = %n233677233855
  store i64 %cont234111, i64* %eptr245603                                            ; *eptr245603 = %cont234111
  %eptr245600 = getelementptr inbounds i64, i64* %cloptr245599, i64 0                ; &cloptr245599[0]
  %f245604 = ptrtoint void(i64,i64)* @lam243789 to i64                               ; fptr cast; i64(...)* -> i64
  store i64 %f245604, i64* %eptr245600                                               ; store fptr
  %arg234524 = ptrtoint i64* %cloptr245599 to i64                                    ; closure cast; i64* -> i64
  %arg234523 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %sym236585 = add i64 0, 0                                                          ; quoted ()
  %x236586 = call i64 @prim_cons(i64 %retprim234117, i64 %sym236585)                 ; call prim_cons
  %x236587 = call i64 @prim_cons(i64 %arg234523, i64 %x236586)                       ; call prim_cons
  %cloptr245605 = inttoptr i64 %arg234524 to i64*                                    ; closure/env cast; i64 -> i64*
  %i0ptr245606 = getelementptr inbounds i64, i64* %cloptr245605, i64 0               ; &cloptr245605[0]
  %f245608 = load i64, i64* %i0ptr245606, align 8                                    ; load; *i0ptr245606
  %fptr245607 = inttoptr i64 %f245608 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr245607(i64 %arg234524, i64 %x236587)                ; tail call
  ret void

else245591:
  %many236594 = call i64 @const_init_string(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @str245609, i32 0, i32 0)); quoted string
  %fail236592 = call i64 @prim_halt(i64 %many236594)                                 ; call prim_halt
  %sym236597 = add i64 0, 0                                                          ; quoted ()
  %cloptr245610 = inttoptr i64 %fail236592 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr245611 = getelementptr inbounds i64, i64* %cloptr245610, i64 0               ; &cloptr245610[0]
  %f245613 = load i64, i64* %i0ptr245611, align 8                                    ; load; *i0ptr245611
  %fptr245612 = inttoptr i64 %f245613 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr245612(i64 %fail236592, i64 %sym236597)             ; tail call
  ret void
}


define void @lam243789(i64 %env243790, i64 %rvp236576) {
  %envptr245614 = inttoptr i64 %env243790 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr245615 = getelementptr inbounds i64, i64* %envptr245614, i64 3              ; &envptr245614[3]
  %cont234111 = load i64, i64* %envptr245615, align 8                                ; load; *envptr245615
  %envptr245616 = inttoptr i64 %env243790 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr245617 = getelementptr inbounds i64, i64* %envptr245616, i64 2              ; &envptr245616[2]
  %n233677233855 = load i64, i64* %envptr245617, align 8                             ; load; *envptr245617
  %envptr245618 = inttoptr i64 %env243790 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr245619 = getelementptr inbounds i64, i64* %envptr245618, i64 1              ; &envptr245618[1]
  %cc233678233857 = load i64, i64* %envptr245619, align 8                            ; load; *envptr245619
  %check236577 = call i64 @prim_null_63(i64 %rvp236576)                              ; call prim_null_63
  %cmp245620 = icmp eq i64 %check236577, 15                                          ; false?
  br i1 %cmp245620, label %else245622, label %then245621                             ; if

then245621:
  %msg236581 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str245623, i32 0, i32 0)); quoted string
  %abort236579 = call i64 @prim_halt(i64 %msg236581)                                 ; call prim_halt
  %sym236584 = add i64 0, 0                                                          ; quoted ()
  %cloptr245624 = inttoptr i64 %abort236579 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr245625 = getelementptr inbounds i64, i64* %cloptr245624, i64 0               ; &cloptr245624[0]
  %f245627 = load i64, i64* %i0ptr245625, align 8                                    ; load; *i0ptr245625
  %fptr245626 = inttoptr i64 %f245627 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr245626(i64 %abort236579, i64 %sym236584)            ; tail call
  ret void

else245622:
  %_95234114 = call i64 @prim_car(i64 %rvp236576)                                    ; call prim_car
  %rvp236566 = call i64 @prim_cdr(i64 %rvp236576)                                    ; call prim_cdr
  %check236567 = call i64 @prim_null_63(i64 %rvp236566)                              ; call prim_null_63
  %cmp245628 = icmp eq i64 %check236567, 15                                          ; false?
  br i1 %cmp245628, label %else245630, label %then245629                             ; if

then245629:
  %msg236571 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str245631, i32 0, i32 0)); quoted string
  %abort236569 = call i64 @prim_halt(i64 %msg236571)                                 ; call prim_halt
  %sym236574 = add i64 0, 0                                                          ; quoted ()
  %cloptr245632 = inttoptr i64 %abort236569 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr245633 = getelementptr inbounds i64, i64* %cloptr245632, i64 0               ; &cloptr245632[0]
  %f245635 = load i64, i64* %i0ptr245633, align 8                                    ; load; *i0ptr245633
  %fptr245634 = inttoptr i64 %f245635 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr245634(i64 %abort236569, i64 %sym236574)            ; tail call
  ret void

else245630:
  %rest236573 = call i64 @prim_cdr(i64 %rvp236566)                                   ; call prim_cdr
  %empty236568 = call i64 @prim_null_63(i64 %rest236573)                             ; call prim_null_63
  %cmp245636 = icmp eq i64 %empty236568, 15                                          ; false?
  br i1 %cmp245636, label %else245638, label %then245637                             ; if

then245637:
  %_950233680233859 = call i64 @prim_car(i64 %rvp236566)                             ; call prim_car
  %na236538 = call i64 @prim_cdr(i64 %rvp236566)                                     ; call prim_cdr
  %arg234525 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %a234001 = call i64 @prim_vector_45ref(i64 %n233677233855, i64 %arg234525)         ; call prim_vector_45ref
  %arg234527 = call i64 @const_init_int(i64 1)                                       ; quoted int
  %a234002 = call i64 @prim__45(i64 %a234001, i64 %arg234527)                        ; call prim__45
  %arg234530 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %retprim234116 = call i64 @prim_vector_45set_33(i64 %n233677233855, i64 %arg234530, i64 %a234002); call prim_vector_45set_33
  %cloptr245639 = call i64* @alloc(i64 24)                                           ; malloc
  %eptr245641 = getelementptr inbounds i64, i64* %cloptr245639, i64 1                ; &eptr245641[1]
  %eptr245642 = getelementptr inbounds i64, i64* %cloptr245639, i64 2                ; &eptr245642[2]
  store i64 %cc233678233857, i64* %eptr245641                                        ; *eptr245641 = %cc233678233857
  store i64 %cont234111, i64* %eptr245642                                            ; *eptr245642 = %cont234111
  %eptr245640 = getelementptr inbounds i64, i64* %cloptr245639, i64 0                ; &cloptr245639[0]
  %f245643 = ptrtoint void(i64,i64)* @lam243782 to i64                               ; fptr cast; i64(...)* -> i64
  store i64 %f245643, i64* %eptr245640                                               ; store fptr
  %arg234534 = ptrtoint i64* %cloptr245639 to i64                                    ; closure cast; i64* -> i64
  %arg234533 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %sym236563 = add i64 0, 0                                                          ; quoted ()
  %x236564 = call i64 @prim_cons(i64 %retprim234116, i64 %sym236563)                 ; call prim_cons
  %x236565 = call i64 @prim_cons(i64 %arg234533, i64 %x236564)                       ; call prim_cons
  %cloptr245644 = inttoptr i64 %arg234534 to i64*                                    ; closure/env cast; i64 -> i64*
  %i0ptr245645 = getelementptr inbounds i64, i64* %cloptr245644, i64 0               ; &cloptr245644[0]
  %f245647 = load i64, i64* %i0ptr245645, align 8                                    ; load; *i0ptr245645
  %fptr245646 = inttoptr i64 %f245647 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr245646(i64 %arg234534, i64 %x236565)                ; tail call
  ret void

else245638:
  %many236572 = call i64 @const_init_string(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @str245648, i32 0, i32 0)); quoted string
  %fail236570 = call i64 @prim_halt(i64 %many236572)                                 ; call prim_halt
  %sym236575 = add i64 0, 0                                                          ; quoted ()
  %cloptr245649 = inttoptr i64 %fail236570 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr245650 = getelementptr inbounds i64, i64* %cloptr245649, i64 0               ; &cloptr245649[0]
  %f245652 = load i64, i64* %i0ptr245650, align 8                                    ; load; *i0ptr245650
  %fptr245651 = inttoptr i64 %f245652 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr245651(i64 %fail236570, i64 %sym236575)             ; tail call
  ret void
}


define void @lam243782(i64 %env243783, i64 %rvp236554) {
  %envptr245653 = inttoptr i64 %env243783 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr245654 = getelementptr inbounds i64, i64* %envptr245653, i64 2              ; &envptr245653[2]
  %cont234111 = load i64, i64* %envptr245654, align 8                                ; load; *envptr245654
  %envptr245655 = inttoptr i64 %env243783 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr245656 = getelementptr inbounds i64, i64* %envptr245655, i64 1              ; &envptr245655[1]
  %cc233678233857 = load i64, i64* %envptr245656, align 8                            ; load; *envptr245656
  %check236555 = call i64 @prim_null_63(i64 %rvp236554)                              ; call prim_null_63
  %cmp245657 = icmp eq i64 %check236555, 15                                          ; false?
  br i1 %cmp245657, label %else245659, label %then245658                             ; if

then245658:
  %msg236559 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str245660, i32 0, i32 0)); quoted string
  %abort236557 = call i64 @prim_halt(i64 %msg236559)                                 ; call prim_halt
  %sym236562 = add i64 0, 0                                                          ; quoted ()
  %cloptr245661 = inttoptr i64 %abort236557 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr245662 = getelementptr inbounds i64, i64* %cloptr245661, i64 0               ; &cloptr245661[0]
  %f245664 = load i64, i64* %i0ptr245662, align 8                                    ; load; *i0ptr245662
  %fptr245663 = inttoptr i64 %f245664 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr245663(i64 %abort236557, i64 %sym236562)            ; tail call
  ret void

else245659:
  %_95234115 = call i64 @prim_car(i64 %rvp236554)                                    ; call prim_car
  %rvp236544 = call i64 @prim_cdr(i64 %rvp236554)                                    ; call prim_cdr
  %check236545 = call i64 @prim_null_63(i64 %rvp236544)                              ; call prim_null_63
  %cmp245665 = icmp eq i64 %check236545, 15                                          ; false?
  br i1 %cmp245665, label %else245667, label %then245666                             ; if

then245666:
  %msg236549 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str245668, i32 0, i32 0)); quoted string
  %abort236547 = call i64 @prim_halt(i64 %msg236549)                                 ; call prim_halt
  %sym236552 = add i64 0, 0                                                          ; quoted ()
  %cloptr245669 = inttoptr i64 %abort236547 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr245670 = getelementptr inbounds i64, i64* %cloptr245669, i64 0               ; &cloptr245669[0]
  %f245672 = load i64, i64* %i0ptr245670, align 8                                    ; load; *i0ptr245670
  %fptr245671 = inttoptr i64 %f245672 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr245671(i64 %abort236547, i64 %sym236552)            ; tail call
  ret void

else245667:
  %rest236551 = call i64 @prim_cdr(i64 %rvp236544)                                   ; call prim_cdr
  %empty236546 = call i64 @prim_null_63(i64 %rest236551)                             ; call prim_null_63
  %cmp245673 = icmp eq i64 %empty236546, 15                                          ; false?
  br i1 %cmp245673, label %else245675, label %then245674                             ; if

then245674:
  %_951233681233860 = call i64 @prim_car(i64 %rvp236544)                             ; call prim_car
  %na236540 = call i64 @prim_cdr(i64 %rvp236544)                                     ; call prim_cdr
  %sym236541 = add i64 0, 0                                                          ; quoted ()
  %x236542 = call i64 @prim_cons(i64 %cc233678233857, i64 %sym236541)                ; call prim_cons
  %x236543 = call i64 @prim_cons(i64 %cont234111, i64 %x236542)                      ; call prim_cons
  %cloptr245676 = inttoptr i64 %cc233678233857 to i64*                               ; closure/env cast; i64 -> i64*
  %i0ptr245677 = getelementptr inbounds i64, i64* %cloptr245676, i64 0               ; &cloptr245676[0]
  %f245679 = load i64, i64* %i0ptr245677, align 8                                    ; load; *i0ptr245677
  %fptr245678 = inttoptr i64 %f245679 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr245678(i64 %cc233678233857, i64 %x236543)           ; tail call
  ret void

else245675:
  %many236550 = call i64 @const_init_string(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @str245680, i32 0, i32 0)); quoted string
  %fail236548 = call i64 @prim_halt(i64 %many236550)                                 ; call prim_halt
  %sym236553 = add i64 0, 0                                                          ; quoted ()
  %cloptr245681 = inttoptr i64 %fail236548 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr245682 = getelementptr inbounds i64, i64* %cloptr245681, i64 0               ; &cloptr245681[0]
  %f245684 = load i64, i64* %i0ptr245682, align 8                                    ; load; *i0ptr245682
  %fptr245683 = inttoptr i64 %f245684 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr245683(i64 %fail236548, i64 %sym236553)             ; tail call
  ret void
}


define void @lam243758(i64 %env243759, i64 %rvp236673) {
  %envptr245685 = inttoptr i64 %env243759 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr245686 = getelementptr inbounds i64, i64* %envptr245685, i64 3              ; &envptr245685[3]
  %cont234111 = load i64, i64* %envptr245686, align 8                                ; load; *envptr245686
  %envptr245687 = inttoptr i64 %env243759 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr245688 = getelementptr inbounds i64, i64* %envptr245687, i64 2              ; &envptr245687[2]
  %n233677233855 = load i64, i64* %envptr245688, align 8                             ; load; *envptr245688
  %envptr245689 = inttoptr i64 %env243759 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr245690 = getelementptr inbounds i64, i64* %envptr245689, i64 1              ; &envptr245689[1]
  %lst233676233856 = load i64, i64* %envptr245690, align 8                           ; load; *envptr245690
  %check236674 = call i64 @prim_null_63(i64 %rvp236673)                              ; call prim_null_63
  %cmp245691 = icmp eq i64 %check236674, 15                                          ; false?
  br i1 %cmp245691, label %else245693, label %then245692                             ; if

then245692:
  %msg236678 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str245694, i32 0, i32 0)); quoted string
  %abort236676 = call i64 @prim_halt(i64 %msg236678)                                 ; call prim_halt
  %sym236681 = add i64 0, 0                                                          ; quoted ()
  %cloptr245695 = inttoptr i64 %abort236676 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr245696 = getelementptr inbounds i64, i64* %cloptr245695, i64 0               ; &cloptr245695[0]
  %f245698 = load i64, i64* %i0ptr245696, align 8                                    ; load; *i0ptr245696
  %fptr245697 = inttoptr i64 %f245698 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr245697(i64 %abort236676, i64 %sym236681)            ; tail call
  ret void

else245693:
  %_95234112 = call i64 @prim_car(i64 %rvp236673)                                    ; call prim_car
  %rvp236663 = call i64 @prim_cdr(i64 %rvp236673)                                    ; call prim_cdr
  %check236664 = call i64 @prim_null_63(i64 %rvp236663)                              ; call prim_null_63
  %cmp245699 = icmp eq i64 %check236664, 15                                          ; false?
  br i1 %cmp245699, label %else245701, label %then245700                             ; if

then245700:
  %msg236668 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str245702, i32 0, i32 0)); quoted string
  %abort236666 = call i64 @prim_halt(i64 %msg236668)                                 ; call prim_halt
  %sym236671 = add i64 0, 0                                                          ; quoted ()
  %cloptr245703 = inttoptr i64 %abort236666 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr245704 = getelementptr inbounds i64, i64* %cloptr245703, i64 0               ; &cloptr245703[0]
  %f245706 = load i64, i64* %i0ptr245704, align 8                                    ; load; *i0ptr245704
  %fptr245705 = inttoptr i64 %f245706 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr245705(i64 %abort236666, i64 %sym236671)            ; tail call
  ret void

else245701:
  %rest236670 = call i64 @prim_cdr(i64 %rvp236663)                                   ; call prim_cdr
  %empty236665 = call i64 @prim_null_63(i64 %rest236670)                             ; call prim_null_63
  %cmp245707 = icmp eq i64 %empty236665, 15                                          ; false?
  br i1 %cmp245707, label %else245709, label %then245708                             ; if

then245708:
  %cc233678233857 = call i64 @prim_car(i64 %rvp236663)                               ; call prim_car
  %na236608 = call i64 @prim_cdr(i64 %rvp236663)                                     ; call prim_cdr
  %arg234538 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %a233997 = call i64 @prim_vector_45ref(i64 %n233677233855, i64 %arg234538)         ; call prim_vector_45ref
  %arg234541 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %a233998 = call i64 @prim__61(i64 %arg234541, i64 %a233997)                        ; call prim__61
  %cmp245710 = icmp eq i64 %a233998, 15                                              ; false?
  br i1 %cmp245710, label %else245712, label %then245711                             ; if

then245711:
  %arg234542 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %retprim234113 = call i64 @prim_vector_45ref(i64 %lst233676233856, i64 %arg234542) ; call prim_vector_45ref
  %arg234545 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %sym236609 = add i64 0, 0                                                          ; quoted ()
  %x236610 = call i64 @prim_cons(i64 %retprim234113, i64 %sym236609)                 ; call prim_cons
  %x236611 = call i64 @prim_cons(i64 %arg234545, i64 %x236610)                       ; call prim_cons
  %cloptr245713 = inttoptr i64 %cont234111 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr245714 = getelementptr inbounds i64, i64* %cloptr245713, i64 0               ; &cloptr245713[0]
  %f245716 = load i64, i64* %i0ptr245714, align 8                                    ; load; *i0ptr245714
  %fptr245715 = inttoptr i64 %f245716 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr245715(i64 %cont234111, i64 %x236611)               ; tail call
  ret void

else245712:
  %arg234547 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %a233999 = call i64 @prim_vector_45ref(i64 %lst233676233856, i64 %arg234547)       ; call prim_vector_45ref
  %a234000 = call i64 @prim_cdr(i64 %a233999)                                        ; call prim_cdr
  %arg234551 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %retprim234117 = call i64 @prim_vector_45set_33(i64 %lst233676233856, i64 %arg234551, i64 %a234000); call prim_vector_45set_33
  %cloptr245717 = call i64* @alloc(i64 32)                                           ; malloc
  %eptr245719 = getelementptr inbounds i64, i64* %cloptr245717, i64 1                ; &eptr245719[1]
  %eptr245720 = getelementptr inbounds i64, i64* %cloptr245717, i64 2                ; &eptr245720[2]
  %eptr245721 = getelementptr inbounds i64, i64* %cloptr245717, i64 3                ; &eptr245721[3]
  store i64 %cc233678233857, i64* %eptr245719                                        ; *eptr245719 = %cc233678233857
  store i64 %n233677233855, i64* %eptr245720                                         ; *eptr245720 = %n233677233855
  store i64 %cont234111, i64* %eptr245721                                            ; *eptr245721 = %cont234111
  %eptr245718 = getelementptr inbounds i64, i64* %cloptr245717, i64 0                ; &cloptr245717[0]
  %f245722 = ptrtoint void(i64,i64)* @lam243750 to i64                               ; fptr cast; i64(...)* -> i64
  store i64 %f245722, i64* %eptr245718                                               ; store fptr
  %arg234555 = ptrtoint i64* %cloptr245717 to i64                                    ; closure cast; i64* -> i64
  %arg234554 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %sym236660 = add i64 0, 0                                                          ; quoted ()
  %x236661 = call i64 @prim_cons(i64 %retprim234117, i64 %sym236660)                 ; call prim_cons
  %x236662 = call i64 @prim_cons(i64 %arg234554, i64 %x236661)                       ; call prim_cons
  %cloptr245723 = inttoptr i64 %arg234555 to i64*                                    ; closure/env cast; i64 -> i64*
  %i0ptr245724 = getelementptr inbounds i64, i64* %cloptr245723, i64 0               ; &cloptr245723[0]
  %f245726 = load i64, i64* %i0ptr245724, align 8                                    ; load; *i0ptr245724
  %fptr245725 = inttoptr i64 %f245726 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr245725(i64 %arg234555, i64 %x236662)                ; tail call
  ret void

else245709:
  %many236669 = call i64 @const_init_string(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @str245727, i32 0, i32 0)); quoted string
  %fail236667 = call i64 @prim_halt(i64 %many236669)                                 ; call prim_halt
  %sym236672 = add i64 0, 0                                                          ; quoted ()
  %cloptr245728 = inttoptr i64 %fail236667 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr245729 = getelementptr inbounds i64, i64* %cloptr245728, i64 0               ; &cloptr245728[0]
  %f245731 = load i64, i64* %i0ptr245729, align 8                                    ; load; *i0ptr245729
  %fptr245730 = inttoptr i64 %f245731 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr245730(i64 %fail236667, i64 %sym236672)             ; tail call
  ret void
}


define void @lam243750(i64 %env243751, i64 %rvp236651) {
  %envptr245732 = inttoptr i64 %env243751 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr245733 = getelementptr inbounds i64, i64* %envptr245732, i64 3              ; &envptr245732[3]
  %cont234111 = load i64, i64* %envptr245733, align 8                                ; load; *envptr245733
  %envptr245734 = inttoptr i64 %env243751 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr245735 = getelementptr inbounds i64, i64* %envptr245734, i64 2              ; &envptr245734[2]
  %n233677233855 = load i64, i64* %envptr245735, align 8                             ; load; *envptr245735
  %envptr245736 = inttoptr i64 %env243751 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr245737 = getelementptr inbounds i64, i64* %envptr245736, i64 1              ; &envptr245736[1]
  %cc233678233857 = load i64, i64* %envptr245737, align 8                            ; load; *envptr245737
  %check236652 = call i64 @prim_null_63(i64 %rvp236651)                              ; call prim_null_63
  %cmp245738 = icmp eq i64 %check236652, 15                                          ; false?
  br i1 %cmp245738, label %else245740, label %then245739                             ; if

then245739:
  %msg236656 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str245741, i32 0, i32 0)); quoted string
  %abort236654 = call i64 @prim_halt(i64 %msg236656)                                 ; call prim_halt
  %sym236659 = add i64 0, 0                                                          ; quoted ()
  %cloptr245742 = inttoptr i64 %abort236654 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr245743 = getelementptr inbounds i64, i64* %cloptr245742, i64 0               ; &cloptr245742[0]
  %f245745 = load i64, i64* %i0ptr245743, align 8                                    ; load; *i0ptr245743
  %fptr245744 = inttoptr i64 %f245745 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr245744(i64 %abort236654, i64 %sym236659)            ; tail call
  ret void

else245740:
  %_95234114 = call i64 @prim_car(i64 %rvp236651)                                    ; call prim_car
  %rvp236641 = call i64 @prim_cdr(i64 %rvp236651)                                    ; call prim_cdr
  %check236642 = call i64 @prim_null_63(i64 %rvp236641)                              ; call prim_null_63
  %cmp245746 = icmp eq i64 %check236642, 15                                          ; false?
  br i1 %cmp245746, label %else245748, label %then245747                             ; if

then245747:
  %msg236646 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str245749, i32 0, i32 0)); quoted string
  %abort236644 = call i64 @prim_halt(i64 %msg236646)                                 ; call prim_halt
  %sym236649 = add i64 0, 0                                                          ; quoted ()
  %cloptr245750 = inttoptr i64 %abort236644 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr245751 = getelementptr inbounds i64, i64* %cloptr245750, i64 0               ; &cloptr245750[0]
  %f245753 = load i64, i64* %i0ptr245751, align 8                                    ; load; *i0ptr245751
  %fptr245752 = inttoptr i64 %f245753 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr245752(i64 %abort236644, i64 %sym236649)            ; tail call
  ret void

else245748:
  %rest236648 = call i64 @prim_cdr(i64 %rvp236641)                                   ; call prim_cdr
  %empty236643 = call i64 @prim_null_63(i64 %rest236648)                             ; call prim_null_63
  %cmp245754 = icmp eq i64 %empty236643, 15                                          ; false?
  br i1 %cmp245754, label %else245756, label %then245755                             ; if

then245755:
  %_950233680233859 = call i64 @prim_car(i64 %rvp236641)                             ; call prim_car
  %na236613 = call i64 @prim_cdr(i64 %rvp236641)                                     ; call prim_cdr
  %arg234556 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %a234001 = call i64 @prim_vector_45ref(i64 %n233677233855, i64 %arg234556)         ; call prim_vector_45ref
  %arg234558 = call i64 @const_init_int(i64 1)                                       ; quoted int
  %a234002 = call i64 @prim__45(i64 %a234001, i64 %arg234558)                        ; call prim__45
  %arg234561 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %retprim234116 = call i64 @prim_vector_45set_33(i64 %n233677233855, i64 %arg234561, i64 %a234002); call prim_vector_45set_33
  %cloptr245757 = call i64* @alloc(i64 24)                                           ; malloc
  %eptr245759 = getelementptr inbounds i64, i64* %cloptr245757, i64 1                ; &eptr245759[1]
  %eptr245760 = getelementptr inbounds i64, i64* %cloptr245757, i64 2                ; &eptr245760[2]
  store i64 %cc233678233857, i64* %eptr245759                                        ; *eptr245759 = %cc233678233857
  store i64 %cont234111, i64* %eptr245760                                            ; *eptr245760 = %cont234111
  %eptr245758 = getelementptr inbounds i64, i64* %cloptr245757, i64 0                ; &cloptr245757[0]
  %f245761 = ptrtoint void(i64,i64)* @lam243743 to i64                               ; fptr cast; i64(...)* -> i64
  store i64 %f245761, i64* %eptr245758                                               ; store fptr
  %arg234565 = ptrtoint i64* %cloptr245757 to i64                                    ; closure cast; i64* -> i64
  %arg234564 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %sym236638 = add i64 0, 0                                                          ; quoted ()
  %x236639 = call i64 @prim_cons(i64 %retprim234116, i64 %sym236638)                 ; call prim_cons
  %x236640 = call i64 @prim_cons(i64 %arg234564, i64 %x236639)                       ; call prim_cons
  %cloptr245762 = inttoptr i64 %arg234565 to i64*                                    ; closure/env cast; i64 -> i64*
  %i0ptr245763 = getelementptr inbounds i64, i64* %cloptr245762, i64 0               ; &cloptr245762[0]
  %f245765 = load i64, i64* %i0ptr245763, align 8                                    ; load; *i0ptr245763
  %fptr245764 = inttoptr i64 %f245765 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr245764(i64 %arg234565, i64 %x236640)                ; tail call
  ret void

else245756:
  %many236647 = call i64 @const_init_string(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @str245766, i32 0, i32 0)); quoted string
  %fail236645 = call i64 @prim_halt(i64 %many236647)                                 ; call prim_halt
  %sym236650 = add i64 0, 0                                                          ; quoted ()
  %cloptr245767 = inttoptr i64 %fail236645 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr245768 = getelementptr inbounds i64, i64* %cloptr245767, i64 0               ; &cloptr245767[0]
  %f245770 = load i64, i64* %i0ptr245768, align 8                                    ; load; *i0ptr245768
  %fptr245769 = inttoptr i64 %f245770 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr245769(i64 %fail236645, i64 %sym236650)             ; tail call
  ret void
}


define void @lam243743(i64 %env243744, i64 %rvp236629) {
  %envptr245771 = inttoptr i64 %env243744 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr245772 = getelementptr inbounds i64, i64* %envptr245771, i64 2              ; &envptr245771[2]
  %cont234111 = load i64, i64* %envptr245772, align 8                                ; load; *envptr245772
  %envptr245773 = inttoptr i64 %env243744 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr245774 = getelementptr inbounds i64, i64* %envptr245773, i64 1              ; &envptr245773[1]
  %cc233678233857 = load i64, i64* %envptr245774, align 8                            ; load; *envptr245774
  %check236630 = call i64 @prim_null_63(i64 %rvp236629)                              ; call prim_null_63
  %cmp245775 = icmp eq i64 %check236630, 15                                          ; false?
  br i1 %cmp245775, label %else245777, label %then245776                             ; if

then245776:
  %msg236634 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str245778, i32 0, i32 0)); quoted string
  %abort236632 = call i64 @prim_halt(i64 %msg236634)                                 ; call prim_halt
  %sym236637 = add i64 0, 0                                                          ; quoted ()
  %cloptr245779 = inttoptr i64 %abort236632 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr245780 = getelementptr inbounds i64, i64* %cloptr245779, i64 0               ; &cloptr245779[0]
  %f245782 = load i64, i64* %i0ptr245780, align 8                                    ; load; *i0ptr245780
  %fptr245781 = inttoptr i64 %f245782 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr245781(i64 %abort236632, i64 %sym236637)            ; tail call
  ret void

else245777:
  %_95234115 = call i64 @prim_car(i64 %rvp236629)                                    ; call prim_car
  %rvp236619 = call i64 @prim_cdr(i64 %rvp236629)                                    ; call prim_cdr
  %check236620 = call i64 @prim_null_63(i64 %rvp236619)                              ; call prim_null_63
  %cmp245783 = icmp eq i64 %check236620, 15                                          ; false?
  br i1 %cmp245783, label %else245785, label %then245784                             ; if

then245784:
  %msg236624 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str245786, i32 0, i32 0)); quoted string
  %abort236622 = call i64 @prim_halt(i64 %msg236624)                                 ; call prim_halt
  %sym236627 = add i64 0, 0                                                          ; quoted ()
  %cloptr245787 = inttoptr i64 %abort236622 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr245788 = getelementptr inbounds i64, i64* %cloptr245787, i64 0               ; &cloptr245787[0]
  %f245790 = load i64, i64* %i0ptr245788, align 8                                    ; load; *i0ptr245788
  %fptr245789 = inttoptr i64 %f245790 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr245789(i64 %abort236622, i64 %sym236627)            ; tail call
  ret void

else245785:
  %rest236626 = call i64 @prim_cdr(i64 %rvp236619)                                   ; call prim_cdr
  %empty236621 = call i64 @prim_null_63(i64 %rest236626)                             ; call prim_null_63
  %cmp245791 = icmp eq i64 %empty236621, 15                                          ; false?
  br i1 %cmp245791, label %else245793, label %then245792                             ; if

then245792:
  %_951233681233860 = call i64 @prim_car(i64 %rvp236619)                             ; call prim_car
  %na236615 = call i64 @prim_cdr(i64 %rvp236619)                                     ; call prim_cdr
  %sym236616 = add i64 0, 0                                                          ; quoted ()
  %x236617 = call i64 @prim_cons(i64 %cc233678233857, i64 %sym236616)                ; call prim_cons
  %x236618 = call i64 @prim_cons(i64 %cont234111, i64 %x236617)                      ; call prim_cons
  %cloptr245794 = inttoptr i64 %cc233678233857 to i64*                               ; closure/env cast; i64 -> i64*
  %i0ptr245795 = getelementptr inbounds i64, i64* %cloptr245794, i64 0               ; &cloptr245794[0]
  %f245797 = load i64, i64* %i0ptr245795, align 8                                    ; load; *i0ptr245795
  %fptr245796 = inttoptr i64 %f245797 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr245796(i64 %cc233678233857, i64 %x236618)           ; tail call
  ret void

else245793:
  %many236625 = call i64 @const_init_string(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @str245798, i32 0, i32 0)); quoted string
  %fail236623 = call i64 @prim_halt(i64 %many236625)                                 ; call prim_halt
  %sym236628 = add i64 0, 0                                                          ; quoted ()
  %cloptr245799 = inttoptr i64 %fail236623 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr245800 = getelementptr inbounds i64, i64* %cloptr245799, i64 0               ; &cloptr245799[0]
  %f245802 = load i64, i64* %i0ptr245800, align 8                                    ; load; *i0ptr245800
  %fptr245801 = inttoptr i64 %f245802 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr245801(i64 %fail236623, i64 %sym236628)             ; tail call
  ret void
}


define void @lam243712(i64 %env243713, i64 %rvp236869) {
  %check236870 = call i64 @prim_null_63(i64 %rvp236869)                              ; call prim_null_63
  %cmp245803 = icmp eq i64 %check236870, 15                                          ; false?
  br i1 %cmp245803, label %else245805, label %then245804                             ; if

then245804:
  %msg236874 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str245806, i32 0, i32 0)); quoted string
  %abort236872 = call i64 @prim_halt(i64 %msg236874)                                 ; call prim_halt
  %sym236877 = add i64 0, 0                                                          ; quoted ()
  %cloptr245807 = inttoptr i64 %abort236872 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr245808 = getelementptr inbounds i64, i64* %cloptr245807, i64 0               ; &cloptr245807[0]
  %f245810 = load i64, i64* %i0ptr245808, align 8                                    ; load; *i0ptr245808
  %fptr245809 = inttoptr i64 %f245810 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr245809(i64 %abort236872, i64 %sym236877)            ; tail call
  ret void

else245805:
  %cont234119 = call i64 @prim_car(i64 %rvp236869)                                   ; call prim_car
  %rvp236860 = call i64 @prim_cdr(i64 %rvp236869)                                    ; call prim_cdr
  %check236861 = call i64 @prim_null_63(i64 %rvp236860)                              ; call prim_null_63
  %cmp245811 = icmp eq i64 %check236861, 15                                          ; false?
  br i1 %cmp245811, label %else245813, label %then245812                             ; if

then245812:
  %msg236865 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str245814, i32 0, i32 0)); quoted string
  %abort236863 = call i64 @prim_halt(i64 %msg236865)                                 ; call prim_halt
  %sym236868 = add i64 0, 0                                                          ; quoted ()
  %cloptr245815 = inttoptr i64 %abort236863 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr245816 = getelementptr inbounds i64, i64* %cloptr245815, i64 0               ; &cloptr245815[0]
  %f245818 = load i64, i64* %i0ptr245816, align 8                                    ; load; *i0ptr245816
  %fptr245817 = inttoptr i64 %f245818 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr245817(i64 %abort236863, i64 %sym236868)            ; tail call
  ret void

else245813:
  %v233682233861 = call i64 @prim_car(i64 %rvp236860)                                ; call prim_car
  %rvp236850 = call i64 @prim_cdr(i64 %rvp236860)                                    ; call prim_cdr
  %check236851 = call i64 @prim_null_63(i64 %rvp236850)                              ; call prim_null_63
  %cmp245819 = icmp eq i64 %check236851, 15                                          ; false?
  br i1 %cmp245819, label %else245821, label %then245820                             ; if

then245820:
  %msg236855 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str245822, i32 0, i32 0)); quoted string
  %abort236853 = call i64 @prim_halt(i64 %msg236855)                                 ; call prim_halt
  %sym236858 = add i64 0, 0                                                          ; quoted ()
  %cloptr245823 = inttoptr i64 %abort236853 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr245824 = getelementptr inbounds i64, i64* %cloptr245823, i64 0               ; &cloptr245823[0]
  %f245826 = load i64, i64* %i0ptr245824, align 8                                    ; load; *i0ptr245824
  %fptr245825 = inttoptr i64 %f245826 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr245825(i64 %abort236853, i64 %sym236858)            ; tail call
  ret void

else245821:
  %rest236857 = call i64 @prim_cdr(i64 %rvp236850)                                   ; call prim_cdr
  %empty236852 = call i64 @prim_null_63(i64 %rest236857)                             ; call prim_null_63
  %cmp245827 = icmp eq i64 %empty236852, 15                                          ; false?
  br i1 %cmp245827, label %else245829, label %then245828                             ; if

then245828:
  %lst233683233862 = call i64 @prim_car(i64 %rvp236850)                              ; call prim_car
  %na236714 = call i64 @prim_cdr(i64 %rvp236850)                                     ; call prim_cdr
  %arg234570 = call i64 @const_init_int(i64 1)                                       ; quoted int
  %lst233683233863 = call i64 @prim_make_45vector(i64 %arg234570, i64 %lst233683233862); call prim_make_45vector
  %cloptr245830 = call i64* @alloc(i64 8)                                            ; malloc
  %eptr245831 = getelementptr inbounds i64, i64* %cloptr245830, i64 0                ; &cloptr245830[0]
  %f245832 = ptrtoint void(i64,i64)* @lam243707 to i64                               ; fptr cast; i64(...)* -> i64
  store i64 %f245832, i64* %eptr245831                                               ; store fptr
  %arg234573 = ptrtoint i64* %cloptr245830 to i64                                    ; closure cast; i64* -> i64
  %cloptr245833 = call i64* @alloc(i64 32)                                           ; malloc
  %eptr245835 = getelementptr inbounds i64, i64* %cloptr245833, i64 1                ; &eptr245835[1]
  %eptr245836 = getelementptr inbounds i64, i64* %cloptr245833, i64 2                ; &eptr245836[2]
  %eptr245837 = getelementptr inbounds i64, i64* %cloptr245833, i64 3                ; &eptr245837[3]
  store i64 %v233682233861, i64* %eptr245835                                         ; *eptr245835 = %v233682233861
  store i64 %lst233683233863, i64* %eptr245836                                       ; *eptr245836 = %lst233683233863
  store i64 %cont234119, i64* %eptr245837                                            ; *eptr245837 = %cont234119
  %eptr245834 = getelementptr inbounds i64, i64* %cloptr245833, i64 0                ; &cloptr245833[0]
  %f245838 = ptrtoint void(i64,i64)* @lam243698 to i64                               ; fptr cast; i64(...)* -> i64
  store i64 %f245838, i64* %eptr245834                                               ; store fptr
  %arg234572 = ptrtoint i64* %cloptr245833 to i64                                    ; closure cast; i64* -> i64
  %cloptr245839 = call i64* @alloc(i64 32)                                           ; malloc
  %eptr245841 = getelementptr inbounds i64, i64* %cloptr245839, i64 1                ; &eptr245841[1]
  %eptr245842 = getelementptr inbounds i64, i64* %cloptr245839, i64 2                ; &eptr245842[2]
  %eptr245843 = getelementptr inbounds i64, i64* %cloptr245839, i64 3                ; &eptr245843[3]
  store i64 %v233682233861, i64* %eptr245841                                         ; *eptr245841 = %v233682233861
  store i64 %lst233683233863, i64* %eptr245842                                       ; *eptr245842 = %lst233683233863
  store i64 %cont234119, i64* %eptr245843                                            ; *eptr245843 = %cont234119
  %eptr245840 = getelementptr inbounds i64, i64* %cloptr245839, i64 0                ; &cloptr245839[0]
  %f245844 = ptrtoint void(i64,i64)* @lam243669 to i64                               ; fptr cast; i64(...)* -> i64
  store i64 %f245844, i64* %eptr245840                                               ; store fptr
  %arg234571 = ptrtoint i64* %cloptr245839 to i64                                    ; closure cast; i64* -> i64
  %sym236847 = add i64 0, 0                                                          ; quoted ()
  %x236848 = call i64 @prim_cons(i64 %arg234571, i64 %sym236847)                     ; call prim_cons
  %x236849 = call i64 @prim_cons(i64 %arg234572, i64 %x236848)                       ; call prim_cons
  %cloptr245845 = inttoptr i64 %arg234573 to i64*                                    ; closure/env cast; i64 -> i64*
  %i0ptr245846 = getelementptr inbounds i64, i64* %cloptr245845, i64 0               ; &cloptr245845[0]
  %f245848 = load i64, i64* %i0ptr245846, align 8                                    ; load; *i0ptr245846
  %fptr245847 = inttoptr i64 %f245848 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr245847(i64 %arg234573, i64 %x236849)                ; tail call
  ret void

else245829:
  %many236856 = call i64 @const_init_string(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @str245849, i32 0, i32 0)); quoted string
  %fail236854 = call i64 @prim_halt(i64 %many236856)                                 ; call prim_halt
  %sym236859 = add i64 0, 0                                                          ; quoted ()
  %cloptr245850 = inttoptr i64 %fail236854 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr245851 = getelementptr inbounds i64, i64* %cloptr245850, i64 0               ; &cloptr245850[0]
  %f245853 = load i64, i64* %i0ptr245851, align 8                                    ; load; *i0ptr245851
  %fptr245852 = inttoptr i64 %f245853 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr245852(i64 %fail236854, i64 %sym236859)             ; tail call
  ret void
}


define void @lam243707(i64 %env243708, i64 %rvp236730) {
  %check236731 = call i64 @prim_null_63(i64 %rvp236730)                              ; call prim_null_63
  %cmp245854 = icmp eq i64 %check236731, 15                                          ; false?
  br i1 %cmp245854, label %else245856, label %then245855                             ; if

then245855:
  %msg236735 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str245857, i32 0, i32 0)); quoted string
  %abort236733 = call i64 @prim_halt(i64 %msg236735)                                 ; call prim_halt
  %sym236738 = add i64 0, 0                                                          ; quoted ()
  %cloptr245858 = inttoptr i64 %abort236733 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr245859 = getelementptr inbounds i64, i64* %cloptr245858, i64 0               ; &cloptr245858[0]
  %f245861 = load i64, i64* %i0ptr245859, align 8                                    ; load; *i0ptr245859
  %fptr245860 = inttoptr i64 %f245861 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr245860(i64 %abort236733, i64 %sym236738)            ; tail call
  ret void

else245856:
  %cont234124 = call i64 @prim_car(i64 %rvp236730)                                   ; call prim_car
  %rvp236720 = call i64 @prim_cdr(i64 %rvp236730)                                    ; call prim_cdr
  %check236721 = call i64 @prim_null_63(i64 %rvp236720)                              ; call prim_null_63
  %cmp245862 = icmp eq i64 %check236721, 15                                          ; false?
  br i1 %cmp245862, label %else245864, label %then245863                             ; if

then245863:
  %msg236725 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str245865, i32 0, i32 0)); quoted string
  %abort236723 = call i64 @prim_halt(i64 %msg236725)                                 ; call prim_halt
  %sym236728 = add i64 0, 0                                                          ; quoted ()
  %cloptr245866 = inttoptr i64 %abort236723 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr245867 = getelementptr inbounds i64, i64* %cloptr245866, i64 0               ; &cloptr245866[0]
  %f245869 = load i64, i64* %i0ptr245867, align 8                                    ; load; *i0ptr245867
  %fptr245868 = inttoptr i64 %f245869 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr245868(i64 %abort236723, i64 %sym236728)            ; tail call
  ret void

else245864:
  %rest236727 = call i64 @prim_cdr(i64 %rvp236720)                                   ; call prim_cdr
  %empty236722 = call i64 @prim_null_63(i64 %rest236727)                             ; call prim_null_63
  %cmp245870 = icmp eq i64 %empty236722, 15                                          ; false?
  br i1 %cmp245870, label %else245872, label %then245871                             ; if

then245871:
  %u233685233865 = call i64 @prim_car(i64 %rvp236720)                                ; call prim_car
  %na236716 = call i64 @prim_cdr(i64 %rvp236720)                                     ; call prim_cdr
  %sym236717 = add i64 0, 0                                                          ; quoted ()
  %x236718 = call i64 @prim_cons(i64 %u233685233865, i64 %sym236717)                 ; call prim_cons
  %x236719 = call i64 @prim_cons(i64 %cont234124, i64 %x236718)                      ; call prim_cons
  %cloptr245873 = inttoptr i64 %u233685233865 to i64*                                ; closure/env cast; i64 -> i64*
  %i0ptr245874 = getelementptr inbounds i64, i64* %cloptr245873, i64 0               ; &cloptr245873[0]
  %f245876 = load i64, i64* %i0ptr245874, align 8                                    ; load; *i0ptr245874
  %fptr245875 = inttoptr i64 %f245876 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr245875(i64 %u233685233865, i64 %x236719)            ; tail call
  ret void

else245872:
  %many236726 = call i64 @const_init_string(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @str245877, i32 0, i32 0)); quoted string
  %fail236724 = call i64 @prim_halt(i64 %many236726)                                 ; call prim_halt
  %sym236729 = add i64 0, 0                                                          ; quoted ()
  %cloptr245878 = inttoptr i64 %fail236724 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr245879 = getelementptr inbounds i64, i64* %cloptr245878, i64 0               ; &cloptr245878[0]
  %f245881 = load i64, i64* %i0ptr245879, align 8                                    ; load; *i0ptr245879
  %fptr245880 = inttoptr i64 %f245881 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr245880(i64 %fail236724, i64 %sym236729)             ; tail call
  ret void
}


define void @lam243698(i64 %env243699, i64 %rvp236784) {
  %envptr245882 = inttoptr i64 %env243699 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr245883 = getelementptr inbounds i64, i64* %envptr245882, i64 3              ; &envptr245882[3]
  %cont234119 = load i64, i64* %envptr245883, align 8                                ; load; *envptr245883
  %envptr245884 = inttoptr i64 %env243699 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr245885 = getelementptr inbounds i64, i64* %envptr245884, i64 2              ; &envptr245884[2]
  %lst233683233863 = load i64, i64* %envptr245885, align 8                           ; load; *envptr245885
  %envptr245886 = inttoptr i64 %env243699 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr245887 = getelementptr inbounds i64, i64* %envptr245886, i64 1              ; &envptr245886[1]
  %v233682233861 = load i64, i64* %envptr245887, align 8                             ; load; *envptr245887
  %check236785 = call i64 @prim_null_63(i64 %rvp236784)                              ; call prim_null_63
  %cmp245888 = icmp eq i64 %check236785, 15                                          ; false?
  br i1 %cmp245888, label %else245890, label %then245889                             ; if

then245889:
  %msg236789 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str245891, i32 0, i32 0)); quoted string
  %abort236787 = call i64 @prim_halt(i64 %msg236789)                                 ; call prim_halt
  %sym236792 = add i64 0, 0                                                          ; quoted ()
  %cloptr245892 = inttoptr i64 %abort236787 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr245893 = getelementptr inbounds i64, i64* %cloptr245892, i64 0               ; &cloptr245892[0]
  %f245895 = load i64, i64* %i0ptr245893, align 8                                    ; load; *i0ptr245893
  %fptr245894 = inttoptr i64 %f245895 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr245894(i64 %abort236787, i64 %sym236792)            ; tail call
  ret void

else245890:
  %_95234120 = call i64 @prim_car(i64 %rvp236784)                                    ; call prim_car
  %rvp236774 = call i64 @prim_cdr(i64 %rvp236784)                                    ; call prim_cdr
  %check236775 = call i64 @prim_null_63(i64 %rvp236774)                              ; call prim_null_63
  %cmp245896 = icmp eq i64 %check236775, 15                                          ; false?
  br i1 %cmp245896, label %else245898, label %then245897                             ; if

then245897:
  %msg236779 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str245899, i32 0, i32 0)); quoted string
  %abort236777 = call i64 @prim_halt(i64 %msg236779)                                 ; call prim_halt
  %sym236782 = add i64 0, 0                                                          ; quoted ()
  %cloptr245900 = inttoptr i64 %abort236777 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr245901 = getelementptr inbounds i64, i64* %cloptr245900, i64 0               ; &cloptr245900[0]
  %f245903 = load i64, i64* %i0ptr245901, align 8                                    ; load; *i0ptr245901
  %fptr245902 = inttoptr i64 %f245903 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr245902(i64 %abort236777, i64 %sym236782)            ; tail call
  ret void

else245898:
  %rest236781 = call i64 @prim_cdr(i64 %rvp236774)                                   ; call prim_cdr
  %empty236776 = call i64 @prim_null_63(i64 %rest236781)                             ; call prim_null_63
  %cmp245904 = icmp eq i64 %empty236776, 15                                          ; false?
  br i1 %cmp245904, label %else245906, label %then245905                             ; if

then245905:
  %cc233684233864 = call i64 @prim_car(i64 %rvp236774)                               ; call prim_car
  %na236740 = call i64 @prim_cdr(i64 %rvp236774)                                     ; call prim_cdr
  %arg234577 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %a234003 = call i64 @prim_vector_45ref(i64 %lst233683233863, i64 %arg234577)       ; call prim_vector_45ref
  %a234004 = call i64 @prim_null_63(i64 %a234003)                                    ; call prim_null_63
  %cmp245907 = icmp eq i64 %a234004, 15                                              ; false?
  br i1 %cmp245907, label %else245909, label %then245908                             ; if

then245908:
  %arg234581 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %arg234580 = call i64 @const_init_false()                                          ; quoted #f
  %sym236741 = add i64 0, 0                                                          ; quoted ()
  %x236742 = call i64 @prim_cons(i64 %arg234580, i64 %sym236741)                     ; call prim_cons
  %x236743 = call i64 @prim_cons(i64 %arg234581, i64 %x236742)                       ; call prim_cons
  %cloptr245910 = inttoptr i64 %cont234119 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr245911 = getelementptr inbounds i64, i64* %cloptr245910, i64 0               ; &cloptr245910[0]
  %f245913 = load i64, i64* %i0ptr245911, align 8                                    ; load; *i0ptr245911
  %fptr245912 = inttoptr i64 %f245913 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr245912(i64 %cont234119, i64 %x236743)               ; tail call
  ret void

else245909:
  %arg234583 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %a234005 = call i64 @prim_vector_45ref(i64 %lst233683233863, i64 %arg234583)       ; call prim_vector_45ref
  %a234006 = call i64 @prim_car(i64 %a234005)                                        ; call prim_car
  %a234007 = call i64 @prim_eqv_63(i64 %a234006, i64 %v233682233861)                 ; call prim_eqv_63
  %cmp245914 = icmp eq i64 %a234007, 15                                              ; false?
  br i1 %cmp245914, label %else245916, label %then245915                             ; if

then245915:
  %arg234588 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %retprim234121 = call i64 @prim_vector_45ref(i64 %lst233683233863, i64 %arg234588) ; call prim_vector_45ref
  %arg234591 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %sym236744 = add i64 0, 0                                                          ; quoted ()
  %x236745 = call i64 @prim_cons(i64 %retprim234121, i64 %sym236744)                 ; call prim_cons
  %x236746 = call i64 @prim_cons(i64 %arg234591, i64 %x236745)                       ; call prim_cons
  %cloptr245917 = inttoptr i64 %cont234119 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr245918 = getelementptr inbounds i64, i64* %cloptr245917, i64 0               ; &cloptr245917[0]
  %f245920 = load i64, i64* %i0ptr245918, align 8                                    ; load; *i0ptr245918
  %fptr245919 = inttoptr i64 %f245920 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr245919(i64 %cont234119, i64 %x236746)               ; tail call
  ret void

else245916:
  %arg234593 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %a234008 = call i64 @prim_vector_45ref(i64 %lst233683233863, i64 %arg234593)       ; call prim_vector_45ref
  %a234009 = call i64 @prim_cdr(i64 %a234008)                                        ; call prim_cdr
  %arg234597 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %retprim234123 = call i64 @prim_vector_45set_33(i64 %lst233683233863, i64 %arg234597, i64 %a234009); call prim_vector_45set_33
  %cloptr245921 = call i64* @alloc(i64 24)                                           ; malloc
  %eptr245923 = getelementptr inbounds i64, i64* %cloptr245921, i64 1                ; &eptr245923[1]
  %eptr245924 = getelementptr inbounds i64, i64* %cloptr245921, i64 2                ; &eptr245924[2]
  store i64 %cc233684233864, i64* %eptr245923                                        ; *eptr245923 = %cc233684233864
  store i64 %cont234119, i64* %eptr245924                                            ; *eptr245924 = %cont234119
  %eptr245922 = getelementptr inbounds i64, i64* %cloptr245921, i64 0                ; &cloptr245921[0]
  %f245925 = ptrtoint void(i64,i64)* @lam243690 to i64                               ; fptr cast; i64(...)* -> i64
  store i64 %f245925, i64* %eptr245922                                               ; store fptr
  %arg234601 = ptrtoint i64* %cloptr245921 to i64                                    ; closure cast; i64* -> i64
  %arg234600 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %sym236771 = add i64 0, 0                                                          ; quoted ()
  %x236772 = call i64 @prim_cons(i64 %retprim234123, i64 %sym236771)                 ; call prim_cons
  %x236773 = call i64 @prim_cons(i64 %arg234600, i64 %x236772)                       ; call prim_cons
  %cloptr245926 = inttoptr i64 %arg234601 to i64*                                    ; closure/env cast; i64 -> i64*
  %i0ptr245927 = getelementptr inbounds i64, i64* %cloptr245926, i64 0               ; &cloptr245926[0]
  %f245929 = load i64, i64* %i0ptr245927, align 8                                    ; load; *i0ptr245927
  %fptr245928 = inttoptr i64 %f245929 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr245928(i64 %arg234601, i64 %x236773)                ; tail call
  ret void

else245906:
  %many236780 = call i64 @const_init_string(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @str245930, i32 0, i32 0)); quoted string
  %fail236778 = call i64 @prim_halt(i64 %many236780)                                 ; call prim_halt
  %sym236783 = add i64 0, 0                                                          ; quoted ()
  %cloptr245931 = inttoptr i64 %fail236778 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr245932 = getelementptr inbounds i64, i64* %cloptr245931, i64 0               ; &cloptr245931[0]
  %f245934 = load i64, i64* %i0ptr245932, align 8                                    ; load; *i0ptr245932
  %fptr245933 = inttoptr i64 %f245934 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr245933(i64 %fail236778, i64 %sym236783)             ; tail call
  ret void
}


define void @lam243690(i64 %env243691, i64 %rvp236762) {
  %envptr245935 = inttoptr i64 %env243691 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr245936 = getelementptr inbounds i64, i64* %envptr245935, i64 2              ; &envptr245935[2]
  %cont234119 = load i64, i64* %envptr245936, align 8                                ; load; *envptr245936
  %envptr245937 = inttoptr i64 %env243691 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr245938 = getelementptr inbounds i64, i64* %envptr245937, i64 1              ; &envptr245937[1]
  %cc233684233864 = load i64, i64* %envptr245938, align 8                            ; load; *envptr245938
  %check236763 = call i64 @prim_null_63(i64 %rvp236762)                              ; call prim_null_63
  %cmp245939 = icmp eq i64 %check236763, 15                                          ; false?
  br i1 %cmp245939, label %else245941, label %then245940                             ; if

then245940:
  %msg236767 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str245942, i32 0, i32 0)); quoted string
  %abort236765 = call i64 @prim_halt(i64 %msg236767)                                 ; call prim_halt
  %sym236770 = add i64 0, 0                                                          ; quoted ()
  %cloptr245943 = inttoptr i64 %abort236765 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr245944 = getelementptr inbounds i64, i64* %cloptr245943, i64 0               ; &cloptr245943[0]
  %f245946 = load i64, i64* %i0ptr245944, align 8                                    ; load; *i0ptr245944
  %fptr245945 = inttoptr i64 %f245946 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr245945(i64 %abort236765, i64 %sym236770)            ; tail call
  ret void

else245941:
  %_95234122 = call i64 @prim_car(i64 %rvp236762)                                    ; call prim_car
  %rvp236752 = call i64 @prim_cdr(i64 %rvp236762)                                    ; call prim_cdr
  %check236753 = call i64 @prim_null_63(i64 %rvp236752)                              ; call prim_null_63
  %cmp245947 = icmp eq i64 %check236753, 15                                          ; false?
  br i1 %cmp245947, label %else245949, label %then245948                             ; if

then245948:
  %msg236757 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str245950, i32 0, i32 0)); quoted string
  %abort236755 = call i64 @prim_halt(i64 %msg236757)                                 ; call prim_halt
  %sym236760 = add i64 0, 0                                                          ; quoted ()
  %cloptr245951 = inttoptr i64 %abort236755 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr245952 = getelementptr inbounds i64, i64* %cloptr245951, i64 0               ; &cloptr245951[0]
  %f245954 = load i64, i64* %i0ptr245952, align 8                                    ; load; *i0ptr245952
  %fptr245953 = inttoptr i64 %f245954 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr245953(i64 %abort236755, i64 %sym236760)            ; tail call
  ret void

else245949:
  %rest236759 = call i64 @prim_cdr(i64 %rvp236752)                                   ; call prim_cdr
  %empty236754 = call i64 @prim_null_63(i64 %rest236759)                             ; call prim_null_63
  %cmp245955 = icmp eq i64 %empty236754, 15                                          ; false?
  br i1 %cmp245955, label %else245957, label %then245956                             ; if

then245956:
  %_950233686233866 = call i64 @prim_car(i64 %rvp236752)                             ; call prim_car
  %na236748 = call i64 @prim_cdr(i64 %rvp236752)                                     ; call prim_cdr
  %sym236749 = add i64 0, 0                                                          ; quoted ()
  %x236750 = call i64 @prim_cons(i64 %cc233684233864, i64 %sym236749)                ; call prim_cons
  %x236751 = call i64 @prim_cons(i64 %cont234119, i64 %x236750)                      ; call prim_cons
  %cloptr245958 = inttoptr i64 %cc233684233864 to i64*                               ; closure/env cast; i64 -> i64*
  %i0ptr245959 = getelementptr inbounds i64, i64* %cloptr245958, i64 0               ; &cloptr245958[0]
  %f245961 = load i64, i64* %i0ptr245959, align 8                                    ; load; *i0ptr245959
  %fptr245960 = inttoptr i64 %f245961 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr245960(i64 %cc233684233864, i64 %x236751)           ; tail call
  ret void

else245957:
  %many236758 = call i64 @const_init_string(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @str245962, i32 0, i32 0)); quoted string
  %fail236756 = call i64 @prim_halt(i64 %many236758)                                 ; call prim_halt
  %sym236761 = add i64 0, 0                                                          ; quoted ()
  %cloptr245963 = inttoptr i64 %fail236756 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr245964 = getelementptr inbounds i64, i64* %cloptr245963, i64 0               ; &cloptr245963[0]
  %f245966 = load i64, i64* %i0ptr245964, align 8                                    ; load; *i0ptr245964
  %fptr245965 = inttoptr i64 %f245966 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr245965(i64 %fail236756, i64 %sym236761)             ; tail call
  ret void
}


define void @lam243669(i64 %env243670, i64 %rvp236838) {
  %envptr245967 = inttoptr i64 %env243670 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr245968 = getelementptr inbounds i64, i64* %envptr245967, i64 3              ; &envptr245967[3]
  %cont234119 = load i64, i64* %envptr245968, align 8                                ; load; *envptr245968
  %envptr245969 = inttoptr i64 %env243670 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr245970 = getelementptr inbounds i64, i64* %envptr245969, i64 2              ; &envptr245969[2]
  %lst233683233863 = load i64, i64* %envptr245970, align 8                           ; load; *envptr245970
  %envptr245971 = inttoptr i64 %env243670 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr245972 = getelementptr inbounds i64, i64* %envptr245971, i64 1              ; &envptr245971[1]
  %v233682233861 = load i64, i64* %envptr245972, align 8                             ; load; *envptr245972
  %check236839 = call i64 @prim_null_63(i64 %rvp236838)                              ; call prim_null_63
  %cmp245973 = icmp eq i64 %check236839, 15                                          ; false?
  br i1 %cmp245973, label %else245975, label %then245974                             ; if

then245974:
  %msg236843 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str245976, i32 0, i32 0)); quoted string
  %abort236841 = call i64 @prim_halt(i64 %msg236843)                                 ; call prim_halt
  %sym236846 = add i64 0, 0                                                          ; quoted ()
  %cloptr245977 = inttoptr i64 %abort236841 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr245978 = getelementptr inbounds i64, i64* %cloptr245977, i64 0               ; &cloptr245977[0]
  %f245980 = load i64, i64* %i0ptr245978, align 8                                    ; load; *i0ptr245978
  %fptr245979 = inttoptr i64 %f245980 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr245979(i64 %abort236841, i64 %sym236846)            ; tail call
  ret void

else245975:
  %_95234120 = call i64 @prim_car(i64 %rvp236838)                                    ; call prim_car
  %rvp236828 = call i64 @prim_cdr(i64 %rvp236838)                                    ; call prim_cdr
  %check236829 = call i64 @prim_null_63(i64 %rvp236828)                              ; call prim_null_63
  %cmp245981 = icmp eq i64 %check236829, 15                                          ; false?
  br i1 %cmp245981, label %else245983, label %then245982                             ; if

then245982:
  %msg236833 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str245984, i32 0, i32 0)); quoted string
  %abort236831 = call i64 @prim_halt(i64 %msg236833)                                 ; call prim_halt
  %sym236836 = add i64 0, 0                                                          ; quoted ()
  %cloptr245985 = inttoptr i64 %abort236831 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr245986 = getelementptr inbounds i64, i64* %cloptr245985, i64 0               ; &cloptr245985[0]
  %f245988 = load i64, i64* %i0ptr245986, align 8                                    ; load; *i0ptr245986
  %fptr245987 = inttoptr i64 %f245988 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr245987(i64 %abort236831, i64 %sym236836)            ; tail call
  ret void

else245983:
  %rest236835 = call i64 @prim_cdr(i64 %rvp236828)                                   ; call prim_cdr
  %empty236830 = call i64 @prim_null_63(i64 %rest236835)                             ; call prim_null_63
  %cmp245989 = icmp eq i64 %empty236830, 15                                          ; false?
  br i1 %cmp245989, label %else245991, label %then245990                             ; if

then245990:
  %cc233684233864 = call i64 @prim_car(i64 %rvp236828)                               ; call prim_car
  %na236794 = call i64 @prim_cdr(i64 %rvp236828)                                     ; call prim_cdr
  %arg234605 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %a234003 = call i64 @prim_vector_45ref(i64 %lst233683233863, i64 %arg234605)       ; call prim_vector_45ref
  %a234004 = call i64 @prim_null_63(i64 %a234003)                                    ; call prim_null_63
  %cmp245992 = icmp eq i64 %a234004, 15                                              ; false?
  br i1 %cmp245992, label %else245994, label %then245993                             ; if

then245993:
  %arg234609 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %arg234608 = call i64 @const_init_false()                                          ; quoted #f
  %sym236795 = add i64 0, 0                                                          ; quoted ()
  %x236796 = call i64 @prim_cons(i64 %arg234608, i64 %sym236795)                     ; call prim_cons
  %x236797 = call i64 @prim_cons(i64 %arg234609, i64 %x236796)                       ; call prim_cons
  %cloptr245995 = inttoptr i64 %cont234119 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr245996 = getelementptr inbounds i64, i64* %cloptr245995, i64 0               ; &cloptr245995[0]
  %f245998 = load i64, i64* %i0ptr245996, align 8                                    ; load; *i0ptr245996
  %fptr245997 = inttoptr i64 %f245998 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr245997(i64 %cont234119, i64 %x236797)               ; tail call
  ret void

else245994:
  %arg234611 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %a234005 = call i64 @prim_vector_45ref(i64 %lst233683233863, i64 %arg234611)       ; call prim_vector_45ref
  %a234006 = call i64 @prim_car(i64 %a234005)                                        ; call prim_car
  %a234007 = call i64 @prim_eqv_63(i64 %a234006, i64 %v233682233861)                 ; call prim_eqv_63
  %cmp245999 = icmp eq i64 %a234007, 15                                              ; false?
  br i1 %cmp245999, label %else246001, label %then246000                             ; if

then246000:
  %arg234616 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %retprim234121 = call i64 @prim_vector_45ref(i64 %lst233683233863, i64 %arg234616) ; call prim_vector_45ref
  %arg234619 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %sym236798 = add i64 0, 0                                                          ; quoted ()
  %x236799 = call i64 @prim_cons(i64 %retprim234121, i64 %sym236798)                 ; call prim_cons
  %x236800 = call i64 @prim_cons(i64 %arg234619, i64 %x236799)                       ; call prim_cons
  %cloptr246002 = inttoptr i64 %cont234119 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr246003 = getelementptr inbounds i64, i64* %cloptr246002, i64 0               ; &cloptr246002[0]
  %f246005 = load i64, i64* %i0ptr246003, align 8                                    ; load; *i0ptr246003
  %fptr246004 = inttoptr i64 %f246005 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr246004(i64 %cont234119, i64 %x236800)               ; tail call
  ret void

else246001:
  %arg234621 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %a234008 = call i64 @prim_vector_45ref(i64 %lst233683233863, i64 %arg234621)       ; call prim_vector_45ref
  %a234009 = call i64 @prim_cdr(i64 %a234008)                                        ; call prim_cdr
  %arg234625 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %retprim234123 = call i64 @prim_vector_45set_33(i64 %lst233683233863, i64 %arg234625, i64 %a234009); call prim_vector_45set_33
  %cloptr246006 = call i64* @alloc(i64 24)                                           ; malloc
  %eptr246008 = getelementptr inbounds i64, i64* %cloptr246006, i64 1                ; &eptr246008[1]
  %eptr246009 = getelementptr inbounds i64, i64* %cloptr246006, i64 2                ; &eptr246009[2]
  store i64 %cc233684233864, i64* %eptr246008                                        ; *eptr246008 = %cc233684233864
  store i64 %cont234119, i64* %eptr246009                                            ; *eptr246009 = %cont234119
  %eptr246007 = getelementptr inbounds i64, i64* %cloptr246006, i64 0                ; &cloptr246006[0]
  %f246010 = ptrtoint void(i64,i64)* @lam243661 to i64                               ; fptr cast; i64(...)* -> i64
  store i64 %f246010, i64* %eptr246007                                               ; store fptr
  %arg234629 = ptrtoint i64* %cloptr246006 to i64                                    ; closure cast; i64* -> i64
  %arg234628 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %sym236825 = add i64 0, 0                                                          ; quoted ()
  %x236826 = call i64 @prim_cons(i64 %retprim234123, i64 %sym236825)                 ; call prim_cons
  %x236827 = call i64 @prim_cons(i64 %arg234628, i64 %x236826)                       ; call prim_cons
  %cloptr246011 = inttoptr i64 %arg234629 to i64*                                    ; closure/env cast; i64 -> i64*
  %i0ptr246012 = getelementptr inbounds i64, i64* %cloptr246011, i64 0               ; &cloptr246011[0]
  %f246014 = load i64, i64* %i0ptr246012, align 8                                    ; load; *i0ptr246012
  %fptr246013 = inttoptr i64 %f246014 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr246013(i64 %arg234629, i64 %x236827)                ; tail call
  ret void

else245991:
  %many236834 = call i64 @const_init_string(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @str246015, i32 0, i32 0)); quoted string
  %fail236832 = call i64 @prim_halt(i64 %many236834)                                 ; call prim_halt
  %sym236837 = add i64 0, 0                                                          ; quoted ()
  %cloptr246016 = inttoptr i64 %fail236832 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr246017 = getelementptr inbounds i64, i64* %cloptr246016, i64 0               ; &cloptr246016[0]
  %f246019 = load i64, i64* %i0ptr246017, align 8                                    ; load; *i0ptr246017
  %fptr246018 = inttoptr i64 %f246019 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr246018(i64 %fail236832, i64 %sym236837)             ; tail call
  ret void
}


define void @lam243661(i64 %env243662, i64 %rvp236816) {
  %envptr246020 = inttoptr i64 %env243662 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr246021 = getelementptr inbounds i64, i64* %envptr246020, i64 2              ; &envptr246020[2]
  %cont234119 = load i64, i64* %envptr246021, align 8                                ; load; *envptr246021
  %envptr246022 = inttoptr i64 %env243662 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr246023 = getelementptr inbounds i64, i64* %envptr246022, i64 1              ; &envptr246022[1]
  %cc233684233864 = load i64, i64* %envptr246023, align 8                            ; load; *envptr246023
  %check236817 = call i64 @prim_null_63(i64 %rvp236816)                              ; call prim_null_63
  %cmp246024 = icmp eq i64 %check236817, 15                                          ; false?
  br i1 %cmp246024, label %else246026, label %then246025                             ; if

then246025:
  %msg236821 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str246027, i32 0, i32 0)); quoted string
  %abort236819 = call i64 @prim_halt(i64 %msg236821)                                 ; call prim_halt
  %sym236824 = add i64 0, 0                                                          ; quoted ()
  %cloptr246028 = inttoptr i64 %abort236819 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr246029 = getelementptr inbounds i64, i64* %cloptr246028, i64 0               ; &cloptr246028[0]
  %f246031 = load i64, i64* %i0ptr246029, align 8                                    ; load; *i0ptr246029
  %fptr246030 = inttoptr i64 %f246031 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr246030(i64 %abort236819, i64 %sym236824)            ; tail call
  ret void

else246026:
  %_95234122 = call i64 @prim_car(i64 %rvp236816)                                    ; call prim_car
  %rvp236806 = call i64 @prim_cdr(i64 %rvp236816)                                    ; call prim_cdr
  %check236807 = call i64 @prim_null_63(i64 %rvp236806)                              ; call prim_null_63
  %cmp246032 = icmp eq i64 %check236807, 15                                          ; false?
  br i1 %cmp246032, label %else246034, label %then246033                             ; if

then246033:
  %msg236811 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str246035, i32 0, i32 0)); quoted string
  %abort236809 = call i64 @prim_halt(i64 %msg236811)                                 ; call prim_halt
  %sym236814 = add i64 0, 0                                                          ; quoted ()
  %cloptr246036 = inttoptr i64 %abort236809 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr246037 = getelementptr inbounds i64, i64* %cloptr246036, i64 0               ; &cloptr246036[0]
  %f246039 = load i64, i64* %i0ptr246037, align 8                                    ; load; *i0ptr246037
  %fptr246038 = inttoptr i64 %f246039 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr246038(i64 %abort236809, i64 %sym236814)            ; tail call
  ret void

else246034:
  %rest236813 = call i64 @prim_cdr(i64 %rvp236806)                                   ; call prim_cdr
  %empty236808 = call i64 @prim_null_63(i64 %rest236813)                             ; call prim_null_63
  %cmp246040 = icmp eq i64 %empty236808, 15                                          ; false?
  br i1 %cmp246040, label %else246042, label %then246041                             ; if

then246041:
  %_950233686233866 = call i64 @prim_car(i64 %rvp236806)                             ; call prim_car
  %na236802 = call i64 @prim_cdr(i64 %rvp236806)                                     ; call prim_cdr
  %sym236803 = add i64 0, 0                                                          ; quoted ()
  %x236804 = call i64 @prim_cons(i64 %cc233684233864, i64 %sym236803)                ; call prim_cons
  %x236805 = call i64 @prim_cons(i64 %cont234119, i64 %x236804)                      ; call prim_cons
  %cloptr246043 = inttoptr i64 %cc233684233864 to i64*                               ; closure/env cast; i64 -> i64*
  %i0ptr246044 = getelementptr inbounds i64, i64* %cloptr246043, i64 0               ; &cloptr246043[0]
  %f246046 = load i64, i64* %i0ptr246044, align 8                                    ; load; *i0ptr246044
  %fptr246045 = inttoptr i64 %f246046 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr246045(i64 %cc233684233864, i64 %x236805)           ; tail call
  ret void

else246042:
  %many236812 = call i64 @const_init_string(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @str246047, i32 0, i32 0)); quoted string
  %fail236810 = call i64 @prim_halt(i64 %many236812)                                 ; call prim_halt
  %sym236815 = add i64 0, 0                                                          ; quoted ()
  %cloptr246048 = inttoptr i64 %fail236810 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr246049 = getelementptr inbounds i64, i64* %cloptr246048, i64 0               ; &cloptr246048[0]
  %f246051 = load i64, i64* %i0ptr246049, align 8                                    ; load; *i0ptr246049
  %fptr246050 = inttoptr i64 %f246051 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr246050(i64 %fail236810, i64 %sym236815)             ; tail call
  ret void
}


define void @lam243633(i64 %env243634, i64 %args233687233867234126) {
  %envptr246052 = inttoptr i64 %env243634 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr246053 = getelementptr inbounds i64, i64* %envptr246052, i64 1              ; &envptr246052[1]
  %_37foldl1233589233765 = load i64, i64* %envptr246053, align 8                     ; load; *envptr246053
  %cont234125 = call i64 @prim_car(i64 %args233687233867234126)                      ; call prim_car
  %args233687233867 = call i64 @prim_cdr(i64 %args233687233867234126)                ; call prim_cdr
  %a234010 = call i64 @prim_null_63(i64 %args233687233867)                           ; call prim_null_63
  %cmp246054 = icmp eq i64 %a234010, 15                                              ; false?
  br i1 %cmp246054, label %else246056, label %then246055                             ; if

then246055:
  %arg234637 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %arg234636 = call i64 @const_init_int(i64 1)                                       ; quoted int
  %sym236878 = add i64 0, 0                                                          ; quoted ()
  %x236879 = call i64 @prim_cons(i64 %arg234636, i64 %sym236878)                     ; call prim_cons
  %x236880 = call i64 @prim_cons(i64 %arg234637, i64 %x236879)                       ; call prim_cons
  %cloptr246057 = inttoptr i64 %cont234125 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr246058 = getelementptr inbounds i64, i64* %cloptr246057, i64 0               ; &cloptr246057[0]
  %f246060 = load i64, i64* %i0ptr246058, align 8                                    ; load; *i0ptr246058
  %fptr246059 = inttoptr i64 %f246060 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr246059(i64 %cont234125, i64 %x236880)               ; tail call
  ret void

else246056:
  %a234011 = call i64 @prim_cdr(i64 %args233687233867)                               ; call prim_cdr
  %a234012 = call i64 @prim_null_63(i64 %a234011)                                    ; call prim_null_63
  %cmp246061 = icmp eq i64 %a234012, 15                                              ; false?
  br i1 %cmp246061, label %else246063, label %then246062                             ; if

then246062:
  %retprim234127 = call i64 @prim_car(i64 %args233687233867)                         ; call prim_car
  %arg234643 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %sym236881 = add i64 0, 0                                                          ; quoted ()
  %x236882 = call i64 @prim_cons(i64 %retprim234127, i64 %sym236881)                 ; call prim_cons
  %x236883 = call i64 @prim_cons(i64 %arg234643, i64 %x236882)                       ; call prim_cons
  %cloptr246064 = inttoptr i64 %cont234125 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr246065 = getelementptr inbounds i64, i64* %cloptr246064, i64 0               ; &cloptr246064[0]
  %f246067 = load i64, i64* %i0ptr246065, align 8                                    ; load; *i0ptr246065
  %fptr246066 = inttoptr i64 %f246067 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr246066(i64 %cont234125, i64 %x236883)               ; tail call
  ret void

else246063:
  %a234013 = call i64 @prim_car(i64 %args233687233867)                               ; call prim_car
  %a234014 = call i64 @prim_cdr(i64 %args233687233867)                               ; call prim_cdr
  %cloptr246068 = call i64* @alloc(i64 8)                                            ; malloc
  %eptr246069 = getelementptr inbounds i64, i64* %cloptr246068, i64 0                ; &cloptr246068[0]
  %f246070 = ptrtoint void(i64,i64)* @lam243631 to i64                               ; fptr cast; i64(...)* -> i64
  store i64 %f246070, i64* %eptr246069                                               ; store fptr
  %arg234649 = ptrtoint i64* %cloptr246068 to i64                                    ; closure cast; i64* -> i64
  %sym236917 = add i64 0, 0                                                          ; quoted ()
  %x236918 = call i64 @prim_cons(i64 %a234014, i64 %sym236917)                       ; call prim_cons
  %x236919 = call i64 @prim_cons(i64 %a234013, i64 %x236918)                         ; call prim_cons
  %x236920 = call i64 @prim_cons(i64 %arg234649, i64 %x236919)                       ; call prim_cons
  %x236921 = call i64 @prim_cons(i64 %cont234125, i64 %x236920)                      ; call prim_cons
  %cloptr246071 = inttoptr i64 %_37foldl1233589233765 to i64*                        ; closure/env cast; i64 -> i64*
  %i0ptr246072 = getelementptr inbounds i64, i64* %cloptr246071, i64 0               ; &cloptr246071[0]
  %f246074 = load i64, i64* %i0ptr246072, align 8                                    ; load; *i0ptr246072
  %fptr246073 = inttoptr i64 %f246074 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr246073(i64 %_37foldl1233589233765, i64 %x236921)    ; tail call
  ret void
}


define void @lam243631(i64 %env243632, i64 %rvp236908) {
  %check236909 = call i64 @prim_null_63(i64 %rvp236908)                              ; call prim_null_63
  %cmp246075 = icmp eq i64 %check236909, 15                                          ; false?
  br i1 %cmp246075, label %else246077, label %then246076                             ; if

then246076:
  %msg236913 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str246078, i32 0, i32 0)); quoted string
  %abort236911 = call i64 @prim_halt(i64 %msg236913)                                 ; call prim_halt
  %sym236916 = add i64 0, 0                                                          ; quoted ()
  %cloptr246079 = inttoptr i64 %abort236911 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr246080 = getelementptr inbounds i64, i64* %cloptr246079, i64 0               ; &cloptr246079[0]
  %f246082 = load i64, i64* %i0ptr246080, align 8                                    ; load; *i0ptr246080
  %fptr246081 = inttoptr i64 %f246082 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr246081(i64 %abort236911, i64 %sym236916)            ; tail call
  ret void

else246077:
  %cont234128 = call i64 @prim_car(i64 %rvp236908)                                   ; call prim_car
  %rvp236899 = call i64 @prim_cdr(i64 %rvp236908)                                    ; call prim_cdr
  %check236900 = call i64 @prim_null_63(i64 %rvp236899)                              ; call prim_null_63
  %cmp246083 = icmp eq i64 %check236900, 15                                          ; false?
  br i1 %cmp246083, label %else246085, label %then246084                             ; if

then246084:
  %msg236904 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str246086, i32 0, i32 0)); quoted string
  %abort236902 = call i64 @prim_halt(i64 %msg236904)                                 ; call prim_halt
  %sym236907 = add i64 0, 0                                                          ; quoted ()
  %cloptr246087 = inttoptr i64 %abort236902 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr246088 = getelementptr inbounds i64, i64* %cloptr246087, i64 0               ; &cloptr246087[0]
  %f246090 = load i64, i64* %i0ptr246088, align 8                                    ; load; *i0ptr246088
  %fptr246089 = inttoptr i64 %f246090 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr246089(i64 %abort236902, i64 %sym236907)            ; tail call
  ret void

else246085:
  %n233688233868 = call i64 @prim_car(i64 %rvp236899)                                ; call prim_car
  %rvp236889 = call i64 @prim_cdr(i64 %rvp236899)                                    ; call prim_cdr
  %check236890 = call i64 @prim_null_63(i64 %rvp236889)                              ; call prim_null_63
  %cmp246091 = icmp eq i64 %check236890, 15                                          ; false?
  br i1 %cmp246091, label %else246093, label %then246092                             ; if

then246092:
  %msg236894 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str246094, i32 0, i32 0)); quoted string
  %abort236892 = call i64 @prim_halt(i64 %msg236894)                                 ; call prim_halt
  %sym236897 = add i64 0, 0                                                          ; quoted ()
  %cloptr246095 = inttoptr i64 %abort236892 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr246096 = getelementptr inbounds i64, i64* %cloptr246095, i64 0               ; &cloptr246095[0]
  %f246098 = load i64, i64* %i0ptr246096, align 8                                    ; load; *i0ptr246096
  %fptr246097 = inttoptr i64 %f246098 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr246097(i64 %abort236892, i64 %sym236897)            ; tail call
  ret void

else246093:
  %rest236896 = call i64 @prim_cdr(i64 %rvp236889)                                   ; call prim_cdr
  %empty236891 = call i64 @prim_null_63(i64 %rest236896)                             ; call prim_null_63
  %cmp246099 = icmp eq i64 %empty236891, 15                                          ; false?
  br i1 %cmp246099, label %else246101, label %then246100                             ; if

then246100:
  %v233689233869 = call i64 @prim_car(i64 %rvp236889)                                ; call prim_car
  %na236885 = call i64 @prim_cdr(i64 %rvp236889)                                     ; call prim_cdr
  %retprim234129 = call i64 @prim__47(i64 %v233689233869, i64 %n233688233868)        ; call prim__47
  %arg234655 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %sym236886 = add i64 0, 0                                                          ; quoted ()
  %x236887 = call i64 @prim_cons(i64 %retprim234129, i64 %sym236886)                 ; call prim_cons
  %x236888 = call i64 @prim_cons(i64 %arg234655, i64 %x236887)                       ; call prim_cons
  %cloptr246102 = inttoptr i64 %cont234128 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr246103 = getelementptr inbounds i64, i64* %cloptr246102, i64 0               ; &cloptr246102[0]
  %f246105 = load i64, i64* %i0ptr246103, align 8                                    ; load; *i0ptr246103
  %fptr246104 = inttoptr i64 %f246105 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr246104(i64 %cont234128, i64 %x236888)               ; tail call
  ret void

else246101:
  %many236895 = call i64 @const_init_string(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @str246106, i32 0, i32 0)); quoted string
  %fail236893 = call i64 @prim_halt(i64 %many236895)                                 ; call prim_halt
  %sym236898 = add i64 0, 0                                                          ; quoted ()
  %cloptr246107 = inttoptr i64 %fail236893 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr246108 = getelementptr inbounds i64, i64* %cloptr246107, i64 0               ; &cloptr246107[0]
  %f246110 = load i64, i64* %i0ptr246108, align 8                                    ; load; *i0ptr246108
  %fptr246109 = inttoptr i64 %f246110 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr246109(i64 %fail236893, i64 %sym236898)             ; tail call
  ret void
}


define void @lam243613(i64 %env243614, i64 %rvp236937) {
  %check236938 = call i64 @prim_null_63(i64 %rvp236937)                              ; call prim_null_63
  %cmp246111 = icmp eq i64 %check236938, 15                                          ; false?
  br i1 %cmp246111, label %else246113, label %then246112                             ; if

then246112:
  %msg236942 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str246114, i32 0, i32 0)); quoted string
  %abort236940 = call i64 @prim_halt(i64 %msg236942)                                 ; call prim_halt
  %sym236945 = add i64 0, 0                                                          ; quoted ()
  %cloptr246115 = inttoptr i64 %abort236940 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr246116 = getelementptr inbounds i64, i64* %cloptr246115, i64 0               ; &cloptr246115[0]
  %f246118 = load i64, i64* %i0ptr246116, align 8                                    ; load; *i0ptr246116
  %fptr246117 = inttoptr i64 %f246118 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr246117(i64 %abort236940, i64 %sym236945)            ; tail call
  ret void

else246113:
  %cont234130 = call i64 @prim_car(i64 %rvp236937)                                   ; call prim_car
  %rvp236927 = call i64 @prim_cdr(i64 %rvp236937)                                    ; call prim_cdr
  %check236928 = call i64 @prim_null_63(i64 %rvp236927)                              ; call prim_null_63
  %cmp246119 = icmp eq i64 %check236928, 15                                          ; false?
  br i1 %cmp246119, label %else246121, label %then246120                             ; if

then246120:
  %msg236932 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str246122, i32 0, i32 0)); quoted string
  %abort236930 = call i64 @prim_halt(i64 %msg236932)                                 ; call prim_halt
  %sym236935 = add i64 0, 0                                                          ; quoted ()
  %cloptr246123 = inttoptr i64 %abort236930 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr246124 = getelementptr inbounds i64, i64* %cloptr246123, i64 0               ; &cloptr246123[0]
  %f246126 = load i64, i64* %i0ptr246124, align 8                                    ; load; *i0ptr246124
  %fptr246125 = inttoptr i64 %f246126 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr246125(i64 %abort236930, i64 %sym236935)            ; tail call
  ret void

else246121:
  %rest236934 = call i64 @prim_cdr(i64 %rvp236927)                                   ; call prim_cdr
  %empty236929 = call i64 @prim_null_63(i64 %rest236934)                             ; call prim_null_63
  %cmp246127 = icmp eq i64 %empty236929, 15                                          ; false?
  br i1 %cmp246127, label %else246129, label %then246128                             ; if

then246128:
  %x233690233870 = call i64 @prim_car(i64 %rvp236927)                                ; call prim_car
  %na236923 = call i64 @prim_cdr(i64 %rvp236927)                                     ; call prim_cdr
  %retprim234131 = call i64 @prim_car(i64 %x233690233870)                            ; call prim_car
  %arg234659 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %sym236924 = add i64 0, 0                                                          ; quoted ()
  %x236925 = call i64 @prim_cons(i64 %retprim234131, i64 %sym236924)                 ; call prim_cons
  %x236926 = call i64 @prim_cons(i64 %arg234659, i64 %x236925)                       ; call prim_cons
  %cloptr246130 = inttoptr i64 %cont234130 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr246131 = getelementptr inbounds i64, i64* %cloptr246130, i64 0               ; &cloptr246130[0]
  %f246133 = load i64, i64* %i0ptr246131, align 8                                    ; load; *i0ptr246131
  %fptr246132 = inttoptr i64 %f246133 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr246132(i64 %cont234130, i64 %x236926)               ; tail call
  ret void

else246129:
  %many236933 = call i64 @const_init_string(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @str246134, i32 0, i32 0)); quoted string
  %fail236931 = call i64 @prim_halt(i64 %many236933)                                 ; call prim_halt
  %sym236936 = add i64 0, 0                                                          ; quoted ()
  %cloptr246135 = inttoptr i64 %fail236931 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr246136 = getelementptr inbounds i64, i64* %cloptr246135, i64 0               ; &cloptr246135[0]
  %f246138 = load i64, i64* %i0ptr246136, align 8                                    ; load; *i0ptr246136
  %fptr246137 = inttoptr i64 %f246138 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr246137(i64 %fail236931, i64 %sym236936)             ; tail call
  ret void
}


define void @lam243603(i64 %env243604, i64 %rvp236961) {
  %check236962 = call i64 @prim_null_63(i64 %rvp236961)                              ; call prim_null_63
  %cmp246139 = icmp eq i64 %check236962, 15                                          ; false?
  br i1 %cmp246139, label %else246141, label %then246140                             ; if

then246140:
  %msg236966 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str246142, i32 0, i32 0)); quoted string
  %abort236964 = call i64 @prim_halt(i64 %msg236966)                                 ; call prim_halt
  %sym236969 = add i64 0, 0                                                          ; quoted ()
  %cloptr246143 = inttoptr i64 %abort236964 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr246144 = getelementptr inbounds i64, i64* %cloptr246143, i64 0               ; &cloptr246143[0]
  %f246146 = load i64, i64* %i0ptr246144, align 8                                    ; load; *i0ptr246144
  %fptr246145 = inttoptr i64 %f246146 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr246145(i64 %abort236964, i64 %sym236969)            ; tail call
  ret void

else246141:
  %cont234132 = call i64 @prim_car(i64 %rvp236961)                                   ; call prim_car
  %rvp236951 = call i64 @prim_cdr(i64 %rvp236961)                                    ; call prim_cdr
  %check236952 = call i64 @prim_null_63(i64 %rvp236951)                              ; call prim_null_63
  %cmp246147 = icmp eq i64 %check236952, 15                                          ; false?
  br i1 %cmp246147, label %else246149, label %then246148                             ; if

then246148:
  %msg236956 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str246150, i32 0, i32 0)); quoted string
  %abort236954 = call i64 @prim_halt(i64 %msg236956)                                 ; call prim_halt
  %sym236959 = add i64 0, 0                                                          ; quoted ()
  %cloptr246151 = inttoptr i64 %abort236954 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr246152 = getelementptr inbounds i64, i64* %cloptr246151, i64 0               ; &cloptr246151[0]
  %f246154 = load i64, i64* %i0ptr246152, align 8                                    ; load; *i0ptr246152
  %fptr246153 = inttoptr i64 %f246154 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr246153(i64 %abort236954, i64 %sym236959)            ; tail call
  ret void

else246149:
  %rest236958 = call i64 @prim_cdr(i64 %rvp236951)                                   ; call prim_cdr
  %empty236953 = call i64 @prim_null_63(i64 %rest236958)                             ; call prim_null_63
  %cmp246155 = icmp eq i64 %empty236953, 15                                          ; false?
  br i1 %cmp246155, label %else246157, label %then246156                             ; if

then246156:
  %x233691233871 = call i64 @prim_car(i64 %rvp236951)                                ; call prim_car
  %na236947 = call i64 @prim_cdr(i64 %rvp236951)                                     ; call prim_cdr
  %a234015 = call i64 @prim_cdr(i64 %x233691233871)                                  ; call prim_cdr
  %retprim234133 = call i64 @prim_car(i64 %a234015)                                  ; call prim_car
  %arg234664 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %sym236948 = add i64 0, 0                                                          ; quoted ()
  %x236949 = call i64 @prim_cons(i64 %retprim234133, i64 %sym236948)                 ; call prim_cons
  %x236950 = call i64 @prim_cons(i64 %arg234664, i64 %x236949)                       ; call prim_cons
  %cloptr246158 = inttoptr i64 %cont234132 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr246159 = getelementptr inbounds i64, i64* %cloptr246158, i64 0               ; &cloptr246158[0]
  %f246161 = load i64, i64* %i0ptr246159, align 8                                    ; load; *i0ptr246159
  %fptr246160 = inttoptr i64 %f246161 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr246160(i64 %cont234132, i64 %x236950)               ; tail call
  ret void

else246157:
  %many236957 = call i64 @const_init_string(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @str246162, i32 0, i32 0)); quoted string
  %fail236955 = call i64 @prim_halt(i64 %many236957)                                 ; call prim_halt
  %sym236960 = add i64 0, 0                                                          ; quoted ()
  %cloptr246163 = inttoptr i64 %fail236955 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr246164 = getelementptr inbounds i64, i64* %cloptr246163, i64 0               ; &cloptr246163[0]
  %f246166 = load i64, i64* %i0ptr246164, align 8                                    ; load; *i0ptr246164
  %fptr246165 = inttoptr i64 %f246166 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr246165(i64 %fail236955, i64 %sym236960)             ; tail call
  ret void
}


define void @lam243593(i64 %env243594, i64 %rvp236985) {
  %check236986 = call i64 @prim_null_63(i64 %rvp236985)                              ; call prim_null_63
  %cmp246167 = icmp eq i64 %check236986, 15                                          ; false?
  br i1 %cmp246167, label %else246169, label %then246168                             ; if

then246168:
  %msg236990 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str246170, i32 0, i32 0)); quoted string
  %abort236988 = call i64 @prim_halt(i64 %msg236990)                                 ; call prim_halt
  %sym236993 = add i64 0, 0                                                          ; quoted ()
  %cloptr246171 = inttoptr i64 %abort236988 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr246172 = getelementptr inbounds i64, i64* %cloptr246171, i64 0               ; &cloptr246171[0]
  %f246174 = load i64, i64* %i0ptr246172, align 8                                    ; load; *i0ptr246172
  %fptr246173 = inttoptr i64 %f246174 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr246173(i64 %abort236988, i64 %sym236993)            ; tail call
  ret void

else246169:
  %cont234134 = call i64 @prim_car(i64 %rvp236985)                                   ; call prim_car
  %rvp236975 = call i64 @prim_cdr(i64 %rvp236985)                                    ; call prim_cdr
  %check236976 = call i64 @prim_null_63(i64 %rvp236975)                              ; call prim_null_63
  %cmp246175 = icmp eq i64 %check236976, 15                                          ; false?
  br i1 %cmp246175, label %else246177, label %then246176                             ; if

then246176:
  %msg236980 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str246178, i32 0, i32 0)); quoted string
  %abort236978 = call i64 @prim_halt(i64 %msg236980)                                 ; call prim_halt
  %sym236983 = add i64 0, 0                                                          ; quoted ()
  %cloptr246179 = inttoptr i64 %abort236978 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr246180 = getelementptr inbounds i64, i64* %cloptr246179, i64 0               ; &cloptr246179[0]
  %f246182 = load i64, i64* %i0ptr246180, align 8                                    ; load; *i0ptr246180
  %fptr246181 = inttoptr i64 %f246182 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr246181(i64 %abort236978, i64 %sym236983)            ; tail call
  ret void

else246177:
  %rest236982 = call i64 @prim_cdr(i64 %rvp236975)                                   ; call prim_cdr
  %empty236977 = call i64 @prim_null_63(i64 %rest236982)                             ; call prim_null_63
  %cmp246183 = icmp eq i64 %empty236977, 15                                          ; false?
  br i1 %cmp246183, label %else246185, label %then246184                             ; if

then246184:
  %x233692233872 = call i64 @prim_car(i64 %rvp236975)                                ; call prim_car
  %na236971 = call i64 @prim_cdr(i64 %rvp236975)                                     ; call prim_cdr
  %a234016 = call i64 @prim_cdr(i64 %x233692233872)                                  ; call prim_cdr
  %a234017 = call i64 @prim_cdr(i64 %a234016)                                        ; call prim_cdr
  %retprim234135 = call i64 @prim_car(i64 %a234017)                                  ; call prim_car
  %arg234670 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %sym236972 = add i64 0, 0                                                          ; quoted ()
  %x236973 = call i64 @prim_cons(i64 %retprim234135, i64 %sym236972)                 ; call prim_cons
  %x236974 = call i64 @prim_cons(i64 %arg234670, i64 %x236973)                       ; call prim_cons
  %cloptr246186 = inttoptr i64 %cont234134 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr246187 = getelementptr inbounds i64, i64* %cloptr246186, i64 0               ; &cloptr246186[0]
  %f246189 = load i64, i64* %i0ptr246187, align 8                                    ; load; *i0ptr246187
  %fptr246188 = inttoptr i64 %f246189 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr246188(i64 %cont234134, i64 %x236974)               ; tail call
  ret void

else246185:
  %many236981 = call i64 @const_init_string(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @str246190, i32 0, i32 0)); quoted string
  %fail236979 = call i64 @prim_halt(i64 %many236981)                                 ; call prim_halt
  %sym236984 = add i64 0, 0                                                          ; quoted ()
  %cloptr246191 = inttoptr i64 %fail236979 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr246192 = getelementptr inbounds i64, i64* %cloptr246191, i64 0               ; &cloptr246191[0]
  %f246194 = load i64, i64* %i0ptr246192, align 8                                    ; load; *i0ptr246192
  %fptr246193 = inttoptr i64 %f246194 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr246193(i64 %fail236979, i64 %sym236984)             ; tail call
  ret void
}


define void @lam243583(i64 %env243584, i64 %rvp237009) {
  %check237010 = call i64 @prim_null_63(i64 %rvp237009)                              ; call prim_null_63
  %cmp246195 = icmp eq i64 %check237010, 15                                          ; false?
  br i1 %cmp246195, label %else246197, label %then246196                             ; if

then246196:
  %msg237014 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str246198, i32 0, i32 0)); quoted string
  %abort237012 = call i64 @prim_halt(i64 %msg237014)                                 ; call prim_halt
  %sym237017 = add i64 0, 0                                                          ; quoted ()
  %cloptr246199 = inttoptr i64 %abort237012 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr246200 = getelementptr inbounds i64, i64* %cloptr246199, i64 0               ; &cloptr246199[0]
  %f246202 = load i64, i64* %i0ptr246200, align 8                                    ; load; *i0ptr246200
  %fptr246201 = inttoptr i64 %f246202 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr246201(i64 %abort237012, i64 %sym237017)            ; tail call
  ret void

else246197:
  %cont234136 = call i64 @prim_car(i64 %rvp237009)                                   ; call prim_car
  %rvp236999 = call i64 @prim_cdr(i64 %rvp237009)                                    ; call prim_cdr
  %check237000 = call i64 @prim_null_63(i64 %rvp236999)                              ; call prim_null_63
  %cmp246203 = icmp eq i64 %check237000, 15                                          ; false?
  br i1 %cmp246203, label %else246205, label %then246204                             ; if

then246204:
  %msg237004 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str246206, i32 0, i32 0)); quoted string
  %abort237002 = call i64 @prim_halt(i64 %msg237004)                                 ; call prim_halt
  %sym237007 = add i64 0, 0                                                          ; quoted ()
  %cloptr246207 = inttoptr i64 %abort237002 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr246208 = getelementptr inbounds i64, i64* %cloptr246207, i64 0               ; &cloptr246207[0]
  %f246210 = load i64, i64* %i0ptr246208, align 8                                    ; load; *i0ptr246208
  %fptr246209 = inttoptr i64 %f246210 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr246209(i64 %abort237002, i64 %sym237007)            ; tail call
  ret void

else246205:
  %rest237006 = call i64 @prim_cdr(i64 %rvp236999)                                   ; call prim_cdr
  %empty237001 = call i64 @prim_null_63(i64 %rest237006)                             ; call prim_null_63
  %cmp246211 = icmp eq i64 %empty237001, 15                                          ; false?
  br i1 %cmp246211, label %else246213, label %then246212                             ; if

then246212:
  %x233693233873 = call i64 @prim_car(i64 %rvp236999)                                ; call prim_car
  %na236995 = call i64 @prim_cdr(i64 %rvp236999)                                     ; call prim_cdr
  %a234018 = call i64 @prim_cdr(i64 %x233693233873)                                  ; call prim_cdr
  %a234019 = call i64 @prim_cdr(i64 %a234018)                                        ; call prim_cdr
  %a234020 = call i64 @prim_cdr(i64 %a234019)                                        ; call prim_cdr
  %retprim234137 = call i64 @prim_car(i64 %a234020)                                  ; call prim_car
  %arg234677 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %sym236996 = add i64 0, 0                                                          ; quoted ()
  %x236997 = call i64 @prim_cons(i64 %retprim234137, i64 %sym236996)                 ; call prim_cons
  %x236998 = call i64 @prim_cons(i64 %arg234677, i64 %x236997)                       ; call prim_cons
  %cloptr246214 = inttoptr i64 %cont234136 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr246215 = getelementptr inbounds i64, i64* %cloptr246214, i64 0               ; &cloptr246214[0]
  %f246217 = load i64, i64* %i0ptr246215, align 8                                    ; load; *i0ptr246215
  %fptr246216 = inttoptr i64 %f246217 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr246216(i64 %cont234136, i64 %x236998)               ; tail call
  ret void

else246213:
  %many237005 = call i64 @const_init_string(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @str246218, i32 0, i32 0)); quoted string
  %fail237003 = call i64 @prim_halt(i64 %many237005)                                 ; call prim_halt
  %sym237008 = add i64 0, 0                                                          ; quoted ()
  %cloptr246219 = inttoptr i64 %fail237003 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr246220 = getelementptr inbounds i64, i64* %cloptr246219, i64 0               ; &cloptr246219[0]
  %f246222 = load i64, i64* %i0ptr246220, align 8                                    ; load; *i0ptr246220
  %fptr246221 = inttoptr i64 %f246222 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr246221(i64 %fail237003, i64 %sym237008)             ; tail call
  ret void
}


define void @lam243573(i64 %env243574, i64 %lst233695233875234229) {
  %cont234228 = call i64 @prim_car(i64 %lst233695233875234229)                       ; call prim_car
  %lst233695233875 = call i64 @prim_cdr(i64 %lst233695233875234229)                  ; call prim_cdr
  %arg234684 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %sym237018 = add i64 0, 0                                                          ; quoted ()
  %x237019 = call i64 @prim_cons(i64 %lst233695233875, i64 %sym237018)               ; call prim_cons
  %x237020 = call i64 @prim_cons(i64 %arg234684, i64 %x237019)                       ; call prim_cons
  %cloptr246223 = inttoptr i64 %cont234228 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr246224 = getelementptr inbounds i64, i64* %cloptr246223, i64 0               ; &cloptr246223[0]
  %f246226 = load i64, i64* %i0ptr246224, align 8                                    ; load; *i0ptr246224
  %fptr246225 = inttoptr i64 %f246226 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr246225(i64 %cont234228, i64 %x237020)               ; tail call
  ret void
}


define void @lam243569(i64 %env243570, i64 %rvp240197) {
  %envptr246227 = inttoptr i64 %env243570 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr246228 = getelementptr inbounds i64, i64* %envptr246227, i64 3              ; &envptr246227[3]
  %_37drop233642233818 = load i64, i64* %envptr246228, align 8                       ; load; *envptr246228
  %envptr246229 = inttoptr i64 %env243570 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr246230 = getelementptr inbounds i64, i64* %envptr246229, i64 2              ; &envptr246229[2]
  %_37length233588233764 = load i64, i64* %envptr246230, align 8                     ; load; *envptr246230
  %envptr246231 = inttoptr i64 %env243570 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr246232 = getelementptr inbounds i64, i64* %envptr246231, i64 1              ; &envptr246231[1]
  %_37_62233638233814 = load i64, i64* %envptr246232, align 8                        ; load; *envptr246232
  %check240198 = call i64 @prim_null_63(i64 %rvp240197)                              ; call prim_null_63
  %cmp246233 = icmp eq i64 %check240198, 15                                          ; false?
  br i1 %cmp246233, label %else246235, label %then246234                             ; if

then246234:
  %msg240202 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str246236, i32 0, i32 0)); quoted string
  %abort240200 = call i64 @prim_halt(i64 %msg240202)                                 ; call prim_halt
  %sym240205 = add i64 0, 0                                                          ; quoted ()
  %cloptr246237 = inttoptr i64 %abort240200 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr246238 = getelementptr inbounds i64, i64* %cloptr246237, i64 0               ; &cloptr246237[0]
  %f246240 = load i64, i64* %i0ptr246238, align 8                                    ; load; *i0ptr246238
  %fptr246239 = inttoptr i64 %f246240 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr246239(i64 %abort240200, i64 %sym240205)            ; tail call
  ret void

else246235:
  %_95234226 = call i64 @prim_car(i64 %rvp240197)                                    ; call prim_car
  %rvp240187 = call i64 @prim_cdr(i64 %rvp240197)                                    ; call prim_cdr
  %check240188 = call i64 @prim_null_63(i64 %rvp240187)                              ; call prim_null_63
  %cmp246241 = icmp eq i64 %check240188, 15                                          ; false?
  br i1 %cmp246241, label %else246243, label %then246242                             ; if

then246242:
  %msg240192 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str246244, i32 0, i32 0)); quoted string
  %abort240190 = call i64 @prim_halt(i64 %msg240192)                                 ; call prim_halt
  %sym240195 = add i64 0, 0                                                          ; quoted ()
  %cloptr246245 = inttoptr i64 %abort240190 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr246246 = getelementptr inbounds i64, i64* %cloptr246245, i64 0               ; &cloptr246245[0]
  %f246248 = load i64, i64* %i0ptr246246, align 8                                    ; load; *i0ptr246246
  %fptr246247 = inttoptr i64 %f246248 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr246247(i64 %abort240190, i64 %sym240195)            ; tail call
  ret void

else246243:
  %rest240194 = call i64 @prim_cdr(i64 %rvp240187)                                   ; call prim_cdr
  %empty240189 = call i64 @prim_null_63(i64 %rest240194)                             ; call prim_null_63
  %cmp246249 = icmp eq i64 %empty240189, 15                                          ; false?
  br i1 %cmp246249, label %else246251, label %then246250                             ; if

then246250:
  %a234021 = call i64 @prim_car(i64 %rvp240187)                                      ; call prim_car
  %na237022 = call i64 @prim_cdr(i64 %rvp240187)                                     ; call prim_cdr
  %arg234687 = call i64 @const_init_int(i64 1)                                       ; quoted int
  %retprim234227 = call i64 @prim_make_45vector(i64 %arg234687, i64 %a234021)        ; call prim_make_45vector
  %cloptr246252 = call i64* @alloc(i64 32)                                           ; malloc
  %eptr246254 = getelementptr inbounds i64, i64* %cloptr246252, i64 1                ; &eptr246254[1]
  %eptr246255 = getelementptr inbounds i64, i64* %cloptr246252, i64 2                ; &eptr246255[2]
  %eptr246256 = getelementptr inbounds i64, i64* %cloptr246252, i64 3                ; &eptr246256[3]
  store i64 %_37_62233638233814, i64* %eptr246254                                    ; *eptr246254 = %_37_62233638233814
  store i64 %_37length233588233764, i64* %eptr246255                                 ; *eptr246255 = %_37length233588233764
  store i64 %_37drop233642233818, i64* %eptr246256                                   ; *eptr246256 = %_37drop233642233818
  %eptr246253 = getelementptr inbounds i64, i64* %cloptr246252, i64 0                ; &cloptr246252[0]
  %f246257 = ptrtoint void(i64,i64)* @lam243564 to i64                               ; fptr cast; i64(...)* -> i64
  store i64 %f246257, i64* %eptr246253                                               ; store fptr
  %arg234690 = ptrtoint i64* %cloptr246252 to i64                                    ; closure cast; i64* -> i64
  %arg234689 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %sym240184 = add i64 0, 0                                                          ; quoted ()
  %x240185 = call i64 @prim_cons(i64 %retprim234227, i64 %sym240184)                 ; call prim_cons
  %x240186 = call i64 @prim_cons(i64 %arg234689, i64 %x240185)                       ; call prim_cons
  %cloptr246258 = inttoptr i64 %arg234690 to i64*                                    ; closure/env cast; i64 -> i64*
  %i0ptr246259 = getelementptr inbounds i64, i64* %cloptr246258, i64 0               ; &cloptr246258[0]
  %f246261 = load i64, i64* %i0ptr246259, align 8                                    ; load; *i0ptr246259
  %fptr246260 = inttoptr i64 %f246261 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr246260(i64 %arg234690, i64 %x240186)                ; tail call
  ret void

else246251:
  %many240193 = call i64 @const_init_string(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @str246262, i32 0, i32 0)); quoted string
  %fail240191 = call i64 @prim_halt(i64 %many240193)                                 ; call prim_halt
  %sym240196 = add i64 0, 0                                                          ; quoted ()
  %cloptr246263 = inttoptr i64 %fail240191 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr246264 = getelementptr inbounds i64, i64* %cloptr246263, i64 0               ; &cloptr246263[0]
  %f246266 = load i64, i64* %i0ptr246264, align 8                                    ; load; *i0ptr246264
  %fptr246265 = inttoptr i64 %f246266 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr246265(i64 %fail240191, i64 %sym240196)             ; tail call
  ret void
}


define void @lam243564(i64 %env243565, i64 %rvp240175) {
  %envptr246267 = inttoptr i64 %env243565 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr246268 = getelementptr inbounds i64, i64* %envptr246267, i64 3              ; &envptr246267[3]
  %_37drop233642233818 = load i64, i64* %envptr246268, align 8                       ; load; *envptr246268
  %envptr246269 = inttoptr i64 %env243565 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr246270 = getelementptr inbounds i64, i64* %envptr246269, i64 2              ; &envptr246269[2]
  %_37length233588233764 = load i64, i64* %envptr246270, align 8                     ; load; *envptr246270
  %envptr246271 = inttoptr i64 %env243565 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr246272 = getelementptr inbounds i64, i64* %envptr246271, i64 1              ; &envptr246271[1]
  %_37_62233638233814 = load i64, i64* %envptr246272, align 8                        ; load; *envptr246272
  %check240176 = call i64 @prim_null_63(i64 %rvp240175)                              ; call prim_null_63
  %cmp246273 = icmp eq i64 %check240176, 15                                          ; false?
  br i1 %cmp246273, label %else246275, label %then246274                             ; if

then246274:
  %msg240180 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str246276, i32 0, i32 0)); quoted string
  %abort240178 = call i64 @prim_halt(i64 %msg240180)                                 ; call prim_halt
  %sym240183 = add i64 0, 0                                                          ; quoted ()
  %cloptr246277 = inttoptr i64 %abort240178 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr246278 = getelementptr inbounds i64, i64* %cloptr246277, i64 0               ; &cloptr246277[0]
  %f246280 = load i64, i64* %i0ptr246278, align 8                                    ; load; *i0ptr246278
  %fptr246279 = inttoptr i64 %f246280 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr246279(i64 %abort240178, i64 %sym240183)            ; tail call
  ret void

else246275:
  %_95234138 = call i64 @prim_car(i64 %rvp240175)                                    ; call prim_car
  %rvp240165 = call i64 @prim_cdr(i64 %rvp240175)                                    ; call prim_cdr
  %check240166 = call i64 @prim_null_63(i64 %rvp240165)                              ; call prim_null_63
  %cmp246281 = icmp eq i64 %check240166, 15                                          ; false?
  br i1 %cmp246281, label %else246283, label %then246282                             ; if

then246282:
  %msg240170 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str246284, i32 0, i32 0)); quoted string
  %abort240168 = call i64 @prim_halt(i64 %msg240170)                                 ; call prim_halt
  %sym240173 = add i64 0, 0                                                          ; quoted ()
  %cloptr246285 = inttoptr i64 %abort240168 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr246286 = getelementptr inbounds i64, i64* %cloptr246285, i64 0               ; &cloptr246285[0]
  %f246288 = load i64, i64* %i0ptr246286, align 8                                    ; load; *i0ptr246286
  %fptr246287 = inttoptr i64 %f246288 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr246287(i64 %abort240168, i64 %sym240173)            ; tail call
  ret void

else246283:
  %rest240172 = call i64 @prim_cdr(i64 %rvp240165)                                   ; call prim_cdr
  %empty240167 = call i64 @prim_null_63(i64 %rest240172)                             ; call prim_null_63
  %cmp246289 = icmp eq i64 %empty240167, 15                                          ; false?
  br i1 %cmp246289, label %else246291, label %then246290                             ; if

then246290:
  %_37wind_45stack233694233874 = call i64 @prim_car(i64 %rvp240165)                  ; call prim_car
  %na237024 = call i64 @prim_cdr(i64 %rvp240165)                                     ; call prim_cdr
  %cloptr246292 = call i64* @alloc(i64 32)                                           ; malloc
  %eptr246294 = getelementptr inbounds i64, i64* %cloptr246292, i64 1                ; &eptr246294[1]
  %eptr246295 = getelementptr inbounds i64, i64* %cloptr246292, i64 2                ; &eptr246295[2]
  %eptr246296 = getelementptr inbounds i64, i64* %cloptr246292, i64 3                ; &eptr246296[3]
  store i64 %_37_62233638233814, i64* %eptr246294                                    ; *eptr246294 = %_37_62233638233814
  store i64 %_37length233588233764, i64* %eptr246295                                 ; *eptr246295 = %_37length233588233764
  store i64 %_37drop233642233818, i64* %eptr246296                                   ; *eptr246296 = %_37drop233642233818
  %eptr246293 = getelementptr inbounds i64, i64* %cloptr246292, i64 0                ; &cloptr246292[0]
  %f246297 = ptrtoint void(i64,i64)* @lam243560 to i64                               ; fptr cast; i64(...)* -> i64
  store i64 %f246297, i64* %eptr246293                                               ; store fptr
  %common_45tail233696233876 = ptrtoint i64* %cloptr246292 to i64                    ; closure cast; i64* -> i64
  %cloptr246298 = call i64* @alloc(i64 24)                                           ; malloc
  %eptr246300 = getelementptr inbounds i64, i64* %cloptr246298, i64 1                ; &eptr246300[1]
  %eptr246301 = getelementptr inbounds i64, i64* %cloptr246298, i64 2                ; &eptr246301[2]
  store i64 %common_45tail233696233876, i64* %eptr246300                             ; *eptr246300 = %common_45tail233696233876
  store i64 %_37wind_45stack233694233874, i64* %eptr246301                           ; *eptr246301 = %_37wind_45stack233694233874
  %eptr246299 = getelementptr inbounds i64, i64* %cloptr246298, i64 0                ; &cloptr246298[0]
  %f246302 = ptrtoint void(i64,i64)* @lam243376 to i64                               ; fptr cast; i64(...)* -> i64
  store i64 %f246302, i64* %eptr246299                                               ; store fptr
  %_37do_45wind233709233889 = ptrtoint i64* %cloptr246298 to i64                     ; closure cast; i64* -> i64
  %cloptr246303 = call i64* @alloc(i64 16)                                           ; malloc
  %eptr246305 = getelementptr inbounds i64, i64* %cloptr246303, i64 1                ; &eptr246305[1]
  store i64 %_37wind_45stack233694233874, i64* %eptr246305                           ; *eptr246305 = %_37wind_45stack233694233874
  %eptr246304 = getelementptr inbounds i64, i64* %cloptr246303, i64 0                ; &cloptr246303[0]
  %f246306 = ptrtoint void(i64,i64)* @lam242442 to i64                               ; fptr cast; i64(...)* -> i64
  store i64 %f246306, i64* %eptr246304                                               ; store fptr
  %_37dynamic_45wind233734233914 = ptrtoint i64* %cloptr246303 to i64                ; closure cast; i64* -> i64
  %cloptr246307 = call i64* @alloc(i64 8)                                            ; malloc
  %eptr246308 = getelementptr inbounds i64, i64* %cloptr246307, i64 0                ; &cloptr246307[0]
  %f246309 = ptrtoint void(i64,i64)* @lam242202 to i64                               ; fptr cast; i64(...)* -> i64
  store i64 %f246309, i64* %eptr246308                                               ; store fptr
  %arg235553 = ptrtoint i64* %cloptr246307 to i64                                    ; closure cast; i64* -> i64
  %cloptr246310 = call i64* @alloc(i64 8)                                            ; malloc
  %eptr246311 = getelementptr inbounds i64, i64* %cloptr246310, i64 0                ; &cloptr246310[0]
  %f246312 = ptrtoint void(i64,i64)* @lam242198 to i64                               ; fptr cast; i64(...)* -> i64
  store i64 %f246312, i64* %eptr246311                                               ; store fptr
  %arg235552 = ptrtoint i64* %cloptr246310 to i64                                    ; closure cast; i64* -> i64
  %sym240163 = add i64 0, 0                                                          ; quoted ()
  %x240164 = call i64 @prim_cons(i64 %arg235552, i64 %sym240163)                     ; call prim_cons
  %cloptr246313 = inttoptr i64 %arg235553 to i64*                                    ; closure/env cast; i64 -> i64*
  %i0ptr246314 = getelementptr inbounds i64, i64* %cloptr246313, i64 0               ; &cloptr246313[0]
  %f246316 = load i64, i64* %i0ptr246314, align 8                                    ; load; *i0ptr246314
  %fptr246315 = inttoptr i64 %f246316 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr246315(i64 %arg235553, i64 %x240164)                ; tail call
  ret void

else246291:
  %many240171 = call i64 @const_init_string(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @str246317, i32 0, i32 0)); quoted string
  %fail240169 = call i64 @prim_halt(i64 %many240171)                                 ; call prim_halt
  %sym240174 = add i64 0, 0                                                          ; quoted ()
  %cloptr246318 = inttoptr i64 %fail240169 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr246319 = getelementptr inbounds i64, i64* %cloptr246318, i64 0               ; &cloptr246318[0]
  %f246321 = load i64, i64* %i0ptr246319, align 8                                    ; load; *i0ptr246319
  %fptr246320 = inttoptr i64 %f246321 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr246320(i64 %fail240169, i64 %sym240174)             ; tail call
  ret void
}


define void @lam243560(i64 %env243561, i64 %rvp237473) {
  %envptr246322 = inttoptr i64 %env243561 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr246323 = getelementptr inbounds i64, i64* %envptr246322, i64 3              ; &envptr246322[3]
  %_37drop233642233818 = load i64, i64* %envptr246323, align 8                       ; load; *envptr246323
  %envptr246324 = inttoptr i64 %env243561 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr246325 = getelementptr inbounds i64, i64* %envptr246324, i64 2              ; &envptr246324[2]
  %_37length233588233764 = load i64, i64* %envptr246325, align 8                     ; load; *envptr246325
  %envptr246326 = inttoptr i64 %env243561 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr246327 = getelementptr inbounds i64, i64* %envptr246326, i64 1              ; &envptr246326[1]
  %_37_62233638233814 = load i64, i64* %envptr246327, align 8                        ; load; *envptr246327
  %check237474 = call i64 @prim_null_63(i64 %rvp237473)                              ; call prim_null_63
  %cmp246328 = icmp eq i64 %check237474, 15                                          ; false?
  br i1 %cmp246328, label %else246330, label %then246329                             ; if

then246329:
  %msg237478 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str246331, i32 0, i32 0)); quoted string
  %abort237476 = call i64 @prim_halt(i64 %msg237478)                                 ; call prim_halt
  %sym237481 = add i64 0, 0                                                          ; quoted ()
  %cloptr246332 = inttoptr i64 %abort237476 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr246333 = getelementptr inbounds i64, i64* %cloptr246332, i64 0               ; &cloptr246332[0]
  %f246335 = load i64, i64* %i0ptr246333, align 8                                    ; load; *i0ptr246333
  %fptr246334 = inttoptr i64 %f246335 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr246334(i64 %abort237476, i64 %sym237481)            ; tail call
  ret void

else246330:
  %cont234139 = call i64 @prim_car(i64 %rvp237473)                                   ; call prim_car
  %rvp237464 = call i64 @prim_cdr(i64 %rvp237473)                                    ; call prim_cdr
  %check237465 = call i64 @prim_null_63(i64 %rvp237464)                              ; call prim_null_63
  %cmp246336 = icmp eq i64 %check237465, 15                                          ; false?
  br i1 %cmp246336, label %else246338, label %then246337                             ; if

then246337:
  %msg237469 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str246339, i32 0, i32 0)); quoted string
  %abort237467 = call i64 @prim_halt(i64 %msg237469)                                 ; call prim_halt
  %sym237472 = add i64 0, 0                                                          ; quoted ()
  %cloptr246340 = inttoptr i64 %abort237467 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr246341 = getelementptr inbounds i64, i64* %cloptr246340, i64 0               ; &cloptr246340[0]
  %f246343 = load i64, i64* %i0ptr246341, align 8                                    ; load; *i0ptr246341
  %fptr246342 = inttoptr i64 %f246343 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr246342(i64 %abort237467, i64 %sym237472)            ; tail call
  ret void

else246338:
  %x233697233877 = call i64 @prim_car(i64 %rvp237464)                                ; call prim_car
  %rvp237454 = call i64 @prim_cdr(i64 %rvp237464)                                    ; call prim_cdr
  %check237455 = call i64 @prim_null_63(i64 %rvp237454)                              ; call prim_null_63
  %cmp246344 = icmp eq i64 %check237455, 15                                          ; false?
  br i1 %cmp246344, label %else246346, label %then246345                             ; if

then246345:
  %msg237459 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str246347, i32 0, i32 0)); quoted string
  %abort237457 = call i64 @prim_halt(i64 %msg237459)                                 ; call prim_halt
  %sym237462 = add i64 0, 0                                                          ; quoted ()
  %cloptr246348 = inttoptr i64 %abort237457 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr246349 = getelementptr inbounds i64, i64* %cloptr246348, i64 0               ; &cloptr246348[0]
  %f246351 = load i64, i64* %i0ptr246349, align 8                                    ; load; *i0ptr246349
  %fptr246350 = inttoptr i64 %f246351 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr246350(i64 %abort237457, i64 %sym237462)            ; tail call
  ret void

else246346:
  %rest237461 = call i64 @prim_cdr(i64 %rvp237454)                                   ; call prim_cdr
  %empty237456 = call i64 @prim_null_63(i64 %rest237461)                             ; call prim_null_63
  %cmp246352 = icmp eq i64 %empty237456, 15                                          ; false?
  br i1 %cmp246352, label %else246354, label %then246353                             ; if

then246353:
  %y233698233878 = call i64 @prim_car(i64 %rvp237454)                                ; call prim_car
  %na237026 = call i64 @prim_cdr(i64 %rvp237454)                                     ; call prim_cdr
  %cloptr246355 = call i64* @alloc(i64 56)                                           ; malloc
  %eptr246357 = getelementptr inbounds i64, i64* %cloptr246355, i64 1                ; &eptr246357[1]
  %eptr246358 = getelementptr inbounds i64, i64* %cloptr246355, i64 2                ; &eptr246358[2]
  %eptr246359 = getelementptr inbounds i64, i64* %cloptr246355, i64 3                ; &eptr246359[3]
  %eptr246360 = getelementptr inbounds i64, i64* %cloptr246355, i64 4                ; &eptr246360[4]
  %eptr246361 = getelementptr inbounds i64, i64* %cloptr246355, i64 5                ; &eptr246361[5]
  %eptr246362 = getelementptr inbounds i64, i64* %cloptr246355, i64 6                ; &eptr246362[6]
  store i64 %_37_62233638233814, i64* %eptr246357                                    ; *eptr246357 = %_37_62233638233814
  store i64 %_37length233588233764, i64* %eptr246358                                 ; *eptr246358 = %_37length233588233764
  store i64 %_37drop233642233818, i64* %eptr246359                                   ; *eptr246359 = %_37drop233642233818
  store i64 %y233698233878, i64* %eptr246360                                         ; *eptr246360 = %y233698233878
  store i64 %x233697233877, i64* %eptr246361                                         ; *eptr246361 = %x233697233877
  store i64 %cont234139, i64* %eptr246362                                            ; *eptr246362 = %cont234139
  %eptr246356 = getelementptr inbounds i64, i64* %cloptr246355, i64 0                ; &cloptr246355[0]
  %f246363 = ptrtoint void(i64,i64)* @lam243556 to i64                               ; fptr cast; i64(...)* -> i64
  store i64 %f246363, i64* %eptr246356                                               ; store fptr
  %arg234692 = ptrtoint i64* %cloptr246355 to i64                                    ; closure cast; i64* -> i64
  %sym237451 = add i64 0, 0                                                          ; quoted ()
  %x237452 = call i64 @prim_cons(i64 %x233697233877, i64 %sym237451)                 ; call prim_cons
  %x237453 = call i64 @prim_cons(i64 %arg234692, i64 %x237452)                       ; call prim_cons
  %cloptr246364 = inttoptr i64 %_37length233588233764 to i64*                        ; closure/env cast; i64 -> i64*
  %i0ptr246365 = getelementptr inbounds i64, i64* %cloptr246364, i64 0               ; &cloptr246364[0]
  %f246367 = load i64, i64* %i0ptr246365, align 8                                    ; load; *i0ptr246365
  %fptr246366 = inttoptr i64 %f246367 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr246366(i64 %_37length233588233764, i64 %x237453)    ; tail call
  ret void

else246354:
  %many237460 = call i64 @const_init_string(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @str246368, i32 0, i32 0)); quoted string
  %fail237458 = call i64 @prim_halt(i64 %many237460)                                 ; call prim_halt
  %sym237463 = add i64 0, 0                                                          ; quoted ()
  %cloptr246369 = inttoptr i64 %fail237458 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr246370 = getelementptr inbounds i64, i64* %cloptr246369, i64 0               ; &cloptr246369[0]
  %f246372 = load i64, i64* %i0ptr246370, align 8                                    ; load; *i0ptr246370
  %fptr246371 = inttoptr i64 %f246372 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr246371(i64 %fail237458, i64 %sym237463)             ; tail call
  ret void
}


define void @lam243556(i64 %env243557, i64 %rvp237442) {
  %envptr246373 = inttoptr i64 %env243557 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr246374 = getelementptr inbounds i64, i64* %envptr246373, i64 6              ; &envptr246373[6]
  %cont234139 = load i64, i64* %envptr246374, align 8                                ; load; *envptr246374
  %envptr246375 = inttoptr i64 %env243557 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr246376 = getelementptr inbounds i64, i64* %envptr246375, i64 5              ; &envptr246375[5]
  %x233697233877 = load i64, i64* %envptr246376, align 8                             ; load; *envptr246376
  %envptr246377 = inttoptr i64 %env243557 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr246378 = getelementptr inbounds i64, i64* %envptr246377, i64 4              ; &envptr246377[4]
  %y233698233878 = load i64, i64* %envptr246378, align 8                             ; load; *envptr246378
  %envptr246379 = inttoptr i64 %env243557 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr246380 = getelementptr inbounds i64, i64* %envptr246379, i64 3              ; &envptr246379[3]
  %_37drop233642233818 = load i64, i64* %envptr246380, align 8                       ; load; *envptr246380
  %envptr246381 = inttoptr i64 %env243557 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr246382 = getelementptr inbounds i64, i64* %envptr246381, i64 2              ; &envptr246381[2]
  %_37length233588233764 = load i64, i64* %envptr246382, align 8                     ; load; *envptr246382
  %envptr246383 = inttoptr i64 %env243557 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr246384 = getelementptr inbounds i64, i64* %envptr246383, i64 1              ; &envptr246383[1]
  %_37_62233638233814 = load i64, i64* %envptr246384, align 8                        ; load; *envptr246384
  %check237443 = call i64 @prim_null_63(i64 %rvp237442)                              ; call prim_null_63
  %cmp246385 = icmp eq i64 %check237443, 15                                          ; false?
  br i1 %cmp246385, label %else246387, label %then246386                             ; if

then246386:
  %msg237447 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str246388, i32 0, i32 0)); quoted string
  %abort237445 = call i64 @prim_halt(i64 %msg237447)                                 ; call prim_halt
  %sym237450 = add i64 0, 0                                                          ; quoted ()
  %cloptr246389 = inttoptr i64 %abort237445 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr246390 = getelementptr inbounds i64, i64* %cloptr246389, i64 0               ; &cloptr246389[0]
  %f246392 = load i64, i64* %i0ptr246390, align 8                                    ; load; *i0ptr246390
  %fptr246391 = inttoptr i64 %f246392 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr246391(i64 %abort237445, i64 %sym237450)            ; tail call
  ret void

else246387:
  %_95234140 = call i64 @prim_car(i64 %rvp237442)                                    ; call prim_car
  %rvp237432 = call i64 @prim_cdr(i64 %rvp237442)                                    ; call prim_cdr
  %check237433 = call i64 @prim_null_63(i64 %rvp237432)                              ; call prim_null_63
  %cmp246393 = icmp eq i64 %check237433, 15                                          ; false?
  br i1 %cmp246393, label %else246395, label %then246394                             ; if

then246394:
  %msg237437 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str246396, i32 0, i32 0)); quoted string
  %abort237435 = call i64 @prim_halt(i64 %msg237437)                                 ; call prim_halt
  %sym237440 = add i64 0, 0                                                          ; quoted ()
  %cloptr246397 = inttoptr i64 %abort237435 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr246398 = getelementptr inbounds i64, i64* %cloptr246397, i64 0               ; &cloptr246397[0]
  %f246400 = load i64, i64* %i0ptr246398, align 8                                    ; load; *i0ptr246398
  %fptr246399 = inttoptr i64 %f246400 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr246399(i64 %abort237435, i64 %sym237440)            ; tail call
  ret void

else246395:
  %rest237439 = call i64 @prim_cdr(i64 %rvp237432)                                   ; call prim_cdr
  %empty237434 = call i64 @prim_null_63(i64 %rest237439)                             ; call prim_null_63
  %cmp246401 = icmp eq i64 %empty237434, 15                                          ; false?
  br i1 %cmp246401, label %else246403, label %then246402                             ; if

then246402:
  %lx233699233879 = call i64 @prim_car(i64 %rvp237432)                               ; call prim_car
  %na237028 = call i64 @prim_cdr(i64 %rvp237432)                                     ; call prim_cdr
  %cloptr246404 = call i64* @alloc(i64 56)                                           ; malloc
  %eptr246406 = getelementptr inbounds i64, i64* %cloptr246404, i64 1                ; &eptr246406[1]
  %eptr246407 = getelementptr inbounds i64, i64* %cloptr246404, i64 2                ; &eptr246407[2]
  %eptr246408 = getelementptr inbounds i64, i64* %cloptr246404, i64 3                ; &eptr246408[3]
  %eptr246409 = getelementptr inbounds i64, i64* %cloptr246404, i64 4                ; &eptr246409[4]
  %eptr246410 = getelementptr inbounds i64, i64* %cloptr246404, i64 5                ; &eptr246410[5]
  %eptr246411 = getelementptr inbounds i64, i64* %cloptr246404, i64 6                ; &eptr246411[6]
  store i64 %lx233699233879, i64* %eptr246406                                        ; *eptr246406 = %lx233699233879
  store i64 %_37_62233638233814, i64* %eptr246407                                    ; *eptr246407 = %_37_62233638233814
  store i64 %_37drop233642233818, i64* %eptr246408                                   ; *eptr246408 = %_37drop233642233818
  store i64 %y233698233878, i64* %eptr246409                                         ; *eptr246409 = %y233698233878
  store i64 %x233697233877, i64* %eptr246410                                         ; *eptr246410 = %x233697233877
  store i64 %cont234139, i64* %eptr246411                                            ; *eptr246411 = %cont234139
  %eptr246405 = getelementptr inbounds i64, i64* %cloptr246404, i64 0                ; &cloptr246404[0]
  %f246412 = ptrtoint void(i64,i64)* @lam243552 to i64                               ; fptr cast; i64(...)* -> i64
  store i64 %f246412, i64* %eptr246405                                               ; store fptr
  %arg234695 = ptrtoint i64* %cloptr246404 to i64                                    ; closure cast; i64* -> i64
  %sym237429 = add i64 0, 0                                                          ; quoted ()
  %x237430 = call i64 @prim_cons(i64 %y233698233878, i64 %sym237429)                 ; call prim_cons
  %x237431 = call i64 @prim_cons(i64 %arg234695, i64 %x237430)                       ; call prim_cons
  %cloptr246413 = inttoptr i64 %_37length233588233764 to i64*                        ; closure/env cast; i64 -> i64*
  %i0ptr246414 = getelementptr inbounds i64, i64* %cloptr246413, i64 0               ; &cloptr246413[0]
  %f246416 = load i64, i64* %i0ptr246414, align 8                                    ; load; *i0ptr246414
  %fptr246415 = inttoptr i64 %f246416 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr246415(i64 %_37length233588233764, i64 %x237431)    ; tail call
  ret void

else246403:
  %many237438 = call i64 @const_init_string(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @str246417, i32 0, i32 0)); quoted string
  %fail237436 = call i64 @prim_halt(i64 %many237438)                                 ; call prim_halt
  %sym237441 = add i64 0, 0                                                          ; quoted ()
  %cloptr246418 = inttoptr i64 %fail237436 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr246419 = getelementptr inbounds i64, i64* %cloptr246418, i64 0               ; &cloptr246418[0]
  %f246421 = load i64, i64* %i0ptr246419, align 8                                    ; load; *i0ptr246419
  %fptr246420 = inttoptr i64 %f246421 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr246420(i64 %fail237436, i64 %sym237441)             ; tail call
  ret void
}


define void @lam243552(i64 %env243553, i64 %rvp237420) {
  %envptr246422 = inttoptr i64 %env243553 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr246423 = getelementptr inbounds i64, i64* %envptr246422, i64 6              ; &envptr246422[6]
  %cont234139 = load i64, i64* %envptr246423, align 8                                ; load; *envptr246423
  %envptr246424 = inttoptr i64 %env243553 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr246425 = getelementptr inbounds i64, i64* %envptr246424, i64 5              ; &envptr246424[5]
  %x233697233877 = load i64, i64* %envptr246425, align 8                             ; load; *envptr246425
  %envptr246426 = inttoptr i64 %env243553 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr246427 = getelementptr inbounds i64, i64* %envptr246426, i64 4              ; &envptr246426[4]
  %y233698233878 = load i64, i64* %envptr246427, align 8                             ; load; *envptr246427
  %envptr246428 = inttoptr i64 %env243553 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr246429 = getelementptr inbounds i64, i64* %envptr246428, i64 3              ; &envptr246428[3]
  %_37drop233642233818 = load i64, i64* %envptr246429, align 8                       ; load; *envptr246429
  %envptr246430 = inttoptr i64 %env243553 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr246431 = getelementptr inbounds i64, i64* %envptr246430, i64 2              ; &envptr246430[2]
  %_37_62233638233814 = load i64, i64* %envptr246431, align 8                        ; load; *envptr246431
  %envptr246432 = inttoptr i64 %env243553 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr246433 = getelementptr inbounds i64, i64* %envptr246432, i64 1              ; &envptr246432[1]
  %lx233699233879 = load i64, i64* %envptr246433, align 8                            ; load; *envptr246433
  %check237421 = call i64 @prim_null_63(i64 %rvp237420)                              ; call prim_null_63
  %cmp246434 = icmp eq i64 %check237421, 15                                          ; false?
  br i1 %cmp246434, label %else246436, label %then246435                             ; if

then246435:
  %msg237425 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str246437, i32 0, i32 0)); quoted string
  %abort237423 = call i64 @prim_halt(i64 %msg237425)                                 ; call prim_halt
  %sym237428 = add i64 0, 0                                                          ; quoted ()
  %cloptr246438 = inttoptr i64 %abort237423 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr246439 = getelementptr inbounds i64, i64* %cloptr246438, i64 0               ; &cloptr246438[0]
  %f246441 = load i64, i64* %i0ptr246439, align 8                                    ; load; *i0ptr246439
  %fptr246440 = inttoptr i64 %f246441 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr246440(i64 %abort237423, i64 %sym237428)            ; tail call
  ret void

else246436:
  %_95234141 = call i64 @prim_car(i64 %rvp237420)                                    ; call prim_car
  %rvp237410 = call i64 @prim_cdr(i64 %rvp237420)                                    ; call prim_cdr
  %check237411 = call i64 @prim_null_63(i64 %rvp237410)                              ; call prim_null_63
  %cmp246442 = icmp eq i64 %check237411, 15                                          ; false?
  br i1 %cmp246442, label %else246444, label %then246443                             ; if

then246443:
  %msg237415 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str246445, i32 0, i32 0)); quoted string
  %abort237413 = call i64 @prim_halt(i64 %msg237415)                                 ; call prim_halt
  %sym237418 = add i64 0, 0                                                          ; quoted ()
  %cloptr246446 = inttoptr i64 %abort237413 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr246447 = getelementptr inbounds i64, i64* %cloptr246446, i64 0               ; &cloptr246446[0]
  %f246449 = load i64, i64* %i0ptr246447, align 8                                    ; load; *i0ptr246447
  %fptr246448 = inttoptr i64 %f246449 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr246448(i64 %abort237413, i64 %sym237418)            ; tail call
  ret void

else246444:
  %rest237417 = call i64 @prim_cdr(i64 %rvp237410)                                   ; call prim_cdr
  %empty237412 = call i64 @prim_null_63(i64 %rest237417)                             ; call prim_null_63
  %cmp246450 = icmp eq i64 %empty237412, 15                                          ; false?
  br i1 %cmp246450, label %else246452, label %then246451                             ; if

then246451:
  %ly233700233880 = call i64 @prim_car(i64 %rvp237410)                               ; call prim_car
  %na237030 = call i64 @prim_cdr(i64 %rvp237410)                                     ; call prim_cdr
  %cloptr246453 = call i64* @alloc(i64 8)                                            ; malloc
  %eptr246454 = getelementptr inbounds i64, i64* %cloptr246453, i64 0                ; &cloptr246453[0]
  %f246455 = ptrtoint void(i64,i64)* @lam243548 to i64                               ; fptr cast; i64(...)* -> i64
  store i64 %f246455, i64* %eptr246454                                               ; store fptr
  %arg234698 = ptrtoint i64* %cloptr246453 to i64                                    ; closure cast; i64* -> i64
  %cloptr246456 = call i64* @alloc(i64 64)                                           ; malloc
  %eptr246458 = getelementptr inbounds i64, i64* %cloptr246456, i64 1                ; &eptr246458[1]
  %eptr246459 = getelementptr inbounds i64, i64* %cloptr246456, i64 2                ; &eptr246459[2]
  %eptr246460 = getelementptr inbounds i64, i64* %cloptr246456, i64 3                ; &eptr246460[3]
  %eptr246461 = getelementptr inbounds i64, i64* %cloptr246456, i64 4                ; &eptr246461[4]
  %eptr246462 = getelementptr inbounds i64, i64* %cloptr246456, i64 5                ; &eptr246462[5]
  %eptr246463 = getelementptr inbounds i64, i64* %cloptr246456, i64 6                ; &eptr246463[6]
  %eptr246464 = getelementptr inbounds i64, i64* %cloptr246456, i64 7                ; &eptr246464[7]
  store i64 %lx233699233879, i64* %eptr246458                                        ; *eptr246458 = %lx233699233879
  store i64 %ly233700233880, i64* %eptr246459                                        ; *eptr246459 = %ly233700233880
  store i64 %_37_62233638233814, i64* %eptr246460                                    ; *eptr246460 = %_37_62233638233814
  store i64 %_37drop233642233818, i64* %eptr246461                                   ; *eptr246461 = %_37drop233642233818
  store i64 %y233698233878, i64* %eptr246462                                         ; *eptr246462 = %y233698233878
  store i64 %x233697233877, i64* %eptr246463                                         ; *eptr246463 = %x233697233877
  store i64 %cont234139, i64* %eptr246464                                            ; *eptr246464 = %cont234139
  %eptr246457 = getelementptr inbounds i64, i64* %cloptr246456, i64 0                ; &cloptr246456[0]
  %f246465 = ptrtoint void(i64,i64)* @lam243544 to i64                               ; fptr cast; i64(...)* -> i64
  store i64 %f246465, i64* %eptr246457                                               ; store fptr
  %arg234697 = ptrtoint i64* %cloptr246456 to i64                                    ; closure cast; i64* -> i64
  %sym237408 = add i64 0, 0                                                          ; quoted ()
  %x237409 = call i64 @prim_cons(i64 %arg234697, i64 %sym237408)                     ; call prim_cons
  %cloptr246466 = inttoptr i64 %arg234698 to i64*                                    ; closure/env cast; i64 -> i64*
  %i0ptr246467 = getelementptr inbounds i64, i64* %cloptr246466, i64 0               ; &cloptr246466[0]
  %f246469 = load i64, i64* %i0ptr246467, align 8                                    ; load; *i0ptr246467
  %fptr246468 = inttoptr i64 %f246469 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr246468(i64 %arg234698, i64 %x237409)                ; tail call
  ret void

else246452:
  %many237416 = call i64 @const_init_string(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @str246470, i32 0, i32 0)); quoted string
  %fail237414 = call i64 @prim_halt(i64 %many237416)                                 ; call prim_halt
  %sym237419 = add i64 0, 0                                                          ; quoted ()
  %cloptr246471 = inttoptr i64 %fail237414 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr246472 = getelementptr inbounds i64, i64* %cloptr246471, i64 0               ; &cloptr246471[0]
  %f246474 = load i64, i64* %i0ptr246472, align 8                                    ; load; *i0ptr246472
  %fptr246473 = inttoptr i64 %f246474 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr246473(i64 %fail237414, i64 %sym237419)             ; tail call
  ret void
}


define void @lam243548(i64 %env243549, i64 %lst233702233882234157) {
  %cont234156 = call i64 @prim_car(i64 %lst233702233882234157)                       ; call prim_car
  %lst233702233882 = call i64 @prim_cdr(i64 %lst233702233882234157)                  ; call prim_cdr
  %arg234702 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %sym237031 = add i64 0, 0                                                          ; quoted ()
  %x237032 = call i64 @prim_cons(i64 %lst233702233882, i64 %sym237031)               ; call prim_cons
  %x237033 = call i64 @prim_cons(i64 %arg234702, i64 %x237032)                       ; call prim_cons
  %cloptr246475 = inttoptr i64 %cont234156 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr246476 = getelementptr inbounds i64, i64* %cloptr246475, i64 0               ; &cloptr246475[0]
  %f246478 = load i64, i64* %i0ptr246476, align 8                                    ; load; *i0ptr246476
  %fptr246477 = inttoptr i64 %f246478 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr246477(i64 %cont234156, i64 %x237033)               ; tail call
  ret void
}


define void @lam243544(i64 %env243545, i64 %rvp237399) {
  %envptr246479 = inttoptr i64 %env243545 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr246480 = getelementptr inbounds i64, i64* %envptr246479, i64 7              ; &envptr246479[7]
  %cont234139 = load i64, i64* %envptr246480, align 8                                ; load; *envptr246480
  %envptr246481 = inttoptr i64 %env243545 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr246482 = getelementptr inbounds i64, i64* %envptr246481, i64 6              ; &envptr246481[6]
  %x233697233877 = load i64, i64* %envptr246482, align 8                             ; load; *envptr246482
  %envptr246483 = inttoptr i64 %env243545 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr246484 = getelementptr inbounds i64, i64* %envptr246483, i64 5              ; &envptr246483[5]
  %y233698233878 = load i64, i64* %envptr246484, align 8                             ; load; *envptr246484
  %envptr246485 = inttoptr i64 %env243545 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr246486 = getelementptr inbounds i64, i64* %envptr246485, i64 4              ; &envptr246485[4]
  %_37drop233642233818 = load i64, i64* %envptr246486, align 8                       ; load; *envptr246486
  %envptr246487 = inttoptr i64 %env243545 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr246488 = getelementptr inbounds i64, i64* %envptr246487, i64 3              ; &envptr246487[3]
  %_37_62233638233814 = load i64, i64* %envptr246488, align 8                        ; load; *envptr246488
  %envptr246489 = inttoptr i64 %env243545 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr246490 = getelementptr inbounds i64, i64* %envptr246489, i64 2              ; &envptr246489[2]
  %ly233700233880 = load i64, i64* %envptr246490, align 8                            ; load; *envptr246490
  %envptr246491 = inttoptr i64 %env243545 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr246492 = getelementptr inbounds i64, i64* %envptr246491, i64 1              ; &envptr246491[1]
  %lx233699233879 = load i64, i64* %envptr246492, align 8                            ; load; *envptr246492
  %check237400 = call i64 @prim_null_63(i64 %rvp237399)                              ; call prim_null_63
  %cmp246493 = icmp eq i64 %check237400, 15                                          ; false?
  br i1 %cmp246493, label %else246495, label %then246494                             ; if

then246494:
  %msg237404 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str246496, i32 0, i32 0)); quoted string
  %abort237402 = call i64 @prim_halt(i64 %msg237404)                                 ; call prim_halt
  %sym237407 = add i64 0, 0                                                          ; quoted ()
  %cloptr246497 = inttoptr i64 %abort237402 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr246498 = getelementptr inbounds i64, i64* %cloptr246497, i64 0               ; &cloptr246497[0]
  %f246500 = load i64, i64* %i0ptr246498, align 8                                    ; load; *i0ptr246498
  %fptr246499 = inttoptr i64 %f246500 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr246499(i64 %abort237402, i64 %sym237407)            ; tail call
  ret void

else246495:
  %_95234154 = call i64 @prim_car(i64 %rvp237399)                                    ; call prim_car
  %rvp237389 = call i64 @prim_cdr(i64 %rvp237399)                                    ; call prim_cdr
  %check237390 = call i64 @prim_null_63(i64 %rvp237389)                              ; call prim_null_63
  %cmp246501 = icmp eq i64 %check237390, 15                                          ; false?
  br i1 %cmp246501, label %else246503, label %then246502                             ; if

then246502:
  %msg237394 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str246504, i32 0, i32 0)); quoted string
  %abort237392 = call i64 @prim_halt(i64 %msg237394)                                 ; call prim_halt
  %sym237397 = add i64 0, 0                                                          ; quoted ()
  %cloptr246505 = inttoptr i64 %abort237392 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr246506 = getelementptr inbounds i64, i64* %cloptr246505, i64 0               ; &cloptr246505[0]
  %f246508 = load i64, i64* %i0ptr246506, align 8                                    ; load; *i0ptr246506
  %fptr246507 = inttoptr i64 %f246508 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr246507(i64 %abort237392, i64 %sym237397)            ; tail call
  ret void

else246503:
  %rest237396 = call i64 @prim_cdr(i64 %rvp237389)                                   ; call prim_cdr
  %empty237391 = call i64 @prim_null_63(i64 %rest237396)                             ; call prim_null_63
  %cmp246509 = icmp eq i64 %empty237391, 15                                          ; false?
  br i1 %cmp246509, label %else246511, label %then246510                             ; if

then246510:
  %a234022 = call i64 @prim_car(i64 %rvp237389)                                      ; call prim_car
  %na237035 = call i64 @prim_cdr(i64 %rvp237389)                                     ; call prim_cdr
  %arg234705 = call i64 @const_init_int(i64 1)                                       ; quoted int
  %retprim234155 = call i64 @prim_make_45vector(i64 %arg234705, i64 %a234022)        ; call prim_make_45vector
  %cloptr246512 = call i64* @alloc(i64 64)                                           ; malloc
  %eptr246514 = getelementptr inbounds i64, i64* %cloptr246512, i64 1                ; &eptr246514[1]
  %eptr246515 = getelementptr inbounds i64, i64* %cloptr246512, i64 2                ; &eptr246515[2]
  %eptr246516 = getelementptr inbounds i64, i64* %cloptr246512, i64 3                ; &eptr246516[3]
  %eptr246517 = getelementptr inbounds i64, i64* %cloptr246512, i64 4                ; &eptr246517[4]
  %eptr246518 = getelementptr inbounds i64, i64* %cloptr246512, i64 5                ; &eptr246518[5]
  %eptr246519 = getelementptr inbounds i64, i64* %cloptr246512, i64 6                ; &eptr246519[6]
  %eptr246520 = getelementptr inbounds i64, i64* %cloptr246512, i64 7                ; &eptr246520[7]
  store i64 %lx233699233879, i64* %eptr246514                                        ; *eptr246514 = %lx233699233879
  store i64 %ly233700233880, i64* %eptr246515                                        ; *eptr246515 = %ly233700233880
  store i64 %_37_62233638233814, i64* %eptr246516                                    ; *eptr246516 = %_37_62233638233814
  store i64 %_37drop233642233818, i64* %eptr246517                                   ; *eptr246517 = %_37drop233642233818
  store i64 %y233698233878, i64* %eptr246518                                         ; *eptr246518 = %y233698233878
  store i64 %x233697233877, i64* %eptr246519                                         ; *eptr246519 = %x233697233877
  store i64 %cont234139, i64* %eptr246520                                            ; *eptr246520 = %cont234139
  %eptr246513 = getelementptr inbounds i64, i64* %cloptr246512, i64 0                ; &cloptr246512[0]
  %f246521 = ptrtoint void(i64,i64)* @lam243539 to i64                               ; fptr cast; i64(...)* -> i64
  store i64 %f246521, i64* %eptr246513                                               ; store fptr
  %arg234708 = ptrtoint i64* %cloptr246512 to i64                                    ; closure cast; i64* -> i64
  %arg234707 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %sym237386 = add i64 0, 0                                                          ; quoted ()
  %x237387 = call i64 @prim_cons(i64 %retprim234155, i64 %sym237386)                 ; call prim_cons
  %x237388 = call i64 @prim_cons(i64 %arg234707, i64 %x237387)                       ; call prim_cons
  %cloptr246522 = inttoptr i64 %arg234708 to i64*                                    ; closure/env cast; i64 -> i64*
  %i0ptr246523 = getelementptr inbounds i64, i64* %cloptr246522, i64 0               ; &cloptr246522[0]
  %f246525 = load i64, i64* %i0ptr246523, align 8                                    ; load; *i0ptr246523
  %fptr246524 = inttoptr i64 %f246525 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr246524(i64 %arg234708, i64 %x237388)                ; tail call
  ret void

else246511:
  %many237395 = call i64 @const_init_string(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @str246526, i32 0, i32 0)); quoted string
  %fail237393 = call i64 @prim_halt(i64 %many237395)                                 ; call prim_halt
  %sym237398 = add i64 0, 0                                                          ; quoted ()
  %cloptr246527 = inttoptr i64 %fail237393 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr246528 = getelementptr inbounds i64, i64* %cloptr246527, i64 0               ; &cloptr246527[0]
  %f246530 = load i64, i64* %i0ptr246528, align 8                                    ; load; *i0ptr246528
  %fptr246529 = inttoptr i64 %f246530 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr246529(i64 %fail237393, i64 %sym237398)             ; tail call
  ret void
}


define void @lam243539(i64 %env243540, i64 %rvp237377) {
  %envptr246531 = inttoptr i64 %env243540 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr246532 = getelementptr inbounds i64, i64* %envptr246531, i64 7              ; &envptr246531[7]
  %cont234139 = load i64, i64* %envptr246532, align 8                                ; load; *envptr246532
  %envptr246533 = inttoptr i64 %env243540 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr246534 = getelementptr inbounds i64, i64* %envptr246533, i64 6              ; &envptr246533[6]
  %x233697233877 = load i64, i64* %envptr246534, align 8                             ; load; *envptr246534
  %envptr246535 = inttoptr i64 %env243540 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr246536 = getelementptr inbounds i64, i64* %envptr246535, i64 5              ; &envptr246535[5]
  %y233698233878 = load i64, i64* %envptr246536, align 8                             ; load; *envptr246536
  %envptr246537 = inttoptr i64 %env243540 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr246538 = getelementptr inbounds i64, i64* %envptr246537, i64 4              ; &envptr246537[4]
  %_37drop233642233818 = load i64, i64* %envptr246538, align 8                       ; load; *envptr246538
  %envptr246539 = inttoptr i64 %env243540 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr246540 = getelementptr inbounds i64, i64* %envptr246539, i64 3              ; &envptr246539[3]
  %_37_62233638233814 = load i64, i64* %envptr246540, align 8                        ; load; *envptr246540
  %envptr246541 = inttoptr i64 %env243540 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr246542 = getelementptr inbounds i64, i64* %envptr246541, i64 2              ; &envptr246541[2]
  %ly233700233880 = load i64, i64* %envptr246542, align 8                            ; load; *envptr246542
  %envptr246543 = inttoptr i64 %env243540 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr246544 = getelementptr inbounds i64, i64* %envptr246543, i64 1              ; &envptr246543[1]
  %lx233699233879 = load i64, i64* %envptr246544, align 8                            ; load; *envptr246544
  %check237378 = call i64 @prim_null_63(i64 %rvp237377)                              ; call prim_null_63
  %cmp246545 = icmp eq i64 %check237378, 15                                          ; false?
  br i1 %cmp246545, label %else246547, label %then246546                             ; if

then246546:
  %msg237382 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str246548, i32 0, i32 0)); quoted string
  %abort237380 = call i64 @prim_halt(i64 %msg237382)                                 ; call prim_halt
  %sym237385 = add i64 0, 0                                                          ; quoted ()
  %cloptr246549 = inttoptr i64 %abort237380 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr246550 = getelementptr inbounds i64, i64* %cloptr246549, i64 0               ; &cloptr246549[0]
  %f246552 = load i64, i64* %i0ptr246550, align 8                                    ; load; *i0ptr246550
  %fptr246551 = inttoptr i64 %f246552 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr246551(i64 %abort237380, i64 %sym237385)            ; tail call
  ret void

else246547:
  %_95234142 = call i64 @prim_car(i64 %rvp237377)                                    ; call prim_car
  %rvp237367 = call i64 @prim_cdr(i64 %rvp237377)                                    ; call prim_cdr
  %check237368 = call i64 @prim_null_63(i64 %rvp237367)                              ; call prim_null_63
  %cmp246553 = icmp eq i64 %check237368, 15                                          ; false?
  br i1 %cmp246553, label %else246555, label %then246554                             ; if

then246554:
  %msg237372 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str246556, i32 0, i32 0)); quoted string
  %abort237370 = call i64 @prim_halt(i64 %msg237372)                                 ; call prim_halt
  %sym237375 = add i64 0, 0                                                          ; quoted ()
  %cloptr246557 = inttoptr i64 %abort237370 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr246558 = getelementptr inbounds i64, i64* %cloptr246557, i64 0               ; &cloptr246557[0]
  %f246560 = load i64, i64* %i0ptr246558, align 8                                    ; load; *i0ptr246558
  %fptr246559 = inttoptr i64 %f246560 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr246559(i64 %abort237370, i64 %sym237375)            ; tail call
  ret void

else246555:
  %rest237374 = call i64 @prim_cdr(i64 %rvp237367)                                   ; call prim_cdr
  %empty237369 = call i64 @prim_null_63(i64 %rest237374)                             ; call prim_null_63
  %cmp246561 = icmp eq i64 %empty237369, 15                                          ; false?
  br i1 %cmp246561, label %else246563, label %then246562                             ; if

then246562:
  %loop233701233881 = call i64 @prim_car(i64 %rvp237367)                             ; call prim_car
  %na237037 = call i64 @prim_cdr(i64 %rvp237367)                                     ; call prim_cdr
  %cloptr246564 = call i64* @alloc(i64 16)                                           ; malloc
  %eptr246566 = getelementptr inbounds i64, i64* %cloptr246564, i64 1                ; &eptr246566[1]
  store i64 %loop233701233881, i64* %eptr246566                                      ; *eptr246566 = %loop233701233881
  %eptr246565 = getelementptr inbounds i64, i64* %cloptr246564, i64 0                ; &cloptr246564[0]
  %f246567 = ptrtoint void(i64,i64)* @lam243535 to i64                               ; fptr cast; i64(...)* -> i64
  store i64 %f246567, i64* %eptr246565                                               ; store fptr
  %loop233563233703233883 = ptrtoint i64* %cloptr246564 to i64                       ; closure cast; i64* -> i64
  %arg234733 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %_95t233707233887 = call i64 @prim_vector_45set_33(i64 %loop233701233881, i64 %arg234733, i64 %loop233563233703233883); call prim_vector_45set_33
  %arg234735 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %a234028 = call i64 @prim_vector_45ref(i64 %loop233701233881, i64 %arg234735)      ; call prim_vector_45ref
  %retprim234153 = call i64 @prim_procedure_63(i64 %a234028)                         ; call prim_procedure_63
  %cloptr246568 = call i64* @alloc(i64 72)                                           ; malloc
  %eptr246570 = getelementptr inbounds i64, i64* %cloptr246568, i64 1                ; &eptr246570[1]
  %eptr246571 = getelementptr inbounds i64, i64* %cloptr246568, i64 2                ; &eptr246571[2]
  %eptr246572 = getelementptr inbounds i64, i64* %cloptr246568, i64 3                ; &eptr246572[3]
  %eptr246573 = getelementptr inbounds i64, i64* %cloptr246568, i64 4                ; &eptr246573[4]
  %eptr246574 = getelementptr inbounds i64, i64* %cloptr246568, i64 5                ; &eptr246574[5]
  %eptr246575 = getelementptr inbounds i64, i64* %cloptr246568, i64 6                ; &eptr246575[6]
  %eptr246576 = getelementptr inbounds i64, i64* %cloptr246568, i64 7                ; &eptr246576[7]
  %eptr246577 = getelementptr inbounds i64, i64* %cloptr246568, i64 8                ; &eptr246577[8]
  store i64 %lx233699233879, i64* %eptr246570                                        ; *eptr246570 = %lx233699233879
  store i64 %ly233700233880, i64* %eptr246571                                        ; *eptr246571 = %ly233700233880
  store i64 %_37_62233638233814, i64* %eptr246572                                    ; *eptr246572 = %_37_62233638233814
  store i64 %_37drop233642233818, i64* %eptr246573                                   ; *eptr246573 = %_37drop233642233818
  store i64 %y233698233878, i64* %eptr246574                                         ; *eptr246574 = %y233698233878
  store i64 %x233697233877, i64* %eptr246575                                         ; *eptr246575 = %x233697233877
  store i64 %loop233701233881, i64* %eptr246576                                      ; *eptr246576 = %loop233701233881
  store i64 %cont234139, i64* %eptr246577                                            ; *eptr246577 = %cont234139
  %eptr246569 = getelementptr inbounds i64, i64* %cloptr246568, i64 0                ; &cloptr246568[0]
  %f246578 = ptrtoint void(i64,i64)* @lam243505 to i64                               ; fptr cast; i64(...)* -> i64
  store i64 %f246578, i64* %eptr246569                                               ; store fptr
  %arg234740 = ptrtoint i64* %cloptr246568 to i64                                    ; closure cast; i64* -> i64
  %arg234739 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %sym237364 = add i64 0, 0                                                          ; quoted ()
  %x237365 = call i64 @prim_cons(i64 %retprim234153, i64 %sym237364)                 ; call prim_cons
  %x237366 = call i64 @prim_cons(i64 %arg234739, i64 %x237365)                       ; call prim_cons
  %cloptr246579 = inttoptr i64 %arg234740 to i64*                                    ; closure/env cast; i64 -> i64*
  %i0ptr246580 = getelementptr inbounds i64, i64* %cloptr246579, i64 0               ; &cloptr246579[0]
  %f246582 = load i64, i64* %i0ptr246580, align 8                                    ; load; *i0ptr246580
  %fptr246581 = inttoptr i64 %f246582 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr246581(i64 %arg234740, i64 %x237366)                ; tail call
  ret void

else246563:
  %many237373 = call i64 @const_init_string(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @str246583, i32 0, i32 0)); quoted string
  %fail237371 = call i64 @prim_halt(i64 %many237373)                                 ; call prim_halt
  %sym237376 = add i64 0, 0                                                          ; quoted ()
  %cloptr246584 = inttoptr i64 %fail237371 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr246585 = getelementptr inbounds i64, i64* %cloptr246584, i64 0               ; &cloptr246584[0]
  %f246587 = load i64, i64* %i0ptr246585, align 8                                    ; load; *i0ptr246585
  %fptr246586 = inttoptr i64 %f246587 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr246586(i64 %fail237371, i64 %sym237376)             ; tail call
  ret void
}


define void @lam243535(i64 %env243536, i64 %rvp237093) {
  %envptr246588 = inttoptr i64 %env243536 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr246589 = getelementptr inbounds i64, i64* %envptr246588, i64 1              ; &envptr246588[1]
  %loop233701233881 = load i64, i64* %envptr246589, align 8                          ; load; *envptr246589
  %check237094 = call i64 @prim_null_63(i64 %rvp237093)                              ; call prim_null_63
  %cmp246590 = icmp eq i64 %check237094, 15                                          ; false?
  br i1 %cmp246590, label %else246592, label %then246591                             ; if

then246591:
  %msg237098 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str246593, i32 0, i32 0)); quoted string
  %abort237096 = call i64 @prim_halt(i64 %msg237098)                                 ; call prim_halt
  %sym237101 = add i64 0, 0                                                          ; quoted ()
  %cloptr246594 = inttoptr i64 %abort237096 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr246595 = getelementptr inbounds i64, i64* %cloptr246594, i64 0               ; &cloptr246594[0]
  %f246597 = load i64, i64* %i0ptr246595, align 8                                    ; load; *i0ptr246595
  %fptr246596 = inttoptr i64 %f246597 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr246596(i64 %abort237096, i64 %sym237101)            ; tail call
  ret void

else246592:
  %cont234143 = call i64 @prim_car(i64 %rvp237093)                                   ; call prim_car
  %rvp237084 = call i64 @prim_cdr(i64 %rvp237093)                                    ; call prim_cdr
  %check237085 = call i64 @prim_null_63(i64 %rvp237084)                              ; call prim_null_63
  %cmp246598 = icmp eq i64 %check237085, 15                                          ; false?
  br i1 %cmp246598, label %else246600, label %then246599                             ; if

then246599:
  %msg237089 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str246601, i32 0, i32 0)); quoted string
  %abort237087 = call i64 @prim_halt(i64 %msg237089)                                 ; call prim_halt
  %sym237092 = add i64 0, 0                                                          ; quoted ()
  %cloptr246602 = inttoptr i64 %abort237087 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr246603 = getelementptr inbounds i64, i64* %cloptr246602, i64 0               ; &cloptr246602[0]
  %f246605 = load i64, i64* %i0ptr246603, align 8                                    ; load; *i0ptr246603
  %fptr246604 = inttoptr i64 %f246605 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr246604(i64 %abort237087, i64 %sym237092)            ; tail call
  ret void

else246600:
  %x233704233884 = call i64 @prim_car(i64 %rvp237084)                                ; call prim_car
  %rvp237074 = call i64 @prim_cdr(i64 %rvp237084)                                    ; call prim_cdr
  %check237075 = call i64 @prim_null_63(i64 %rvp237074)                              ; call prim_null_63
  %cmp246606 = icmp eq i64 %check237075, 15                                          ; false?
  br i1 %cmp246606, label %else246608, label %then246607                             ; if

then246607:
  %msg237079 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str246609, i32 0, i32 0)); quoted string
  %abort237077 = call i64 @prim_halt(i64 %msg237079)                                 ; call prim_halt
  %sym237082 = add i64 0, 0                                                          ; quoted ()
  %cloptr246610 = inttoptr i64 %abort237077 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr246611 = getelementptr inbounds i64, i64* %cloptr246610, i64 0               ; &cloptr246610[0]
  %f246613 = load i64, i64* %i0ptr246611, align 8                                    ; load; *i0ptr246611
  %fptr246612 = inttoptr i64 %f246613 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr246612(i64 %abort237077, i64 %sym237082)            ; tail call
  ret void

else246608:
  %rest237081 = call i64 @prim_cdr(i64 %rvp237074)                                   ; call prim_cdr
  %empty237076 = call i64 @prim_null_63(i64 %rest237081)                             ; call prim_null_63
  %cmp246614 = icmp eq i64 %empty237076, 15                                          ; false?
  br i1 %cmp246614, label %else246616, label %then246615                             ; if

then246615:
  %y233705233885 = call i64 @prim_car(i64 %rvp237074)                                ; call prim_car
  %na237039 = call i64 @prim_cdr(i64 %rvp237074)                                     ; call prim_cdr
  %a234023 = call i64 @prim_eq_63(i64 %x233704233884, i64 %y233705233885)            ; call prim_eq_63
  %cmp246617 = icmp eq i64 %a234023, 15                                              ; false?
  br i1 %cmp246617, label %else246619, label %then246618                             ; if

then246618:
  %arg234712 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %sym237040 = add i64 0, 0                                                          ; quoted ()
  %x237041 = call i64 @prim_cons(i64 %x233704233884, i64 %sym237040)                 ; call prim_cons
  %x237042 = call i64 @prim_cons(i64 %arg234712, i64 %x237041)                       ; call prim_cons
  %cloptr246620 = inttoptr i64 %cont234143 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr246621 = getelementptr inbounds i64, i64* %cloptr246620, i64 0               ; &cloptr246620[0]
  %f246623 = load i64, i64* %i0ptr246621, align 8                                    ; load; *i0ptr246621
  %fptr246622 = inttoptr i64 %f246623 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr246622(i64 %cont234143, i64 %x237042)               ; tail call
  ret void

else246619:
  %arg234714 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %a234024 = call i64 @prim_vector_45ref(i64 %loop233701233881, i64 %arg234714)      ; call prim_vector_45ref
  %retprim234146 = call i64 @prim_procedure_63(i64 %a234024)                         ; call prim_procedure_63
  %cloptr246624 = call i64* @alloc(i64 40)                                           ; malloc
  %eptr246626 = getelementptr inbounds i64, i64* %cloptr246624, i64 1                ; &eptr246626[1]
  %eptr246627 = getelementptr inbounds i64, i64* %cloptr246624, i64 2                ; &eptr246627[2]
  %eptr246628 = getelementptr inbounds i64, i64* %cloptr246624, i64 3                ; &eptr246628[3]
  %eptr246629 = getelementptr inbounds i64, i64* %cloptr246624, i64 4                ; &eptr246629[4]
  store i64 %cont234143, i64* %eptr246626                                            ; *eptr246626 = %cont234143
  store i64 %y233705233885, i64* %eptr246627                                         ; *eptr246627 = %y233705233885
  store i64 %loop233701233881, i64* %eptr246628                                      ; *eptr246628 = %loop233701233881
  store i64 %x233704233884, i64* %eptr246629                                         ; *eptr246629 = %x233704233884
  %eptr246625 = getelementptr inbounds i64, i64* %cloptr246624, i64 0                ; &cloptr246624[0]
  %f246630 = ptrtoint void(i64,i64)* @lam243530 to i64                               ; fptr cast; i64(...)* -> i64
  store i64 %f246630, i64* %eptr246625                                               ; store fptr
  %arg234719 = ptrtoint i64* %cloptr246624 to i64                                    ; closure cast; i64* -> i64
  %arg234718 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %sym237071 = add i64 0, 0                                                          ; quoted ()
  %x237072 = call i64 @prim_cons(i64 %retprim234146, i64 %sym237071)                 ; call prim_cons
  %x237073 = call i64 @prim_cons(i64 %arg234718, i64 %x237072)                       ; call prim_cons
  %cloptr246631 = inttoptr i64 %arg234719 to i64*                                    ; closure/env cast; i64 -> i64*
  %i0ptr246632 = getelementptr inbounds i64, i64* %cloptr246631, i64 0               ; &cloptr246631[0]
  %f246634 = load i64, i64* %i0ptr246632, align 8                                    ; load; *i0ptr246632
  %fptr246633 = inttoptr i64 %f246634 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr246633(i64 %arg234719, i64 %x237073)                ; tail call
  ret void

else246616:
  %many237080 = call i64 @const_init_string(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @str246635, i32 0, i32 0)); quoted string
  %fail237078 = call i64 @prim_halt(i64 %many237080)                                 ; call prim_halt
  %sym237083 = add i64 0, 0                                                          ; quoted ()
  %cloptr246636 = inttoptr i64 %fail237078 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr246637 = getelementptr inbounds i64, i64* %cloptr246636, i64 0               ; &cloptr246636[0]
  %f246639 = load i64, i64* %i0ptr246637, align 8                                    ; load; *i0ptr246637
  %fptr246638 = inttoptr i64 %f246639 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr246638(i64 %fail237078, i64 %sym237083)             ; tail call
  ret void
}


define void @lam243530(i64 %env243531, i64 %rvp237062) {
  %envptr246640 = inttoptr i64 %env243531 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr246641 = getelementptr inbounds i64, i64* %envptr246640, i64 4              ; &envptr246640[4]
  %x233704233884 = load i64, i64* %envptr246641, align 8                             ; load; *envptr246641
  %envptr246642 = inttoptr i64 %env243531 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr246643 = getelementptr inbounds i64, i64* %envptr246642, i64 3              ; &envptr246642[3]
  %loop233701233881 = load i64, i64* %envptr246643, align 8                          ; load; *envptr246643
  %envptr246644 = inttoptr i64 %env243531 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr246645 = getelementptr inbounds i64, i64* %envptr246644, i64 2              ; &envptr246644[2]
  %y233705233885 = load i64, i64* %envptr246645, align 8                             ; load; *envptr246645
  %envptr246646 = inttoptr i64 %env243531 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr246647 = getelementptr inbounds i64, i64* %envptr246646, i64 1              ; &envptr246646[1]
  %cont234143 = load i64, i64* %envptr246647, align 8                                ; load; *envptr246647
  %check237063 = call i64 @prim_null_63(i64 %rvp237062)                              ; call prim_null_63
  %cmp246648 = icmp eq i64 %check237063, 15                                          ; false?
  br i1 %cmp246648, label %else246650, label %then246649                             ; if

then246649:
  %msg237067 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str246651, i32 0, i32 0)); quoted string
  %abort237065 = call i64 @prim_halt(i64 %msg237067)                                 ; call prim_halt
  %sym237070 = add i64 0, 0                                                          ; quoted ()
  %cloptr246652 = inttoptr i64 %abort237065 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr246653 = getelementptr inbounds i64, i64* %cloptr246652, i64 0               ; &cloptr246652[0]
  %f246655 = load i64, i64* %i0ptr246653, align 8                                    ; load; *i0ptr246653
  %fptr246654 = inttoptr i64 %f246655 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr246654(i64 %abort237065, i64 %sym237070)            ; tail call
  ret void

else246650:
  %_95234144 = call i64 @prim_car(i64 %rvp237062)                                    ; call prim_car
  %rvp237052 = call i64 @prim_cdr(i64 %rvp237062)                                    ; call prim_cdr
  %check237053 = call i64 @prim_null_63(i64 %rvp237052)                              ; call prim_null_63
  %cmp246656 = icmp eq i64 %check237053, 15                                          ; false?
  br i1 %cmp246656, label %else246658, label %then246657                             ; if

then246657:
  %msg237057 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str246659, i32 0, i32 0)); quoted string
  %abort237055 = call i64 @prim_halt(i64 %msg237057)                                 ; call prim_halt
  %sym237060 = add i64 0, 0                                                          ; quoted ()
  %cloptr246660 = inttoptr i64 %abort237055 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr246661 = getelementptr inbounds i64, i64* %cloptr246660, i64 0               ; &cloptr246660[0]
  %f246663 = load i64, i64* %i0ptr246661, align 8                                    ; load; *i0ptr246661
  %fptr246662 = inttoptr i64 %f246663 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr246662(i64 %abort237055, i64 %sym237060)            ; tail call
  ret void

else246658:
  %rest237059 = call i64 @prim_cdr(i64 %rvp237052)                                   ; call prim_cdr
  %empty237054 = call i64 @prim_null_63(i64 %rest237059)                             ; call prim_null_63
  %cmp246664 = icmp eq i64 %empty237054, 15                                          ; false?
  br i1 %cmp246664, label %else246666, label %then246665                             ; if

then246665:
  %check233564233706233886 = call i64 @prim_car(i64 %rvp237052)                      ; call prim_car
  %na237044 = call i64 @prim_cdr(i64 %rvp237052)                                     ; call prim_cdr
  %cmp246667 = icmp eq i64 %check233564233706233886, 15                              ; false?
  br i1 %cmp246667, label %else246669, label %then246668                             ; if

then246668:
  %arg234720 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %a234025 = call i64 @prim_vector_45ref(i64 %loop233701233881, i64 %arg234720)      ; call prim_vector_45ref
  %a234026 = call i64 @prim_cdr(i64 %x233704233884)                                  ; call prim_cdr
  %a234027 = call i64 @prim_cdr(i64 %y233705233885)                                  ; call prim_cdr
  %sym237045 = add i64 0, 0                                                          ; quoted ()
  %x237046 = call i64 @prim_cons(i64 %a234027, i64 %sym237045)                       ; call prim_cons
  %x237047 = call i64 @prim_cons(i64 %a234026, i64 %x237046)                         ; call prim_cons
  %x237048 = call i64 @prim_cons(i64 %cont234143, i64 %x237047)                      ; call prim_cons
  %cloptr246670 = inttoptr i64 %a234025 to i64*                                      ; closure/env cast; i64 -> i64*
  %i0ptr246671 = getelementptr inbounds i64, i64* %cloptr246670, i64 0               ; &cloptr246670[0]
  %f246673 = load i64, i64* %i0ptr246671, align 8                                    ; load; *i0ptr246671
  %fptr246672 = inttoptr i64 %f246673 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr246672(i64 %a234025, i64 %x237048)                  ; tail call
  ret void

else246669:
  %arg234728 = call i64 @const_init_string(i8* getelementptr inbounds ([78 x i8], [78 x i8]* @str246674, i32 0, i32 0)); quoted string
  %retprim234145 = call i64 @prim_halt(i64 %arg234728)                               ; call prim_halt
  %arg234730 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %sym237049 = add i64 0, 0                                                          ; quoted ()
  %x237050 = call i64 @prim_cons(i64 %retprim234145, i64 %sym237049)                 ; call prim_cons
  %x237051 = call i64 @prim_cons(i64 %arg234730, i64 %x237050)                       ; call prim_cons
  %cloptr246675 = inttoptr i64 %cont234143 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr246676 = getelementptr inbounds i64, i64* %cloptr246675, i64 0               ; &cloptr246675[0]
  %f246678 = load i64, i64* %i0ptr246676, align 8                                    ; load; *i0ptr246676
  %fptr246677 = inttoptr i64 %f246678 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr246677(i64 %cont234143, i64 %x237051)               ; tail call
  ret void

else246666:
  %many237058 = call i64 @const_init_string(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @str246679, i32 0, i32 0)); quoted string
  %fail237056 = call i64 @prim_halt(i64 %many237058)                                 ; call prim_halt
  %sym237061 = add i64 0, 0                                                          ; quoted ()
  %cloptr246680 = inttoptr i64 %fail237056 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr246681 = getelementptr inbounds i64, i64* %cloptr246680, i64 0               ; &cloptr246680[0]
  %f246683 = load i64, i64* %i0ptr246681, align 8                                    ; load; *i0ptr246681
  %fptr246682 = inttoptr i64 %f246683 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr246682(i64 %fail237056, i64 %sym237061)             ; tail call
  ret void
}


define void @lam243505(i64 %env243506, i64 %rvp237355) {
  %envptr246684 = inttoptr i64 %env243506 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr246685 = getelementptr inbounds i64, i64* %envptr246684, i64 8              ; &envptr246684[8]
  %cont234139 = load i64, i64* %envptr246685, align 8                                ; load; *envptr246685
  %envptr246686 = inttoptr i64 %env243506 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr246687 = getelementptr inbounds i64, i64* %envptr246686, i64 7              ; &envptr246686[7]
  %loop233701233881 = load i64, i64* %envptr246687, align 8                          ; load; *envptr246687
  %envptr246688 = inttoptr i64 %env243506 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr246689 = getelementptr inbounds i64, i64* %envptr246688, i64 6              ; &envptr246688[6]
  %x233697233877 = load i64, i64* %envptr246689, align 8                             ; load; *envptr246689
  %envptr246690 = inttoptr i64 %env243506 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr246691 = getelementptr inbounds i64, i64* %envptr246690, i64 5              ; &envptr246690[5]
  %y233698233878 = load i64, i64* %envptr246691, align 8                             ; load; *envptr246691
  %envptr246692 = inttoptr i64 %env243506 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr246693 = getelementptr inbounds i64, i64* %envptr246692, i64 4              ; &envptr246692[4]
  %_37drop233642233818 = load i64, i64* %envptr246693, align 8                       ; load; *envptr246693
  %envptr246694 = inttoptr i64 %env243506 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr246695 = getelementptr inbounds i64, i64* %envptr246694, i64 3              ; &envptr246694[3]
  %_37_62233638233814 = load i64, i64* %envptr246695, align 8                        ; load; *envptr246695
  %envptr246696 = inttoptr i64 %env243506 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr246697 = getelementptr inbounds i64, i64* %envptr246696, i64 2              ; &envptr246696[2]
  %ly233700233880 = load i64, i64* %envptr246697, align 8                            ; load; *envptr246697
  %envptr246698 = inttoptr i64 %env243506 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr246699 = getelementptr inbounds i64, i64* %envptr246698, i64 1              ; &envptr246698[1]
  %lx233699233879 = load i64, i64* %envptr246699, align 8                            ; load; *envptr246699
  %check237356 = call i64 @prim_null_63(i64 %rvp237355)                              ; call prim_null_63
  %cmp246700 = icmp eq i64 %check237356, 15                                          ; false?
  br i1 %cmp246700, label %else246702, label %then246701                             ; if

then246701:
  %msg237360 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str246703, i32 0, i32 0)); quoted string
  %abort237358 = call i64 @prim_halt(i64 %msg237360)                                 ; call prim_halt
  %sym237363 = add i64 0, 0                                                          ; quoted ()
  %cloptr246704 = inttoptr i64 %abort237358 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr246705 = getelementptr inbounds i64, i64* %cloptr246704, i64 0               ; &cloptr246704[0]
  %f246707 = load i64, i64* %i0ptr246705, align 8                                    ; load; *i0ptr246705
  %fptr246706 = inttoptr i64 %f246707 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr246706(i64 %abort237358, i64 %sym237363)            ; tail call
  ret void

else246702:
  %_95234147 = call i64 @prim_car(i64 %rvp237355)                                    ; call prim_car
  %rvp237345 = call i64 @prim_cdr(i64 %rvp237355)                                    ; call prim_cdr
  %check237346 = call i64 @prim_null_63(i64 %rvp237345)                              ; call prim_null_63
  %cmp246708 = icmp eq i64 %check237346, 15                                          ; false?
  br i1 %cmp246708, label %else246710, label %then246709                             ; if

then246709:
  %msg237350 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str246711, i32 0, i32 0)); quoted string
  %abort237348 = call i64 @prim_halt(i64 %msg237350)                                 ; call prim_halt
  %sym237353 = add i64 0, 0                                                          ; quoted ()
  %cloptr246712 = inttoptr i64 %abort237348 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr246713 = getelementptr inbounds i64, i64* %cloptr246712, i64 0               ; &cloptr246712[0]
  %f246715 = load i64, i64* %i0ptr246713, align 8                                    ; load; *i0ptr246713
  %fptr246714 = inttoptr i64 %f246715 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr246714(i64 %abort237348, i64 %sym237353)            ; tail call
  ret void

else246710:
  %rest237352 = call i64 @prim_cdr(i64 %rvp237345)                                   ; call prim_cdr
  %empty237347 = call i64 @prim_null_63(i64 %rest237352)                             ; call prim_null_63
  %cmp246716 = icmp eq i64 %empty237347, 15                                          ; false?
  br i1 %cmp246716, label %else246718, label %then246717                             ; if

then246717:
  %check233565233708233888 = call i64 @prim_car(i64 %rvp237345)                      ; call prim_car
  %na237103 = call i64 @prim_cdr(i64 %rvp237345)                                     ; call prim_cdr
  %cmp246719 = icmp eq i64 %check233565233708233888, 15                              ; false?
  br i1 %cmp246719, label %else246721, label %then246720                             ; if

then246720:
  %arg234741 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %a234029 = call i64 @prim_vector_45ref(i64 %loop233701233881, i64 %arg234741)      ; call prim_vector_45ref
  %cloptr246722 = call i64* @alloc(i64 72)                                           ; malloc
  %eptr246724 = getelementptr inbounds i64, i64* %cloptr246722, i64 1                ; &eptr246724[1]
  %eptr246725 = getelementptr inbounds i64, i64* %cloptr246722, i64 2                ; &eptr246725[2]
  %eptr246726 = getelementptr inbounds i64, i64* %cloptr246722, i64 3                ; &eptr246726[3]
  %eptr246727 = getelementptr inbounds i64, i64* %cloptr246722, i64 4                ; &eptr246727[4]
  %eptr246728 = getelementptr inbounds i64, i64* %cloptr246722, i64 5                ; &eptr246728[5]
  %eptr246729 = getelementptr inbounds i64, i64* %cloptr246722, i64 6                ; &eptr246729[6]
  %eptr246730 = getelementptr inbounds i64, i64* %cloptr246722, i64 7                ; &eptr246730[7]
  %eptr246731 = getelementptr inbounds i64, i64* %cloptr246722, i64 8                ; &eptr246731[8]
  store i64 %a234029, i64* %eptr246724                                               ; *eptr246724 = %a234029
  store i64 %lx233699233879, i64* %eptr246725                                        ; *eptr246725 = %lx233699233879
  store i64 %ly233700233880, i64* %eptr246726                                        ; *eptr246726 = %ly233700233880
  store i64 %_37_62233638233814, i64* %eptr246727                                    ; *eptr246727 = %_37_62233638233814
  store i64 %_37drop233642233818, i64* %eptr246728                                   ; *eptr246728 = %_37drop233642233818
  store i64 %y233698233878, i64* %eptr246729                                         ; *eptr246729 = %y233698233878
  store i64 %x233697233877, i64* %eptr246730                                         ; *eptr246730 = %x233697233877
  store i64 %cont234139, i64* %eptr246731                                            ; *eptr246731 = %cont234139
  %eptr246723 = getelementptr inbounds i64, i64* %cloptr246722, i64 0                ; &cloptr246722[0]
  %f246732 = ptrtoint void(i64,i64)* @lam243497 to i64                               ; fptr cast; i64(...)* -> i64
  store i64 %f246732, i64* %eptr246723                                               ; store fptr
  %arg234745 = ptrtoint i64* %cloptr246722 to i64                                    ; closure cast; i64* -> i64
  %sym237338 = add i64 0, 0                                                          ; quoted ()
  %x237339 = call i64 @prim_cons(i64 %ly233700233880, i64 %sym237338)                ; call prim_cons
  %x237340 = call i64 @prim_cons(i64 %lx233699233879, i64 %x237339)                  ; call prim_cons
  %x237341 = call i64 @prim_cons(i64 %arg234745, i64 %x237340)                       ; call prim_cons
  %cloptr246733 = inttoptr i64 %_37_62233638233814 to i64*                           ; closure/env cast; i64 -> i64*
  %i0ptr246734 = getelementptr inbounds i64, i64* %cloptr246733, i64 0               ; &cloptr246733[0]
  %f246736 = load i64, i64* %i0ptr246734, align 8                                    ; load; *i0ptr246734
  %fptr246735 = inttoptr i64 %f246736 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr246735(i64 %_37_62233638233814, i64 %x237341)       ; tail call
  ret void

else246721:
  %arg234798 = call i64 @const_init_string(i8* getelementptr inbounds ([134 x i8], [134 x i8]* @str246737, i32 0, i32 0)); quoted string
  %retprim234152 = call i64 @prim_halt(i64 %arg234798)                               ; call prim_halt
  %arg234800 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %sym237342 = add i64 0, 0                                                          ; quoted ()
  %x237343 = call i64 @prim_cons(i64 %retprim234152, i64 %sym237342)                 ; call prim_cons
  %x237344 = call i64 @prim_cons(i64 %arg234800, i64 %x237343)                       ; call prim_cons
  %cloptr246738 = inttoptr i64 %cont234139 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr246739 = getelementptr inbounds i64, i64* %cloptr246738, i64 0               ; &cloptr246738[0]
  %f246741 = load i64, i64* %i0ptr246739, align 8                                    ; load; *i0ptr246739
  %fptr246740 = inttoptr i64 %f246741 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr246740(i64 %cont234139, i64 %x237344)               ; tail call
  ret void

else246718:
  %many237351 = call i64 @const_init_string(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @str246742, i32 0, i32 0)); quoted string
  %fail237349 = call i64 @prim_halt(i64 %many237351)                                 ; call prim_halt
  %sym237354 = add i64 0, 0                                                          ; quoted ()
  %cloptr246743 = inttoptr i64 %fail237349 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr246744 = getelementptr inbounds i64, i64* %cloptr246743, i64 0               ; &cloptr246743[0]
  %f246746 = load i64, i64* %i0ptr246744, align 8                                    ; load; *i0ptr246744
  %fptr246745 = inttoptr i64 %f246746 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr246745(i64 %fail237349, i64 %sym237354)             ; tail call
  ret void
}


define void @lam243497(i64 %env243498, i64 %rvp237329) {
  %envptr246747 = inttoptr i64 %env243498 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr246748 = getelementptr inbounds i64, i64* %envptr246747, i64 8              ; &envptr246747[8]
  %cont234139 = load i64, i64* %envptr246748, align 8                                ; load; *envptr246748
  %envptr246749 = inttoptr i64 %env243498 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr246750 = getelementptr inbounds i64, i64* %envptr246749, i64 7              ; &envptr246749[7]
  %x233697233877 = load i64, i64* %envptr246750, align 8                             ; load; *envptr246750
  %envptr246751 = inttoptr i64 %env243498 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr246752 = getelementptr inbounds i64, i64* %envptr246751, i64 6              ; &envptr246751[6]
  %y233698233878 = load i64, i64* %envptr246752, align 8                             ; load; *envptr246752
  %envptr246753 = inttoptr i64 %env243498 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr246754 = getelementptr inbounds i64, i64* %envptr246753, i64 5              ; &envptr246753[5]
  %_37drop233642233818 = load i64, i64* %envptr246754, align 8                       ; load; *envptr246754
  %envptr246755 = inttoptr i64 %env243498 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr246756 = getelementptr inbounds i64, i64* %envptr246755, i64 4              ; &envptr246755[4]
  %_37_62233638233814 = load i64, i64* %envptr246756, align 8                        ; load; *envptr246756
  %envptr246757 = inttoptr i64 %env243498 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr246758 = getelementptr inbounds i64, i64* %envptr246757, i64 3              ; &envptr246757[3]
  %ly233700233880 = load i64, i64* %envptr246758, align 8                            ; load; *envptr246758
  %envptr246759 = inttoptr i64 %env243498 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr246760 = getelementptr inbounds i64, i64* %envptr246759, i64 2              ; &envptr246759[2]
  %lx233699233879 = load i64, i64* %envptr246760, align 8                            ; load; *envptr246760
  %envptr246761 = inttoptr i64 %env243498 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr246762 = getelementptr inbounds i64, i64* %envptr246761, i64 1              ; &envptr246761[1]
  %a234029 = load i64, i64* %envptr246762, align 8                                   ; load; *envptr246762
  %check237330 = call i64 @prim_null_63(i64 %rvp237329)                              ; call prim_null_63
  %cmp246763 = icmp eq i64 %check237330, 15                                          ; false?
  br i1 %cmp246763, label %else246765, label %then246764                             ; if

then246764:
  %msg237334 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str246766, i32 0, i32 0)); quoted string
  %abort237332 = call i64 @prim_halt(i64 %msg237334)                                 ; call prim_halt
  %sym237337 = add i64 0, 0                                                          ; quoted ()
  %cloptr246767 = inttoptr i64 %abort237332 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr246768 = getelementptr inbounds i64, i64* %cloptr246767, i64 0               ; &cloptr246767[0]
  %f246770 = load i64, i64* %i0ptr246768, align 8                                    ; load; *i0ptr246768
  %fptr246769 = inttoptr i64 %f246770 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr246769(i64 %abort237332, i64 %sym237337)            ; tail call
  ret void

else246765:
  %_95234148 = call i64 @prim_car(i64 %rvp237329)                                    ; call prim_car
  %rvp237319 = call i64 @prim_cdr(i64 %rvp237329)                                    ; call prim_cdr
  %check237320 = call i64 @prim_null_63(i64 %rvp237319)                              ; call prim_null_63
  %cmp246771 = icmp eq i64 %check237320, 15                                          ; false?
  br i1 %cmp246771, label %else246773, label %then246772                             ; if

then246772:
  %msg237324 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str246774, i32 0, i32 0)); quoted string
  %abort237322 = call i64 @prim_halt(i64 %msg237324)                                 ; call prim_halt
  %sym237327 = add i64 0, 0                                                          ; quoted ()
  %cloptr246775 = inttoptr i64 %abort237322 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr246776 = getelementptr inbounds i64, i64* %cloptr246775, i64 0               ; &cloptr246775[0]
  %f246778 = load i64, i64* %i0ptr246776, align 8                                    ; load; *i0ptr246776
  %fptr246777 = inttoptr i64 %f246778 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr246777(i64 %abort237322, i64 %sym237327)            ; tail call
  ret void

else246773:
  %rest237326 = call i64 @prim_cdr(i64 %rvp237319)                                   ; call prim_cdr
  %empty237321 = call i64 @prim_null_63(i64 %rest237326)                             ; call prim_null_63
  %cmp246779 = icmp eq i64 %empty237321, 15                                          ; false?
  br i1 %cmp246779, label %else246781, label %then246780                             ; if

then246780:
  %a234030 = call i64 @prim_car(i64 %rvp237319)                                      ; call prim_car
  %na237105 = call i64 @prim_cdr(i64 %rvp237319)                                     ; call prim_cdr
  %cmp246782 = icmp eq i64 %a234030, 15                                              ; false?
  br i1 %cmp246782, label %else246784, label %then246783                             ; if

then246783:
  %a234031 = call i64 @prim__45(i64 %lx233699233879, i64 %ly233700233880)            ; call prim__45
  %cloptr246785 = call i64* @alloc(i64 64)                                           ; malloc
  %eptr246787 = getelementptr inbounds i64, i64* %cloptr246785, i64 1                ; &eptr246787[1]
  %eptr246788 = getelementptr inbounds i64, i64* %cloptr246785, i64 2                ; &eptr246788[2]
  %eptr246789 = getelementptr inbounds i64, i64* %cloptr246785, i64 3                ; &eptr246789[3]
  %eptr246790 = getelementptr inbounds i64, i64* %cloptr246785, i64 4                ; &eptr246790[4]
  %eptr246791 = getelementptr inbounds i64, i64* %cloptr246785, i64 5                ; &eptr246791[5]
  %eptr246792 = getelementptr inbounds i64, i64* %cloptr246785, i64 6                ; &eptr246792[6]
  %eptr246793 = getelementptr inbounds i64, i64* %cloptr246785, i64 7                ; &eptr246793[7]
  store i64 %a234029, i64* %eptr246787                                               ; *eptr246787 = %a234029
  store i64 %lx233699233879, i64* %eptr246788                                        ; *eptr246788 = %lx233699233879
  store i64 %ly233700233880, i64* %eptr246789                                        ; *eptr246789 = %ly233700233880
  store i64 %_37_62233638233814, i64* %eptr246790                                    ; *eptr246790 = %_37_62233638233814
  store i64 %_37drop233642233818, i64* %eptr246791                                   ; *eptr246791 = %_37drop233642233818
  store i64 %y233698233878, i64* %eptr246792                                         ; *eptr246792 = %y233698233878
  store i64 %cont234139, i64* %eptr246793                                            ; *eptr246793 = %cont234139
  %eptr246786 = getelementptr inbounds i64, i64* %cloptr246785, i64 0                ; &cloptr246785[0]
  %f246794 = ptrtoint void(i64,i64)* @lam243453 to i64                               ; fptr cast; i64(...)* -> i64
  store i64 %f246794, i64* %eptr246786                                               ; store fptr
  %arg234751 = ptrtoint i64* %cloptr246785 to i64                                    ; closure cast; i64* -> i64
  %sym237209 = add i64 0, 0                                                          ; quoted ()
  %x237210 = call i64 @prim_cons(i64 %a234031, i64 %sym237209)                       ; call prim_cons
  %x237211 = call i64 @prim_cons(i64 %x233697233877, i64 %x237210)                   ; call prim_cons
  %x237212 = call i64 @prim_cons(i64 %arg234751, i64 %x237211)                       ; call prim_cons
  %cloptr246795 = inttoptr i64 %_37drop233642233818 to i64*                          ; closure/env cast; i64 -> i64*
  %i0ptr246796 = getelementptr inbounds i64, i64* %cloptr246795, i64 0               ; &cloptr246795[0]
  %f246798 = load i64, i64* %i0ptr246796, align 8                                    ; load; *i0ptr246796
  %fptr246797 = inttoptr i64 %f246798 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr246797(i64 %_37drop233642233818, i64 %x237212)      ; tail call
  ret void

else246784:
  %cloptr246799 = call i64* @alloc(i64 64)                                           ; malloc
  %eptr246801 = getelementptr inbounds i64, i64* %cloptr246799, i64 1                ; &eptr246801[1]
  %eptr246802 = getelementptr inbounds i64, i64* %cloptr246799, i64 2                ; &eptr246802[2]
  %eptr246803 = getelementptr inbounds i64, i64* %cloptr246799, i64 3                ; &eptr246803[3]
  %eptr246804 = getelementptr inbounds i64, i64* %cloptr246799, i64 4                ; &eptr246804[4]
  %eptr246805 = getelementptr inbounds i64, i64* %cloptr246799, i64 5                ; &eptr246805[5]
  %eptr246806 = getelementptr inbounds i64, i64* %cloptr246799, i64 6                ; &eptr246806[6]
  %eptr246807 = getelementptr inbounds i64, i64* %cloptr246799, i64 7                ; &eptr246807[7]
  store i64 %a234029, i64* %eptr246801                                               ; *eptr246801 = %a234029
  store i64 %lx233699233879, i64* %eptr246802                                        ; *eptr246802 = %lx233699233879
  store i64 %ly233700233880, i64* %eptr246803                                        ; *eptr246803 = %ly233700233880
  store i64 %_37_62233638233814, i64* %eptr246804                                    ; *eptr246804 = %_37_62233638233814
  store i64 %_37drop233642233818, i64* %eptr246805                                   ; *eptr246805 = %_37drop233642233818
  store i64 %y233698233878, i64* %eptr246806                                         ; *eptr246806 = %y233698233878
  store i64 %cont234139, i64* %eptr246807                                            ; *eptr246807 = %cont234139
  %eptr246800 = getelementptr inbounds i64, i64* %cloptr246799, i64 0                ; &cloptr246799[0]
  %f246808 = ptrtoint void(i64,i64)* @lam243493 to i64                               ; fptr cast; i64(...)* -> i64
  store i64 %f246808, i64* %eptr246800                                               ; store fptr
  %arg234776 = ptrtoint i64* %cloptr246799 to i64                                    ; closure cast; i64* -> i64
  %arg234775 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %sym237316 = add i64 0, 0                                                          ; quoted ()
  %x237317 = call i64 @prim_cons(i64 %x233697233877, i64 %sym237316)                 ; call prim_cons
  %x237318 = call i64 @prim_cons(i64 %arg234775, i64 %x237317)                       ; call prim_cons
  %cloptr246809 = inttoptr i64 %arg234776 to i64*                                    ; closure/env cast; i64 -> i64*
  %i0ptr246810 = getelementptr inbounds i64, i64* %cloptr246809, i64 0               ; &cloptr246809[0]
  %f246812 = load i64, i64* %i0ptr246810, align 8                                    ; load; *i0ptr246810
  %fptr246811 = inttoptr i64 %f246812 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr246811(i64 %arg234776, i64 %x237318)                ; tail call
  ret void

else246781:
  %many237325 = call i64 @const_init_string(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @str246813, i32 0, i32 0)); quoted string
  %fail237323 = call i64 @prim_halt(i64 %many237325)                                 ; call prim_halt
  %sym237328 = add i64 0, 0                                                          ; quoted ()
  %cloptr246814 = inttoptr i64 %fail237323 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr246815 = getelementptr inbounds i64, i64* %cloptr246814, i64 0               ; &cloptr246814[0]
  %f246817 = load i64, i64* %i0ptr246815, align 8                                    ; load; *i0ptr246815
  %fptr246816 = inttoptr i64 %f246817 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr246816(i64 %fail237323, i64 %sym237328)             ; tail call
  ret void
}


define void @lam243493(i64 %env243494, i64 %rvp237307) {
  %envptr246818 = inttoptr i64 %env243494 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr246819 = getelementptr inbounds i64, i64* %envptr246818, i64 7              ; &envptr246818[7]
  %cont234139 = load i64, i64* %envptr246819, align 8                                ; load; *envptr246819
  %envptr246820 = inttoptr i64 %env243494 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr246821 = getelementptr inbounds i64, i64* %envptr246820, i64 6              ; &envptr246820[6]
  %y233698233878 = load i64, i64* %envptr246821, align 8                             ; load; *envptr246821
  %envptr246822 = inttoptr i64 %env243494 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr246823 = getelementptr inbounds i64, i64* %envptr246822, i64 5              ; &envptr246822[5]
  %_37drop233642233818 = load i64, i64* %envptr246823, align 8                       ; load; *envptr246823
  %envptr246824 = inttoptr i64 %env243494 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr246825 = getelementptr inbounds i64, i64* %envptr246824, i64 4              ; &envptr246824[4]
  %_37_62233638233814 = load i64, i64* %envptr246825, align 8                        ; load; *envptr246825
  %envptr246826 = inttoptr i64 %env243494 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr246827 = getelementptr inbounds i64, i64* %envptr246826, i64 3              ; &envptr246826[3]
  %ly233700233880 = load i64, i64* %envptr246827, align 8                            ; load; *envptr246827
  %envptr246828 = inttoptr i64 %env243494 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr246829 = getelementptr inbounds i64, i64* %envptr246828, i64 2              ; &envptr246828[2]
  %lx233699233879 = load i64, i64* %envptr246829, align 8                            ; load; *envptr246829
  %envptr246830 = inttoptr i64 %env243494 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr246831 = getelementptr inbounds i64, i64* %envptr246830, i64 1              ; &envptr246830[1]
  %a234029 = load i64, i64* %envptr246831, align 8                                   ; load; *envptr246831
  %check237308 = call i64 @prim_null_63(i64 %rvp237307)                              ; call prim_null_63
  %cmp246832 = icmp eq i64 %check237308, 15                                          ; false?
  br i1 %cmp246832, label %else246834, label %then246833                             ; if

then246833:
  %msg237312 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str246835, i32 0, i32 0)); quoted string
  %abort237310 = call i64 @prim_halt(i64 %msg237312)                                 ; call prim_halt
  %sym237315 = add i64 0, 0                                                          ; quoted ()
  %cloptr246836 = inttoptr i64 %abort237310 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr246837 = getelementptr inbounds i64, i64* %cloptr246836, i64 0               ; &cloptr246836[0]
  %f246839 = load i64, i64* %i0ptr246837, align 8                                    ; load; *i0ptr246837
  %fptr246838 = inttoptr i64 %f246839 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr246838(i64 %abort237310, i64 %sym237315)            ; tail call
  ret void

else246834:
  %_95234149 = call i64 @prim_car(i64 %rvp237307)                                    ; call prim_car
  %rvp237297 = call i64 @prim_cdr(i64 %rvp237307)                                    ; call prim_cdr
  %check237298 = call i64 @prim_null_63(i64 %rvp237297)                              ; call prim_null_63
  %cmp246840 = icmp eq i64 %check237298, 15                                          ; false?
  br i1 %cmp246840, label %else246842, label %then246841                             ; if

then246841:
  %msg237302 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str246843, i32 0, i32 0)); quoted string
  %abort237300 = call i64 @prim_halt(i64 %msg237302)                                 ; call prim_halt
  %sym237305 = add i64 0, 0                                                          ; quoted ()
  %cloptr246844 = inttoptr i64 %abort237300 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr246845 = getelementptr inbounds i64, i64* %cloptr246844, i64 0               ; &cloptr246844[0]
  %f246847 = load i64, i64* %i0ptr246845, align 8                                    ; load; *i0ptr246845
  %fptr246846 = inttoptr i64 %f246847 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr246846(i64 %abort237300, i64 %sym237305)            ; tail call
  ret void

else246842:
  %rest237304 = call i64 @prim_cdr(i64 %rvp237297)                                   ; call prim_cdr
  %empty237299 = call i64 @prim_null_63(i64 %rest237304)                             ; call prim_null_63
  %cmp246848 = icmp eq i64 %empty237299, 15                                          ; false?
  br i1 %cmp246848, label %else246850, label %then246849                             ; if

then246849:
  %a234032 = call i64 @prim_car(i64 %rvp237297)                                      ; call prim_car
  %na237214 = call i64 @prim_cdr(i64 %rvp237297)                                     ; call prim_cdr
  %cloptr246851 = call i64* @alloc(i64 64)                                           ; malloc
  %eptr246853 = getelementptr inbounds i64, i64* %cloptr246851, i64 1                ; &eptr246853[1]
  %eptr246854 = getelementptr inbounds i64, i64* %cloptr246851, i64 2                ; &eptr246854[2]
  %eptr246855 = getelementptr inbounds i64, i64* %cloptr246851, i64 3                ; &eptr246855[3]
  %eptr246856 = getelementptr inbounds i64, i64* %cloptr246851, i64 4                ; &eptr246856[4]
  %eptr246857 = getelementptr inbounds i64, i64* %cloptr246851, i64 5                ; &eptr246857[5]
  %eptr246858 = getelementptr inbounds i64, i64* %cloptr246851, i64 6                ; &eptr246858[6]
  %eptr246859 = getelementptr inbounds i64, i64* %cloptr246851, i64 7                ; &eptr246859[7]
  store i64 %a234029, i64* %eptr246853                                               ; *eptr246853 = %a234029
  store i64 %lx233699233879, i64* %eptr246854                                        ; *eptr246854 = %lx233699233879
  store i64 %ly233700233880, i64* %eptr246855                                        ; *eptr246855 = %ly233700233880
  store i64 %_37drop233642233818, i64* %eptr246856                                   ; *eptr246856 = %_37drop233642233818
  store i64 %y233698233878, i64* %eptr246857                                         ; *eptr246857 = %y233698233878
  store i64 %a234032, i64* %eptr246858                                               ; *eptr246858 = %a234032
  store i64 %cont234139, i64* %eptr246859                                            ; *eptr246859 = %cont234139
  %eptr246852 = getelementptr inbounds i64, i64* %cloptr246851, i64 0                ; &cloptr246851[0]
  %f246860 = ptrtoint void(i64,i64)* @lam243489 to i64                               ; fptr cast; i64(...)* -> i64
  store i64 %f246860, i64* %eptr246852                                               ; store fptr
  %arg234779 = ptrtoint i64* %cloptr246851 to i64                                    ; closure cast; i64* -> i64
  %sym237293 = add i64 0, 0                                                          ; quoted ()
  %x237294 = call i64 @prim_cons(i64 %lx233699233879, i64 %sym237293)                ; call prim_cons
  %x237295 = call i64 @prim_cons(i64 %ly233700233880, i64 %x237294)                  ; call prim_cons
  %x237296 = call i64 @prim_cons(i64 %arg234779, i64 %x237295)                       ; call prim_cons
  %cloptr246861 = inttoptr i64 %_37_62233638233814 to i64*                           ; closure/env cast; i64 -> i64*
  %i0ptr246862 = getelementptr inbounds i64, i64* %cloptr246861, i64 0               ; &cloptr246861[0]
  %f246864 = load i64, i64* %i0ptr246862, align 8                                    ; load; *i0ptr246862
  %fptr246863 = inttoptr i64 %f246864 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr246863(i64 %_37_62233638233814, i64 %x237296)       ; tail call
  ret void

else246850:
  %many237303 = call i64 @const_init_string(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @str246865, i32 0, i32 0)); quoted string
  %fail237301 = call i64 @prim_halt(i64 %many237303)                                 ; call prim_halt
  %sym237306 = add i64 0, 0                                                          ; quoted ()
  %cloptr246866 = inttoptr i64 %fail237301 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr246867 = getelementptr inbounds i64, i64* %cloptr246866, i64 0               ; &cloptr246866[0]
  %f246869 = load i64, i64* %i0ptr246867, align 8                                    ; load; *i0ptr246867
  %fptr246868 = inttoptr i64 %f246869 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr246868(i64 %fail237301, i64 %sym237306)             ; tail call
  ret void
}


define void @lam243489(i64 %env243490, i64 %rvp237284) {
  %envptr246870 = inttoptr i64 %env243490 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr246871 = getelementptr inbounds i64, i64* %envptr246870, i64 7              ; &envptr246870[7]
  %cont234139 = load i64, i64* %envptr246871, align 8                                ; load; *envptr246871
  %envptr246872 = inttoptr i64 %env243490 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr246873 = getelementptr inbounds i64, i64* %envptr246872, i64 6              ; &envptr246872[6]
  %a234032 = load i64, i64* %envptr246873, align 8                                   ; load; *envptr246873
  %envptr246874 = inttoptr i64 %env243490 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr246875 = getelementptr inbounds i64, i64* %envptr246874, i64 5              ; &envptr246874[5]
  %y233698233878 = load i64, i64* %envptr246875, align 8                             ; load; *envptr246875
  %envptr246876 = inttoptr i64 %env243490 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr246877 = getelementptr inbounds i64, i64* %envptr246876, i64 4              ; &envptr246876[4]
  %_37drop233642233818 = load i64, i64* %envptr246877, align 8                       ; load; *envptr246877
  %envptr246878 = inttoptr i64 %env243490 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr246879 = getelementptr inbounds i64, i64* %envptr246878, i64 3              ; &envptr246878[3]
  %ly233700233880 = load i64, i64* %envptr246879, align 8                            ; load; *envptr246879
  %envptr246880 = inttoptr i64 %env243490 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr246881 = getelementptr inbounds i64, i64* %envptr246880, i64 2              ; &envptr246880[2]
  %lx233699233879 = load i64, i64* %envptr246881, align 8                            ; load; *envptr246881
  %envptr246882 = inttoptr i64 %env243490 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr246883 = getelementptr inbounds i64, i64* %envptr246882, i64 1              ; &envptr246882[1]
  %a234029 = load i64, i64* %envptr246883, align 8                                   ; load; *envptr246883
  %check237285 = call i64 @prim_null_63(i64 %rvp237284)                              ; call prim_null_63
  %cmp246884 = icmp eq i64 %check237285, 15                                          ; false?
  br i1 %cmp246884, label %else246886, label %then246885                             ; if

then246885:
  %msg237289 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str246887, i32 0, i32 0)); quoted string
  %abort237287 = call i64 @prim_halt(i64 %msg237289)                                 ; call prim_halt
  %sym237292 = add i64 0, 0                                                          ; quoted ()
  %cloptr246888 = inttoptr i64 %abort237287 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr246889 = getelementptr inbounds i64, i64* %cloptr246888, i64 0               ; &cloptr246888[0]
  %f246891 = load i64, i64* %i0ptr246889, align 8                                    ; load; *i0ptr246889
  %fptr246890 = inttoptr i64 %f246891 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr246890(i64 %abort237287, i64 %sym237292)            ; tail call
  ret void

else246886:
  %_95234150 = call i64 @prim_car(i64 %rvp237284)                                    ; call prim_car
  %rvp237274 = call i64 @prim_cdr(i64 %rvp237284)                                    ; call prim_cdr
  %check237275 = call i64 @prim_null_63(i64 %rvp237274)                              ; call prim_null_63
  %cmp246892 = icmp eq i64 %check237275, 15                                          ; false?
  br i1 %cmp246892, label %else246894, label %then246893                             ; if

then246893:
  %msg237279 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str246895, i32 0, i32 0)); quoted string
  %abort237277 = call i64 @prim_halt(i64 %msg237279)                                 ; call prim_halt
  %sym237282 = add i64 0, 0                                                          ; quoted ()
  %cloptr246896 = inttoptr i64 %abort237277 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr246897 = getelementptr inbounds i64, i64* %cloptr246896, i64 0               ; &cloptr246896[0]
  %f246899 = load i64, i64* %i0ptr246897, align 8                                    ; load; *i0ptr246897
  %fptr246898 = inttoptr i64 %f246899 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr246898(i64 %abort237277, i64 %sym237282)            ; tail call
  ret void

else246894:
  %rest237281 = call i64 @prim_cdr(i64 %rvp237274)                                   ; call prim_cdr
  %empty237276 = call i64 @prim_null_63(i64 %rest237281)                             ; call prim_null_63
  %cmp246900 = icmp eq i64 %empty237276, 15                                          ; false?
  br i1 %cmp246900, label %else246902, label %then246901                             ; if

then246901:
  %a234033 = call i64 @prim_car(i64 %rvp237274)                                      ; call prim_car
  %na237216 = call i64 @prim_cdr(i64 %rvp237274)                                     ; call prim_cdr
  %cmp246903 = icmp eq i64 %a234033, 15                                              ; false?
  br i1 %cmp246903, label %else246905, label %then246904                             ; if

then246904:
  %a234034 = call i64 @prim__45(i64 %ly233700233880, i64 %lx233699233879)            ; call prim__45
  %cloptr246906 = call i64* @alloc(i64 32)                                           ; malloc
  %eptr246908 = getelementptr inbounds i64, i64* %cloptr246906, i64 1                ; &eptr246908[1]
  %eptr246909 = getelementptr inbounds i64, i64* %cloptr246906, i64 2                ; &eptr246909[2]
  %eptr246910 = getelementptr inbounds i64, i64* %cloptr246906, i64 3                ; &eptr246910[3]
  store i64 %a234029, i64* %eptr246908                                               ; *eptr246908 = %a234029
  store i64 %a234032, i64* %eptr246909                                               ; *eptr246909 = %a234032
  store i64 %cont234139, i64* %eptr246910                                            ; *eptr246910 = %cont234139
  %eptr246907 = getelementptr inbounds i64, i64* %cloptr246906, i64 0                ; &cloptr246906[0]
  %f246911 = ptrtoint void(i64,i64)* @lam243474 to i64                               ; fptr cast; i64(...)* -> i64
  store i64 %f246911, i64* %eptr246907                                               ; store fptr
  %arg234785 = ptrtoint i64* %cloptr246906 to i64                                    ; closure cast; i64* -> i64
  %sym237242 = add i64 0, 0                                                          ; quoted ()
  %x237243 = call i64 @prim_cons(i64 %a234034, i64 %sym237242)                       ; call prim_cons
  %x237244 = call i64 @prim_cons(i64 %y233698233878, i64 %x237243)                   ; call prim_cons
  %x237245 = call i64 @prim_cons(i64 %arg234785, i64 %x237244)                       ; call prim_cons
  %cloptr246912 = inttoptr i64 %_37drop233642233818 to i64*                          ; closure/env cast; i64 -> i64*
  %i0ptr246913 = getelementptr inbounds i64, i64* %cloptr246912, i64 0               ; &cloptr246912[0]
  %f246915 = load i64, i64* %i0ptr246913, align 8                                    ; load; *i0ptr246913
  %fptr246914 = inttoptr i64 %f246915 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr246914(i64 %_37drop233642233818, i64 %x237245)      ; tail call
  ret void

else246905:
  %cloptr246916 = call i64* @alloc(i64 32)                                           ; malloc
  %eptr246918 = getelementptr inbounds i64, i64* %cloptr246916, i64 1                ; &eptr246918[1]
  %eptr246919 = getelementptr inbounds i64, i64* %cloptr246916, i64 2                ; &eptr246919[2]
  %eptr246920 = getelementptr inbounds i64, i64* %cloptr246916, i64 3                ; &eptr246920[3]
  store i64 %a234029, i64* %eptr246918                                               ; *eptr246918 = %a234029
  store i64 %a234032, i64* %eptr246919                                               ; *eptr246919 = %a234032
  store i64 %cont234139, i64* %eptr246920                                            ; *eptr246920 = %cont234139
  %eptr246917 = getelementptr inbounds i64, i64* %cloptr246916, i64 0                ; &cloptr246916[0]
  %f246921 = ptrtoint void(i64,i64)* @lam243485 to i64                               ; fptr cast; i64(...)* -> i64
  store i64 %f246921, i64* %eptr246917                                               ; store fptr
  %arg234793 = ptrtoint i64* %cloptr246916 to i64                                    ; closure cast; i64* -> i64
  %arg234792 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %sym237271 = add i64 0, 0                                                          ; quoted ()
  %x237272 = call i64 @prim_cons(i64 %y233698233878, i64 %sym237271)                 ; call prim_cons
  %x237273 = call i64 @prim_cons(i64 %arg234792, i64 %x237272)                       ; call prim_cons
  %cloptr246922 = inttoptr i64 %arg234793 to i64*                                    ; closure/env cast; i64 -> i64*
  %i0ptr246923 = getelementptr inbounds i64, i64* %cloptr246922, i64 0               ; &cloptr246922[0]
  %f246925 = load i64, i64* %i0ptr246923, align 8                                    ; load; *i0ptr246923
  %fptr246924 = inttoptr i64 %f246925 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr246924(i64 %arg234793, i64 %x237273)                ; tail call
  ret void

else246902:
  %many237280 = call i64 @const_init_string(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @str246926, i32 0, i32 0)); quoted string
  %fail237278 = call i64 @prim_halt(i64 %many237280)                                 ; call prim_halt
  %sym237283 = add i64 0, 0                                                          ; quoted ()
  %cloptr246927 = inttoptr i64 %fail237278 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr246928 = getelementptr inbounds i64, i64* %cloptr246927, i64 0               ; &cloptr246927[0]
  %f246930 = load i64, i64* %i0ptr246928, align 8                                    ; load; *i0ptr246928
  %fptr246929 = inttoptr i64 %f246930 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr246929(i64 %fail237278, i64 %sym237283)             ; tail call
  ret void
}


define void @lam243485(i64 %env243486, i64 %rvp237262) {
  %envptr246931 = inttoptr i64 %env243486 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr246932 = getelementptr inbounds i64, i64* %envptr246931, i64 3              ; &envptr246931[3]
  %cont234139 = load i64, i64* %envptr246932, align 8                                ; load; *envptr246932
  %envptr246933 = inttoptr i64 %env243486 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr246934 = getelementptr inbounds i64, i64* %envptr246933, i64 2              ; &envptr246933[2]
  %a234032 = load i64, i64* %envptr246934, align 8                                   ; load; *envptr246934
  %envptr246935 = inttoptr i64 %env243486 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr246936 = getelementptr inbounds i64, i64* %envptr246935, i64 1              ; &envptr246935[1]
  %a234029 = load i64, i64* %envptr246936, align 8                                   ; load; *envptr246936
  %check237263 = call i64 @prim_null_63(i64 %rvp237262)                              ; call prim_null_63
  %cmp246937 = icmp eq i64 %check237263, 15                                          ; false?
  br i1 %cmp246937, label %else246939, label %then246938                             ; if

then246938:
  %msg237267 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str246940, i32 0, i32 0)); quoted string
  %abort237265 = call i64 @prim_halt(i64 %msg237267)                                 ; call prim_halt
  %sym237270 = add i64 0, 0                                                          ; quoted ()
  %cloptr246941 = inttoptr i64 %abort237265 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr246942 = getelementptr inbounds i64, i64* %cloptr246941, i64 0               ; &cloptr246941[0]
  %f246944 = load i64, i64* %i0ptr246942, align 8                                    ; load; *i0ptr246942
  %fptr246943 = inttoptr i64 %f246944 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr246943(i64 %abort237265, i64 %sym237270)            ; tail call
  ret void

else246939:
  %_95234151 = call i64 @prim_car(i64 %rvp237262)                                    ; call prim_car
  %rvp237252 = call i64 @prim_cdr(i64 %rvp237262)                                    ; call prim_cdr
  %check237253 = call i64 @prim_null_63(i64 %rvp237252)                              ; call prim_null_63
  %cmp246945 = icmp eq i64 %check237253, 15                                          ; false?
  br i1 %cmp246945, label %else246947, label %then246946                             ; if

then246946:
  %msg237257 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str246948, i32 0, i32 0)); quoted string
  %abort237255 = call i64 @prim_halt(i64 %msg237257)                                 ; call prim_halt
  %sym237260 = add i64 0, 0                                                          ; quoted ()
  %cloptr246949 = inttoptr i64 %abort237255 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr246950 = getelementptr inbounds i64, i64* %cloptr246949, i64 0               ; &cloptr246949[0]
  %f246952 = load i64, i64* %i0ptr246950, align 8                                    ; load; *i0ptr246950
  %fptr246951 = inttoptr i64 %f246952 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr246951(i64 %abort237255, i64 %sym237260)            ; tail call
  ret void

else246947:
  %rest237259 = call i64 @prim_cdr(i64 %rvp237252)                                   ; call prim_cdr
  %empty237254 = call i64 @prim_null_63(i64 %rest237259)                             ; call prim_null_63
  %cmp246953 = icmp eq i64 %empty237254, 15                                          ; false?
  br i1 %cmp246953, label %else246955, label %then246954                             ; if

then246954:
  %a234035 = call i64 @prim_car(i64 %rvp237252)                                      ; call prim_car
  %na237247 = call i64 @prim_cdr(i64 %rvp237252)                                     ; call prim_cdr
  %sym237248 = add i64 0, 0                                                          ; quoted ()
  %x237249 = call i64 @prim_cons(i64 %a234035, i64 %sym237248)                       ; call prim_cons
  %x237250 = call i64 @prim_cons(i64 %a234032, i64 %x237249)                         ; call prim_cons
  %x237251 = call i64 @prim_cons(i64 %cont234139, i64 %x237250)                      ; call prim_cons
  %cloptr246956 = inttoptr i64 %a234029 to i64*                                      ; closure/env cast; i64 -> i64*
  %i0ptr246957 = getelementptr inbounds i64, i64* %cloptr246956, i64 0               ; &cloptr246956[0]
  %f246959 = load i64, i64* %i0ptr246957, align 8                                    ; load; *i0ptr246957
  %fptr246958 = inttoptr i64 %f246959 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr246958(i64 %a234029, i64 %x237251)                  ; tail call
  ret void

else246955:
  %many237258 = call i64 @const_init_string(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @str246960, i32 0, i32 0)); quoted string
  %fail237256 = call i64 @prim_halt(i64 %many237258)                                 ; call prim_halt
  %sym237261 = add i64 0, 0                                                          ; quoted ()
  %cloptr246961 = inttoptr i64 %fail237256 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr246962 = getelementptr inbounds i64, i64* %cloptr246961, i64 0               ; &cloptr246961[0]
  %f246964 = load i64, i64* %i0ptr246962, align 8                                    ; load; *i0ptr246962
  %fptr246963 = inttoptr i64 %f246964 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr246963(i64 %fail237256, i64 %sym237261)             ; tail call
  ret void
}


define void @lam243474(i64 %env243475, i64 %rvp237233) {
  %envptr246965 = inttoptr i64 %env243475 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr246966 = getelementptr inbounds i64, i64* %envptr246965, i64 3              ; &envptr246965[3]
  %cont234139 = load i64, i64* %envptr246966, align 8                                ; load; *envptr246966
  %envptr246967 = inttoptr i64 %env243475 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr246968 = getelementptr inbounds i64, i64* %envptr246967, i64 2              ; &envptr246967[2]
  %a234032 = load i64, i64* %envptr246968, align 8                                   ; load; *envptr246968
  %envptr246969 = inttoptr i64 %env243475 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr246970 = getelementptr inbounds i64, i64* %envptr246969, i64 1              ; &envptr246969[1]
  %a234029 = load i64, i64* %envptr246970, align 8                                   ; load; *envptr246970
  %check237234 = call i64 @prim_null_63(i64 %rvp237233)                              ; call prim_null_63
  %cmp246971 = icmp eq i64 %check237234, 15                                          ; false?
  br i1 %cmp246971, label %else246973, label %then246972                             ; if

then246972:
  %msg237238 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str246974, i32 0, i32 0)); quoted string
  %abort237236 = call i64 @prim_halt(i64 %msg237238)                                 ; call prim_halt
  %sym237241 = add i64 0, 0                                                          ; quoted ()
  %cloptr246975 = inttoptr i64 %abort237236 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr246976 = getelementptr inbounds i64, i64* %cloptr246975, i64 0               ; &cloptr246975[0]
  %f246978 = load i64, i64* %i0ptr246976, align 8                                    ; load; *i0ptr246976
  %fptr246977 = inttoptr i64 %f246978 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr246977(i64 %abort237236, i64 %sym237241)            ; tail call
  ret void

else246973:
  %_95234151 = call i64 @prim_car(i64 %rvp237233)                                    ; call prim_car
  %rvp237223 = call i64 @prim_cdr(i64 %rvp237233)                                    ; call prim_cdr
  %check237224 = call i64 @prim_null_63(i64 %rvp237223)                              ; call prim_null_63
  %cmp246979 = icmp eq i64 %check237224, 15                                          ; false?
  br i1 %cmp246979, label %else246981, label %then246980                             ; if

then246980:
  %msg237228 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str246982, i32 0, i32 0)); quoted string
  %abort237226 = call i64 @prim_halt(i64 %msg237228)                                 ; call prim_halt
  %sym237231 = add i64 0, 0                                                          ; quoted ()
  %cloptr246983 = inttoptr i64 %abort237226 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr246984 = getelementptr inbounds i64, i64* %cloptr246983, i64 0               ; &cloptr246983[0]
  %f246986 = load i64, i64* %i0ptr246984, align 8                                    ; load; *i0ptr246984
  %fptr246985 = inttoptr i64 %f246986 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr246985(i64 %abort237226, i64 %sym237231)            ; tail call
  ret void

else246981:
  %rest237230 = call i64 @prim_cdr(i64 %rvp237223)                                   ; call prim_cdr
  %empty237225 = call i64 @prim_null_63(i64 %rest237230)                             ; call prim_null_63
  %cmp246987 = icmp eq i64 %empty237225, 15                                          ; false?
  br i1 %cmp246987, label %else246989, label %then246988                             ; if

then246988:
  %a234035 = call i64 @prim_car(i64 %rvp237223)                                      ; call prim_car
  %na237218 = call i64 @prim_cdr(i64 %rvp237223)                                     ; call prim_cdr
  %sym237219 = add i64 0, 0                                                          ; quoted ()
  %x237220 = call i64 @prim_cons(i64 %a234035, i64 %sym237219)                       ; call prim_cons
  %x237221 = call i64 @prim_cons(i64 %a234032, i64 %x237220)                         ; call prim_cons
  %x237222 = call i64 @prim_cons(i64 %cont234139, i64 %x237221)                      ; call prim_cons
  %cloptr246990 = inttoptr i64 %a234029 to i64*                                      ; closure/env cast; i64 -> i64*
  %i0ptr246991 = getelementptr inbounds i64, i64* %cloptr246990, i64 0               ; &cloptr246990[0]
  %f246993 = load i64, i64* %i0ptr246991, align 8                                    ; load; *i0ptr246991
  %fptr246992 = inttoptr i64 %f246993 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr246992(i64 %a234029, i64 %x237222)                  ; tail call
  ret void

else246989:
  %many237229 = call i64 @const_init_string(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @str246994, i32 0, i32 0)); quoted string
  %fail237227 = call i64 @prim_halt(i64 %many237229)                                 ; call prim_halt
  %sym237232 = add i64 0, 0                                                          ; quoted ()
  %cloptr246995 = inttoptr i64 %fail237227 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr246996 = getelementptr inbounds i64, i64* %cloptr246995, i64 0               ; &cloptr246995[0]
  %f246998 = load i64, i64* %i0ptr246996, align 8                                    ; load; *i0ptr246996
  %fptr246997 = inttoptr i64 %f246998 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr246997(i64 %fail237227, i64 %sym237232)             ; tail call
  ret void
}


define void @lam243453(i64 %env243454, i64 %rvp237200) {
  %envptr246999 = inttoptr i64 %env243454 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr247000 = getelementptr inbounds i64, i64* %envptr246999, i64 7              ; &envptr246999[7]
  %cont234139 = load i64, i64* %envptr247000, align 8                                ; load; *envptr247000
  %envptr247001 = inttoptr i64 %env243454 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr247002 = getelementptr inbounds i64, i64* %envptr247001, i64 6              ; &envptr247001[6]
  %y233698233878 = load i64, i64* %envptr247002, align 8                             ; load; *envptr247002
  %envptr247003 = inttoptr i64 %env243454 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr247004 = getelementptr inbounds i64, i64* %envptr247003, i64 5              ; &envptr247003[5]
  %_37drop233642233818 = load i64, i64* %envptr247004, align 8                       ; load; *envptr247004
  %envptr247005 = inttoptr i64 %env243454 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr247006 = getelementptr inbounds i64, i64* %envptr247005, i64 4              ; &envptr247005[4]
  %_37_62233638233814 = load i64, i64* %envptr247006, align 8                        ; load; *envptr247006
  %envptr247007 = inttoptr i64 %env243454 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr247008 = getelementptr inbounds i64, i64* %envptr247007, i64 3              ; &envptr247007[3]
  %ly233700233880 = load i64, i64* %envptr247008, align 8                            ; load; *envptr247008
  %envptr247009 = inttoptr i64 %env243454 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr247010 = getelementptr inbounds i64, i64* %envptr247009, i64 2              ; &envptr247009[2]
  %lx233699233879 = load i64, i64* %envptr247010, align 8                            ; load; *envptr247010
  %envptr247011 = inttoptr i64 %env243454 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr247012 = getelementptr inbounds i64, i64* %envptr247011, i64 1              ; &envptr247011[1]
  %a234029 = load i64, i64* %envptr247012, align 8                                   ; load; *envptr247012
  %check237201 = call i64 @prim_null_63(i64 %rvp237200)                              ; call prim_null_63
  %cmp247013 = icmp eq i64 %check237201, 15                                          ; false?
  br i1 %cmp247013, label %else247015, label %then247014                             ; if

then247014:
  %msg237205 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str247016, i32 0, i32 0)); quoted string
  %abort237203 = call i64 @prim_halt(i64 %msg237205)                                 ; call prim_halt
  %sym237208 = add i64 0, 0                                                          ; quoted ()
  %cloptr247017 = inttoptr i64 %abort237203 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr247018 = getelementptr inbounds i64, i64* %cloptr247017, i64 0               ; &cloptr247017[0]
  %f247020 = load i64, i64* %i0ptr247018, align 8                                    ; load; *i0ptr247018
  %fptr247019 = inttoptr i64 %f247020 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr247019(i64 %abort237203, i64 %sym237208)            ; tail call
  ret void

else247015:
  %_95234149 = call i64 @prim_car(i64 %rvp237200)                                    ; call prim_car
  %rvp237190 = call i64 @prim_cdr(i64 %rvp237200)                                    ; call prim_cdr
  %check237191 = call i64 @prim_null_63(i64 %rvp237190)                              ; call prim_null_63
  %cmp247021 = icmp eq i64 %check237191, 15                                          ; false?
  br i1 %cmp247021, label %else247023, label %then247022                             ; if

then247022:
  %msg237195 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str247024, i32 0, i32 0)); quoted string
  %abort237193 = call i64 @prim_halt(i64 %msg237195)                                 ; call prim_halt
  %sym237198 = add i64 0, 0                                                          ; quoted ()
  %cloptr247025 = inttoptr i64 %abort237193 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr247026 = getelementptr inbounds i64, i64* %cloptr247025, i64 0               ; &cloptr247025[0]
  %f247028 = load i64, i64* %i0ptr247026, align 8                                    ; load; *i0ptr247026
  %fptr247027 = inttoptr i64 %f247028 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr247027(i64 %abort237193, i64 %sym237198)            ; tail call
  ret void

else247023:
  %rest237197 = call i64 @prim_cdr(i64 %rvp237190)                                   ; call prim_cdr
  %empty237192 = call i64 @prim_null_63(i64 %rest237197)                             ; call prim_null_63
  %cmp247029 = icmp eq i64 %empty237192, 15                                          ; false?
  br i1 %cmp247029, label %else247031, label %then247030                             ; if

then247030:
  %a234032 = call i64 @prim_car(i64 %rvp237190)                                      ; call prim_car
  %na237107 = call i64 @prim_cdr(i64 %rvp237190)                                     ; call prim_cdr
  %cloptr247032 = call i64* @alloc(i64 64)                                           ; malloc
  %eptr247034 = getelementptr inbounds i64, i64* %cloptr247032, i64 1                ; &eptr247034[1]
  %eptr247035 = getelementptr inbounds i64, i64* %cloptr247032, i64 2                ; &eptr247035[2]
  %eptr247036 = getelementptr inbounds i64, i64* %cloptr247032, i64 3                ; &eptr247036[3]
  %eptr247037 = getelementptr inbounds i64, i64* %cloptr247032, i64 4                ; &eptr247037[4]
  %eptr247038 = getelementptr inbounds i64, i64* %cloptr247032, i64 5                ; &eptr247038[5]
  %eptr247039 = getelementptr inbounds i64, i64* %cloptr247032, i64 6                ; &eptr247039[6]
  %eptr247040 = getelementptr inbounds i64, i64* %cloptr247032, i64 7                ; &eptr247040[7]
  store i64 %a234029, i64* %eptr247034                                               ; *eptr247034 = %a234029
  store i64 %lx233699233879, i64* %eptr247035                                        ; *eptr247035 = %lx233699233879
  store i64 %ly233700233880, i64* %eptr247036                                        ; *eptr247036 = %ly233700233880
  store i64 %_37drop233642233818, i64* %eptr247037                                   ; *eptr247037 = %_37drop233642233818
  store i64 %y233698233878, i64* %eptr247038                                         ; *eptr247038 = %y233698233878
  store i64 %a234032, i64* %eptr247039                                               ; *eptr247039 = %a234032
  store i64 %cont234139, i64* %eptr247040                                            ; *eptr247040 = %cont234139
  %eptr247033 = getelementptr inbounds i64, i64* %cloptr247032, i64 0                ; &cloptr247032[0]
  %f247041 = ptrtoint void(i64,i64)* @lam243449 to i64                               ; fptr cast; i64(...)* -> i64
  store i64 %f247041, i64* %eptr247033                                               ; store fptr
  %arg234755 = ptrtoint i64* %cloptr247032 to i64                                    ; closure cast; i64* -> i64
  %sym237186 = add i64 0, 0                                                          ; quoted ()
  %x237187 = call i64 @prim_cons(i64 %lx233699233879, i64 %sym237186)                ; call prim_cons
  %x237188 = call i64 @prim_cons(i64 %ly233700233880, i64 %x237187)                  ; call prim_cons
  %x237189 = call i64 @prim_cons(i64 %arg234755, i64 %x237188)                       ; call prim_cons
  %cloptr247042 = inttoptr i64 %_37_62233638233814 to i64*                           ; closure/env cast; i64 -> i64*
  %i0ptr247043 = getelementptr inbounds i64, i64* %cloptr247042, i64 0               ; &cloptr247042[0]
  %f247045 = load i64, i64* %i0ptr247043, align 8                                    ; load; *i0ptr247043
  %fptr247044 = inttoptr i64 %f247045 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr247044(i64 %_37_62233638233814, i64 %x237189)       ; tail call
  ret void

else247031:
  %many237196 = call i64 @const_init_string(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @str247046, i32 0, i32 0)); quoted string
  %fail237194 = call i64 @prim_halt(i64 %many237196)                                 ; call prim_halt
  %sym237199 = add i64 0, 0                                                          ; quoted ()
  %cloptr247047 = inttoptr i64 %fail237194 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr247048 = getelementptr inbounds i64, i64* %cloptr247047, i64 0               ; &cloptr247047[0]
  %f247050 = load i64, i64* %i0ptr247048, align 8                                    ; load; *i0ptr247048
  %fptr247049 = inttoptr i64 %f247050 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr247049(i64 %fail237194, i64 %sym237199)             ; tail call
  ret void
}


define void @lam243449(i64 %env243450, i64 %rvp237177) {
  %envptr247051 = inttoptr i64 %env243450 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr247052 = getelementptr inbounds i64, i64* %envptr247051, i64 7              ; &envptr247051[7]
  %cont234139 = load i64, i64* %envptr247052, align 8                                ; load; *envptr247052
  %envptr247053 = inttoptr i64 %env243450 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr247054 = getelementptr inbounds i64, i64* %envptr247053, i64 6              ; &envptr247053[6]
  %a234032 = load i64, i64* %envptr247054, align 8                                   ; load; *envptr247054
  %envptr247055 = inttoptr i64 %env243450 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr247056 = getelementptr inbounds i64, i64* %envptr247055, i64 5              ; &envptr247055[5]
  %y233698233878 = load i64, i64* %envptr247056, align 8                             ; load; *envptr247056
  %envptr247057 = inttoptr i64 %env243450 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr247058 = getelementptr inbounds i64, i64* %envptr247057, i64 4              ; &envptr247057[4]
  %_37drop233642233818 = load i64, i64* %envptr247058, align 8                       ; load; *envptr247058
  %envptr247059 = inttoptr i64 %env243450 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr247060 = getelementptr inbounds i64, i64* %envptr247059, i64 3              ; &envptr247059[3]
  %ly233700233880 = load i64, i64* %envptr247060, align 8                            ; load; *envptr247060
  %envptr247061 = inttoptr i64 %env243450 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr247062 = getelementptr inbounds i64, i64* %envptr247061, i64 2              ; &envptr247061[2]
  %lx233699233879 = load i64, i64* %envptr247062, align 8                            ; load; *envptr247062
  %envptr247063 = inttoptr i64 %env243450 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr247064 = getelementptr inbounds i64, i64* %envptr247063, i64 1              ; &envptr247063[1]
  %a234029 = load i64, i64* %envptr247064, align 8                                   ; load; *envptr247064
  %check237178 = call i64 @prim_null_63(i64 %rvp237177)                              ; call prim_null_63
  %cmp247065 = icmp eq i64 %check237178, 15                                          ; false?
  br i1 %cmp247065, label %else247067, label %then247066                             ; if

then247066:
  %msg237182 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str247068, i32 0, i32 0)); quoted string
  %abort237180 = call i64 @prim_halt(i64 %msg237182)                                 ; call prim_halt
  %sym237185 = add i64 0, 0                                                          ; quoted ()
  %cloptr247069 = inttoptr i64 %abort237180 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr247070 = getelementptr inbounds i64, i64* %cloptr247069, i64 0               ; &cloptr247069[0]
  %f247072 = load i64, i64* %i0ptr247070, align 8                                    ; load; *i0ptr247070
  %fptr247071 = inttoptr i64 %f247072 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr247071(i64 %abort237180, i64 %sym237185)            ; tail call
  ret void

else247067:
  %_95234150 = call i64 @prim_car(i64 %rvp237177)                                    ; call prim_car
  %rvp237167 = call i64 @prim_cdr(i64 %rvp237177)                                    ; call prim_cdr
  %check237168 = call i64 @prim_null_63(i64 %rvp237167)                              ; call prim_null_63
  %cmp247073 = icmp eq i64 %check237168, 15                                          ; false?
  br i1 %cmp247073, label %else247075, label %then247074                             ; if

then247074:
  %msg237172 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str247076, i32 0, i32 0)); quoted string
  %abort237170 = call i64 @prim_halt(i64 %msg237172)                                 ; call prim_halt
  %sym237175 = add i64 0, 0                                                          ; quoted ()
  %cloptr247077 = inttoptr i64 %abort237170 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr247078 = getelementptr inbounds i64, i64* %cloptr247077, i64 0               ; &cloptr247077[0]
  %f247080 = load i64, i64* %i0ptr247078, align 8                                    ; load; *i0ptr247078
  %fptr247079 = inttoptr i64 %f247080 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr247079(i64 %abort237170, i64 %sym237175)            ; tail call
  ret void

else247075:
  %rest237174 = call i64 @prim_cdr(i64 %rvp237167)                                   ; call prim_cdr
  %empty237169 = call i64 @prim_null_63(i64 %rest237174)                             ; call prim_null_63
  %cmp247081 = icmp eq i64 %empty237169, 15                                          ; false?
  br i1 %cmp247081, label %else247083, label %then247082                             ; if

then247082:
  %a234033 = call i64 @prim_car(i64 %rvp237167)                                      ; call prim_car
  %na237109 = call i64 @prim_cdr(i64 %rvp237167)                                     ; call prim_cdr
  %cmp247084 = icmp eq i64 %a234033, 15                                              ; false?
  br i1 %cmp247084, label %else247086, label %then247085                             ; if

then247085:
  %a234034 = call i64 @prim__45(i64 %ly233700233880, i64 %lx233699233879)            ; call prim__45
  %cloptr247087 = call i64* @alloc(i64 32)                                           ; malloc
  %eptr247089 = getelementptr inbounds i64, i64* %cloptr247087, i64 1                ; &eptr247089[1]
  %eptr247090 = getelementptr inbounds i64, i64* %cloptr247087, i64 2                ; &eptr247090[2]
  %eptr247091 = getelementptr inbounds i64, i64* %cloptr247087, i64 3                ; &eptr247091[3]
  store i64 %a234029, i64* %eptr247089                                               ; *eptr247089 = %a234029
  store i64 %a234032, i64* %eptr247090                                               ; *eptr247090 = %a234032
  store i64 %cont234139, i64* %eptr247091                                            ; *eptr247091 = %cont234139
  %eptr247088 = getelementptr inbounds i64, i64* %cloptr247087, i64 0                ; &cloptr247087[0]
  %f247092 = ptrtoint void(i64,i64)* @lam243434 to i64                               ; fptr cast; i64(...)* -> i64
  store i64 %f247092, i64* %eptr247088                                               ; store fptr
  %arg234761 = ptrtoint i64* %cloptr247087 to i64                                    ; closure cast; i64* -> i64
  %sym237135 = add i64 0, 0                                                          ; quoted ()
  %x237136 = call i64 @prim_cons(i64 %a234034, i64 %sym237135)                       ; call prim_cons
  %x237137 = call i64 @prim_cons(i64 %y233698233878, i64 %x237136)                   ; call prim_cons
  %x237138 = call i64 @prim_cons(i64 %arg234761, i64 %x237137)                       ; call prim_cons
  %cloptr247093 = inttoptr i64 %_37drop233642233818 to i64*                          ; closure/env cast; i64 -> i64*
  %i0ptr247094 = getelementptr inbounds i64, i64* %cloptr247093, i64 0               ; &cloptr247093[0]
  %f247096 = load i64, i64* %i0ptr247094, align 8                                    ; load; *i0ptr247094
  %fptr247095 = inttoptr i64 %f247096 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr247095(i64 %_37drop233642233818, i64 %x237138)      ; tail call
  ret void

else247086:
  %cloptr247097 = call i64* @alloc(i64 32)                                           ; malloc
  %eptr247099 = getelementptr inbounds i64, i64* %cloptr247097, i64 1                ; &eptr247099[1]
  %eptr247100 = getelementptr inbounds i64, i64* %cloptr247097, i64 2                ; &eptr247100[2]
  %eptr247101 = getelementptr inbounds i64, i64* %cloptr247097, i64 3                ; &eptr247101[3]
  store i64 %a234029, i64* %eptr247099                                               ; *eptr247099 = %a234029
  store i64 %a234032, i64* %eptr247100                                               ; *eptr247100 = %a234032
  store i64 %cont234139, i64* %eptr247101                                            ; *eptr247101 = %cont234139
  %eptr247098 = getelementptr inbounds i64, i64* %cloptr247097, i64 0                ; &cloptr247097[0]
  %f247102 = ptrtoint void(i64,i64)* @lam243445 to i64                               ; fptr cast; i64(...)* -> i64
  store i64 %f247102, i64* %eptr247098                                               ; store fptr
  %arg234769 = ptrtoint i64* %cloptr247097 to i64                                    ; closure cast; i64* -> i64
  %arg234768 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %sym237164 = add i64 0, 0                                                          ; quoted ()
  %x237165 = call i64 @prim_cons(i64 %y233698233878, i64 %sym237164)                 ; call prim_cons
  %x237166 = call i64 @prim_cons(i64 %arg234768, i64 %x237165)                       ; call prim_cons
  %cloptr247103 = inttoptr i64 %arg234769 to i64*                                    ; closure/env cast; i64 -> i64*
  %i0ptr247104 = getelementptr inbounds i64, i64* %cloptr247103, i64 0               ; &cloptr247103[0]
  %f247106 = load i64, i64* %i0ptr247104, align 8                                    ; load; *i0ptr247104
  %fptr247105 = inttoptr i64 %f247106 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr247105(i64 %arg234769, i64 %x237166)                ; tail call
  ret void

else247083:
  %many237173 = call i64 @const_init_string(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @str247107, i32 0, i32 0)); quoted string
  %fail237171 = call i64 @prim_halt(i64 %many237173)                                 ; call prim_halt
  %sym237176 = add i64 0, 0                                                          ; quoted ()
  %cloptr247108 = inttoptr i64 %fail237171 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr247109 = getelementptr inbounds i64, i64* %cloptr247108, i64 0               ; &cloptr247108[0]
  %f247111 = load i64, i64* %i0ptr247109, align 8                                    ; load; *i0ptr247109
  %fptr247110 = inttoptr i64 %f247111 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr247110(i64 %fail237171, i64 %sym237176)             ; tail call
  ret void
}


define void @lam243445(i64 %env243446, i64 %rvp237155) {
  %envptr247112 = inttoptr i64 %env243446 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr247113 = getelementptr inbounds i64, i64* %envptr247112, i64 3              ; &envptr247112[3]
  %cont234139 = load i64, i64* %envptr247113, align 8                                ; load; *envptr247113
  %envptr247114 = inttoptr i64 %env243446 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr247115 = getelementptr inbounds i64, i64* %envptr247114, i64 2              ; &envptr247114[2]
  %a234032 = load i64, i64* %envptr247115, align 8                                   ; load; *envptr247115
  %envptr247116 = inttoptr i64 %env243446 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr247117 = getelementptr inbounds i64, i64* %envptr247116, i64 1              ; &envptr247116[1]
  %a234029 = load i64, i64* %envptr247117, align 8                                   ; load; *envptr247117
  %check237156 = call i64 @prim_null_63(i64 %rvp237155)                              ; call prim_null_63
  %cmp247118 = icmp eq i64 %check237156, 15                                          ; false?
  br i1 %cmp247118, label %else247120, label %then247119                             ; if

then247119:
  %msg237160 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str247121, i32 0, i32 0)); quoted string
  %abort237158 = call i64 @prim_halt(i64 %msg237160)                                 ; call prim_halt
  %sym237163 = add i64 0, 0                                                          ; quoted ()
  %cloptr247122 = inttoptr i64 %abort237158 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr247123 = getelementptr inbounds i64, i64* %cloptr247122, i64 0               ; &cloptr247122[0]
  %f247125 = load i64, i64* %i0ptr247123, align 8                                    ; load; *i0ptr247123
  %fptr247124 = inttoptr i64 %f247125 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr247124(i64 %abort237158, i64 %sym237163)            ; tail call
  ret void

else247120:
  %_95234151 = call i64 @prim_car(i64 %rvp237155)                                    ; call prim_car
  %rvp237145 = call i64 @prim_cdr(i64 %rvp237155)                                    ; call prim_cdr
  %check237146 = call i64 @prim_null_63(i64 %rvp237145)                              ; call prim_null_63
  %cmp247126 = icmp eq i64 %check237146, 15                                          ; false?
  br i1 %cmp247126, label %else247128, label %then247127                             ; if

then247127:
  %msg237150 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str247129, i32 0, i32 0)); quoted string
  %abort237148 = call i64 @prim_halt(i64 %msg237150)                                 ; call prim_halt
  %sym237153 = add i64 0, 0                                                          ; quoted ()
  %cloptr247130 = inttoptr i64 %abort237148 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr247131 = getelementptr inbounds i64, i64* %cloptr247130, i64 0               ; &cloptr247130[0]
  %f247133 = load i64, i64* %i0ptr247131, align 8                                    ; load; *i0ptr247131
  %fptr247132 = inttoptr i64 %f247133 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr247132(i64 %abort237148, i64 %sym237153)            ; tail call
  ret void

else247128:
  %rest237152 = call i64 @prim_cdr(i64 %rvp237145)                                   ; call prim_cdr
  %empty237147 = call i64 @prim_null_63(i64 %rest237152)                             ; call prim_null_63
  %cmp247134 = icmp eq i64 %empty237147, 15                                          ; false?
  br i1 %cmp247134, label %else247136, label %then247135                             ; if

then247135:
  %a234035 = call i64 @prim_car(i64 %rvp237145)                                      ; call prim_car
  %na237140 = call i64 @prim_cdr(i64 %rvp237145)                                     ; call prim_cdr
  %sym237141 = add i64 0, 0                                                          ; quoted ()
  %x237142 = call i64 @prim_cons(i64 %a234035, i64 %sym237141)                       ; call prim_cons
  %x237143 = call i64 @prim_cons(i64 %a234032, i64 %x237142)                         ; call prim_cons
  %x237144 = call i64 @prim_cons(i64 %cont234139, i64 %x237143)                      ; call prim_cons
  %cloptr247137 = inttoptr i64 %a234029 to i64*                                      ; closure/env cast; i64 -> i64*
  %i0ptr247138 = getelementptr inbounds i64, i64* %cloptr247137, i64 0               ; &cloptr247137[0]
  %f247140 = load i64, i64* %i0ptr247138, align 8                                    ; load; *i0ptr247138
  %fptr247139 = inttoptr i64 %f247140 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr247139(i64 %a234029, i64 %x237144)                  ; tail call
  ret void

else247136:
  %many237151 = call i64 @const_init_string(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @str247141, i32 0, i32 0)); quoted string
  %fail237149 = call i64 @prim_halt(i64 %many237151)                                 ; call prim_halt
  %sym237154 = add i64 0, 0                                                          ; quoted ()
  %cloptr247142 = inttoptr i64 %fail237149 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr247143 = getelementptr inbounds i64, i64* %cloptr247142, i64 0               ; &cloptr247142[0]
  %f247145 = load i64, i64* %i0ptr247143, align 8                                    ; load; *i0ptr247143
  %fptr247144 = inttoptr i64 %f247145 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr247144(i64 %fail237149, i64 %sym237154)             ; tail call
  ret void
}


define void @lam243434(i64 %env243435, i64 %rvp237126) {
  %envptr247146 = inttoptr i64 %env243435 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr247147 = getelementptr inbounds i64, i64* %envptr247146, i64 3              ; &envptr247146[3]
  %cont234139 = load i64, i64* %envptr247147, align 8                                ; load; *envptr247147
  %envptr247148 = inttoptr i64 %env243435 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr247149 = getelementptr inbounds i64, i64* %envptr247148, i64 2              ; &envptr247148[2]
  %a234032 = load i64, i64* %envptr247149, align 8                                   ; load; *envptr247149
  %envptr247150 = inttoptr i64 %env243435 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr247151 = getelementptr inbounds i64, i64* %envptr247150, i64 1              ; &envptr247150[1]
  %a234029 = load i64, i64* %envptr247151, align 8                                   ; load; *envptr247151
  %check237127 = call i64 @prim_null_63(i64 %rvp237126)                              ; call prim_null_63
  %cmp247152 = icmp eq i64 %check237127, 15                                          ; false?
  br i1 %cmp247152, label %else247154, label %then247153                             ; if

then247153:
  %msg237131 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str247155, i32 0, i32 0)); quoted string
  %abort237129 = call i64 @prim_halt(i64 %msg237131)                                 ; call prim_halt
  %sym237134 = add i64 0, 0                                                          ; quoted ()
  %cloptr247156 = inttoptr i64 %abort237129 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr247157 = getelementptr inbounds i64, i64* %cloptr247156, i64 0               ; &cloptr247156[0]
  %f247159 = load i64, i64* %i0ptr247157, align 8                                    ; load; *i0ptr247157
  %fptr247158 = inttoptr i64 %f247159 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr247158(i64 %abort237129, i64 %sym237134)            ; tail call
  ret void

else247154:
  %_95234151 = call i64 @prim_car(i64 %rvp237126)                                    ; call prim_car
  %rvp237116 = call i64 @prim_cdr(i64 %rvp237126)                                    ; call prim_cdr
  %check237117 = call i64 @prim_null_63(i64 %rvp237116)                              ; call prim_null_63
  %cmp247160 = icmp eq i64 %check237117, 15                                          ; false?
  br i1 %cmp247160, label %else247162, label %then247161                             ; if

then247161:
  %msg237121 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str247163, i32 0, i32 0)); quoted string
  %abort237119 = call i64 @prim_halt(i64 %msg237121)                                 ; call prim_halt
  %sym237124 = add i64 0, 0                                                          ; quoted ()
  %cloptr247164 = inttoptr i64 %abort237119 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr247165 = getelementptr inbounds i64, i64* %cloptr247164, i64 0               ; &cloptr247164[0]
  %f247167 = load i64, i64* %i0ptr247165, align 8                                    ; load; *i0ptr247165
  %fptr247166 = inttoptr i64 %f247167 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr247166(i64 %abort237119, i64 %sym237124)            ; tail call
  ret void

else247162:
  %rest237123 = call i64 @prim_cdr(i64 %rvp237116)                                   ; call prim_cdr
  %empty237118 = call i64 @prim_null_63(i64 %rest237123)                             ; call prim_null_63
  %cmp247168 = icmp eq i64 %empty237118, 15                                          ; false?
  br i1 %cmp247168, label %else247170, label %then247169                             ; if

then247169:
  %a234035 = call i64 @prim_car(i64 %rvp237116)                                      ; call prim_car
  %na237111 = call i64 @prim_cdr(i64 %rvp237116)                                     ; call prim_cdr
  %sym237112 = add i64 0, 0                                                          ; quoted ()
  %x237113 = call i64 @prim_cons(i64 %a234035, i64 %sym237112)                       ; call prim_cons
  %x237114 = call i64 @prim_cons(i64 %a234032, i64 %x237113)                         ; call prim_cons
  %x237115 = call i64 @prim_cons(i64 %cont234139, i64 %x237114)                      ; call prim_cons
  %cloptr247171 = inttoptr i64 %a234029 to i64*                                      ; closure/env cast; i64 -> i64*
  %i0ptr247172 = getelementptr inbounds i64, i64* %cloptr247171, i64 0               ; &cloptr247171[0]
  %f247174 = load i64, i64* %i0ptr247172, align 8                                    ; load; *i0ptr247172
  %fptr247173 = inttoptr i64 %f247174 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr247173(i64 %a234029, i64 %x237115)                  ; tail call
  ret void

else247170:
  %many237122 = call i64 @const_init_string(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @str247175, i32 0, i32 0)); quoted string
  %fail237120 = call i64 @prim_halt(i64 %many237122)                                 ; call prim_halt
  %sym237125 = add i64 0, 0                                                          ; quoted ()
  %cloptr247176 = inttoptr i64 %fail237120 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr247177 = getelementptr inbounds i64, i64* %cloptr247176, i64 0               ; &cloptr247176[0]
  %f247179 = load i64, i64* %i0ptr247177, align 8                                    ; load; *i0ptr247177
  %fptr247178 = inttoptr i64 %f247179 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr247178(i64 %fail237120, i64 %sym237125)             ; tail call
  ret void
}


define void @lam243376(i64 %env243377, i64 %rvp239468) {
  %envptr247180 = inttoptr i64 %env243377 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr247181 = getelementptr inbounds i64, i64* %envptr247180, i64 2              ; &envptr247180[2]
  %_37wind_45stack233694233874 = load i64, i64* %envptr247181, align 8               ; load; *envptr247181
  %envptr247182 = inttoptr i64 %env243377 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr247183 = getelementptr inbounds i64, i64* %envptr247182, i64 1              ; &envptr247182[1]
  %common_45tail233696233876 = load i64, i64* %envptr247183, align 8                 ; load; *envptr247183
  %check239469 = call i64 @prim_null_63(i64 %rvp239468)                              ; call prim_null_63
  %cmp247184 = icmp eq i64 %check239469, 15                                          ; false?
  br i1 %cmp247184, label %else247186, label %then247185                             ; if

then247185:
  %msg239473 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str247187, i32 0, i32 0)); quoted string
  %abort239471 = call i64 @prim_halt(i64 %msg239473)                                 ; call prim_halt
  %sym239476 = add i64 0, 0                                                          ; quoted ()
  %cloptr247188 = inttoptr i64 %abort239471 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr247189 = getelementptr inbounds i64, i64* %cloptr247188, i64 0               ; &cloptr247188[0]
  %f247191 = load i64, i64* %i0ptr247189, align 8                                    ; load; *i0ptr247189
  %fptr247190 = inttoptr i64 %f247191 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr247190(i64 %abort239471, i64 %sym239476)            ; tail call
  ret void

else247186:
  %cont234158 = call i64 @prim_car(i64 %rvp239468)                                   ; call prim_car
  %rvp239458 = call i64 @prim_cdr(i64 %rvp239468)                                    ; call prim_cdr
  %check239459 = call i64 @prim_null_63(i64 %rvp239458)                              ; call prim_null_63
  %cmp247192 = icmp eq i64 %check239459, 15                                          ; false?
  br i1 %cmp247192, label %else247194, label %then247193                             ; if

then247193:
  %msg239463 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str247195, i32 0, i32 0)); quoted string
  %abort239461 = call i64 @prim_halt(i64 %msg239463)                                 ; call prim_halt
  %sym239466 = add i64 0, 0                                                          ; quoted ()
  %cloptr247196 = inttoptr i64 %abort239461 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr247197 = getelementptr inbounds i64, i64* %cloptr247196, i64 0               ; &cloptr247196[0]
  %f247199 = load i64, i64* %i0ptr247197, align 8                                    ; load; *i0ptr247197
  %fptr247198 = inttoptr i64 %f247199 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr247198(i64 %abort239461, i64 %sym239466)            ; tail call
  ret void

else247194:
  %rest239465 = call i64 @prim_cdr(i64 %rvp239458)                                   ; call prim_cdr
  %empty239460 = call i64 @prim_null_63(i64 %rest239465)                             ; call prim_null_63
  %cmp247200 = icmp eq i64 %empty239460, 15                                          ; false?
  br i1 %cmp247200, label %else247202, label %then247201                             ; if

then247201:
  %new233710233890 = call i64 @prim_car(i64 %rvp239458)                              ; call prim_car
  %na237483 = call i64 @prim_cdr(i64 %rvp239458)                                     ; call prim_cdr
  %arg234802 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %a234036 = call i64 @prim_vector_45ref(i64 %_37wind_45stack233694233874, i64 %arg234802); call prim_vector_45ref
  %a234037 = call i64 @prim_eq_63(i64 %new233710233890, i64 %a234036)                ; call prim_eq_63
  %a234038 = call i64 @prim_not(i64 %a234037)                                        ; call prim_not
  %cmp247203 = icmp eq i64 %a234038, 15                                              ; false?
  br i1 %cmp247203, label %else247205, label %then247204                             ; if

then247204:
  %check233566233712233892 = call i64 @prim_procedure_63(i64 %common_45tail233696233876); call prim_procedure_63
  %cmp247206 = icmp eq i64 %check233566233712233892, 15                              ; false?
  br i1 %cmp247206, label %else247208, label %then247207                             ; if

then247207:
  %arg234808 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %a234039 = call i64 @prim_vector_45ref(i64 %_37wind_45stack233694233874, i64 %arg234808); call prim_vector_45ref
  %cloptr247209 = call i64* @alloc(i64 32)                                           ; malloc
  %eptr247211 = getelementptr inbounds i64, i64* %cloptr247209, i64 1                ; &eptr247211[1]
  %eptr247212 = getelementptr inbounds i64, i64* %cloptr247209, i64 2                ; &eptr247212[2]
  %eptr247213 = getelementptr inbounds i64, i64* %cloptr247209, i64 3                ; &eptr247213[3]
  store i64 %new233710233890, i64* %eptr247211                                       ; *eptr247211 = %new233710233890
  store i64 %cont234158, i64* %eptr247212                                            ; *eptr247212 = %cont234158
  store i64 %_37wind_45stack233694233874, i64* %eptr247213                           ; *eptr247213 = %_37wind_45stack233694233874
  %eptr247210 = getelementptr inbounds i64, i64* %cloptr247209, i64 0                ; &cloptr247209[0]
  %f247214 = ptrtoint void(i64,i64)* @lam242906 to i64                               ; fptr cast; i64(...)* -> i64
  store i64 %f247214, i64* %eptr247210                                               ; store fptr
  %arg234812 = ptrtoint i64* %cloptr247209 to i64                                    ; closure cast; i64* -> i64
  %sym238466 = add i64 0, 0                                                          ; quoted ()
  %x238467 = call i64 @prim_cons(i64 %a234039, i64 %sym238466)                       ; call prim_cons
  %x238468 = call i64 @prim_cons(i64 %new233710233890, i64 %x238467)                 ; call prim_cons
  %x238469 = call i64 @prim_cons(i64 %arg234812, i64 %x238468)                       ; call prim_cons
  %cloptr247215 = inttoptr i64 %common_45tail233696233876 to i64*                    ; closure/env cast; i64 -> i64*
  %i0ptr247216 = getelementptr inbounds i64, i64* %cloptr247215, i64 0               ; &cloptr247215[0]
  %f247218 = load i64, i64* %i0ptr247216, align 8                                    ; load; *i0ptr247216
  %fptr247217 = inttoptr i64 %f247218 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr247217(i64 %common_45tail233696233876, i64 %x238469); tail call
  ret void

else247208:
  %arg235113 = call i64 @const_init_string(i8* getelementptr inbounds ([85 x i8], [85 x i8]* @str247219, i32 0, i32 0)); quoted string
  %retprim234199 = call i64 @prim_halt(i64 %arg235113)                               ; call prim_halt
  %cloptr247220 = call i64* @alloc(i64 32)                                           ; malloc
  %eptr247222 = getelementptr inbounds i64, i64* %cloptr247220, i64 1                ; &eptr247222[1]
  %eptr247223 = getelementptr inbounds i64, i64* %cloptr247220, i64 2                ; &eptr247223[2]
  %eptr247224 = getelementptr inbounds i64, i64* %cloptr247220, i64 3                ; &eptr247224[3]
  store i64 %new233710233890, i64* %eptr247222                                       ; *eptr247222 = %new233710233890
  store i64 %cont234158, i64* %eptr247223                                            ; *eptr247223 = %cont234158
  store i64 %_37wind_45stack233694233874, i64* %eptr247224                           ; *eptr247224 = %_37wind_45stack233694233874
  %eptr247221 = getelementptr inbounds i64, i64* %cloptr247220, i64 0                ; &cloptr247220[0]
  %f247225 = ptrtoint void(i64,i64)* @lam243368 to i64                               ; fptr cast; i64(...)* -> i64
  store i64 %f247225, i64* %eptr247221                                               ; store fptr
  %arg235116 = ptrtoint i64* %cloptr247220 to i64                                    ; closure cast; i64* -> i64
  %arg235115 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %sym239452 = add i64 0, 0                                                          ; quoted ()
  %x239453 = call i64 @prim_cons(i64 %retprim234199, i64 %sym239452)                 ; call prim_cons
  %x239454 = call i64 @prim_cons(i64 %arg235115, i64 %x239453)                       ; call prim_cons
  %cloptr247226 = inttoptr i64 %arg235116 to i64*                                    ; closure/env cast; i64 -> i64*
  %i0ptr247227 = getelementptr inbounds i64, i64* %cloptr247226, i64 0               ; &cloptr247226[0]
  %f247229 = load i64, i64* %i0ptr247227, align 8                                    ; load; *i0ptr247227
  %fptr247228 = inttoptr i64 %f247229 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr247228(i64 %arg235116, i64 %x239454)                ; tail call
  ret void

else247205:
  %retprim234200 = call i64 @prim_void()                                             ; call prim_void
  %arg235417 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %sym239455 = add i64 0, 0                                                          ; quoted ()
  %x239456 = call i64 @prim_cons(i64 %retprim234200, i64 %sym239455)                 ; call prim_cons
  %x239457 = call i64 @prim_cons(i64 %arg235417, i64 %x239456)                       ; call prim_cons
  %cloptr247230 = inttoptr i64 %cont234158 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr247231 = getelementptr inbounds i64, i64* %cloptr247230, i64 0               ; &cloptr247230[0]
  %f247233 = load i64, i64* %i0ptr247231, align 8                                    ; load; *i0ptr247231
  %fptr247232 = inttoptr i64 %f247233 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr247232(i64 %cont234158, i64 %x239457)               ; tail call
  ret void

else247202:
  %many239464 = call i64 @const_init_string(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @str247234, i32 0, i32 0)); quoted string
  %fail239462 = call i64 @prim_halt(i64 %many239464)                                 ; call prim_halt
  %sym239467 = add i64 0, 0                                                          ; quoted ()
  %cloptr247235 = inttoptr i64 %fail239462 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr247236 = getelementptr inbounds i64, i64* %cloptr247235, i64 0               ; &cloptr247235[0]
  %f247238 = load i64, i64* %i0ptr247236, align 8                                    ; load; *i0ptr247236
  %fptr247237 = inttoptr i64 %f247238 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr247237(i64 %fail239462, i64 %sym239467)             ; tail call
  ret void
}


define void @lam243368(i64 %env243369, i64 %rvp239443) {
  %envptr247239 = inttoptr i64 %env243369 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr247240 = getelementptr inbounds i64, i64* %envptr247239, i64 3              ; &envptr247239[3]
  %_37wind_45stack233694233874 = load i64, i64* %envptr247240, align 8               ; load; *envptr247240
  %envptr247241 = inttoptr i64 %env243369 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr247242 = getelementptr inbounds i64, i64* %envptr247241, i64 2              ; &envptr247241[2]
  %cont234158 = load i64, i64* %envptr247242, align 8                                ; load; *envptr247242
  %envptr247243 = inttoptr i64 %env243369 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr247244 = getelementptr inbounds i64, i64* %envptr247243, i64 1              ; &envptr247243[1]
  %new233710233890 = load i64, i64* %envptr247244, align 8                           ; load; *envptr247244
  %check239444 = call i64 @prim_null_63(i64 %rvp239443)                              ; call prim_null_63
  %cmp247245 = icmp eq i64 %check239444, 15                                          ; false?
  br i1 %cmp247245, label %else247247, label %then247246                             ; if

then247246:
  %msg239448 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str247248, i32 0, i32 0)); quoted string
  %abort239446 = call i64 @prim_halt(i64 %msg239448)                                 ; call prim_halt
  %sym239451 = add i64 0, 0                                                          ; quoted ()
  %cloptr247249 = inttoptr i64 %abort239446 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr247250 = getelementptr inbounds i64, i64* %cloptr247249, i64 0               ; &cloptr247249[0]
  %f247252 = load i64, i64* %i0ptr247250, align 8                                    ; load; *i0ptr247250
  %fptr247251 = inttoptr i64 %f247252 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr247251(i64 %abort239446, i64 %sym239451)            ; tail call
  ret void

else247247:
  %_95234159 = call i64 @prim_car(i64 %rvp239443)                                    ; call prim_car
  %rvp239433 = call i64 @prim_cdr(i64 %rvp239443)                                    ; call prim_cdr
  %check239434 = call i64 @prim_null_63(i64 %rvp239433)                              ; call prim_null_63
  %cmp247253 = icmp eq i64 %check239434, 15                                          ; false?
  br i1 %cmp247253, label %else247255, label %then247254                             ; if

then247254:
  %msg239438 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str247256, i32 0, i32 0)); quoted string
  %abort239436 = call i64 @prim_halt(i64 %msg239438)                                 ; call prim_halt
  %sym239441 = add i64 0, 0                                                          ; quoted ()
  %cloptr247257 = inttoptr i64 %abort239436 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr247258 = getelementptr inbounds i64, i64* %cloptr247257, i64 0               ; &cloptr247257[0]
  %f247260 = load i64, i64* %i0ptr247258, align 8                                    ; load; *i0ptr247258
  %fptr247259 = inttoptr i64 %f247260 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr247259(i64 %abort239436, i64 %sym239441)            ; tail call
  ret void

else247255:
  %rest239440 = call i64 @prim_cdr(i64 %rvp239433)                                   ; call prim_cdr
  %empty239435 = call i64 @prim_null_63(i64 %rest239440)                             ; call prim_null_63
  %cmp247261 = icmp eq i64 %empty239435, 15                                          ; false?
  br i1 %cmp247261, label %else247263, label %then247262                             ; if

then247262:
  %tail233711233891 = call i64 @prim_car(i64 %rvp239433)                             ; call prim_car
  %na238471 = call i64 @prim_cdr(i64 %rvp239433)                                     ; call prim_cdr
  %cloptr247264 = call i64* @alloc(i64 8)                                            ; malloc
  %eptr247265 = getelementptr inbounds i64, i64* %cloptr247264, i64 0                ; &cloptr247264[0]
  %f247266 = ptrtoint void(i64,i64)* @lam243364 to i64                               ; fptr cast; i64(...)* -> i64
  store i64 %f247266, i64* %eptr247265                                               ; store fptr
  %arg235118 = ptrtoint i64* %cloptr247264 to i64                                    ; closure cast; i64* -> i64
  %cloptr247267 = call i64* @alloc(i64 40)                                           ; malloc
  %eptr247269 = getelementptr inbounds i64, i64* %cloptr247267, i64 1                ; &eptr247269[1]
  %eptr247270 = getelementptr inbounds i64, i64* %cloptr247267, i64 2                ; &eptr247270[2]
  %eptr247271 = getelementptr inbounds i64, i64* %cloptr247267, i64 3                ; &eptr247271[3]
  %eptr247272 = getelementptr inbounds i64, i64* %cloptr247267, i64 4                ; &eptr247272[4]
  store i64 %new233710233890, i64* %eptr247269                                       ; *eptr247269 = %new233710233890
  store i64 %cont234158, i64* %eptr247270                                            ; *eptr247270 = %cont234158
  store i64 %tail233711233891, i64* %eptr247271                                      ; *eptr247271 = %tail233711233891
  store i64 %_37wind_45stack233694233874, i64* %eptr247272                           ; *eptr247272 = %_37wind_45stack233694233874
  %eptr247268 = getelementptr inbounds i64, i64* %cloptr247267, i64 0                ; &cloptr247267[0]
  %f247273 = ptrtoint void(i64,i64)* @lam243360 to i64                               ; fptr cast; i64(...)* -> i64
  store i64 %f247273, i64* %eptr247268                                               ; store fptr
  %arg235117 = ptrtoint i64* %cloptr247267 to i64                                    ; closure cast; i64* -> i64
  %sym239431 = add i64 0, 0                                                          ; quoted ()
  %x239432 = call i64 @prim_cons(i64 %arg235117, i64 %sym239431)                     ; call prim_cons
  %cloptr247274 = inttoptr i64 %arg235118 to i64*                                    ; closure/env cast; i64 -> i64*
  %i0ptr247275 = getelementptr inbounds i64, i64* %cloptr247274, i64 0               ; &cloptr247274[0]
  %f247277 = load i64, i64* %i0ptr247275, align 8                                    ; load; *i0ptr247275
  %fptr247276 = inttoptr i64 %f247277 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr247276(i64 %arg235118, i64 %x239432)                ; tail call
  ret void

else247263:
  %many239439 = call i64 @const_init_string(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @str247278, i32 0, i32 0)); quoted string
  %fail239437 = call i64 @prim_halt(i64 %many239439)                                 ; call prim_halt
  %sym239442 = add i64 0, 0                                                          ; quoted ()
  %cloptr247279 = inttoptr i64 %fail239437 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr247280 = getelementptr inbounds i64, i64* %cloptr247279, i64 0               ; &cloptr247279[0]
  %f247282 = load i64, i64* %i0ptr247280, align 8                                    ; load; *i0ptr247280
  %fptr247281 = inttoptr i64 %f247282 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr247281(i64 %fail239437, i64 %sym239442)             ; tail call
  ret void
}


define void @lam243364(i64 %env243365, i64 %lst233715233895234198) {
  %cont234197 = call i64 @prim_car(i64 %lst233715233895234198)                       ; call prim_car
  %lst233715233895 = call i64 @prim_cdr(i64 %lst233715233895234198)                  ; call prim_cdr
  %arg235122 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %sym238472 = add i64 0, 0                                                          ; quoted ()
  %x238473 = call i64 @prim_cons(i64 %lst233715233895, i64 %sym238472)               ; call prim_cons
  %x238474 = call i64 @prim_cons(i64 %arg235122, i64 %x238473)                       ; call prim_cons
  %cloptr247283 = inttoptr i64 %cont234197 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr247284 = getelementptr inbounds i64, i64* %cloptr247283, i64 0               ; &cloptr247283[0]
  %f247286 = load i64, i64* %i0ptr247284, align 8                                    ; load; *i0ptr247284
  %fptr247285 = inttoptr i64 %f247286 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr247285(i64 %cont234197, i64 %x238474)               ; tail call
  ret void
}


define void @lam243360(i64 %env243361, i64 %rvp239422) {
  %envptr247287 = inttoptr i64 %env243361 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr247288 = getelementptr inbounds i64, i64* %envptr247287, i64 4              ; &envptr247287[4]
  %_37wind_45stack233694233874 = load i64, i64* %envptr247288, align 8               ; load; *envptr247288
  %envptr247289 = inttoptr i64 %env243361 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr247290 = getelementptr inbounds i64, i64* %envptr247289, i64 3              ; &envptr247289[3]
  %tail233711233891 = load i64, i64* %envptr247290, align 8                          ; load; *envptr247290
  %envptr247291 = inttoptr i64 %env243361 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr247292 = getelementptr inbounds i64, i64* %envptr247291, i64 2              ; &envptr247291[2]
  %cont234158 = load i64, i64* %envptr247292, align 8                                ; load; *envptr247292
  %envptr247293 = inttoptr i64 %env243361 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr247294 = getelementptr inbounds i64, i64* %envptr247293, i64 1              ; &envptr247293[1]
  %new233710233890 = load i64, i64* %envptr247294, align 8                           ; load; *envptr247294
  %check239423 = call i64 @prim_null_63(i64 %rvp239422)                              ; call prim_null_63
  %cmp247295 = icmp eq i64 %check239423, 15                                          ; false?
  br i1 %cmp247295, label %else247297, label %then247296                             ; if

then247296:
  %msg239427 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str247298, i32 0, i32 0)); quoted string
  %abort239425 = call i64 @prim_halt(i64 %msg239427)                                 ; call prim_halt
  %sym239430 = add i64 0, 0                                                          ; quoted ()
  %cloptr247299 = inttoptr i64 %abort239425 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr247300 = getelementptr inbounds i64, i64* %cloptr247299, i64 0               ; &cloptr247299[0]
  %f247302 = load i64, i64* %i0ptr247300, align 8                                    ; load; *i0ptr247300
  %fptr247301 = inttoptr i64 %f247302 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr247301(i64 %abort239425, i64 %sym239430)            ; tail call
  ret void

else247297:
  %_95234195 = call i64 @prim_car(i64 %rvp239422)                                    ; call prim_car
  %rvp239412 = call i64 @prim_cdr(i64 %rvp239422)                                    ; call prim_cdr
  %check239413 = call i64 @prim_null_63(i64 %rvp239412)                              ; call prim_null_63
  %cmp247303 = icmp eq i64 %check239413, 15                                          ; false?
  br i1 %cmp247303, label %else247305, label %then247304                             ; if

then247304:
  %msg239417 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str247306, i32 0, i32 0)); quoted string
  %abort239415 = call i64 @prim_halt(i64 %msg239417)                                 ; call prim_halt
  %sym239420 = add i64 0, 0                                                          ; quoted ()
  %cloptr247307 = inttoptr i64 %abort239415 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr247308 = getelementptr inbounds i64, i64* %cloptr247307, i64 0               ; &cloptr247307[0]
  %f247310 = load i64, i64* %i0ptr247308, align 8                                    ; load; *i0ptr247308
  %fptr247309 = inttoptr i64 %f247310 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr247309(i64 %abort239415, i64 %sym239420)            ; tail call
  ret void

else247305:
  %rest239419 = call i64 @prim_cdr(i64 %rvp239412)                                   ; call prim_cdr
  %empty239414 = call i64 @prim_null_63(i64 %rest239419)                             ; call prim_null_63
  %cmp247311 = icmp eq i64 %empty239414, 15                                          ; false?
  br i1 %cmp247311, label %else247313, label %then247312                             ; if

then247312:
  %a234040 = call i64 @prim_car(i64 %rvp239412)                                      ; call prim_car
  %na238476 = call i64 @prim_cdr(i64 %rvp239412)                                     ; call prim_cdr
  %arg235125 = call i64 @const_init_int(i64 1)                                       ; quoted int
  %retprim234196 = call i64 @prim_make_45vector(i64 %arg235125, i64 %a234040)        ; call prim_make_45vector
  %cloptr247314 = call i64* @alloc(i64 40)                                           ; malloc
  %eptr247316 = getelementptr inbounds i64, i64* %cloptr247314, i64 1                ; &eptr247316[1]
  %eptr247317 = getelementptr inbounds i64, i64* %cloptr247314, i64 2                ; &eptr247317[2]
  %eptr247318 = getelementptr inbounds i64, i64* %cloptr247314, i64 3                ; &eptr247318[3]
  %eptr247319 = getelementptr inbounds i64, i64* %cloptr247314, i64 4                ; &eptr247319[4]
  store i64 %new233710233890, i64* %eptr247316                                       ; *eptr247316 = %new233710233890
  store i64 %cont234158, i64* %eptr247317                                            ; *eptr247317 = %cont234158
  store i64 %tail233711233891, i64* %eptr247318                                      ; *eptr247318 = %tail233711233891
  store i64 %_37wind_45stack233694233874, i64* %eptr247319                           ; *eptr247319 = %_37wind_45stack233694233874
  %eptr247315 = getelementptr inbounds i64, i64* %cloptr247314, i64 0                ; &cloptr247314[0]
  %f247320 = ptrtoint void(i64,i64)* @lam243355 to i64                               ; fptr cast; i64(...)* -> i64
  store i64 %f247320, i64* %eptr247315                                               ; store fptr
  %arg235128 = ptrtoint i64* %cloptr247314 to i64                                    ; closure cast; i64* -> i64
  %arg235127 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %sym239409 = add i64 0, 0                                                          ; quoted ()
  %x239410 = call i64 @prim_cons(i64 %retprim234196, i64 %sym239409)                 ; call prim_cons
  %x239411 = call i64 @prim_cons(i64 %arg235127, i64 %x239410)                       ; call prim_cons
  %cloptr247321 = inttoptr i64 %arg235128 to i64*                                    ; closure/env cast; i64 -> i64*
  %i0ptr247322 = getelementptr inbounds i64, i64* %cloptr247321, i64 0               ; &cloptr247321[0]
  %f247324 = load i64, i64* %i0ptr247322, align 8                                    ; load; *i0ptr247322
  %fptr247323 = inttoptr i64 %f247324 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr247323(i64 %arg235128, i64 %x239411)                ; tail call
  ret void

else247313:
  %many239418 = call i64 @const_init_string(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @str247325, i32 0, i32 0)); quoted string
  %fail239416 = call i64 @prim_halt(i64 %many239418)                                 ; call prim_halt
  %sym239421 = add i64 0, 0                                                          ; quoted ()
  %cloptr247326 = inttoptr i64 %fail239416 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr247327 = getelementptr inbounds i64, i64* %cloptr247326, i64 0               ; &cloptr247326[0]
  %f247329 = load i64, i64* %i0ptr247327, align 8                                    ; load; *i0ptr247327
  %fptr247328 = inttoptr i64 %f247329 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr247328(i64 %fail239416, i64 %sym239421)             ; tail call
  ret void
}


define void @lam243355(i64 %env243356, i64 %rvp239400) {
  %envptr247330 = inttoptr i64 %env243356 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr247331 = getelementptr inbounds i64, i64* %envptr247330, i64 4              ; &envptr247330[4]
  %_37wind_45stack233694233874 = load i64, i64* %envptr247331, align 8               ; load; *envptr247331
  %envptr247332 = inttoptr i64 %env243356 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr247333 = getelementptr inbounds i64, i64* %envptr247332, i64 3              ; &envptr247332[3]
  %tail233711233891 = load i64, i64* %envptr247333, align 8                          ; load; *envptr247333
  %envptr247334 = inttoptr i64 %env243356 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr247335 = getelementptr inbounds i64, i64* %envptr247334, i64 2              ; &envptr247334[2]
  %cont234158 = load i64, i64* %envptr247335, align 8                                ; load; *envptr247335
  %envptr247336 = inttoptr i64 %env243356 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr247337 = getelementptr inbounds i64, i64* %envptr247336, i64 1              ; &envptr247336[1]
  %new233710233890 = load i64, i64* %envptr247337, align 8                           ; load; *envptr247337
  %check239401 = call i64 @prim_null_63(i64 %rvp239400)                              ; call prim_null_63
  %cmp247338 = icmp eq i64 %check239401, 15                                          ; false?
  br i1 %cmp247338, label %else247340, label %then247339                             ; if

then247339:
  %msg239405 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str247341, i32 0, i32 0)); quoted string
  %abort239403 = call i64 @prim_halt(i64 %msg239405)                                 ; call prim_halt
  %sym239408 = add i64 0, 0                                                          ; quoted ()
  %cloptr247342 = inttoptr i64 %abort239403 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr247343 = getelementptr inbounds i64, i64* %cloptr247342, i64 0               ; &cloptr247342[0]
  %f247345 = load i64, i64* %i0ptr247343, align 8                                    ; load; *i0ptr247343
  %fptr247344 = inttoptr i64 %f247345 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr247344(i64 %abort239403, i64 %sym239408)            ; tail call
  ret void

else247340:
  %_95234180 = call i64 @prim_car(i64 %rvp239400)                                    ; call prim_car
  %rvp239390 = call i64 @prim_cdr(i64 %rvp239400)                                    ; call prim_cdr
  %check239391 = call i64 @prim_null_63(i64 %rvp239390)                              ; call prim_null_63
  %cmp247346 = icmp eq i64 %check239391, 15                                          ; false?
  br i1 %cmp247346, label %else247348, label %then247347                             ; if

then247347:
  %msg239395 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str247349, i32 0, i32 0)); quoted string
  %abort239393 = call i64 @prim_halt(i64 %msg239395)                                 ; call prim_halt
  %sym239398 = add i64 0, 0                                                          ; quoted ()
  %cloptr247350 = inttoptr i64 %abort239393 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr247351 = getelementptr inbounds i64, i64* %cloptr247350, i64 0               ; &cloptr247350[0]
  %f247353 = load i64, i64* %i0ptr247351, align 8                                    ; load; *i0ptr247351
  %fptr247352 = inttoptr i64 %f247353 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr247352(i64 %abort239393, i64 %sym239398)            ; tail call
  ret void

else247348:
  %rest239397 = call i64 @prim_cdr(i64 %rvp239390)                                   ; call prim_cdr
  %empty239392 = call i64 @prim_null_63(i64 %rest239397)                             ; call prim_null_63
  %cmp247354 = icmp eq i64 %empty239392, 15                                          ; false?
  br i1 %cmp247354, label %else247356, label %then247355                             ; if

then247355:
  %f233714233894 = call i64 @prim_car(i64 %rvp239390)                                ; call prim_car
  %na238478 = call i64 @prim_cdr(i64 %rvp239390)                                     ; call prim_cdr
  %cloptr247357 = call i64* @alloc(i64 32)                                           ; malloc
  %eptr247359 = getelementptr inbounds i64, i64* %cloptr247357, i64 1                ; &eptr247359[1]
  %eptr247360 = getelementptr inbounds i64, i64* %cloptr247357, i64 2                ; &eptr247360[2]
  %eptr247361 = getelementptr inbounds i64, i64* %cloptr247357, i64 3                ; &eptr247361[3]
  store i64 %f233714233894, i64* %eptr247359                                         ; *eptr247359 = %f233714233894
  store i64 %tail233711233891, i64* %eptr247360                                      ; *eptr247360 = %tail233711233891
  store i64 %_37wind_45stack233694233874, i64* %eptr247361                           ; *eptr247361 = %_37wind_45stack233694233874
  %eptr247358 = getelementptr inbounds i64, i64* %cloptr247357, i64 0                ; &cloptr247357[0]
  %f247362 = ptrtoint void(i64,i64)* @lam243351 to i64                               ; fptr cast; i64(...)* -> i64
  store i64 %f247362, i64* %eptr247358                                               ; store fptr
  %f233567233716233896 = ptrtoint i64* %cloptr247357 to i64                          ; closure cast; i64* -> i64
  %arg235189 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %_95t233722233902 = call i64 @prim_vector_45set_33(i64 %f233714233894, i64 %arg235189, i64 %f233567233716233896); call prim_vector_45set_33
  %arg235191 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %a234051 = call i64 @prim_vector_45ref(i64 %f233714233894, i64 %arg235191)         ; call prim_vector_45ref
  %retprim234194 = call i64 @prim_procedure_63(i64 %a234051)                         ; call prim_procedure_63
  %cloptr247363 = call i64* @alloc(i64 48)                                           ; malloc
  %eptr247365 = getelementptr inbounds i64, i64* %cloptr247363, i64 1                ; &eptr247365[1]
  %eptr247366 = getelementptr inbounds i64, i64* %cloptr247363, i64 2                ; &eptr247366[2]
  %eptr247367 = getelementptr inbounds i64, i64* %cloptr247363, i64 3                ; &eptr247367[3]
  %eptr247368 = getelementptr inbounds i64, i64* %cloptr247363, i64 4                ; &eptr247368[4]
  %eptr247369 = getelementptr inbounds i64, i64* %cloptr247363, i64 5                ; &eptr247369[5]
  store i64 %new233710233890, i64* %eptr247365                                       ; *eptr247365 = %new233710233890
  store i64 %cont234158, i64* %eptr247366                                            ; *eptr247366 = %cont234158
  store i64 %f233714233894, i64* %eptr247367                                         ; *eptr247367 = %f233714233894
  store i64 %tail233711233891, i64* %eptr247368                                      ; *eptr247368 = %tail233711233891
  store i64 %_37wind_45stack233694233874, i64* %eptr247369                           ; *eptr247369 = %_37wind_45stack233694233874
  %eptr247364 = getelementptr inbounds i64, i64* %cloptr247363, i64 0                ; &cloptr247363[0]
  %f247370 = ptrtoint void(i64,i64)* @lam243266 to i64                               ; fptr cast; i64(...)* -> i64
  store i64 %f247370, i64* %eptr247364                                               ; store fptr
  %arg235196 = ptrtoint i64* %cloptr247363 to i64                                    ; closure cast; i64* -> i64
  %arg235195 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %sym239387 = add i64 0, 0                                                          ; quoted ()
  %x239388 = call i64 @prim_cons(i64 %retprim234194, i64 %sym239387)                 ; call prim_cons
  %x239389 = call i64 @prim_cons(i64 %arg235195, i64 %x239388)                       ; call prim_cons
  %cloptr247371 = inttoptr i64 %arg235196 to i64*                                    ; closure/env cast; i64 -> i64*
  %i0ptr247372 = getelementptr inbounds i64, i64* %cloptr247371, i64 0               ; &cloptr247371[0]
  %f247374 = load i64, i64* %i0ptr247372, align 8                                    ; load; *i0ptr247372
  %fptr247373 = inttoptr i64 %f247374 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr247373(i64 %arg235196, i64 %x239389)                ; tail call
  ret void

else247356:
  %many239396 = call i64 @const_init_string(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @str247375, i32 0, i32 0)); quoted string
  %fail239394 = call i64 @prim_halt(i64 %many239396)                                 ; call prim_halt
  %sym239399 = add i64 0, 0                                                          ; quoted ()
  %cloptr247376 = inttoptr i64 %fail239394 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr247377 = getelementptr inbounds i64, i64* %cloptr247376, i64 0               ; &cloptr247376[0]
  %f247379 = load i64, i64* %i0ptr247377, align 8                                    ; load; *i0ptr247377
  %fptr247378 = inttoptr i64 %f247379 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr247378(i64 %fail239394, i64 %sym239399)             ; tail call
  ret void
}


define void @lam243351(i64 %env243352, i64 %rvp238649) {
  %envptr247380 = inttoptr i64 %env243352 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr247381 = getelementptr inbounds i64, i64* %envptr247380, i64 3              ; &envptr247380[3]
  %_37wind_45stack233694233874 = load i64, i64* %envptr247381, align 8               ; load; *envptr247381
  %envptr247382 = inttoptr i64 %env243352 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr247383 = getelementptr inbounds i64, i64* %envptr247382, i64 2              ; &envptr247382[2]
  %tail233711233891 = load i64, i64* %envptr247383, align 8                          ; load; *envptr247383
  %envptr247384 = inttoptr i64 %env243352 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr247385 = getelementptr inbounds i64, i64* %envptr247384, i64 1              ; &envptr247384[1]
  %f233714233894 = load i64, i64* %envptr247385, align 8                             ; load; *envptr247385
  %check238650 = call i64 @prim_null_63(i64 %rvp238649)                              ; call prim_null_63
  %cmp247386 = icmp eq i64 %check238650, 15                                          ; false?
  br i1 %cmp247386, label %else247388, label %then247387                             ; if

then247387:
  %msg238654 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str247389, i32 0, i32 0)); quoted string
  %abort238652 = call i64 @prim_halt(i64 %msg238654)                                 ; call prim_halt
  %sym238657 = add i64 0, 0                                                          ; quoted ()
  %cloptr247390 = inttoptr i64 %abort238652 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr247391 = getelementptr inbounds i64, i64* %cloptr247390, i64 0               ; &cloptr247390[0]
  %f247393 = load i64, i64* %i0ptr247391, align 8                                    ; load; *i0ptr247391
  %fptr247392 = inttoptr i64 %f247393 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr247392(i64 %abort238652, i64 %sym238657)            ; tail call
  ret void

else247388:
  %cont234181 = call i64 @prim_car(i64 %rvp238649)                                   ; call prim_car
  %rvp238639 = call i64 @prim_cdr(i64 %rvp238649)                                    ; call prim_cdr
  %check238640 = call i64 @prim_null_63(i64 %rvp238639)                              ; call prim_null_63
  %cmp247394 = icmp eq i64 %check238640, 15                                          ; false?
  br i1 %cmp247394, label %else247396, label %then247395                             ; if

then247395:
  %msg238644 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str247397, i32 0, i32 0)); quoted string
  %abort238642 = call i64 @prim_halt(i64 %msg238644)                                 ; call prim_halt
  %sym238647 = add i64 0, 0                                                          ; quoted ()
  %cloptr247398 = inttoptr i64 %abort238642 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr247399 = getelementptr inbounds i64, i64* %cloptr247398, i64 0               ; &cloptr247398[0]
  %f247401 = load i64, i64* %i0ptr247399, align 8                                    ; load; *i0ptr247399
  %fptr247400 = inttoptr i64 %f247401 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr247400(i64 %abort238642, i64 %sym238647)            ; tail call
  ret void

else247396:
  %rest238646 = call i64 @prim_cdr(i64 %rvp238639)                                   ; call prim_cdr
  %empty238641 = call i64 @prim_null_63(i64 %rest238646)                             ; call prim_null_63
  %cmp247402 = icmp eq i64 %empty238641, 15                                          ; false?
  br i1 %cmp247402, label %else247404, label %then247403                             ; if

then247403:
  %l233717233897 = call i64 @prim_car(i64 %rvp238639)                                ; call prim_car
  %na238480 = call i64 @prim_cdr(i64 %rvp238639)                                     ; call prim_cdr
  %a234041 = call i64 @prim_eq_63(i64 %l233717233897, i64 %tail233711233891)         ; call prim_eq_63
  %a234042 = call i64 @prim_not(i64 %a234041)                                        ; call prim_not
  %cmp247405 = icmp eq i64 %a234042, 15                                              ; false?
  br i1 %cmp247405, label %else247407, label %then247406                             ; if

then247406:
  %a234043 = call i64 @prim_cdr(i64 %l233717233897)                                  ; call prim_cdr
  %arg235134 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %retprim234190 = call i64 @prim_vector_45set_33(i64 %_37wind_45stack233694233874, i64 %arg235134, i64 %a234043); call prim_vector_45set_33
  %cloptr247408 = call i64* @alloc(i64 32)                                           ; malloc
  %eptr247410 = getelementptr inbounds i64, i64* %cloptr247408, i64 1                ; &eptr247410[1]
  %eptr247411 = getelementptr inbounds i64, i64* %cloptr247408, i64 2                ; &eptr247411[2]
  %eptr247412 = getelementptr inbounds i64, i64* %cloptr247408, i64 3                ; &eptr247412[3]
  store i64 %l233717233897, i64* %eptr247410                                         ; *eptr247410 = %l233717233897
  store i64 %cont234181, i64* %eptr247411                                            ; *eptr247411 = %cont234181
  store i64 %f233714233894, i64* %eptr247412                                         ; *eptr247412 = %f233714233894
  %eptr247409 = getelementptr inbounds i64, i64* %cloptr247408, i64 0                ; &cloptr247408[0]
  %f247413 = ptrtoint void(i64,i64)* @lam243344 to i64                               ; fptr cast; i64(...)* -> i64
  store i64 %f247413, i64* %eptr247409                                               ; store fptr
  %arg235138 = ptrtoint i64* %cloptr247408 to i64                                    ; closure cast; i64* -> i64
  %arg235137 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %sym238633 = add i64 0, 0                                                          ; quoted ()
  %x238634 = call i64 @prim_cons(i64 %retprim234190, i64 %sym238633)                 ; call prim_cons
  %x238635 = call i64 @prim_cons(i64 %arg235137, i64 %x238634)                       ; call prim_cons
  %cloptr247414 = inttoptr i64 %arg235138 to i64*                                    ; closure/env cast; i64 -> i64*
  %i0ptr247415 = getelementptr inbounds i64, i64* %cloptr247414, i64 0               ; &cloptr247414[0]
  %f247417 = load i64, i64* %i0ptr247415, align 8                                    ; load; *i0ptr247415
  %fptr247416 = inttoptr i64 %f247417 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr247416(i64 %arg235138, i64 %x238635)                ; tail call
  ret void

else247407:
  %retprim234191 = call i64 @prim_void()                                             ; call prim_void
  %arg235186 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %sym238636 = add i64 0, 0                                                          ; quoted ()
  %x238637 = call i64 @prim_cons(i64 %retprim234191, i64 %sym238636)                 ; call prim_cons
  %x238638 = call i64 @prim_cons(i64 %arg235186, i64 %x238637)                       ; call prim_cons
  %cloptr247418 = inttoptr i64 %cont234181 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr247419 = getelementptr inbounds i64, i64* %cloptr247418, i64 0               ; &cloptr247418[0]
  %f247421 = load i64, i64* %i0ptr247419, align 8                                    ; load; *i0ptr247419
  %fptr247420 = inttoptr i64 %f247421 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr247420(i64 %cont234181, i64 %x238638)               ; tail call
  ret void

else247404:
  %many238645 = call i64 @const_init_string(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @str247422, i32 0, i32 0)); quoted string
  %fail238643 = call i64 @prim_halt(i64 %many238645)                                 ; call prim_halt
  %sym238648 = add i64 0, 0                                                          ; quoted ()
  %cloptr247423 = inttoptr i64 %fail238643 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr247424 = getelementptr inbounds i64, i64* %cloptr247423, i64 0               ; &cloptr247423[0]
  %f247426 = load i64, i64* %i0ptr247424, align 8                                    ; load; *i0ptr247424
  %fptr247425 = inttoptr i64 %f247426 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr247425(i64 %fail238643, i64 %sym238648)             ; tail call
  ret void
}


define void @lam243344(i64 %env243345, i64 %rvp238624) {
  %envptr247427 = inttoptr i64 %env243345 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr247428 = getelementptr inbounds i64, i64* %envptr247427, i64 3              ; &envptr247427[3]
  %f233714233894 = load i64, i64* %envptr247428, align 8                             ; load; *envptr247428
  %envptr247429 = inttoptr i64 %env243345 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr247430 = getelementptr inbounds i64, i64* %envptr247429, i64 2              ; &envptr247429[2]
  %cont234181 = load i64, i64* %envptr247430, align 8                                ; load; *envptr247430
  %envptr247431 = inttoptr i64 %env243345 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr247432 = getelementptr inbounds i64, i64* %envptr247431, i64 1              ; &envptr247431[1]
  %l233717233897 = load i64, i64* %envptr247432, align 8                             ; load; *envptr247432
  %check238625 = call i64 @prim_null_63(i64 %rvp238624)                              ; call prim_null_63
  %cmp247433 = icmp eq i64 %check238625, 15                                          ; false?
  br i1 %cmp247433, label %else247435, label %then247434                             ; if

then247434:
  %msg238629 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str247436, i32 0, i32 0)); quoted string
  %abort238627 = call i64 @prim_halt(i64 %msg238629)                                 ; call prim_halt
  %sym238632 = add i64 0, 0                                                          ; quoted ()
  %cloptr247437 = inttoptr i64 %abort238627 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr247438 = getelementptr inbounds i64, i64* %cloptr247437, i64 0               ; &cloptr247437[0]
  %f247440 = load i64, i64* %i0ptr247438, align 8                                    ; load; *i0ptr247438
  %fptr247439 = inttoptr i64 %f247440 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr247439(i64 %abort238627, i64 %sym238632)            ; tail call
  ret void

else247435:
  %_95234182 = call i64 @prim_car(i64 %rvp238624)                                    ; call prim_car
  %rvp238614 = call i64 @prim_cdr(i64 %rvp238624)                                    ; call prim_cdr
  %check238615 = call i64 @prim_null_63(i64 %rvp238614)                              ; call prim_null_63
  %cmp247441 = icmp eq i64 %check238615, 15                                          ; false?
  br i1 %cmp247441, label %else247443, label %then247442                             ; if

then247442:
  %msg238619 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str247444, i32 0, i32 0)); quoted string
  %abort238617 = call i64 @prim_halt(i64 %msg238619)                                 ; call prim_halt
  %sym238622 = add i64 0, 0                                                          ; quoted ()
  %cloptr247445 = inttoptr i64 %abort238617 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr247446 = getelementptr inbounds i64, i64* %cloptr247445, i64 0               ; &cloptr247445[0]
  %f247448 = load i64, i64* %i0ptr247446, align 8                                    ; load; *i0ptr247446
  %fptr247447 = inttoptr i64 %f247448 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr247447(i64 %abort238617, i64 %sym238622)            ; tail call
  ret void

else247443:
  %rest238621 = call i64 @prim_cdr(i64 %rvp238614)                                   ; call prim_cdr
  %empty238616 = call i64 @prim_null_63(i64 %rest238621)                             ; call prim_null_63
  %cmp247449 = icmp eq i64 %empty238616, 15                                          ; false?
  br i1 %cmp247449, label %else247451, label %then247450                             ; if

then247450:
  %_95t233718233898 = call i64 @prim_car(i64 %rvp238614)                             ; call prim_car
  %na238482 = call i64 @prim_cdr(i64 %rvp238614)                                     ; call prim_cdr
  %a234044 = call i64 @prim_car(i64 %l233717233897)                                  ; call prim_car
  %a234045 = call i64 @prim_cdr(i64 %a234044)                                        ; call prim_cdr
  %retprim234189 = call i64 @prim_procedure_63(i64 %a234045)                         ; call prim_procedure_63
  %cloptr247452 = call i64* @alloc(i64 32)                                           ; malloc
  %eptr247454 = getelementptr inbounds i64, i64* %cloptr247452, i64 1                ; &eptr247454[1]
  %eptr247455 = getelementptr inbounds i64, i64* %cloptr247452, i64 2                ; &eptr247455[2]
  %eptr247456 = getelementptr inbounds i64, i64* %cloptr247452, i64 3                ; &eptr247456[3]
  store i64 %l233717233897, i64* %eptr247454                                         ; *eptr247454 = %l233717233897
  store i64 %cont234181, i64* %eptr247455                                            ; *eptr247455 = %cont234181
  store i64 %f233714233894, i64* %eptr247456                                         ; *eptr247456 = %f233714233894
  %eptr247453 = getelementptr inbounds i64, i64* %cloptr247452, i64 0                ; &cloptr247452[0]
  %f247457 = ptrtoint void(i64,i64)* @lam243340 to i64                               ; fptr cast; i64(...)* -> i64
  store i64 %f247457, i64* %eptr247453                                               ; store fptr
  %arg235144 = ptrtoint i64* %cloptr247452 to i64                                    ; closure cast; i64* -> i64
  %arg235143 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %sym238611 = add i64 0, 0                                                          ; quoted ()
  %x238612 = call i64 @prim_cons(i64 %retprim234189, i64 %sym238611)                 ; call prim_cons
  %x238613 = call i64 @prim_cons(i64 %arg235143, i64 %x238612)                       ; call prim_cons
  %cloptr247458 = inttoptr i64 %arg235144 to i64*                                    ; closure/env cast; i64 -> i64*
  %i0ptr247459 = getelementptr inbounds i64, i64* %cloptr247458, i64 0               ; &cloptr247458[0]
  %f247461 = load i64, i64* %i0ptr247459, align 8                                    ; load; *i0ptr247459
  %fptr247460 = inttoptr i64 %f247461 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr247460(i64 %arg235144, i64 %x238613)                ; tail call
  ret void

else247451:
  %many238620 = call i64 @const_init_string(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @str247462, i32 0, i32 0)); quoted string
  %fail238618 = call i64 @prim_halt(i64 %many238620)                                 ; call prim_halt
  %sym238623 = add i64 0, 0                                                          ; quoted ()
  %cloptr247463 = inttoptr i64 %fail238618 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr247464 = getelementptr inbounds i64, i64* %cloptr247463, i64 0               ; &cloptr247463[0]
  %f247466 = load i64, i64* %i0ptr247464, align 8                                    ; load; *i0ptr247464
  %fptr247465 = inttoptr i64 %f247466 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr247465(i64 %fail238618, i64 %sym238623)             ; tail call
  ret void
}


define void @lam243340(i64 %env243341, i64 %rvp238602) {
  %envptr247467 = inttoptr i64 %env243341 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr247468 = getelementptr inbounds i64, i64* %envptr247467, i64 3              ; &envptr247467[3]
  %f233714233894 = load i64, i64* %envptr247468, align 8                             ; load; *envptr247468
  %envptr247469 = inttoptr i64 %env243341 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr247470 = getelementptr inbounds i64, i64* %envptr247469, i64 2              ; &envptr247469[2]
  %cont234181 = load i64, i64* %envptr247470, align 8                                ; load; *envptr247470
  %envptr247471 = inttoptr i64 %env243341 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr247472 = getelementptr inbounds i64, i64* %envptr247471, i64 1              ; &envptr247471[1]
  %l233717233897 = load i64, i64* %envptr247472, align 8                             ; load; *envptr247472
  %check238603 = call i64 @prim_null_63(i64 %rvp238602)                              ; call prim_null_63
  %cmp247473 = icmp eq i64 %check238603, 15                                          ; false?
  br i1 %cmp247473, label %else247475, label %then247474                             ; if

then247474:
  %msg238607 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str247476, i32 0, i32 0)); quoted string
  %abort238605 = call i64 @prim_halt(i64 %msg238607)                                 ; call prim_halt
  %sym238610 = add i64 0, 0                                                          ; quoted ()
  %cloptr247477 = inttoptr i64 %abort238605 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr247478 = getelementptr inbounds i64, i64* %cloptr247477, i64 0               ; &cloptr247477[0]
  %f247480 = load i64, i64* %i0ptr247478, align 8                                    ; load; *i0ptr247478
  %fptr247479 = inttoptr i64 %f247480 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr247479(i64 %abort238605, i64 %sym238610)            ; tail call
  ret void

else247475:
  %_95234187 = call i64 @prim_car(i64 %rvp238602)                                    ; call prim_car
  %rvp238592 = call i64 @prim_cdr(i64 %rvp238602)                                    ; call prim_cdr
  %check238593 = call i64 @prim_null_63(i64 %rvp238592)                              ; call prim_null_63
  %cmp247481 = icmp eq i64 %check238593, 15                                          ; false?
  br i1 %cmp247481, label %else247483, label %then247482                             ; if

then247482:
  %msg238597 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str247484, i32 0, i32 0)); quoted string
  %abort238595 = call i64 @prim_halt(i64 %msg238597)                                 ; call prim_halt
  %sym238600 = add i64 0, 0                                                          ; quoted ()
  %cloptr247485 = inttoptr i64 %abort238595 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr247486 = getelementptr inbounds i64, i64* %cloptr247485, i64 0               ; &cloptr247485[0]
  %f247488 = load i64, i64* %i0ptr247486, align 8                                    ; load; *i0ptr247486
  %fptr247487 = inttoptr i64 %f247488 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr247487(i64 %abort238595, i64 %sym238600)            ; tail call
  ret void

else247483:
  %rest238599 = call i64 @prim_cdr(i64 %rvp238592)                                   ; call prim_cdr
  %empty238594 = call i64 @prim_null_63(i64 %rest238599)                             ; call prim_null_63
  %cmp247489 = icmp eq i64 %empty238594, 15                                          ; false?
  br i1 %cmp247489, label %else247491, label %then247490                             ; if

then247490:
  %check233568233720233900 = call i64 @prim_car(i64 %rvp238592)                      ; call prim_car
  %na238484 = call i64 @prim_cdr(i64 %rvp238592)                                     ; call prim_cdr
  %cmp247492 = icmp eq i64 %check233568233720233900, 15                              ; false?
  br i1 %cmp247492, label %else247494, label %then247493                             ; if

then247493:
  %a234046 = call i64 @prim_car(i64 %l233717233897)                                  ; call prim_car
  %a234047 = call i64 @prim_cdr(i64 %a234046)                                        ; call prim_cdr
  %cloptr247495 = call i64* @alloc(i64 32)                                           ; malloc
  %eptr247497 = getelementptr inbounds i64, i64* %cloptr247495, i64 1                ; &eptr247497[1]
  %eptr247498 = getelementptr inbounds i64, i64* %cloptr247495, i64 2                ; &eptr247498[2]
  %eptr247499 = getelementptr inbounds i64, i64* %cloptr247495, i64 3                ; &eptr247499[3]
  store i64 %l233717233897, i64* %eptr247497                                         ; *eptr247497 = %l233717233897
  store i64 %cont234181, i64* %eptr247498                                            ; *eptr247498 = %cont234181
  store i64 %f233714233894, i64* %eptr247499                                         ; *eptr247499 = %f233714233894
  %eptr247496 = getelementptr inbounds i64, i64* %cloptr247495, i64 0                ; &cloptr247495[0]
  %f247500 = ptrtoint void(i64,i64)* @lam243309 to i64                               ; fptr cast; i64(...)* -> i64
  store i64 %f247500, i64* %eptr247496                                               ; store fptr
  %arg235147 = ptrtoint i64* %cloptr247495 to i64                                    ; closure cast; i64* -> i64
  %sym238536 = add i64 0, 0                                                          ; quoted ()
  %x238537 = call i64 @prim_cons(i64 %arg235147, i64 %sym238536)                     ; call prim_cons
  %cloptr247501 = inttoptr i64 %a234047 to i64*                                      ; closure/env cast; i64 -> i64*
  %i0ptr247502 = getelementptr inbounds i64, i64* %cloptr247501, i64 0               ; &cloptr247501[0]
  %f247504 = load i64, i64* %i0ptr247502, align 8                                    ; load; *i0ptr247502
  %fptr247503 = inttoptr i64 %f247504 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr247503(i64 %a234047, i64 %x238537)                  ; tail call
  ret void

else247494:
  %arg235165 = call i64 @const_init_string(i8* getelementptr inbounds ([71 x i8], [71 x i8]* @str247505, i32 0, i32 0)); quoted string
  %retprim234188 = call i64 @prim_halt(i64 %arg235165)                               ; call prim_halt
  %cloptr247506 = call i64* @alloc(i64 32)                                           ; malloc
  %eptr247508 = getelementptr inbounds i64, i64* %cloptr247506, i64 1                ; &eptr247508[1]
  %eptr247509 = getelementptr inbounds i64, i64* %cloptr247506, i64 2                ; &eptr247509[2]
  %eptr247510 = getelementptr inbounds i64, i64* %cloptr247506, i64 3                ; &eptr247510[3]
  store i64 %l233717233897, i64* %eptr247508                                         ; *eptr247508 = %l233717233897
  store i64 %cont234181, i64* %eptr247509                                            ; *eptr247509 = %cont234181
  store i64 %f233714233894, i64* %eptr247510                                         ; *eptr247510 = %f233714233894
  %eptr247507 = getelementptr inbounds i64, i64* %cloptr247506, i64 0                ; &cloptr247506[0]
  %f247511 = ptrtoint void(i64,i64)* @lam243335 to i64                               ; fptr cast; i64(...)* -> i64
  store i64 %f247511, i64* %eptr247507                                               ; store fptr
  %arg235168 = ptrtoint i64* %cloptr247506 to i64                                    ; closure cast; i64* -> i64
  %arg235167 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %sym238589 = add i64 0, 0                                                          ; quoted ()
  %x238590 = call i64 @prim_cons(i64 %retprim234188, i64 %sym238589)                 ; call prim_cons
  %x238591 = call i64 @prim_cons(i64 %arg235167, i64 %x238590)                       ; call prim_cons
  %cloptr247512 = inttoptr i64 %arg235168 to i64*                                    ; closure/env cast; i64 -> i64*
  %i0ptr247513 = getelementptr inbounds i64, i64* %cloptr247512, i64 0               ; &cloptr247512[0]
  %f247515 = load i64, i64* %i0ptr247513, align 8                                    ; load; *i0ptr247513
  %fptr247514 = inttoptr i64 %f247515 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr247514(i64 %arg235168, i64 %x238591)                ; tail call
  ret void

else247491:
  %many238598 = call i64 @const_init_string(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @str247516, i32 0, i32 0)); quoted string
  %fail238596 = call i64 @prim_halt(i64 %many238598)                                 ; call prim_halt
  %sym238601 = add i64 0, 0                                                          ; quoted ()
  %cloptr247517 = inttoptr i64 %fail238596 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr247518 = getelementptr inbounds i64, i64* %cloptr247517, i64 0               ; &cloptr247517[0]
  %f247520 = load i64, i64* %i0ptr247518, align 8                                    ; load; *i0ptr247518
  %fptr247519 = inttoptr i64 %f247520 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr247519(i64 %fail238596, i64 %sym238601)             ; tail call
  ret void
}


define void @lam243335(i64 %env243336, i64 %rvp238580) {
  %envptr247521 = inttoptr i64 %env243336 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr247522 = getelementptr inbounds i64, i64* %envptr247521, i64 3              ; &envptr247521[3]
  %f233714233894 = load i64, i64* %envptr247522, align 8                             ; load; *envptr247522
  %envptr247523 = inttoptr i64 %env243336 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr247524 = getelementptr inbounds i64, i64* %envptr247523, i64 2              ; &envptr247523[2]
  %cont234181 = load i64, i64* %envptr247524, align 8                                ; load; *envptr247524
  %envptr247525 = inttoptr i64 %env243336 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr247526 = getelementptr inbounds i64, i64* %envptr247525, i64 1              ; &envptr247525[1]
  %l233717233897 = load i64, i64* %envptr247526, align 8                             ; load; *envptr247526
  %check238581 = call i64 @prim_null_63(i64 %rvp238580)                              ; call prim_null_63
  %cmp247527 = icmp eq i64 %check238581, 15                                          ; false?
  br i1 %cmp247527, label %else247529, label %then247528                             ; if

then247528:
  %msg238585 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str247530, i32 0, i32 0)); quoted string
  %abort238583 = call i64 @prim_halt(i64 %msg238585)                                 ; call prim_halt
  %sym238588 = add i64 0, 0                                                          ; quoted ()
  %cloptr247531 = inttoptr i64 %abort238583 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr247532 = getelementptr inbounds i64, i64* %cloptr247531, i64 0               ; &cloptr247531[0]
  %f247534 = load i64, i64* %i0ptr247532, align 8                                    ; load; *i0ptr247532
  %fptr247533 = inttoptr i64 %f247534 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr247533(i64 %abort238583, i64 %sym238588)            ; tail call
  ret void

else247529:
  %_95234183 = call i64 @prim_car(i64 %rvp238580)                                    ; call prim_car
  %rvp238570 = call i64 @prim_cdr(i64 %rvp238580)                                    ; call prim_cdr
  %check238571 = call i64 @prim_null_63(i64 %rvp238570)                              ; call prim_null_63
  %cmp247535 = icmp eq i64 %check238571, 15                                          ; false?
  br i1 %cmp247535, label %else247537, label %then247536                             ; if

then247536:
  %msg238575 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str247538, i32 0, i32 0)); quoted string
  %abort238573 = call i64 @prim_halt(i64 %msg238575)                                 ; call prim_halt
  %sym238578 = add i64 0, 0                                                          ; quoted ()
  %cloptr247539 = inttoptr i64 %abort238573 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr247540 = getelementptr inbounds i64, i64* %cloptr247539, i64 0               ; &cloptr247539[0]
  %f247542 = load i64, i64* %i0ptr247540, align 8                                    ; load; *i0ptr247540
  %fptr247541 = inttoptr i64 %f247542 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr247541(i64 %abort238573, i64 %sym238578)            ; tail call
  ret void

else247537:
  %rest238577 = call i64 @prim_cdr(i64 %rvp238570)                                   ; call prim_cdr
  %empty238572 = call i64 @prim_null_63(i64 %rest238577)                             ; call prim_null_63
  %cmp247543 = icmp eq i64 %empty238572, 15                                          ; false?
  br i1 %cmp247543, label %else247545, label %then247544                             ; if

then247544:
  %_95t233719233899 = call i64 @prim_car(i64 %rvp238570)                             ; call prim_car
  %na238539 = call i64 @prim_cdr(i64 %rvp238570)                                     ; call prim_cdr
  %arg235169 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %a234048 = call i64 @prim_vector_45ref(i64 %f233714233894, i64 %arg235169)         ; call prim_vector_45ref
  %retprim234186 = call i64 @prim_procedure_63(i64 %a234048)                         ; call prim_procedure_63
  %cloptr247546 = call i64* @alloc(i64 32)                                           ; malloc
  %eptr247548 = getelementptr inbounds i64, i64* %cloptr247546, i64 1                ; &eptr247548[1]
  %eptr247549 = getelementptr inbounds i64, i64* %cloptr247546, i64 2                ; &eptr247549[2]
  %eptr247550 = getelementptr inbounds i64, i64* %cloptr247546, i64 3                ; &eptr247550[3]
  store i64 %l233717233897, i64* %eptr247548                                         ; *eptr247548 = %l233717233897
  store i64 %cont234181, i64* %eptr247549                                            ; *eptr247549 = %cont234181
  store i64 %f233714233894, i64* %eptr247550                                         ; *eptr247550 = %f233714233894
  %eptr247547 = getelementptr inbounds i64, i64* %cloptr247546, i64 0                ; &cloptr247546[0]
  %f247551 = ptrtoint void(i64,i64)* @lam243330 to i64                               ; fptr cast; i64(...)* -> i64
  store i64 %f247551, i64* %eptr247547                                               ; store fptr
  %arg235174 = ptrtoint i64* %cloptr247546 to i64                                    ; closure cast; i64* -> i64
  %arg235173 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %sym238567 = add i64 0, 0                                                          ; quoted ()
  %x238568 = call i64 @prim_cons(i64 %retprim234186, i64 %sym238567)                 ; call prim_cons
  %x238569 = call i64 @prim_cons(i64 %arg235173, i64 %x238568)                       ; call prim_cons
  %cloptr247552 = inttoptr i64 %arg235174 to i64*                                    ; closure/env cast; i64 -> i64*
  %i0ptr247553 = getelementptr inbounds i64, i64* %cloptr247552, i64 0               ; &cloptr247552[0]
  %f247555 = load i64, i64* %i0ptr247553, align 8                                    ; load; *i0ptr247553
  %fptr247554 = inttoptr i64 %f247555 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr247554(i64 %arg235174, i64 %x238569)                ; tail call
  ret void

else247545:
  %many238576 = call i64 @const_init_string(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @str247556, i32 0, i32 0)); quoted string
  %fail238574 = call i64 @prim_halt(i64 %many238576)                                 ; call prim_halt
  %sym238579 = add i64 0, 0                                                          ; quoted ()
  %cloptr247557 = inttoptr i64 %fail238574 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr247558 = getelementptr inbounds i64, i64* %cloptr247557, i64 0               ; &cloptr247557[0]
  %f247560 = load i64, i64* %i0ptr247558, align 8                                    ; load; *i0ptr247558
  %fptr247559 = inttoptr i64 %f247560 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr247559(i64 %fail238574, i64 %sym238579)             ; tail call
  ret void
}


define void @lam243330(i64 %env243331, i64 %rvp238558) {
  %envptr247561 = inttoptr i64 %env243331 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr247562 = getelementptr inbounds i64, i64* %envptr247561, i64 3              ; &envptr247561[3]
  %f233714233894 = load i64, i64* %envptr247562, align 8                             ; load; *envptr247562
  %envptr247563 = inttoptr i64 %env243331 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr247564 = getelementptr inbounds i64, i64* %envptr247563, i64 2              ; &envptr247563[2]
  %cont234181 = load i64, i64* %envptr247564, align 8                                ; load; *envptr247564
  %envptr247565 = inttoptr i64 %env243331 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr247566 = getelementptr inbounds i64, i64* %envptr247565, i64 1              ; &envptr247565[1]
  %l233717233897 = load i64, i64* %envptr247566, align 8                             ; load; *envptr247566
  %check238559 = call i64 @prim_null_63(i64 %rvp238558)                              ; call prim_null_63
  %cmp247567 = icmp eq i64 %check238559, 15                                          ; false?
  br i1 %cmp247567, label %else247569, label %then247568                             ; if

then247568:
  %msg238563 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str247570, i32 0, i32 0)); quoted string
  %abort238561 = call i64 @prim_halt(i64 %msg238563)                                 ; call prim_halt
  %sym238566 = add i64 0, 0                                                          ; quoted ()
  %cloptr247571 = inttoptr i64 %abort238561 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr247572 = getelementptr inbounds i64, i64* %cloptr247571, i64 0               ; &cloptr247571[0]
  %f247574 = load i64, i64* %i0ptr247572, align 8                                    ; load; *i0ptr247572
  %fptr247573 = inttoptr i64 %f247574 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr247573(i64 %abort238561, i64 %sym238566)            ; tail call
  ret void

else247569:
  %_95234184 = call i64 @prim_car(i64 %rvp238558)                                    ; call prim_car
  %rvp238548 = call i64 @prim_cdr(i64 %rvp238558)                                    ; call prim_cdr
  %check238549 = call i64 @prim_null_63(i64 %rvp238548)                              ; call prim_null_63
  %cmp247575 = icmp eq i64 %check238549, 15                                          ; false?
  br i1 %cmp247575, label %else247577, label %then247576                             ; if

then247576:
  %msg238553 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str247578, i32 0, i32 0)); quoted string
  %abort238551 = call i64 @prim_halt(i64 %msg238553)                                 ; call prim_halt
  %sym238556 = add i64 0, 0                                                          ; quoted ()
  %cloptr247579 = inttoptr i64 %abort238551 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr247580 = getelementptr inbounds i64, i64* %cloptr247579, i64 0               ; &cloptr247579[0]
  %f247582 = load i64, i64* %i0ptr247580, align 8                                    ; load; *i0ptr247580
  %fptr247581 = inttoptr i64 %f247582 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr247581(i64 %abort238551, i64 %sym238556)            ; tail call
  ret void

else247577:
  %rest238555 = call i64 @prim_cdr(i64 %rvp238548)                                   ; call prim_cdr
  %empty238550 = call i64 @prim_null_63(i64 %rest238555)                             ; call prim_null_63
  %cmp247583 = icmp eq i64 %empty238550, 15                                          ; false?
  br i1 %cmp247583, label %else247585, label %then247584                             ; if

then247584:
  %check233569233721233901 = call i64 @prim_car(i64 %rvp238548)                      ; call prim_car
  %na238541 = call i64 @prim_cdr(i64 %rvp238548)                                     ; call prim_cdr
  %cmp247586 = icmp eq i64 %check233569233721233901, 15                              ; false?
  br i1 %cmp247586, label %else247588, label %then247587                             ; if

then247587:
  %arg235175 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %a234049 = call i64 @prim_vector_45ref(i64 %f233714233894, i64 %arg235175)         ; call prim_vector_45ref
  %a234050 = call i64 @prim_cdr(i64 %l233717233897)                                  ; call prim_cdr
  %sym238542 = add i64 0, 0                                                          ; quoted ()
  %x238543 = call i64 @prim_cons(i64 %a234050, i64 %sym238542)                       ; call prim_cons
  %x238544 = call i64 @prim_cons(i64 %cont234181, i64 %x238543)                      ; call prim_cons
  %cloptr247589 = inttoptr i64 %a234049 to i64*                                      ; closure/env cast; i64 -> i64*
  %i0ptr247590 = getelementptr inbounds i64, i64* %cloptr247589, i64 0               ; &cloptr247589[0]
  %f247592 = load i64, i64* %i0ptr247590, align 8                                    ; load; *i0ptr247590
  %fptr247591 = inttoptr i64 %f247592 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr247591(i64 %a234049, i64 %x238544)                  ; tail call
  ret void

else247588:
  %arg235181 = call i64 @const_init_string(i8* getelementptr inbounds ([67 x i8], [67 x i8]* @str247593, i32 0, i32 0)); quoted string
  %retprim234185 = call i64 @prim_halt(i64 %arg235181)                               ; call prim_halt
  %arg235183 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %sym238545 = add i64 0, 0                                                          ; quoted ()
  %x238546 = call i64 @prim_cons(i64 %retprim234185, i64 %sym238545)                 ; call prim_cons
  %x238547 = call i64 @prim_cons(i64 %arg235183, i64 %x238546)                       ; call prim_cons
  %cloptr247594 = inttoptr i64 %cont234181 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr247595 = getelementptr inbounds i64, i64* %cloptr247594, i64 0               ; &cloptr247594[0]
  %f247597 = load i64, i64* %i0ptr247595, align 8                                    ; load; *i0ptr247595
  %fptr247596 = inttoptr i64 %f247597 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr247596(i64 %cont234181, i64 %x238547)               ; tail call
  ret void

else247585:
  %many238554 = call i64 @const_init_string(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @str247598, i32 0, i32 0)); quoted string
  %fail238552 = call i64 @prim_halt(i64 %many238554)                                 ; call prim_halt
  %sym238557 = add i64 0, 0                                                          ; quoted ()
  %cloptr247599 = inttoptr i64 %fail238552 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr247600 = getelementptr inbounds i64, i64* %cloptr247599, i64 0               ; &cloptr247599[0]
  %f247602 = load i64, i64* %i0ptr247600, align 8                                    ; load; *i0ptr247600
  %fptr247601 = inttoptr i64 %f247602 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr247601(i64 %fail238552, i64 %sym238557)             ; tail call
  ret void
}


define void @lam243309(i64 %env243310, i64 %rvp238527) {
  %envptr247603 = inttoptr i64 %env243310 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr247604 = getelementptr inbounds i64, i64* %envptr247603, i64 3              ; &envptr247603[3]
  %f233714233894 = load i64, i64* %envptr247604, align 8                             ; load; *envptr247604
  %envptr247605 = inttoptr i64 %env243310 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr247606 = getelementptr inbounds i64, i64* %envptr247605, i64 2              ; &envptr247605[2]
  %cont234181 = load i64, i64* %envptr247606, align 8                                ; load; *envptr247606
  %envptr247607 = inttoptr i64 %env243310 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr247608 = getelementptr inbounds i64, i64* %envptr247607, i64 1              ; &envptr247607[1]
  %l233717233897 = load i64, i64* %envptr247608, align 8                             ; load; *envptr247608
  %check238528 = call i64 @prim_null_63(i64 %rvp238527)                              ; call prim_null_63
  %cmp247609 = icmp eq i64 %check238528, 15                                          ; false?
  br i1 %cmp247609, label %else247611, label %then247610                             ; if

then247610:
  %msg238532 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str247612, i32 0, i32 0)); quoted string
  %abort238530 = call i64 @prim_halt(i64 %msg238532)                                 ; call prim_halt
  %sym238535 = add i64 0, 0                                                          ; quoted ()
  %cloptr247613 = inttoptr i64 %abort238530 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr247614 = getelementptr inbounds i64, i64* %cloptr247613, i64 0               ; &cloptr247613[0]
  %f247616 = load i64, i64* %i0ptr247614, align 8                                    ; load; *i0ptr247614
  %fptr247615 = inttoptr i64 %f247616 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr247615(i64 %abort238530, i64 %sym238535)            ; tail call
  ret void

else247611:
  %_95234183 = call i64 @prim_car(i64 %rvp238527)                                    ; call prim_car
  %rvp238517 = call i64 @prim_cdr(i64 %rvp238527)                                    ; call prim_cdr
  %check238518 = call i64 @prim_null_63(i64 %rvp238517)                              ; call prim_null_63
  %cmp247617 = icmp eq i64 %check238518, 15                                          ; false?
  br i1 %cmp247617, label %else247619, label %then247618                             ; if

then247618:
  %msg238522 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str247620, i32 0, i32 0)); quoted string
  %abort238520 = call i64 @prim_halt(i64 %msg238522)                                 ; call prim_halt
  %sym238525 = add i64 0, 0                                                          ; quoted ()
  %cloptr247621 = inttoptr i64 %abort238520 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr247622 = getelementptr inbounds i64, i64* %cloptr247621, i64 0               ; &cloptr247621[0]
  %f247624 = load i64, i64* %i0ptr247622, align 8                                    ; load; *i0ptr247622
  %fptr247623 = inttoptr i64 %f247624 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr247623(i64 %abort238520, i64 %sym238525)            ; tail call
  ret void

else247619:
  %rest238524 = call i64 @prim_cdr(i64 %rvp238517)                                   ; call prim_cdr
  %empty238519 = call i64 @prim_null_63(i64 %rest238524)                             ; call prim_null_63
  %cmp247625 = icmp eq i64 %empty238519, 15                                          ; false?
  br i1 %cmp247625, label %else247627, label %then247626                             ; if

then247626:
  %_95t233719233899 = call i64 @prim_car(i64 %rvp238517)                             ; call prim_car
  %na238486 = call i64 @prim_cdr(i64 %rvp238517)                                     ; call prim_cdr
  %arg235149 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %a234048 = call i64 @prim_vector_45ref(i64 %f233714233894, i64 %arg235149)         ; call prim_vector_45ref
  %retprim234186 = call i64 @prim_procedure_63(i64 %a234048)                         ; call prim_procedure_63
  %cloptr247628 = call i64* @alloc(i64 32)                                           ; malloc
  %eptr247630 = getelementptr inbounds i64, i64* %cloptr247628, i64 1                ; &eptr247630[1]
  %eptr247631 = getelementptr inbounds i64, i64* %cloptr247628, i64 2                ; &eptr247631[2]
  %eptr247632 = getelementptr inbounds i64, i64* %cloptr247628, i64 3                ; &eptr247632[3]
  store i64 %l233717233897, i64* %eptr247630                                         ; *eptr247630 = %l233717233897
  store i64 %cont234181, i64* %eptr247631                                            ; *eptr247631 = %cont234181
  store i64 %f233714233894, i64* %eptr247632                                         ; *eptr247632 = %f233714233894
  %eptr247629 = getelementptr inbounds i64, i64* %cloptr247628, i64 0                ; &cloptr247628[0]
  %f247633 = ptrtoint void(i64,i64)* @lam243304 to i64                               ; fptr cast; i64(...)* -> i64
  store i64 %f247633, i64* %eptr247629                                               ; store fptr
  %arg235154 = ptrtoint i64* %cloptr247628 to i64                                    ; closure cast; i64* -> i64
  %arg235153 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %sym238514 = add i64 0, 0                                                          ; quoted ()
  %x238515 = call i64 @prim_cons(i64 %retprim234186, i64 %sym238514)                 ; call prim_cons
  %x238516 = call i64 @prim_cons(i64 %arg235153, i64 %x238515)                       ; call prim_cons
  %cloptr247634 = inttoptr i64 %arg235154 to i64*                                    ; closure/env cast; i64 -> i64*
  %i0ptr247635 = getelementptr inbounds i64, i64* %cloptr247634, i64 0               ; &cloptr247634[0]
  %f247637 = load i64, i64* %i0ptr247635, align 8                                    ; load; *i0ptr247635
  %fptr247636 = inttoptr i64 %f247637 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr247636(i64 %arg235154, i64 %x238516)                ; tail call
  ret void

else247627:
  %many238523 = call i64 @const_init_string(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @str247638, i32 0, i32 0)); quoted string
  %fail238521 = call i64 @prim_halt(i64 %many238523)                                 ; call prim_halt
  %sym238526 = add i64 0, 0                                                          ; quoted ()
  %cloptr247639 = inttoptr i64 %fail238521 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr247640 = getelementptr inbounds i64, i64* %cloptr247639, i64 0               ; &cloptr247639[0]
  %f247642 = load i64, i64* %i0ptr247640, align 8                                    ; load; *i0ptr247640
  %fptr247641 = inttoptr i64 %f247642 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr247641(i64 %fail238521, i64 %sym238526)             ; tail call
  ret void
}


define void @lam243304(i64 %env243305, i64 %rvp238505) {
  %envptr247643 = inttoptr i64 %env243305 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr247644 = getelementptr inbounds i64, i64* %envptr247643, i64 3              ; &envptr247643[3]
  %f233714233894 = load i64, i64* %envptr247644, align 8                             ; load; *envptr247644
  %envptr247645 = inttoptr i64 %env243305 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr247646 = getelementptr inbounds i64, i64* %envptr247645, i64 2              ; &envptr247645[2]
  %cont234181 = load i64, i64* %envptr247646, align 8                                ; load; *envptr247646
  %envptr247647 = inttoptr i64 %env243305 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr247648 = getelementptr inbounds i64, i64* %envptr247647, i64 1              ; &envptr247647[1]
  %l233717233897 = load i64, i64* %envptr247648, align 8                             ; load; *envptr247648
  %check238506 = call i64 @prim_null_63(i64 %rvp238505)                              ; call prim_null_63
  %cmp247649 = icmp eq i64 %check238506, 15                                          ; false?
  br i1 %cmp247649, label %else247651, label %then247650                             ; if

then247650:
  %msg238510 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str247652, i32 0, i32 0)); quoted string
  %abort238508 = call i64 @prim_halt(i64 %msg238510)                                 ; call prim_halt
  %sym238513 = add i64 0, 0                                                          ; quoted ()
  %cloptr247653 = inttoptr i64 %abort238508 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr247654 = getelementptr inbounds i64, i64* %cloptr247653, i64 0               ; &cloptr247653[0]
  %f247656 = load i64, i64* %i0ptr247654, align 8                                    ; load; *i0ptr247654
  %fptr247655 = inttoptr i64 %f247656 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr247655(i64 %abort238508, i64 %sym238513)            ; tail call
  ret void

else247651:
  %_95234184 = call i64 @prim_car(i64 %rvp238505)                                    ; call prim_car
  %rvp238495 = call i64 @prim_cdr(i64 %rvp238505)                                    ; call prim_cdr
  %check238496 = call i64 @prim_null_63(i64 %rvp238495)                              ; call prim_null_63
  %cmp247657 = icmp eq i64 %check238496, 15                                          ; false?
  br i1 %cmp247657, label %else247659, label %then247658                             ; if

then247658:
  %msg238500 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str247660, i32 0, i32 0)); quoted string
  %abort238498 = call i64 @prim_halt(i64 %msg238500)                                 ; call prim_halt
  %sym238503 = add i64 0, 0                                                          ; quoted ()
  %cloptr247661 = inttoptr i64 %abort238498 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr247662 = getelementptr inbounds i64, i64* %cloptr247661, i64 0               ; &cloptr247661[0]
  %f247664 = load i64, i64* %i0ptr247662, align 8                                    ; load; *i0ptr247662
  %fptr247663 = inttoptr i64 %f247664 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr247663(i64 %abort238498, i64 %sym238503)            ; tail call
  ret void

else247659:
  %rest238502 = call i64 @prim_cdr(i64 %rvp238495)                                   ; call prim_cdr
  %empty238497 = call i64 @prim_null_63(i64 %rest238502)                             ; call prim_null_63
  %cmp247665 = icmp eq i64 %empty238497, 15                                          ; false?
  br i1 %cmp247665, label %else247667, label %then247666                             ; if

then247666:
  %check233569233721233901 = call i64 @prim_car(i64 %rvp238495)                      ; call prim_car
  %na238488 = call i64 @prim_cdr(i64 %rvp238495)                                     ; call prim_cdr
  %cmp247668 = icmp eq i64 %check233569233721233901, 15                              ; false?
  br i1 %cmp247668, label %else247670, label %then247669                             ; if

then247669:
  %arg235155 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %a234049 = call i64 @prim_vector_45ref(i64 %f233714233894, i64 %arg235155)         ; call prim_vector_45ref
  %a234050 = call i64 @prim_cdr(i64 %l233717233897)                                  ; call prim_cdr
  %sym238489 = add i64 0, 0                                                          ; quoted ()
  %x238490 = call i64 @prim_cons(i64 %a234050, i64 %sym238489)                       ; call prim_cons
  %x238491 = call i64 @prim_cons(i64 %cont234181, i64 %x238490)                      ; call prim_cons
  %cloptr247671 = inttoptr i64 %a234049 to i64*                                      ; closure/env cast; i64 -> i64*
  %i0ptr247672 = getelementptr inbounds i64, i64* %cloptr247671, i64 0               ; &cloptr247671[0]
  %f247674 = load i64, i64* %i0ptr247672, align 8                                    ; load; *i0ptr247672
  %fptr247673 = inttoptr i64 %f247674 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr247673(i64 %a234049, i64 %x238491)                  ; tail call
  ret void

else247670:
  %arg235161 = call i64 @const_init_string(i8* getelementptr inbounds ([67 x i8], [67 x i8]* @str247675, i32 0, i32 0)); quoted string
  %retprim234185 = call i64 @prim_halt(i64 %arg235161)                               ; call prim_halt
  %arg235163 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %sym238492 = add i64 0, 0                                                          ; quoted ()
  %x238493 = call i64 @prim_cons(i64 %retprim234185, i64 %sym238492)                 ; call prim_cons
  %x238494 = call i64 @prim_cons(i64 %arg235163, i64 %x238493)                       ; call prim_cons
  %cloptr247676 = inttoptr i64 %cont234181 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr247677 = getelementptr inbounds i64, i64* %cloptr247676, i64 0               ; &cloptr247676[0]
  %f247679 = load i64, i64* %i0ptr247677, align 8                                    ; load; *i0ptr247677
  %fptr247678 = inttoptr i64 %f247679 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr247678(i64 %cont234181, i64 %x238494)               ; tail call
  ret void

else247667:
  %many238501 = call i64 @const_init_string(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @str247680, i32 0, i32 0)); quoted string
  %fail238499 = call i64 @prim_halt(i64 %many238501)                                 ; call prim_halt
  %sym238504 = add i64 0, 0                                                          ; quoted ()
  %cloptr247681 = inttoptr i64 %fail238499 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr247682 = getelementptr inbounds i64, i64* %cloptr247681, i64 0               ; &cloptr247681[0]
  %f247684 = load i64, i64* %i0ptr247682, align 8                                    ; load; *i0ptr247682
  %fptr247683 = inttoptr i64 %f247684 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr247683(i64 %fail238499, i64 %sym238504)             ; tail call
  ret void
}


define void @lam243266(i64 %env243267, i64 %rvp239378) {
  %envptr247685 = inttoptr i64 %env243267 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr247686 = getelementptr inbounds i64, i64* %envptr247685, i64 5              ; &envptr247685[5]
  %_37wind_45stack233694233874 = load i64, i64* %envptr247686, align 8               ; load; *envptr247686
  %envptr247687 = inttoptr i64 %env243267 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr247688 = getelementptr inbounds i64, i64* %envptr247687, i64 4              ; &envptr247687[4]
  %tail233711233891 = load i64, i64* %envptr247688, align 8                          ; load; *envptr247688
  %envptr247689 = inttoptr i64 %env243267 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr247690 = getelementptr inbounds i64, i64* %envptr247689, i64 3              ; &envptr247689[3]
  %f233714233894 = load i64, i64* %envptr247690, align 8                             ; load; *envptr247690
  %envptr247691 = inttoptr i64 %env243267 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr247692 = getelementptr inbounds i64, i64* %envptr247691, i64 2              ; &envptr247691[2]
  %cont234158 = load i64, i64* %envptr247692, align 8                                ; load; *envptr247692
  %envptr247693 = inttoptr i64 %env243267 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr247694 = getelementptr inbounds i64, i64* %envptr247693, i64 1              ; &envptr247693[1]
  %new233710233890 = load i64, i64* %envptr247694, align 8                           ; load; *envptr247694
  %check239379 = call i64 @prim_null_63(i64 %rvp239378)                              ; call prim_null_63
  %cmp247695 = icmp eq i64 %check239379, 15                                          ; false?
  br i1 %cmp247695, label %else247697, label %then247696                             ; if

then247696:
  %msg239383 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str247698, i32 0, i32 0)); quoted string
  %abort239381 = call i64 @prim_halt(i64 %msg239383)                                 ; call prim_halt
  %sym239386 = add i64 0, 0                                                          ; quoted ()
  %cloptr247699 = inttoptr i64 %abort239381 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr247700 = getelementptr inbounds i64, i64* %cloptr247699, i64 0               ; &cloptr247699[0]
  %f247702 = load i64, i64* %i0ptr247700, align 8                                    ; load; *i0ptr247700
  %fptr247701 = inttoptr i64 %f247702 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr247701(i64 %abort239381, i64 %sym239386)            ; tail call
  ret void

else247697:
  %_95234192 = call i64 @prim_car(i64 %rvp239378)                                    ; call prim_car
  %rvp239368 = call i64 @prim_cdr(i64 %rvp239378)                                    ; call prim_cdr
  %check239369 = call i64 @prim_null_63(i64 %rvp239368)                              ; call prim_null_63
  %cmp247703 = icmp eq i64 %check239369, 15                                          ; false?
  br i1 %cmp247703, label %else247705, label %then247704                             ; if

then247704:
  %msg239373 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str247706, i32 0, i32 0)); quoted string
  %abort239371 = call i64 @prim_halt(i64 %msg239373)                                 ; call prim_halt
  %sym239376 = add i64 0, 0                                                          ; quoted ()
  %cloptr247707 = inttoptr i64 %abort239371 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr247708 = getelementptr inbounds i64, i64* %cloptr247707, i64 0               ; &cloptr247707[0]
  %f247710 = load i64, i64* %i0ptr247708, align 8                                    ; load; *i0ptr247708
  %fptr247709 = inttoptr i64 %f247710 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr247709(i64 %abort239371, i64 %sym239376)            ; tail call
  ret void

else247705:
  %rest239375 = call i64 @prim_cdr(i64 %rvp239368)                                   ; call prim_cdr
  %empty239370 = call i64 @prim_null_63(i64 %rest239375)                             ; call prim_null_63
  %cmp247711 = icmp eq i64 %empty239370, 15                                          ; false?
  br i1 %cmp247711, label %else247713, label %then247712                             ; if

then247712:
  %check233570233723233903 = call i64 @prim_car(i64 %rvp239368)                      ; call prim_car
  %na238659 = call i64 @prim_cdr(i64 %rvp239368)                                     ; call prim_cdr
  %cmp247714 = icmp eq i64 %check233570233723233903, 15                              ; false?
  br i1 %cmp247714, label %else247716, label %then247715                             ; if

then247715:
  %arg235197 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %a234052 = call i64 @prim_vector_45ref(i64 %f233714233894, i64 %arg235197)         ; call prim_vector_45ref
  %arg235199 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %a234053 = call i64 @prim_vector_45ref(i64 %_37wind_45stack233694233874, i64 %arg235199); call prim_vector_45ref
  %cloptr247717 = call i64* @alloc(i64 40)                                           ; malloc
  %eptr247719 = getelementptr inbounds i64, i64* %cloptr247717, i64 1                ; &eptr247719[1]
  %eptr247720 = getelementptr inbounds i64, i64* %cloptr247717, i64 2                ; &eptr247720[2]
  %eptr247721 = getelementptr inbounds i64, i64* %cloptr247717, i64 3                ; &eptr247721[3]
  %eptr247722 = getelementptr inbounds i64, i64* %cloptr247717, i64 4                ; &eptr247722[4]
  store i64 %new233710233890, i64* %eptr247719                                       ; *eptr247719 = %new233710233890
  store i64 %cont234158, i64* %eptr247720                                            ; *eptr247720 = %cont234158
  store i64 %tail233711233891, i64* %eptr247721                                      ; *eptr247721 = %tail233711233891
  store i64 %_37wind_45stack233694233874, i64* %eptr247722                           ; *eptr247722 = %_37wind_45stack233694233874
  %eptr247718 = getelementptr inbounds i64, i64* %cloptr247717, i64 0                ; &cloptr247717[0]
  %f247723 = ptrtoint void(i64,i64)* @lam243094 to i64                               ; fptr cast; i64(...)* -> i64
  store i64 %f247723, i64* %eptr247718                                               ; store fptr
  %arg235202 = ptrtoint i64* %cloptr247717 to i64                                    ; closure cast; i64* -> i64
  %sym239011 = add i64 0, 0                                                          ; quoted ()
  %x239012 = call i64 @prim_cons(i64 %a234053, i64 %sym239011)                       ; call prim_cons
  %x239013 = call i64 @prim_cons(i64 %arg235202, i64 %x239012)                       ; call prim_cons
  %cloptr247724 = inttoptr i64 %a234052 to i64*                                      ; closure/env cast; i64 -> i64*
  %i0ptr247725 = getelementptr inbounds i64, i64* %cloptr247724, i64 0               ; &cloptr247724[0]
  %f247727 = load i64, i64* %i0ptr247725, align 8                                    ; load; *i0ptr247725
  %fptr247726 = inttoptr i64 %f247727 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr247726(i64 %a234052, i64 %x239013)                  ; tail call
  ret void

else247716:
  %arg235308 = call i64 @const_init_string(i8* getelementptr inbounds ([71 x i8], [71 x i8]* @str247728, i32 0, i32 0)); quoted string
  %retprim234193 = call i64 @prim_halt(i64 %arg235308)                               ; call prim_halt
  %cloptr247729 = call i64* @alloc(i64 40)                                           ; malloc
  %eptr247731 = getelementptr inbounds i64, i64* %cloptr247729, i64 1                ; &eptr247731[1]
  %eptr247732 = getelementptr inbounds i64, i64* %cloptr247729, i64 2                ; &eptr247732[2]
  %eptr247733 = getelementptr inbounds i64, i64* %cloptr247729, i64 3                ; &eptr247733[3]
  %eptr247734 = getelementptr inbounds i64, i64* %cloptr247729, i64 4                ; &eptr247734[4]
  store i64 %new233710233890, i64* %eptr247731                                       ; *eptr247731 = %new233710233890
  store i64 %cont234158, i64* %eptr247732                                            ; *eptr247732 = %cont234158
  store i64 %tail233711233891, i64* %eptr247733                                      ; *eptr247733 = %tail233711233891
  store i64 %_37wind_45stack233694233874, i64* %eptr247734                           ; *eptr247734 = %_37wind_45stack233694233874
  %eptr247730 = getelementptr inbounds i64, i64* %cloptr247729, i64 0                ; &cloptr247729[0]
  %f247735 = ptrtoint void(i64,i64)* @lam243261 to i64                               ; fptr cast; i64(...)* -> i64
  store i64 %f247735, i64* %eptr247730                                               ; store fptr
  %arg235311 = ptrtoint i64* %cloptr247729 to i64                                    ; closure cast; i64* -> i64
  %arg235310 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %sym239365 = add i64 0, 0                                                          ; quoted ()
  %x239366 = call i64 @prim_cons(i64 %retprim234193, i64 %sym239365)                 ; call prim_cons
  %x239367 = call i64 @prim_cons(i64 %arg235310, i64 %x239366)                       ; call prim_cons
  %cloptr247736 = inttoptr i64 %arg235311 to i64*                                    ; closure/env cast; i64 -> i64*
  %i0ptr247737 = getelementptr inbounds i64, i64* %cloptr247736, i64 0               ; &cloptr247736[0]
  %f247739 = load i64, i64* %i0ptr247737, align 8                                    ; load; *i0ptr247737
  %fptr247738 = inttoptr i64 %f247739 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr247738(i64 %arg235311, i64 %x239367)                ; tail call
  ret void

else247713:
  %many239374 = call i64 @const_init_string(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @str247740, i32 0, i32 0)); quoted string
  %fail239372 = call i64 @prim_halt(i64 %many239374)                                 ; call prim_halt
  %sym239377 = add i64 0, 0                                                          ; quoted ()
  %cloptr247741 = inttoptr i64 %fail239372 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr247742 = getelementptr inbounds i64, i64* %cloptr247741, i64 0               ; &cloptr247741[0]
  %f247744 = load i64, i64* %i0ptr247742, align 8                                    ; load; *i0ptr247742
  %fptr247743 = inttoptr i64 %f247744 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr247743(i64 %fail239372, i64 %sym239377)             ; tail call
  ret void
}


define void @lam243261(i64 %env243262, i64 %rvp239356) {
  %envptr247745 = inttoptr i64 %env243262 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr247746 = getelementptr inbounds i64, i64* %envptr247745, i64 4              ; &envptr247745[4]
  %_37wind_45stack233694233874 = load i64, i64* %envptr247746, align 8               ; load; *envptr247746
  %envptr247747 = inttoptr i64 %env243262 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr247748 = getelementptr inbounds i64, i64* %envptr247747, i64 3              ; &envptr247747[3]
  %tail233711233891 = load i64, i64* %envptr247748, align 8                          ; load; *envptr247748
  %envptr247749 = inttoptr i64 %env243262 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr247750 = getelementptr inbounds i64, i64* %envptr247749, i64 2              ; &envptr247749[2]
  %cont234158 = load i64, i64* %envptr247750, align 8                                ; load; *envptr247750
  %envptr247751 = inttoptr i64 %env243262 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr247752 = getelementptr inbounds i64, i64* %envptr247751, i64 1              ; &envptr247751[1]
  %new233710233890 = load i64, i64* %envptr247752, align 8                           ; load; *envptr247752
  %check239357 = call i64 @prim_null_63(i64 %rvp239356)                              ; call prim_null_63
  %cmp247753 = icmp eq i64 %check239357, 15                                          ; false?
  br i1 %cmp247753, label %else247755, label %then247754                             ; if

then247754:
  %msg239361 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str247756, i32 0, i32 0)); quoted string
  %abort239359 = call i64 @prim_halt(i64 %msg239361)                                 ; call prim_halt
  %sym239364 = add i64 0, 0                                                          ; quoted ()
  %cloptr247757 = inttoptr i64 %abort239359 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr247758 = getelementptr inbounds i64, i64* %cloptr247757, i64 0               ; &cloptr247757[0]
  %f247760 = load i64, i64* %i0ptr247758, align 8                                    ; load; *i0ptr247758
  %fptr247759 = inttoptr i64 %f247760 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr247759(i64 %abort239359, i64 %sym239364)            ; tail call
  ret void

else247755:
  %_95234160 = call i64 @prim_car(i64 %rvp239356)                                    ; call prim_car
  %rvp239346 = call i64 @prim_cdr(i64 %rvp239356)                                    ; call prim_cdr
  %check239347 = call i64 @prim_null_63(i64 %rvp239346)                              ; call prim_null_63
  %cmp247761 = icmp eq i64 %check239347, 15                                          ; false?
  br i1 %cmp247761, label %else247763, label %then247762                             ; if

then247762:
  %msg239351 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str247764, i32 0, i32 0)); quoted string
  %abort239349 = call i64 @prim_halt(i64 %msg239351)                                 ; call prim_halt
  %sym239354 = add i64 0, 0                                                          ; quoted ()
  %cloptr247765 = inttoptr i64 %abort239349 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr247766 = getelementptr inbounds i64, i64* %cloptr247765, i64 0               ; &cloptr247765[0]
  %f247768 = load i64, i64* %i0ptr247766, align 8                                    ; load; *i0ptr247766
  %fptr247767 = inttoptr i64 %f247768 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr247767(i64 %abort239349, i64 %sym239354)            ; tail call
  ret void

else247763:
  %rest239353 = call i64 @prim_cdr(i64 %rvp239346)                                   ; call prim_cdr
  %empty239348 = call i64 @prim_null_63(i64 %rest239353)                             ; call prim_null_63
  %cmp247769 = icmp eq i64 %empty239348, 15                                          ; false?
  br i1 %cmp247769, label %else247771, label %then247770                             ; if

then247770:
  %_95t233713233893 = call i64 @prim_car(i64 %rvp239346)                             ; call prim_car
  %na239015 = call i64 @prim_cdr(i64 %rvp239346)                                     ; call prim_cdr
  %cloptr247772 = call i64* @alloc(i64 8)                                            ; malloc
  %eptr247773 = getelementptr inbounds i64, i64* %cloptr247772, i64 0                ; &cloptr247772[0]
  %f247774 = ptrtoint void(i64,i64)* @lam243257 to i64                               ; fptr cast; i64(...)* -> i64
  store i64 %f247774, i64* %eptr247773                                               ; store fptr
  %arg235313 = ptrtoint i64* %cloptr247772 to i64                                    ; closure cast; i64* -> i64
  %cloptr247775 = call i64* @alloc(i64 40)                                           ; malloc
  %eptr247777 = getelementptr inbounds i64, i64* %cloptr247775, i64 1                ; &eptr247777[1]
  %eptr247778 = getelementptr inbounds i64, i64* %cloptr247775, i64 2                ; &eptr247778[2]
  %eptr247779 = getelementptr inbounds i64, i64* %cloptr247775, i64 3                ; &eptr247779[3]
  %eptr247780 = getelementptr inbounds i64, i64* %cloptr247775, i64 4                ; &eptr247780[4]
  store i64 %new233710233890, i64* %eptr247777                                       ; *eptr247777 = %new233710233890
  store i64 %cont234158, i64* %eptr247778                                            ; *eptr247778 = %cont234158
  store i64 %tail233711233891, i64* %eptr247779                                      ; *eptr247779 = %tail233711233891
  store i64 %_37wind_45stack233694233874, i64* %eptr247780                           ; *eptr247780 = %_37wind_45stack233694233874
  %eptr247776 = getelementptr inbounds i64, i64* %cloptr247775, i64 0                ; &cloptr247775[0]
  %f247781 = ptrtoint void(i64,i64)* @lam243253 to i64                               ; fptr cast; i64(...)* -> i64
  store i64 %f247781, i64* %eptr247776                                               ; store fptr
  %arg235312 = ptrtoint i64* %cloptr247775 to i64                                    ; closure cast; i64* -> i64
  %sym239344 = add i64 0, 0                                                          ; quoted ()
  %x239345 = call i64 @prim_cons(i64 %arg235312, i64 %sym239344)                     ; call prim_cons
  %cloptr247782 = inttoptr i64 %arg235313 to i64*                                    ; closure/env cast; i64 -> i64*
  %i0ptr247783 = getelementptr inbounds i64, i64* %cloptr247782, i64 0               ; &cloptr247782[0]
  %f247785 = load i64, i64* %i0ptr247783, align 8                                    ; load; *i0ptr247783
  %fptr247784 = inttoptr i64 %f247785 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr247784(i64 %arg235313, i64 %x239345)                ; tail call
  ret void

else247771:
  %many239352 = call i64 @const_init_string(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @str247786, i32 0, i32 0)); quoted string
  %fail239350 = call i64 @prim_halt(i64 %many239352)                                 ; call prim_halt
  %sym239355 = add i64 0, 0                                                          ; quoted ()
  %cloptr247787 = inttoptr i64 %fail239350 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr247788 = getelementptr inbounds i64, i64* %cloptr247787, i64 0               ; &cloptr247787[0]
  %f247790 = load i64, i64* %i0ptr247788, align 8                                    ; load; *i0ptr247788
  %fptr247789 = inttoptr i64 %f247790 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr247789(i64 %fail239350, i64 %sym239355)             ; tail call
  ret void
}


define void @lam243257(i64 %env243258, i64 %lst233725233905234179) {
  %cont234178 = call i64 @prim_car(i64 %lst233725233905234179)                       ; call prim_car
  %lst233725233905 = call i64 @prim_cdr(i64 %lst233725233905234179)                  ; call prim_cdr
  %arg235317 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %sym239016 = add i64 0, 0                                                          ; quoted ()
  %x239017 = call i64 @prim_cons(i64 %lst233725233905, i64 %sym239016)               ; call prim_cons
  %x239018 = call i64 @prim_cons(i64 %arg235317, i64 %x239017)                       ; call prim_cons
  %cloptr247791 = inttoptr i64 %cont234178 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr247792 = getelementptr inbounds i64, i64* %cloptr247791, i64 0               ; &cloptr247791[0]
  %f247794 = load i64, i64* %i0ptr247792, align 8                                    ; load; *i0ptr247792
  %fptr247793 = inttoptr i64 %f247794 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr247793(i64 %cont234178, i64 %x239018)               ; tail call
  ret void
}


define void @lam243253(i64 %env243254, i64 %rvp239335) {
  %envptr247795 = inttoptr i64 %env243254 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr247796 = getelementptr inbounds i64, i64* %envptr247795, i64 4              ; &envptr247795[4]
  %_37wind_45stack233694233874 = load i64, i64* %envptr247796, align 8               ; load; *envptr247796
  %envptr247797 = inttoptr i64 %env243254 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr247798 = getelementptr inbounds i64, i64* %envptr247797, i64 3              ; &envptr247797[3]
  %tail233711233891 = load i64, i64* %envptr247798, align 8                          ; load; *envptr247798
  %envptr247799 = inttoptr i64 %env243254 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr247800 = getelementptr inbounds i64, i64* %envptr247799, i64 2              ; &envptr247799[2]
  %cont234158 = load i64, i64* %envptr247800, align 8                                ; load; *envptr247800
  %envptr247801 = inttoptr i64 %env243254 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr247802 = getelementptr inbounds i64, i64* %envptr247801, i64 1              ; &envptr247801[1]
  %new233710233890 = load i64, i64* %envptr247802, align 8                           ; load; *envptr247802
  %check239336 = call i64 @prim_null_63(i64 %rvp239335)                              ; call prim_null_63
  %cmp247803 = icmp eq i64 %check239336, 15                                          ; false?
  br i1 %cmp247803, label %else247805, label %then247804                             ; if

then247804:
  %msg239340 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str247806, i32 0, i32 0)); quoted string
  %abort239338 = call i64 @prim_halt(i64 %msg239340)                                 ; call prim_halt
  %sym239343 = add i64 0, 0                                                          ; quoted ()
  %cloptr247807 = inttoptr i64 %abort239338 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr247808 = getelementptr inbounds i64, i64* %cloptr247807, i64 0               ; &cloptr247807[0]
  %f247810 = load i64, i64* %i0ptr247808, align 8                                    ; load; *i0ptr247808
  %fptr247809 = inttoptr i64 %f247810 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr247809(i64 %abort239338, i64 %sym239343)            ; tail call
  ret void

else247805:
  %_95234176 = call i64 @prim_car(i64 %rvp239335)                                    ; call prim_car
  %rvp239325 = call i64 @prim_cdr(i64 %rvp239335)                                    ; call prim_cdr
  %check239326 = call i64 @prim_null_63(i64 %rvp239325)                              ; call prim_null_63
  %cmp247811 = icmp eq i64 %check239326, 15                                          ; false?
  br i1 %cmp247811, label %else247813, label %then247812                             ; if

then247812:
  %msg239330 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str247814, i32 0, i32 0)); quoted string
  %abort239328 = call i64 @prim_halt(i64 %msg239330)                                 ; call prim_halt
  %sym239333 = add i64 0, 0                                                          ; quoted ()
  %cloptr247815 = inttoptr i64 %abort239328 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr247816 = getelementptr inbounds i64, i64* %cloptr247815, i64 0               ; &cloptr247815[0]
  %f247818 = load i64, i64* %i0ptr247816, align 8                                    ; load; *i0ptr247816
  %fptr247817 = inttoptr i64 %f247818 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr247817(i64 %abort239328, i64 %sym239333)            ; tail call
  ret void

else247813:
  %rest239332 = call i64 @prim_cdr(i64 %rvp239325)                                   ; call prim_cdr
  %empty239327 = call i64 @prim_null_63(i64 %rest239332)                             ; call prim_null_63
  %cmp247819 = icmp eq i64 %empty239327, 15                                          ; false?
  br i1 %cmp247819, label %else247821, label %then247820                             ; if

then247820:
  %a234054 = call i64 @prim_car(i64 %rvp239325)                                      ; call prim_car
  %na239020 = call i64 @prim_cdr(i64 %rvp239325)                                     ; call prim_cdr
  %arg235320 = call i64 @const_init_int(i64 1)                                       ; quoted int
  %retprim234177 = call i64 @prim_make_45vector(i64 %arg235320, i64 %a234054)        ; call prim_make_45vector
  %cloptr247822 = call i64* @alloc(i64 40)                                           ; malloc
  %eptr247824 = getelementptr inbounds i64, i64* %cloptr247822, i64 1                ; &eptr247824[1]
  %eptr247825 = getelementptr inbounds i64, i64* %cloptr247822, i64 2                ; &eptr247825[2]
  %eptr247826 = getelementptr inbounds i64, i64* %cloptr247822, i64 3                ; &eptr247826[3]
  %eptr247827 = getelementptr inbounds i64, i64* %cloptr247822, i64 4                ; &eptr247827[4]
  store i64 %new233710233890, i64* %eptr247824                                       ; *eptr247824 = %new233710233890
  store i64 %cont234158, i64* %eptr247825                                            ; *eptr247825 = %cont234158
  store i64 %tail233711233891, i64* %eptr247826                                      ; *eptr247826 = %tail233711233891
  store i64 %_37wind_45stack233694233874, i64* %eptr247827                           ; *eptr247827 = %_37wind_45stack233694233874
  %eptr247823 = getelementptr inbounds i64, i64* %cloptr247822, i64 0                ; &cloptr247822[0]
  %f247828 = ptrtoint void(i64,i64)* @lam243248 to i64                               ; fptr cast; i64(...)* -> i64
  store i64 %f247828, i64* %eptr247823                                               ; store fptr
  %arg235323 = ptrtoint i64* %cloptr247822 to i64                                    ; closure cast; i64* -> i64
  %arg235322 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %sym239322 = add i64 0, 0                                                          ; quoted ()
  %x239323 = call i64 @prim_cons(i64 %retprim234177, i64 %sym239322)                 ; call prim_cons
  %x239324 = call i64 @prim_cons(i64 %arg235322, i64 %x239323)                       ; call prim_cons
  %cloptr247829 = inttoptr i64 %arg235323 to i64*                                    ; closure/env cast; i64 -> i64*
  %i0ptr247830 = getelementptr inbounds i64, i64* %cloptr247829, i64 0               ; &cloptr247829[0]
  %f247832 = load i64, i64* %i0ptr247830, align 8                                    ; load; *i0ptr247830
  %fptr247831 = inttoptr i64 %f247832 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr247831(i64 %arg235323, i64 %x239324)                ; tail call
  ret void

else247821:
  %many239331 = call i64 @const_init_string(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @str247833, i32 0, i32 0)); quoted string
  %fail239329 = call i64 @prim_halt(i64 %many239331)                                 ; call prim_halt
  %sym239334 = add i64 0, 0                                                          ; quoted ()
  %cloptr247834 = inttoptr i64 %fail239329 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr247835 = getelementptr inbounds i64, i64* %cloptr247834, i64 0               ; &cloptr247834[0]
  %f247837 = load i64, i64* %i0ptr247835, align 8                                    ; load; *i0ptr247835
  %fptr247836 = inttoptr i64 %f247837 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr247836(i64 %fail239329, i64 %sym239334)             ; tail call
  ret void
}


define void @lam243248(i64 %env243249, i64 %rvp239313) {
  %envptr247838 = inttoptr i64 %env243249 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr247839 = getelementptr inbounds i64, i64* %envptr247838, i64 4              ; &envptr247838[4]
  %_37wind_45stack233694233874 = load i64, i64* %envptr247839, align 8               ; load; *envptr247839
  %envptr247840 = inttoptr i64 %env243249 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr247841 = getelementptr inbounds i64, i64* %envptr247840, i64 3              ; &envptr247840[3]
  %tail233711233891 = load i64, i64* %envptr247841, align 8                          ; load; *envptr247841
  %envptr247842 = inttoptr i64 %env243249 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr247843 = getelementptr inbounds i64, i64* %envptr247842, i64 2              ; &envptr247842[2]
  %cont234158 = load i64, i64* %envptr247843, align 8                                ; load; *envptr247843
  %envptr247844 = inttoptr i64 %env243249 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr247845 = getelementptr inbounds i64, i64* %envptr247844, i64 1              ; &envptr247844[1]
  %new233710233890 = load i64, i64* %envptr247845, align 8                           ; load; *envptr247845
  %check239314 = call i64 @prim_null_63(i64 %rvp239313)                              ; call prim_null_63
  %cmp247846 = icmp eq i64 %check239314, 15                                          ; false?
  br i1 %cmp247846, label %else247848, label %then247847                             ; if

then247847:
  %msg239318 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str247849, i32 0, i32 0)); quoted string
  %abort239316 = call i64 @prim_halt(i64 %msg239318)                                 ; call prim_halt
  %sym239321 = add i64 0, 0                                                          ; quoted ()
  %cloptr247850 = inttoptr i64 %abort239316 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr247851 = getelementptr inbounds i64, i64* %cloptr247850, i64 0               ; &cloptr247850[0]
  %f247853 = load i64, i64* %i0ptr247851, align 8                                    ; load; *i0ptr247851
  %fptr247852 = inttoptr i64 %f247853 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr247852(i64 %abort239316, i64 %sym239321)            ; tail call
  ret void

else247848:
  %_95234161 = call i64 @prim_car(i64 %rvp239313)                                    ; call prim_car
  %rvp239303 = call i64 @prim_cdr(i64 %rvp239313)                                    ; call prim_cdr
  %check239304 = call i64 @prim_null_63(i64 %rvp239303)                              ; call prim_null_63
  %cmp247854 = icmp eq i64 %check239304, 15                                          ; false?
  br i1 %cmp247854, label %else247856, label %then247855                             ; if

then247855:
  %msg239308 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str247857, i32 0, i32 0)); quoted string
  %abort239306 = call i64 @prim_halt(i64 %msg239308)                                 ; call prim_halt
  %sym239311 = add i64 0, 0                                                          ; quoted ()
  %cloptr247858 = inttoptr i64 %abort239306 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr247859 = getelementptr inbounds i64, i64* %cloptr247858, i64 0               ; &cloptr247858[0]
  %f247861 = load i64, i64* %i0ptr247859, align 8                                    ; load; *i0ptr247859
  %fptr247860 = inttoptr i64 %f247861 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr247860(i64 %abort239306, i64 %sym239311)            ; tail call
  ret void

else247856:
  %rest239310 = call i64 @prim_cdr(i64 %rvp239303)                                   ; call prim_cdr
  %empty239305 = call i64 @prim_null_63(i64 %rest239310)                             ; call prim_null_63
  %cmp247862 = icmp eq i64 %empty239305, 15                                          ; false?
  br i1 %cmp247862, label %else247864, label %then247863                             ; if

then247863:
  %f233724233904 = call i64 @prim_car(i64 %rvp239303)                                ; call prim_car
  %na239022 = call i64 @prim_cdr(i64 %rvp239303)                                     ; call prim_cdr
  %cloptr247865 = call i64* @alloc(i64 32)                                           ; malloc
  %eptr247867 = getelementptr inbounds i64, i64* %cloptr247865, i64 1                ; &eptr247867[1]
  %eptr247868 = getelementptr inbounds i64, i64* %cloptr247865, i64 2                ; &eptr247868[2]
  %eptr247869 = getelementptr inbounds i64, i64* %cloptr247865, i64 3                ; &eptr247869[3]
  store i64 %tail233711233891, i64* %eptr247867                                      ; *eptr247867 = %tail233711233891
  store i64 %_37wind_45stack233694233874, i64* %eptr247868                           ; *eptr247868 = %_37wind_45stack233694233874
  store i64 %f233724233904, i64* %eptr247869                                         ; *eptr247869 = %f233724233904
  %eptr247866 = getelementptr inbounds i64, i64* %cloptr247865, i64 0                ; &cloptr247865[0]
  %f247870 = ptrtoint void(i64,i64)* @lam243244 to i64                               ; fptr cast; i64(...)* -> i64
  store i64 %f247870, i64* %eptr247866                                               ; store fptr
  %f233571233726233906 = ptrtoint i64* %cloptr247865 to i64                          ; closure cast; i64* -> i64
  %arg235399 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %_95t233732233912 = call i64 @prim_vector_45set_33(i64 %f233724233904, i64 %arg235399, i64 %f233571233726233906); call prim_vector_45set_33
  %arg235401 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %a234064 = call i64 @prim_vector_45ref(i64 %f233724233904, i64 %arg235401)         ; call prim_vector_45ref
  %retprim234175 = call i64 @prim_procedure_63(i64 %a234064)                         ; call prim_procedure_63
  %cloptr247871 = call i64* @alloc(i64 32)                                           ; malloc
  %eptr247873 = getelementptr inbounds i64, i64* %cloptr247871, i64 1                ; &eptr247873[1]
  %eptr247874 = getelementptr inbounds i64, i64* %cloptr247871, i64 2                ; &eptr247874[2]
  %eptr247875 = getelementptr inbounds i64, i64* %cloptr247871, i64 3                ; &eptr247875[3]
  store i64 %new233710233890, i64* %eptr247873                                       ; *eptr247873 = %new233710233890
  store i64 %cont234158, i64* %eptr247874                                            ; *eptr247874 = %cont234158
  store i64 %f233724233904, i64* %eptr247875                                         ; *eptr247875 = %f233724233904
  %eptr247872 = getelementptr inbounds i64, i64* %cloptr247871, i64 0                ; &cloptr247871[0]
  %f247876 = ptrtoint void(i64,i64)* @lam243128 to i64                               ; fptr cast; i64(...)* -> i64
  store i64 %f247876, i64* %eptr247872                                               ; store fptr
  %arg235406 = ptrtoint i64* %cloptr247871 to i64                                    ; closure cast; i64* -> i64
  %arg235405 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %sym239300 = add i64 0, 0                                                          ; quoted ()
  %x239301 = call i64 @prim_cons(i64 %retprim234175, i64 %sym239300)                 ; call prim_cons
  %x239302 = call i64 @prim_cons(i64 %arg235405, i64 %x239301)                       ; call prim_cons
  %cloptr247877 = inttoptr i64 %arg235406 to i64*                                    ; closure/env cast; i64 -> i64*
  %i0ptr247878 = getelementptr inbounds i64, i64* %cloptr247877, i64 0               ; &cloptr247877[0]
  %f247880 = load i64, i64* %i0ptr247878, align 8                                    ; load; *i0ptr247878
  %fptr247879 = inttoptr i64 %f247880 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr247879(i64 %arg235406, i64 %x239302)                ; tail call
  ret void

else247864:
  %many239309 = call i64 @const_init_string(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @str247881, i32 0, i32 0)); quoted string
  %fail239307 = call i64 @prim_halt(i64 %many239309)                                 ; call prim_halt
  %sym239312 = add i64 0, 0                                                          ; quoted ()
  %cloptr247882 = inttoptr i64 %fail239307 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr247883 = getelementptr inbounds i64, i64* %cloptr247882, i64 0               ; &cloptr247882[0]
  %f247885 = load i64, i64* %i0ptr247883, align 8                                    ; load; *i0ptr247883
  %fptr247884 = inttoptr i64 %f247885 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr247884(i64 %fail239307, i64 %sym239312)             ; tail call
  ret void
}


define void @lam243244(i64 %env243245, i64 %rvp239264) {
  %envptr247886 = inttoptr i64 %env243245 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr247887 = getelementptr inbounds i64, i64* %envptr247886, i64 3              ; &envptr247886[3]
  %f233724233904 = load i64, i64* %envptr247887, align 8                             ; load; *envptr247887
  %envptr247888 = inttoptr i64 %env243245 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr247889 = getelementptr inbounds i64, i64* %envptr247888, i64 2              ; &envptr247888[2]
  %_37wind_45stack233694233874 = load i64, i64* %envptr247889, align 8               ; load; *envptr247889
  %envptr247890 = inttoptr i64 %env243245 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr247891 = getelementptr inbounds i64, i64* %envptr247890, i64 1              ; &envptr247890[1]
  %tail233711233891 = load i64, i64* %envptr247891, align 8                          ; load; *envptr247891
  %check239265 = call i64 @prim_null_63(i64 %rvp239264)                              ; call prim_null_63
  %cmp247892 = icmp eq i64 %check239265, 15                                          ; false?
  br i1 %cmp247892, label %else247894, label %then247893                             ; if

then247893:
  %msg239269 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str247895, i32 0, i32 0)); quoted string
  %abort239267 = call i64 @prim_halt(i64 %msg239269)                                 ; call prim_halt
  %sym239272 = add i64 0, 0                                                          ; quoted ()
  %cloptr247896 = inttoptr i64 %abort239267 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr247897 = getelementptr inbounds i64, i64* %cloptr247896, i64 0               ; &cloptr247896[0]
  %f247899 = load i64, i64* %i0ptr247897, align 8                                    ; load; *i0ptr247897
  %fptr247898 = inttoptr i64 %f247899 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr247898(i64 %abort239267, i64 %sym239272)            ; tail call
  ret void

else247894:
  %cont234162 = call i64 @prim_car(i64 %rvp239264)                                   ; call prim_car
  %rvp239254 = call i64 @prim_cdr(i64 %rvp239264)                                    ; call prim_cdr
  %check239255 = call i64 @prim_null_63(i64 %rvp239254)                              ; call prim_null_63
  %cmp247900 = icmp eq i64 %check239255, 15                                          ; false?
  br i1 %cmp247900, label %else247902, label %then247901                             ; if

then247901:
  %msg239259 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str247903, i32 0, i32 0)); quoted string
  %abort239257 = call i64 @prim_halt(i64 %msg239259)                                 ; call prim_halt
  %sym239262 = add i64 0, 0                                                          ; quoted ()
  %cloptr247904 = inttoptr i64 %abort239257 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr247905 = getelementptr inbounds i64, i64* %cloptr247904, i64 0               ; &cloptr247904[0]
  %f247907 = load i64, i64* %i0ptr247905, align 8                                    ; load; *i0ptr247905
  %fptr247906 = inttoptr i64 %f247907 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr247906(i64 %abort239257, i64 %sym239262)            ; tail call
  ret void

else247902:
  %rest239261 = call i64 @prim_cdr(i64 %rvp239254)                                   ; call prim_cdr
  %empty239256 = call i64 @prim_null_63(i64 %rest239261)                             ; call prim_null_63
  %cmp247908 = icmp eq i64 %empty239256, 15                                          ; false?
  br i1 %cmp247908, label %else247910, label %then247909                             ; if

then247909:
  %l233727233907 = call i64 @prim_car(i64 %rvp239254)                                ; call prim_car
  %na239024 = call i64 @prim_cdr(i64 %rvp239254)                                     ; call prim_cdr
  %a234055 = call i64 @prim_eq_63(i64 %l233727233907, i64 %tail233711233891)         ; call prim_eq_63
  %a234056 = call i64 @prim_not(i64 %a234055)                                        ; call prim_not
  %cmp247911 = icmp eq i64 %a234056, 15                                              ; false?
  br i1 %cmp247911, label %else247913, label %then247912                             ; if

then247912:
  %arg235327 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %a234057 = call i64 @prim_vector_45ref(i64 %f233724233904, i64 %arg235327)         ; call prim_vector_45ref
  %retprim234171 = call i64 @prim_procedure_63(i64 %a234057)                         ; call prim_procedure_63
  %cloptr247914 = call i64* @alloc(i64 40)                                           ; malloc
  %eptr247916 = getelementptr inbounds i64, i64* %cloptr247914, i64 1                ; &eptr247916[1]
  %eptr247917 = getelementptr inbounds i64, i64* %cloptr247914, i64 2                ; &eptr247917[2]
  %eptr247918 = getelementptr inbounds i64, i64* %cloptr247914, i64 3                ; &eptr247918[3]
  %eptr247919 = getelementptr inbounds i64, i64* %cloptr247914, i64 4                ; &eptr247919[4]
  store i64 %l233727233907, i64* %eptr247916                                         ; *eptr247916 = %l233727233907
  store i64 %cont234162, i64* %eptr247917                                            ; *eptr247917 = %cont234162
  store i64 %_37wind_45stack233694233874, i64* %eptr247918                           ; *eptr247918 = %_37wind_45stack233694233874
  store i64 %f233724233904, i64* %eptr247919                                         ; *eptr247919 = %f233724233904
  %eptr247915 = getelementptr inbounds i64, i64* %cloptr247914, i64 0                ; &cloptr247914[0]
  %f247920 = ptrtoint void(i64,i64)* @lam243237 to i64                               ; fptr cast; i64(...)* -> i64
  store i64 %f247920, i64* %eptr247915                                               ; store fptr
  %arg235332 = ptrtoint i64* %cloptr247914 to i64                                    ; closure cast; i64* -> i64
  %arg235331 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %sym239248 = add i64 0, 0                                                          ; quoted ()
  %x239249 = call i64 @prim_cons(i64 %retprim234171, i64 %sym239248)                 ; call prim_cons
  %x239250 = call i64 @prim_cons(i64 %arg235331, i64 %x239249)                       ; call prim_cons
  %cloptr247921 = inttoptr i64 %arg235332 to i64*                                    ; closure/env cast; i64 -> i64*
  %i0ptr247922 = getelementptr inbounds i64, i64* %cloptr247921, i64 0               ; &cloptr247921[0]
  %f247924 = load i64, i64* %i0ptr247922, align 8                                    ; load; *i0ptr247922
  %fptr247923 = inttoptr i64 %f247924 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr247923(i64 %arg235332, i64 %x239250)                ; tail call
  ret void

else247913:
  %retprim234172 = call i64 @prim_void()                                             ; call prim_void
  %arg235396 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %sym239251 = add i64 0, 0                                                          ; quoted ()
  %x239252 = call i64 @prim_cons(i64 %retprim234172, i64 %sym239251)                 ; call prim_cons
  %x239253 = call i64 @prim_cons(i64 %arg235396, i64 %x239252)                       ; call prim_cons
  %cloptr247925 = inttoptr i64 %cont234162 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr247926 = getelementptr inbounds i64, i64* %cloptr247925, i64 0               ; &cloptr247925[0]
  %f247928 = load i64, i64* %i0ptr247926, align 8                                    ; load; *i0ptr247926
  %fptr247927 = inttoptr i64 %f247928 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr247927(i64 %cont234162, i64 %x239253)               ; tail call
  ret void

else247910:
  %many239260 = call i64 @const_init_string(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @str247929, i32 0, i32 0)); quoted string
  %fail239258 = call i64 @prim_halt(i64 %many239260)                                 ; call prim_halt
  %sym239263 = add i64 0, 0                                                          ; quoted ()
  %cloptr247930 = inttoptr i64 %fail239258 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr247931 = getelementptr inbounds i64, i64* %cloptr247930, i64 0               ; &cloptr247930[0]
  %f247933 = load i64, i64* %i0ptr247931, align 8                                    ; load; *i0ptr247931
  %fptr247932 = inttoptr i64 %f247933 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr247932(i64 %fail239258, i64 %sym239263)             ; tail call
  ret void
}


define void @lam243237(i64 %env243238, i64 %rvp239239) {
  %envptr247934 = inttoptr i64 %env243238 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr247935 = getelementptr inbounds i64, i64* %envptr247934, i64 4              ; &envptr247934[4]
  %f233724233904 = load i64, i64* %envptr247935, align 8                             ; load; *envptr247935
  %envptr247936 = inttoptr i64 %env243238 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr247937 = getelementptr inbounds i64, i64* %envptr247936, i64 3              ; &envptr247936[3]
  %_37wind_45stack233694233874 = load i64, i64* %envptr247937, align 8               ; load; *envptr247937
  %envptr247938 = inttoptr i64 %env243238 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr247939 = getelementptr inbounds i64, i64* %envptr247938, i64 2              ; &envptr247938[2]
  %cont234162 = load i64, i64* %envptr247939, align 8                                ; load; *envptr247939
  %envptr247940 = inttoptr i64 %env243238 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr247941 = getelementptr inbounds i64, i64* %envptr247940, i64 1              ; &envptr247940[1]
  %l233727233907 = load i64, i64* %envptr247941, align 8                             ; load; *envptr247941
  %check239240 = call i64 @prim_null_63(i64 %rvp239239)                              ; call prim_null_63
  %cmp247942 = icmp eq i64 %check239240, 15                                          ; false?
  br i1 %cmp247942, label %else247944, label %then247943                             ; if

then247943:
  %msg239244 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str247945, i32 0, i32 0)); quoted string
  %abort239242 = call i64 @prim_halt(i64 %msg239244)                                 ; call prim_halt
  %sym239247 = add i64 0, 0                                                          ; quoted ()
  %cloptr247946 = inttoptr i64 %abort239242 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr247947 = getelementptr inbounds i64, i64* %cloptr247946, i64 0               ; &cloptr247946[0]
  %f247949 = load i64, i64* %i0ptr247947, align 8                                    ; load; *i0ptr247947
  %fptr247948 = inttoptr i64 %f247949 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr247948(i64 %abort239242, i64 %sym239247)            ; tail call
  ret void

else247944:
  %_95234169 = call i64 @prim_car(i64 %rvp239239)                                    ; call prim_car
  %rvp239229 = call i64 @prim_cdr(i64 %rvp239239)                                    ; call prim_cdr
  %check239230 = call i64 @prim_null_63(i64 %rvp239229)                              ; call prim_null_63
  %cmp247950 = icmp eq i64 %check239230, 15                                          ; false?
  br i1 %cmp247950, label %else247952, label %then247951                             ; if

then247951:
  %msg239234 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str247953, i32 0, i32 0)); quoted string
  %abort239232 = call i64 @prim_halt(i64 %msg239234)                                 ; call prim_halt
  %sym239237 = add i64 0, 0                                                          ; quoted ()
  %cloptr247954 = inttoptr i64 %abort239232 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr247955 = getelementptr inbounds i64, i64* %cloptr247954, i64 0               ; &cloptr247954[0]
  %f247957 = load i64, i64* %i0ptr247955, align 8                                    ; load; *i0ptr247955
  %fptr247956 = inttoptr i64 %f247957 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr247956(i64 %abort239232, i64 %sym239237)            ; tail call
  ret void

else247952:
  %rest239236 = call i64 @prim_cdr(i64 %rvp239229)                                   ; call prim_cdr
  %empty239231 = call i64 @prim_null_63(i64 %rest239236)                             ; call prim_null_63
  %cmp247958 = icmp eq i64 %empty239231, 15                                          ; false?
  br i1 %cmp247958, label %else247960, label %then247959                             ; if

then247959:
  %check233572233729233909 = call i64 @prim_car(i64 %rvp239229)                      ; call prim_car
  %na239026 = call i64 @prim_cdr(i64 %rvp239229)                                     ; call prim_cdr
  %cmp247961 = icmp eq i64 %check233572233729233909, 15                              ; false?
  br i1 %cmp247961, label %else247963, label %then247962                             ; if

then247962:
  %arg235333 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %a234058 = call i64 @prim_vector_45ref(i64 %f233724233904, i64 %arg235333)         ; call prim_vector_45ref
  %a234059 = call i64 @prim_cdr(i64 %l233727233907)                                  ; call prim_cdr
  %cloptr247964 = call i64* @alloc(i64 32)                                           ; malloc
  %eptr247966 = getelementptr inbounds i64, i64* %cloptr247964, i64 1                ; &eptr247966[1]
  %eptr247967 = getelementptr inbounds i64, i64* %cloptr247964, i64 2                ; &eptr247967[2]
  %eptr247968 = getelementptr inbounds i64, i64* %cloptr247964, i64 3                ; &eptr247968[3]
  store i64 %l233727233907, i64* %eptr247966                                         ; *eptr247966 = %l233727233907
  store i64 %cont234162, i64* %eptr247967                                            ; *eptr247967 = %cont234162
  store i64 %_37wind_45stack233694233874, i64* %eptr247968                           ; *eptr247968 = %_37wind_45stack233694233874
  %eptr247965 = getelementptr inbounds i64, i64* %cloptr247964, i64 0                ; &cloptr247964[0]
  %f247969 = ptrtoint void(i64,i64)* @lam243185 to i64                               ; fptr cast; i64(...)* -> i64
  store i64 %f247969, i64* %eptr247965                                               ; store fptr
  %arg235337 = ptrtoint i64* %cloptr247964 to i64                                    ; closure cast; i64* -> i64
  %sym239125 = add i64 0, 0                                                          ; quoted ()
  %x239126 = call i64 @prim_cons(i64 %a234059, i64 %sym239125)                       ; call prim_cons
  %x239127 = call i64 @prim_cons(i64 %arg235337, i64 %x239126)                       ; call prim_cons
  %cloptr247970 = inttoptr i64 %a234058 to i64*                                      ; closure/env cast; i64 -> i64*
  %i0ptr247971 = getelementptr inbounds i64, i64* %cloptr247970, i64 0               ; &cloptr247970[0]
  %f247973 = load i64, i64* %i0ptr247971, align 8                                    ; load; *i0ptr247971
  %fptr247972 = inttoptr i64 %f247973 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr247972(i64 %a234058, i64 %x239127)                  ; tail call
  ret void

else247963:
  %arg235365 = call i64 @const_init_string(i8* getelementptr inbounds ([67 x i8], [67 x i8]* @str247974, i32 0, i32 0)); quoted string
  %retprim234170 = call i64 @prim_halt(i64 %arg235365)                               ; call prim_halt
  %cloptr247975 = call i64* @alloc(i64 32)                                           ; malloc
  %eptr247977 = getelementptr inbounds i64, i64* %cloptr247975, i64 1                ; &eptr247977[1]
  %eptr247978 = getelementptr inbounds i64, i64* %cloptr247975, i64 2                ; &eptr247978[2]
  %eptr247979 = getelementptr inbounds i64, i64* %cloptr247975, i64 3                ; &eptr247979[3]
  store i64 %l233727233907, i64* %eptr247977                                         ; *eptr247977 = %l233727233907
  store i64 %cont234162, i64* %eptr247978                                            ; *eptr247978 = %cont234162
  store i64 %_37wind_45stack233694233874, i64* %eptr247979                           ; *eptr247979 = %_37wind_45stack233694233874
  %eptr247976 = getelementptr inbounds i64, i64* %cloptr247975, i64 0                ; &cloptr247975[0]
  %f247980 = ptrtoint void(i64,i64)* @lam243232 to i64                               ; fptr cast; i64(...)* -> i64
  store i64 %f247980, i64* %eptr247976                                               ; store fptr
  %arg235368 = ptrtoint i64* %cloptr247975 to i64                                    ; closure cast; i64* -> i64
  %arg235367 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %sym239226 = add i64 0, 0                                                          ; quoted ()
  %x239227 = call i64 @prim_cons(i64 %retprim234170, i64 %sym239226)                 ; call prim_cons
  %x239228 = call i64 @prim_cons(i64 %arg235367, i64 %x239227)                       ; call prim_cons
  %cloptr247981 = inttoptr i64 %arg235368 to i64*                                    ; closure/env cast; i64 -> i64*
  %i0ptr247982 = getelementptr inbounds i64, i64* %cloptr247981, i64 0               ; &cloptr247981[0]
  %f247984 = load i64, i64* %i0ptr247982, align 8                                    ; load; *i0ptr247982
  %fptr247983 = inttoptr i64 %f247984 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr247983(i64 %arg235368, i64 %x239228)                ; tail call
  ret void

else247960:
  %many239235 = call i64 @const_init_string(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @str247985, i32 0, i32 0)); quoted string
  %fail239233 = call i64 @prim_halt(i64 %many239235)                                 ; call prim_halt
  %sym239238 = add i64 0, 0                                                          ; quoted ()
  %cloptr247986 = inttoptr i64 %fail239233 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr247987 = getelementptr inbounds i64, i64* %cloptr247986, i64 0               ; &cloptr247986[0]
  %f247989 = load i64, i64* %i0ptr247987, align 8                                    ; load; *i0ptr247987
  %fptr247988 = inttoptr i64 %f247989 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr247988(i64 %fail239233, i64 %sym239238)             ; tail call
  ret void
}


define void @lam243232(i64 %env243233, i64 %rvp239217) {
  %envptr247990 = inttoptr i64 %env243233 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr247991 = getelementptr inbounds i64, i64* %envptr247990, i64 3              ; &envptr247990[3]
  %_37wind_45stack233694233874 = load i64, i64* %envptr247991, align 8               ; load; *envptr247991
  %envptr247992 = inttoptr i64 %env243233 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr247993 = getelementptr inbounds i64, i64* %envptr247992, i64 2              ; &envptr247992[2]
  %cont234162 = load i64, i64* %envptr247993, align 8                                ; load; *envptr247993
  %envptr247994 = inttoptr i64 %env243233 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr247995 = getelementptr inbounds i64, i64* %envptr247994, i64 1              ; &envptr247994[1]
  %l233727233907 = load i64, i64* %envptr247995, align 8                             ; load; *envptr247995
  %check239218 = call i64 @prim_null_63(i64 %rvp239217)                              ; call prim_null_63
  %cmp247996 = icmp eq i64 %check239218, 15                                          ; false?
  br i1 %cmp247996, label %else247998, label %then247997                             ; if

then247997:
  %msg239222 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str247999, i32 0, i32 0)); quoted string
  %abort239220 = call i64 @prim_halt(i64 %msg239222)                                 ; call prim_halt
  %sym239225 = add i64 0, 0                                                          ; quoted ()
  %cloptr248000 = inttoptr i64 %abort239220 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr248001 = getelementptr inbounds i64, i64* %cloptr248000, i64 0               ; &cloptr248000[0]
  %f248003 = load i64, i64* %i0ptr248001, align 8                                    ; load; *i0ptr248001
  %fptr248002 = inttoptr i64 %f248003 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr248002(i64 %abort239220, i64 %sym239225)            ; tail call
  ret void

else247998:
  %_95234163 = call i64 @prim_car(i64 %rvp239217)                                    ; call prim_car
  %rvp239207 = call i64 @prim_cdr(i64 %rvp239217)                                    ; call prim_cdr
  %check239208 = call i64 @prim_null_63(i64 %rvp239207)                              ; call prim_null_63
  %cmp248004 = icmp eq i64 %check239208, 15                                          ; false?
  br i1 %cmp248004, label %else248006, label %then248005                             ; if

then248005:
  %msg239212 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str248007, i32 0, i32 0)); quoted string
  %abort239210 = call i64 @prim_halt(i64 %msg239212)                                 ; call prim_halt
  %sym239215 = add i64 0, 0                                                          ; quoted ()
  %cloptr248008 = inttoptr i64 %abort239210 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr248009 = getelementptr inbounds i64, i64* %cloptr248008, i64 0               ; &cloptr248008[0]
  %f248011 = load i64, i64* %i0ptr248009, align 8                                    ; load; *i0ptr248009
  %fptr248010 = inttoptr i64 %f248011 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr248010(i64 %abort239210, i64 %sym239215)            ; tail call
  ret void

else248006:
  %rest239214 = call i64 @prim_cdr(i64 %rvp239207)                                   ; call prim_cdr
  %empty239209 = call i64 @prim_null_63(i64 %rest239214)                             ; call prim_null_63
  %cmp248012 = icmp eq i64 %empty239209, 15                                          ; false?
  br i1 %cmp248012, label %else248014, label %then248013                             ; if

then248013:
  %_95t233728233908 = call i64 @prim_car(i64 %rvp239207)                             ; call prim_car
  %na239129 = call i64 @prim_cdr(i64 %rvp239207)                                     ; call prim_cdr
  %a234060 = call i64 @prim_car(i64 %l233727233907)                                  ; call prim_car
  %a234061 = call i64 @prim_car(i64 %a234060)                                        ; call prim_car
  %retprim234168 = call i64 @prim_procedure_63(i64 %a234061)                         ; call prim_procedure_63
  %cloptr248015 = call i64* @alloc(i64 32)                                           ; malloc
  %eptr248017 = getelementptr inbounds i64, i64* %cloptr248015, i64 1                ; &eptr248017[1]
  %eptr248018 = getelementptr inbounds i64, i64* %cloptr248015, i64 2                ; &eptr248018[2]
  %eptr248019 = getelementptr inbounds i64, i64* %cloptr248015, i64 3                ; &eptr248019[3]
  store i64 %l233727233907, i64* %eptr248017                                         ; *eptr248017 = %l233727233907
  store i64 %cont234162, i64* %eptr248018                                            ; *eptr248018 = %cont234162
  store i64 %_37wind_45stack233694233874, i64* %eptr248019                           ; *eptr248019 = %_37wind_45stack233694233874
  %eptr248016 = getelementptr inbounds i64, i64* %cloptr248015, i64 0                ; &cloptr248015[0]
  %f248020 = ptrtoint void(i64,i64)* @lam243228 to i64                               ; fptr cast; i64(...)* -> i64
  store i64 %f248020, i64* %eptr248016                                               ; store fptr
  %arg235374 = ptrtoint i64* %cloptr248015 to i64                                    ; closure cast; i64* -> i64
  %arg235373 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %sym239204 = add i64 0, 0                                                          ; quoted ()
  %x239205 = call i64 @prim_cons(i64 %retprim234168, i64 %sym239204)                 ; call prim_cons
  %x239206 = call i64 @prim_cons(i64 %arg235373, i64 %x239205)                       ; call prim_cons
  %cloptr248021 = inttoptr i64 %arg235374 to i64*                                    ; closure/env cast; i64 -> i64*
  %i0ptr248022 = getelementptr inbounds i64, i64* %cloptr248021, i64 0               ; &cloptr248021[0]
  %f248024 = load i64, i64* %i0ptr248022, align 8                                    ; load; *i0ptr248022
  %fptr248023 = inttoptr i64 %f248024 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr248023(i64 %arg235374, i64 %x239206)                ; tail call
  ret void

else248014:
  %many239213 = call i64 @const_init_string(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @str248025, i32 0, i32 0)); quoted string
  %fail239211 = call i64 @prim_halt(i64 %many239213)                                 ; call prim_halt
  %sym239216 = add i64 0, 0                                                          ; quoted ()
  %cloptr248026 = inttoptr i64 %fail239211 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr248027 = getelementptr inbounds i64, i64* %cloptr248026, i64 0               ; &cloptr248026[0]
  %f248029 = load i64, i64* %i0ptr248027, align 8                                    ; load; *i0ptr248027
  %fptr248028 = inttoptr i64 %f248029 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr248028(i64 %fail239211, i64 %sym239216)             ; tail call
  ret void
}


define void @lam243228(i64 %env243229, i64 %rvp239195) {
  %envptr248030 = inttoptr i64 %env243229 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr248031 = getelementptr inbounds i64, i64* %envptr248030, i64 3              ; &envptr248030[3]
  %_37wind_45stack233694233874 = load i64, i64* %envptr248031, align 8               ; load; *envptr248031
  %envptr248032 = inttoptr i64 %env243229 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr248033 = getelementptr inbounds i64, i64* %envptr248032, i64 2              ; &envptr248032[2]
  %cont234162 = load i64, i64* %envptr248033, align 8                                ; load; *envptr248033
  %envptr248034 = inttoptr i64 %env243229 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr248035 = getelementptr inbounds i64, i64* %envptr248034, i64 1              ; &envptr248034[1]
  %l233727233907 = load i64, i64* %envptr248035, align 8                             ; load; *envptr248035
  %check239196 = call i64 @prim_null_63(i64 %rvp239195)                              ; call prim_null_63
  %cmp248036 = icmp eq i64 %check239196, 15                                          ; false?
  br i1 %cmp248036, label %else248038, label %then248037                             ; if

then248037:
  %msg239200 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str248039, i32 0, i32 0)); quoted string
  %abort239198 = call i64 @prim_halt(i64 %msg239200)                                 ; call prim_halt
  %sym239203 = add i64 0, 0                                                          ; quoted ()
  %cloptr248040 = inttoptr i64 %abort239198 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr248041 = getelementptr inbounds i64, i64* %cloptr248040, i64 0               ; &cloptr248040[0]
  %f248043 = load i64, i64* %i0ptr248041, align 8                                    ; load; *i0ptr248041
  %fptr248042 = inttoptr i64 %f248043 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr248042(i64 %abort239198, i64 %sym239203)            ; tail call
  ret void

else248038:
  %_95234166 = call i64 @prim_car(i64 %rvp239195)                                    ; call prim_car
  %rvp239185 = call i64 @prim_cdr(i64 %rvp239195)                                    ; call prim_cdr
  %check239186 = call i64 @prim_null_63(i64 %rvp239185)                              ; call prim_null_63
  %cmp248044 = icmp eq i64 %check239186, 15                                          ; false?
  br i1 %cmp248044, label %else248046, label %then248045                             ; if

then248045:
  %msg239190 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str248047, i32 0, i32 0)); quoted string
  %abort239188 = call i64 @prim_halt(i64 %msg239190)                                 ; call prim_halt
  %sym239193 = add i64 0, 0                                                          ; quoted ()
  %cloptr248048 = inttoptr i64 %abort239188 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr248049 = getelementptr inbounds i64, i64* %cloptr248048, i64 0               ; &cloptr248048[0]
  %f248051 = load i64, i64* %i0ptr248049, align 8                                    ; load; *i0ptr248049
  %fptr248050 = inttoptr i64 %f248051 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr248050(i64 %abort239188, i64 %sym239193)            ; tail call
  ret void

else248046:
  %rest239192 = call i64 @prim_cdr(i64 %rvp239185)                                   ; call prim_cdr
  %empty239187 = call i64 @prim_null_63(i64 %rest239192)                             ; call prim_null_63
  %cmp248052 = icmp eq i64 %empty239187, 15                                          ; false?
  br i1 %cmp248052, label %else248054, label %then248053                             ; if

then248053:
  %check233573233731233911 = call i64 @prim_car(i64 %rvp239185)                      ; call prim_car
  %na239131 = call i64 @prim_cdr(i64 %rvp239185)                                     ; call prim_cdr
  %cmp248055 = icmp eq i64 %check233573233731233911, 15                              ; false?
  br i1 %cmp248055, label %else248057, label %then248056                             ; if

then248056:
  %a234062 = call i64 @prim_car(i64 %l233727233907)                                  ; call prim_car
  %a234063 = call i64 @prim_car(i64 %a234062)                                        ; call prim_car
  %cloptr248058 = call i64* @alloc(i64 32)                                           ; malloc
  %eptr248060 = getelementptr inbounds i64, i64* %cloptr248058, i64 1                ; &eptr248060[1]
  %eptr248061 = getelementptr inbounds i64, i64* %cloptr248058, i64 2                ; &eptr248061[2]
  %eptr248062 = getelementptr inbounds i64, i64* %cloptr248058, i64 3                ; &eptr248062[3]
  store i64 %l233727233907, i64* %eptr248060                                         ; *eptr248060 = %l233727233907
  store i64 %cont234162, i64* %eptr248061                                            ; *eptr248061 = %cont234162
  store i64 %_37wind_45stack233694233874, i64* %eptr248062                           ; *eptr248062 = %_37wind_45stack233694233874
  %eptr248059 = getelementptr inbounds i64, i64* %cloptr248058, i64 0                ; &cloptr248058[0]
  %f248063 = ptrtoint void(i64,i64)* @lam243210 to i64                               ; fptr cast; i64(...)* -> i64
  store i64 %f248063, i64* %eptr248059                                               ; store fptr
  %arg235377 = ptrtoint i64* %cloptr248058 to i64                                    ; closure cast; i64* -> i64
  %sym239156 = add i64 0, 0                                                          ; quoted ()
  %x239157 = call i64 @prim_cons(i64 %arg235377, i64 %sym239156)                     ; call prim_cons
  %cloptr248064 = inttoptr i64 %a234063 to i64*                                      ; closure/env cast; i64 -> i64*
  %i0ptr248065 = getelementptr inbounds i64, i64* %cloptr248064, i64 0               ; &cloptr248064[0]
  %f248067 = load i64, i64* %i0ptr248065, align 8                                    ; load; *i0ptr248065
  %fptr248066 = inttoptr i64 %f248067 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr248066(i64 %a234063, i64 %x239157)                  ; tail call
  ret void

else248057:
  %arg235385 = call i64 @const_init_string(i8* getelementptr inbounds ([71 x i8], [71 x i8]* @str248068, i32 0, i32 0)); quoted string
  %retprim234167 = call i64 @prim_halt(i64 %arg235385)                               ; call prim_halt
  %cloptr248069 = call i64* @alloc(i64 32)                                           ; malloc
  %eptr248071 = getelementptr inbounds i64, i64* %cloptr248069, i64 1                ; &eptr248071[1]
  %eptr248072 = getelementptr inbounds i64, i64* %cloptr248069, i64 2                ; &eptr248072[2]
  %eptr248073 = getelementptr inbounds i64, i64* %cloptr248069, i64 3                ; &eptr248073[3]
  store i64 %l233727233907, i64* %eptr248071                                         ; *eptr248071 = %l233727233907
  store i64 %cont234162, i64* %eptr248072                                            ; *eptr248072 = %cont234162
  store i64 %_37wind_45stack233694233874, i64* %eptr248073                           ; *eptr248073 = %_37wind_45stack233694233874
  %eptr248070 = getelementptr inbounds i64, i64* %cloptr248069, i64 0                ; &cloptr248069[0]
  %f248074 = ptrtoint void(i64,i64)* @lam243223 to i64                               ; fptr cast; i64(...)* -> i64
  store i64 %f248074, i64* %eptr248070                                               ; store fptr
  %arg235388 = ptrtoint i64* %cloptr248069 to i64                                    ; closure cast; i64* -> i64
  %arg235387 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %sym239182 = add i64 0, 0                                                          ; quoted ()
  %x239183 = call i64 @prim_cons(i64 %retprim234167, i64 %sym239182)                 ; call prim_cons
  %x239184 = call i64 @prim_cons(i64 %arg235387, i64 %x239183)                       ; call prim_cons
  %cloptr248075 = inttoptr i64 %arg235388 to i64*                                    ; closure/env cast; i64 -> i64*
  %i0ptr248076 = getelementptr inbounds i64, i64* %cloptr248075, i64 0               ; &cloptr248075[0]
  %f248078 = load i64, i64* %i0ptr248076, align 8                                    ; load; *i0ptr248076
  %fptr248077 = inttoptr i64 %f248078 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr248077(i64 %arg235388, i64 %x239184)                ; tail call
  ret void

else248054:
  %many239191 = call i64 @const_init_string(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @str248079, i32 0, i32 0)); quoted string
  %fail239189 = call i64 @prim_halt(i64 %many239191)                                 ; call prim_halt
  %sym239194 = add i64 0, 0                                                          ; quoted ()
  %cloptr248080 = inttoptr i64 %fail239189 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr248081 = getelementptr inbounds i64, i64* %cloptr248080, i64 0               ; &cloptr248080[0]
  %f248083 = load i64, i64* %i0ptr248081, align 8                                    ; load; *i0ptr248081
  %fptr248082 = inttoptr i64 %f248083 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr248082(i64 %fail239189, i64 %sym239194)             ; tail call
  ret void
}


define void @lam243223(i64 %env243224, i64 %rvp239173) {
  %envptr248084 = inttoptr i64 %env243224 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr248085 = getelementptr inbounds i64, i64* %envptr248084, i64 3              ; &envptr248084[3]
  %_37wind_45stack233694233874 = load i64, i64* %envptr248085, align 8               ; load; *envptr248085
  %envptr248086 = inttoptr i64 %env243224 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr248087 = getelementptr inbounds i64, i64* %envptr248086, i64 2              ; &envptr248086[2]
  %cont234162 = load i64, i64* %envptr248087, align 8                                ; load; *envptr248087
  %envptr248088 = inttoptr i64 %env243224 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr248089 = getelementptr inbounds i64, i64* %envptr248088, i64 1              ; &envptr248088[1]
  %l233727233907 = load i64, i64* %envptr248089, align 8                             ; load; *envptr248089
  %check239174 = call i64 @prim_null_63(i64 %rvp239173)                              ; call prim_null_63
  %cmp248090 = icmp eq i64 %check239174, 15                                          ; false?
  br i1 %cmp248090, label %else248092, label %then248091                             ; if

then248091:
  %msg239178 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str248093, i32 0, i32 0)); quoted string
  %abort239176 = call i64 @prim_halt(i64 %msg239178)                                 ; call prim_halt
  %sym239181 = add i64 0, 0                                                          ; quoted ()
  %cloptr248094 = inttoptr i64 %abort239176 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr248095 = getelementptr inbounds i64, i64* %cloptr248094, i64 0               ; &cloptr248094[0]
  %f248097 = load i64, i64* %i0ptr248095, align 8                                    ; load; *i0ptr248095
  %fptr248096 = inttoptr i64 %f248097 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr248096(i64 %abort239176, i64 %sym239181)            ; tail call
  ret void

else248092:
  %_95234164 = call i64 @prim_car(i64 %rvp239173)                                    ; call prim_car
  %rvp239163 = call i64 @prim_cdr(i64 %rvp239173)                                    ; call prim_cdr
  %check239164 = call i64 @prim_null_63(i64 %rvp239163)                              ; call prim_null_63
  %cmp248098 = icmp eq i64 %check239164, 15                                          ; false?
  br i1 %cmp248098, label %else248100, label %then248099                             ; if

then248099:
  %msg239168 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str248101, i32 0, i32 0)); quoted string
  %abort239166 = call i64 @prim_halt(i64 %msg239168)                                 ; call prim_halt
  %sym239171 = add i64 0, 0                                                          ; quoted ()
  %cloptr248102 = inttoptr i64 %abort239166 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr248103 = getelementptr inbounds i64, i64* %cloptr248102, i64 0               ; &cloptr248102[0]
  %f248105 = load i64, i64* %i0ptr248103, align 8                                    ; load; *i0ptr248103
  %fptr248104 = inttoptr i64 %f248105 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr248104(i64 %abort239166, i64 %sym239171)            ; tail call
  ret void

else248100:
  %rest239170 = call i64 @prim_cdr(i64 %rvp239163)                                   ; call prim_cdr
  %empty239165 = call i64 @prim_null_63(i64 %rest239170)                             ; call prim_null_63
  %cmp248106 = icmp eq i64 %empty239165, 15                                          ; false?
  br i1 %cmp248106, label %else248108, label %then248107                             ; if

then248107:
  %_95t233730233910 = call i64 @prim_car(i64 %rvp239163)                             ; call prim_car
  %na239159 = call i64 @prim_cdr(i64 %rvp239163)                                     ; call prim_cdr
  %arg235390 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %retprim234165 = call i64 @prim_vector_45set_33(i64 %_37wind_45stack233694233874, i64 %arg235390, i64 %l233727233907); call prim_vector_45set_33
  %arg235393 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %sym239160 = add i64 0, 0                                                          ; quoted ()
  %x239161 = call i64 @prim_cons(i64 %retprim234165, i64 %sym239160)                 ; call prim_cons
  %x239162 = call i64 @prim_cons(i64 %arg235393, i64 %x239161)                       ; call prim_cons
  %cloptr248109 = inttoptr i64 %cont234162 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr248110 = getelementptr inbounds i64, i64* %cloptr248109, i64 0               ; &cloptr248109[0]
  %f248112 = load i64, i64* %i0ptr248110, align 8                                    ; load; *i0ptr248110
  %fptr248111 = inttoptr i64 %f248112 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr248111(i64 %cont234162, i64 %x239162)               ; tail call
  ret void

else248108:
  %many239169 = call i64 @const_init_string(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @str248113, i32 0, i32 0)); quoted string
  %fail239167 = call i64 @prim_halt(i64 %many239169)                                 ; call prim_halt
  %sym239172 = add i64 0, 0                                                          ; quoted ()
  %cloptr248114 = inttoptr i64 %fail239167 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr248115 = getelementptr inbounds i64, i64* %cloptr248114, i64 0               ; &cloptr248114[0]
  %f248117 = load i64, i64* %i0ptr248115, align 8                                    ; load; *i0ptr248115
  %fptr248116 = inttoptr i64 %f248117 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr248116(i64 %fail239167, i64 %sym239172)             ; tail call
  ret void
}


define void @lam243210(i64 %env243211, i64 %rvp239147) {
  %envptr248118 = inttoptr i64 %env243211 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr248119 = getelementptr inbounds i64, i64* %envptr248118, i64 3              ; &envptr248118[3]
  %_37wind_45stack233694233874 = load i64, i64* %envptr248119, align 8               ; load; *envptr248119
  %envptr248120 = inttoptr i64 %env243211 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr248121 = getelementptr inbounds i64, i64* %envptr248120, i64 2              ; &envptr248120[2]
  %cont234162 = load i64, i64* %envptr248121, align 8                                ; load; *envptr248121
  %envptr248122 = inttoptr i64 %env243211 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr248123 = getelementptr inbounds i64, i64* %envptr248122, i64 1              ; &envptr248122[1]
  %l233727233907 = load i64, i64* %envptr248123, align 8                             ; load; *envptr248123
  %check239148 = call i64 @prim_null_63(i64 %rvp239147)                              ; call prim_null_63
  %cmp248124 = icmp eq i64 %check239148, 15                                          ; false?
  br i1 %cmp248124, label %else248126, label %then248125                             ; if

then248125:
  %msg239152 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str248127, i32 0, i32 0)); quoted string
  %abort239150 = call i64 @prim_halt(i64 %msg239152)                                 ; call prim_halt
  %sym239155 = add i64 0, 0                                                          ; quoted ()
  %cloptr248128 = inttoptr i64 %abort239150 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr248129 = getelementptr inbounds i64, i64* %cloptr248128, i64 0               ; &cloptr248128[0]
  %f248131 = load i64, i64* %i0ptr248129, align 8                                    ; load; *i0ptr248129
  %fptr248130 = inttoptr i64 %f248131 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr248130(i64 %abort239150, i64 %sym239155)            ; tail call
  ret void

else248126:
  %_95234164 = call i64 @prim_car(i64 %rvp239147)                                    ; call prim_car
  %rvp239137 = call i64 @prim_cdr(i64 %rvp239147)                                    ; call prim_cdr
  %check239138 = call i64 @prim_null_63(i64 %rvp239137)                              ; call prim_null_63
  %cmp248132 = icmp eq i64 %check239138, 15                                          ; false?
  br i1 %cmp248132, label %else248134, label %then248133                             ; if

then248133:
  %msg239142 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str248135, i32 0, i32 0)); quoted string
  %abort239140 = call i64 @prim_halt(i64 %msg239142)                                 ; call prim_halt
  %sym239145 = add i64 0, 0                                                          ; quoted ()
  %cloptr248136 = inttoptr i64 %abort239140 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr248137 = getelementptr inbounds i64, i64* %cloptr248136, i64 0               ; &cloptr248136[0]
  %f248139 = load i64, i64* %i0ptr248137, align 8                                    ; load; *i0ptr248137
  %fptr248138 = inttoptr i64 %f248139 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr248138(i64 %abort239140, i64 %sym239145)            ; tail call
  ret void

else248134:
  %rest239144 = call i64 @prim_cdr(i64 %rvp239137)                                   ; call prim_cdr
  %empty239139 = call i64 @prim_null_63(i64 %rest239144)                             ; call prim_null_63
  %cmp248140 = icmp eq i64 %empty239139, 15                                          ; false?
  br i1 %cmp248140, label %else248142, label %then248141                             ; if

then248141:
  %_95t233730233910 = call i64 @prim_car(i64 %rvp239137)                             ; call prim_car
  %na239133 = call i64 @prim_cdr(i64 %rvp239137)                                     ; call prim_cdr
  %arg235380 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %retprim234165 = call i64 @prim_vector_45set_33(i64 %_37wind_45stack233694233874, i64 %arg235380, i64 %l233727233907); call prim_vector_45set_33
  %arg235383 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %sym239134 = add i64 0, 0                                                          ; quoted ()
  %x239135 = call i64 @prim_cons(i64 %retprim234165, i64 %sym239134)                 ; call prim_cons
  %x239136 = call i64 @prim_cons(i64 %arg235383, i64 %x239135)                       ; call prim_cons
  %cloptr248143 = inttoptr i64 %cont234162 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr248144 = getelementptr inbounds i64, i64* %cloptr248143, i64 0               ; &cloptr248143[0]
  %f248146 = load i64, i64* %i0ptr248144, align 8                                    ; load; *i0ptr248144
  %fptr248145 = inttoptr i64 %f248146 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr248145(i64 %cont234162, i64 %x239136)               ; tail call
  ret void

else248142:
  %many239143 = call i64 @const_init_string(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @str248147, i32 0, i32 0)); quoted string
  %fail239141 = call i64 @prim_halt(i64 %many239143)                                 ; call prim_halt
  %sym239146 = add i64 0, 0                                                          ; quoted ()
  %cloptr248148 = inttoptr i64 %fail239141 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr248149 = getelementptr inbounds i64, i64* %cloptr248148, i64 0               ; &cloptr248148[0]
  %f248151 = load i64, i64* %i0ptr248149, align 8                                    ; load; *i0ptr248149
  %fptr248150 = inttoptr i64 %f248151 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr248150(i64 %fail239141, i64 %sym239146)             ; tail call
  ret void
}


define void @lam243185(i64 %env243186, i64 %rvp239116) {
  %envptr248152 = inttoptr i64 %env243186 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr248153 = getelementptr inbounds i64, i64* %envptr248152, i64 3              ; &envptr248152[3]
  %_37wind_45stack233694233874 = load i64, i64* %envptr248153, align 8               ; load; *envptr248153
  %envptr248154 = inttoptr i64 %env243186 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr248155 = getelementptr inbounds i64, i64* %envptr248154, i64 2              ; &envptr248154[2]
  %cont234162 = load i64, i64* %envptr248155, align 8                                ; load; *envptr248155
  %envptr248156 = inttoptr i64 %env243186 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr248157 = getelementptr inbounds i64, i64* %envptr248156, i64 1              ; &envptr248156[1]
  %l233727233907 = load i64, i64* %envptr248157, align 8                             ; load; *envptr248157
  %check239117 = call i64 @prim_null_63(i64 %rvp239116)                              ; call prim_null_63
  %cmp248158 = icmp eq i64 %check239117, 15                                          ; false?
  br i1 %cmp248158, label %else248160, label %then248159                             ; if

then248159:
  %msg239121 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str248161, i32 0, i32 0)); quoted string
  %abort239119 = call i64 @prim_halt(i64 %msg239121)                                 ; call prim_halt
  %sym239124 = add i64 0, 0                                                          ; quoted ()
  %cloptr248162 = inttoptr i64 %abort239119 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr248163 = getelementptr inbounds i64, i64* %cloptr248162, i64 0               ; &cloptr248162[0]
  %f248165 = load i64, i64* %i0ptr248163, align 8                                    ; load; *i0ptr248163
  %fptr248164 = inttoptr i64 %f248165 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr248164(i64 %abort239119, i64 %sym239124)            ; tail call
  ret void

else248160:
  %_95234163 = call i64 @prim_car(i64 %rvp239116)                                    ; call prim_car
  %rvp239106 = call i64 @prim_cdr(i64 %rvp239116)                                    ; call prim_cdr
  %check239107 = call i64 @prim_null_63(i64 %rvp239106)                              ; call prim_null_63
  %cmp248166 = icmp eq i64 %check239107, 15                                          ; false?
  br i1 %cmp248166, label %else248168, label %then248167                             ; if

then248167:
  %msg239111 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str248169, i32 0, i32 0)); quoted string
  %abort239109 = call i64 @prim_halt(i64 %msg239111)                                 ; call prim_halt
  %sym239114 = add i64 0, 0                                                          ; quoted ()
  %cloptr248170 = inttoptr i64 %abort239109 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr248171 = getelementptr inbounds i64, i64* %cloptr248170, i64 0               ; &cloptr248170[0]
  %f248173 = load i64, i64* %i0ptr248171, align 8                                    ; load; *i0ptr248171
  %fptr248172 = inttoptr i64 %f248173 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr248172(i64 %abort239109, i64 %sym239114)            ; tail call
  ret void

else248168:
  %rest239113 = call i64 @prim_cdr(i64 %rvp239106)                                   ; call prim_cdr
  %empty239108 = call i64 @prim_null_63(i64 %rest239113)                             ; call prim_null_63
  %cmp248174 = icmp eq i64 %empty239108, 15                                          ; false?
  br i1 %cmp248174, label %else248176, label %then248175                             ; if

then248175:
  %_95t233728233908 = call i64 @prim_car(i64 %rvp239106)                             ; call prim_car
  %na239028 = call i64 @prim_cdr(i64 %rvp239106)                                     ; call prim_cdr
  %a234060 = call i64 @prim_car(i64 %l233727233907)                                  ; call prim_car
  %a234061 = call i64 @prim_car(i64 %a234060)                                        ; call prim_car
  %retprim234168 = call i64 @prim_procedure_63(i64 %a234061)                         ; call prim_procedure_63
  %cloptr248177 = call i64* @alloc(i64 32)                                           ; malloc
  %eptr248179 = getelementptr inbounds i64, i64* %cloptr248177, i64 1                ; &eptr248179[1]
  %eptr248180 = getelementptr inbounds i64, i64* %cloptr248177, i64 2                ; &eptr248180[2]
  %eptr248181 = getelementptr inbounds i64, i64* %cloptr248177, i64 3                ; &eptr248181[3]
  store i64 %l233727233907, i64* %eptr248179                                         ; *eptr248179 = %l233727233907
  store i64 %cont234162, i64* %eptr248180                                            ; *eptr248180 = %cont234162
  store i64 %_37wind_45stack233694233874, i64* %eptr248181                           ; *eptr248181 = %_37wind_45stack233694233874
  %eptr248178 = getelementptr inbounds i64, i64* %cloptr248177, i64 0                ; &cloptr248177[0]
  %f248182 = ptrtoint void(i64,i64)* @lam243181 to i64                               ; fptr cast; i64(...)* -> i64
  store i64 %f248182, i64* %eptr248178                                               ; store fptr
  %arg235344 = ptrtoint i64* %cloptr248177 to i64                                    ; closure cast; i64* -> i64
  %arg235343 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %sym239103 = add i64 0, 0                                                          ; quoted ()
  %x239104 = call i64 @prim_cons(i64 %retprim234168, i64 %sym239103)                 ; call prim_cons
  %x239105 = call i64 @prim_cons(i64 %arg235343, i64 %x239104)                       ; call prim_cons
  %cloptr248183 = inttoptr i64 %arg235344 to i64*                                    ; closure/env cast; i64 -> i64*
  %i0ptr248184 = getelementptr inbounds i64, i64* %cloptr248183, i64 0               ; &cloptr248183[0]
  %f248186 = load i64, i64* %i0ptr248184, align 8                                    ; load; *i0ptr248184
  %fptr248185 = inttoptr i64 %f248186 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr248185(i64 %arg235344, i64 %x239105)                ; tail call
  ret void

else248176:
  %many239112 = call i64 @const_init_string(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @str248187, i32 0, i32 0)); quoted string
  %fail239110 = call i64 @prim_halt(i64 %many239112)                                 ; call prim_halt
  %sym239115 = add i64 0, 0                                                          ; quoted ()
  %cloptr248188 = inttoptr i64 %fail239110 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr248189 = getelementptr inbounds i64, i64* %cloptr248188, i64 0               ; &cloptr248188[0]
  %f248191 = load i64, i64* %i0ptr248189, align 8                                    ; load; *i0ptr248189
  %fptr248190 = inttoptr i64 %f248191 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr248190(i64 %fail239110, i64 %sym239115)             ; tail call
  ret void
}


define void @lam243181(i64 %env243182, i64 %rvp239094) {
  %envptr248192 = inttoptr i64 %env243182 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr248193 = getelementptr inbounds i64, i64* %envptr248192, i64 3              ; &envptr248192[3]
  %_37wind_45stack233694233874 = load i64, i64* %envptr248193, align 8               ; load; *envptr248193
  %envptr248194 = inttoptr i64 %env243182 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr248195 = getelementptr inbounds i64, i64* %envptr248194, i64 2              ; &envptr248194[2]
  %cont234162 = load i64, i64* %envptr248195, align 8                                ; load; *envptr248195
  %envptr248196 = inttoptr i64 %env243182 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr248197 = getelementptr inbounds i64, i64* %envptr248196, i64 1              ; &envptr248196[1]
  %l233727233907 = load i64, i64* %envptr248197, align 8                             ; load; *envptr248197
  %check239095 = call i64 @prim_null_63(i64 %rvp239094)                              ; call prim_null_63
  %cmp248198 = icmp eq i64 %check239095, 15                                          ; false?
  br i1 %cmp248198, label %else248200, label %then248199                             ; if

then248199:
  %msg239099 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str248201, i32 0, i32 0)); quoted string
  %abort239097 = call i64 @prim_halt(i64 %msg239099)                                 ; call prim_halt
  %sym239102 = add i64 0, 0                                                          ; quoted ()
  %cloptr248202 = inttoptr i64 %abort239097 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr248203 = getelementptr inbounds i64, i64* %cloptr248202, i64 0               ; &cloptr248202[0]
  %f248205 = load i64, i64* %i0ptr248203, align 8                                    ; load; *i0ptr248203
  %fptr248204 = inttoptr i64 %f248205 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr248204(i64 %abort239097, i64 %sym239102)            ; tail call
  ret void

else248200:
  %_95234166 = call i64 @prim_car(i64 %rvp239094)                                    ; call prim_car
  %rvp239084 = call i64 @prim_cdr(i64 %rvp239094)                                    ; call prim_cdr
  %check239085 = call i64 @prim_null_63(i64 %rvp239084)                              ; call prim_null_63
  %cmp248206 = icmp eq i64 %check239085, 15                                          ; false?
  br i1 %cmp248206, label %else248208, label %then248207                             ; if

then248207:
  %msg239089 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str248209, i32 0, i32 0)); quoted string
  %abort239087 = call i64 @prim_halt(i64 %msg239089)                                 ; call prim_halt
  %sym239092 = add i64 0, 0                                                          ; quoted ()
  %cloptr248210 = inttoptr i64 %abort239087 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr248211 = getelementptr inbounds i64, i64* %cloptr248210, i64 0               ; &cloptr248210[0]
  %f248213 = load i64, i64* %i0ptr248211, align 8                                    ; load; *i0ptr248211
  %fptr248212 = inttoptr i64 %f248213 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr248212(i64 %abort239087, i64 %sym239092)            ; tail call
  ret void

else248208:
  %rest239091 = call i64 @prim_cdr(i64 %rvp239084)                                   ; call prim_cdr
  %empty239086 = call i64 @prim_null_63(i64 %rest239091)                             ; call prim_null_63
  %cmp248214 = icmp eq i64 %empty239086, 15                                          ; false?
  br i1 %cmp248214, label %else248216, label %then248215                             ; if

then248215:
  %check233573233731233911 = call i64 @prim_car(i64 %rvp239084)                      ; call prim_car
  %na239030 = call i64 @prim_cdr(i64 %rvp239084)                                     ; call prim_cdr
  %cmp248217 = icmp eq i64 %check233573233731233911, 15                              ; false?
  br i1 %cmp248217, label %else248219, label %then248218                             ; if

then248218:
  %a234062 = call i64 @prim_car(i64 %l233727233907)                                  ; call prim_car
  %a234063 = call i64 @prim_car(i64 %a234062)                                        ; call prim_car
  %cloptr248220 = call i64* @alloc(i64 32)                                           ; malloc
  %eptr248222 = getelementptr inbounds i64, i64* %cloptr248220, i64 1                ; &eptr248222[1]
  %eptr248223 = getelementptr inbounds i64, i64* %cloptr248220, i64 2                ; &eptr248223[2]
  %eptr248224 = getelementptr inbounds i64, i64* %cloptr248220, i64 3                ; &eptr248224[3]
  store i64 %l233727233907, i64* %eptr248222                                         ; *eptr248222 = %l233727233907
  store i64 %cont234162, i64* %eptr248223                                            ; *eptr248223 = %cont234162
  store i64 %_37wind_45stack233694233874, i64* %eptr248224                           ; *eptr248224 = %_37wind_45stack233694233874
  %eptr248221 = getelementptr inbounds i64, i64* %cloptr248220, i64 0                ; &cloptr248220[0]
  %f248225 = ptrtoint void(i64,i64)* @lam243163 to i64                               ; fptr cast; i64(...)* -> i64
  store i64 %f248225, i64* %eptr248221                                               ; store fptr
  %arg235347 = ptrtoint i64* %cloptr248220 to i64                                    ; closure cast; i64* -> i64
  %sym239055 = add i64 0, 0                                                          ; quoted ()
  %x239056 = call i64 @prim_cons(i64 %arg235347, i64 %sym239055)                     ; call prim_cons
  %cloptr248226 = inttoptr i64 %a234063 to i64*                                      ; closure/env cast; i64 -> i64*
  %i0ptr248227 = getelementptr inbounds i64, i64* %cloptr248226, i64 0               ; &cloptr248226[0]
  %f248229 = load i64, i64* %i0ptr248227, align 8                                    ; load; *i0ptr248227
  %fptr248228 = inttoptr i64 %f248229 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr248228(i64 %a234063, i64 %x239056)                  ; tail call
  ret void

else248219:
  %arg235355 = call i64 @const_init_string(i8* getelementptr inbounds ([71 x i8], [71 x i8]* @str248230, i32 0, i32 0)); quoted string
  %retprim234167 = call i64 @prim_halt(i64 %arg235355)                               ; call prim_halt
  %cloptr248231 = call i64* @alloc(i64 32)                                           ; malloc
  %eptr248233 = getelementptr inbounds i64, i64* %cloptr248231, i64 1                ; &eptr248233[1]
  %eptr248234 = getelementptr inbounds i64, i64* %cloptr248231, i64 2                ; &eptr248234[2]
  %eptr248235 = getelementptr inbounds i64, i64* %cloptr248231, i64 3                ; &eptr248235[3]
  store i64 %l233727233907, i64* %eptr248233                                         ; *eptr248233 = %l233727233907
  store i64 %cont234162, i64* %eptr248234                                            ; *eptr248234 = %cont234162
  store i64 %_37wind_45stack233694233874, i64* %eptr248235                           ; *eptr248235 = %_37wind_45stack233694233874
  %eptr248232 = getelementptr inbounds i64, i64* %cloptr248231, i64 0                ; &cloptr248231[0]
  %f248236 = ptrtoint void(i64,i64)* @lam243176 to i64                               ; fptr cast; i64(...)* -> i64
  store i64 %f248236, i64* %eptr248232                                               ; store fptr
  %arg235358 = ptrtoint i64* %cloptr248231 to i64                                    ; closure cast; i64* -> i64
  %arg235357 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %sym239081 = add i64 0, 0                                                          ; quoted ()
  %x239082 = call i64 @prim_cons(i64 %retprim234167, i64 %sym239081)                 ; call prim_cons
  %x239083 = call i64 @prim_cons(i64 %arg235357, i64 %x239082)                       ; call prim_cons
  %cloptr248237 = inttoptr i64 %arg235358 to i64*                                    ; closure/env cast; i64 -> i64*
  %i0ptr248238 = getelementptr inbounds i64, i64* %cloptr248237, i64 0               ; &cloptr248237[0]
  %f248240 = load i64, i64* %i0ptr248238, align 8                                    ; load; *i0ptr248238
  %fptr248239 = inttoptr i64 %f248240 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr248239(i64 %arg235358, i64 %x239083)                ; tail call
  ret void

else248216:
  %many239090 = call i64 @const_init_string(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @str248241, i32 0, i32 0)); quoted string
  %fail239088 = call i64 @prim_halt(i64 %many239090)                                 ; call prim_halt
  %sym239093 = add i64 0, 0                                                          ; quoted ()
  %cloptr248242 = inttoptr i64 %fail239088 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr248243 = getelementptr inbounds i64, i64* %cloptr248242, i64 0               ; &cloptr248242[0]
  %f248245 = load i64, i64* %i0ptr248243, align 8                                    ; load; *i0ptr248243
  %fptr248244 = inttoptr i64 %f248245 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr248244(i64 %fail239088, i64 %sym239093)             ; tail call
  ret void
}


define void @lam243176(i64 %env243177, i64 %rvp239072) {
  %envptr248246 = inttoptr i64 %env243177 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr248247 = getelementptr inbounds i64, i64* %envptr248246, i64 3              ; &envptr248246[3]
  %_37wind_45stack233694233874 = load i64, i64* %envptr248247, align 8               ; load; *envptr248247
  %envptr248248 = inttoptr i64 %env243177 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr248249 = getelementptr inbounds i64, i64* %envptr248248, i64 2              ; &envptr248248[2]
  %cont234162 = load i64, i64* %envptr248249, align 8                                ; load; *envptr248249
  %envptr248250 = inttoptr i64 %env243177 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr248251 = getelementptr inbounds i64, i64* %envptr248250, i64 1              ; &envptr248250[1]
  %l233727233907 = load i64, i64* %envptr248251, align 8                             ; load; *envptr248251
  %check239073 = call i64 @prim_null_63(i64 %rvp239072)                              ; call prim_null_63
  %cmp248252 = icmp eq i64 %check239073, 15                                          ; false?
  br i1 %cmp248252, label %else248254, label %then248253                             ; if

then248253:
  %msg239077 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str248255, i32 0, i32 0)); quoted string
  %abort239075 = call i64 @prim_halt(i64 %msg239077)                                 ; call prim_halt
  %sym239080 = add i64 0, 0                                                          ; quoted ()
  %cloptr248256 = inttoptr i64 %abort239075 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr248257 = getelementptr inbounds i64, i64* %cloptr248256, i64 0               ; &cloptr248256[0]
  %f248259 = load i64, i64* %i0ptr248257, align 8                                    ; load; *i0ptr248257
  %fptr248258 = inttoptr i64 %f248259 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr248258(i64 %abort239075, i64 %sym239080)            ; tail call
  ret void

else248254:
  %_95234164 = call i64 @prim_car(i64 %rvp239072)                                    ; call prim_car
  %rvp239062 = call i64 @prim_cdr(i64 %rvp239072)                                    ; call prim_cdr
  %check239063 = call i64 @prim_null_63(i64 %rvp239062)                              ; call prim_null_63
  %cmp248260 = icmp eq i64 %check239063, 15                                          ; false?
  br i1 %cmp248260, label %else248262, label %then248261                             ; if

then248261:
  %msg239067 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str248263, i32 0, i32 0)); quoted string
  %abort239065 = call i64 @prim_halt(i64 %msg239067)                                 ; call prim_halt
  %sym239070 = add i64 0, 0                                                          ; quoted ()
  %cloptr248264 = inttoptr i64 %abort239065 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr248265 = getelementptr inbounds i64, i64* %cloptr248264, i64 0               ; &cloptr248264[0]
  %f248267 = load i64, i64* %i0ptr248265, align 8                                    ; load; *i0ptr248265
  %fptr248266 = inttoptr i64 %f248267 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr248266(i64 %abort239065, i64 %sym239070)            ; tail call
  ret void

else248262:
  %rest239069 = call i64 @prim_cdr(i64 %rvp239062)                                   ; call prim_cdr
  %empty239064 = call i64 @prim_null_63(i64 %rest239069)                             ; call prim_null_63
  %cmp248268 = icmp eq i64 %empty239064, 15                                          ; false?
  br i1 %cmp248268, label %else248270, label %then248269                             ; if

then248269:
  %_95t233730233910 = call i64 @prim_car(i64 %rvp239062)                             ; call prim_car
  %na239058 = call i64 @prim_cdr(i64 %rvp239062)                                     ; call prim_cdr
  %arg235360 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %retprim234165 = call i64 @prim_vector_45set_33(i64 %_37wind_45stack233694233874, i64 %arg235360, i64 %l233727233907); call prim_vector_45set_33
  %arg235363 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %sym239059 = add i64 0, 0                                                          ; quoted ()
  %x239060 = call i64 @prim_cons(i64 %retprim234165, i64 %sym239059)                 ; call prim_cons
  %x239061 = call i64 @prim_cons(i64 %arg235363, i64 %x239060)                       ; call prim_cons
  %cloptr248271 = inttoptr i64 %cont234162 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr248272 = getelementptr inbounds i64, i64* %cloptr248271, i64 0               ; &cloptr248271[0]
  %f248274 = load i64, i64* %i0ptr248272, align 8                                    ; load; *i0ptr248272
  %fptr248273 = inttoptr i64 %f248274 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr248273(i64 %cont234162, i64 %x239061)               ; tail call
  ret void

else248270:
  %many239068 = call i64 @const_init_string(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @str248275, i32 0, i32 0)); quoted string
  %fail239066 = call i64 @prim_halt(i64 %many239068)                                 ; call prim_halt
  %sym239071 = add i64 0, 0                                                          ; quoted ()
  %cloptr248276 = inttoptr i64 %fail239066 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr248277 = getelementptr inbounds i64, i64* %cloptr248276, i64 0               ; &cloptr248276[0]
  %f248279 = load i64, i64* %i0ptr248277, align 8                                    ; load; *i0ptr248277
  %fptr248278 = inttoptr i64 %f248279 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr248278(i64 %fail239066, i64 %sym239071)             ; tail call
  ret void
}


define void @lam243163(i64 %env243164, i64 %rvp239046) {
  %envptr248280 = inttoptr i64 %env243164 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr248281 = getelementptr inbounds i64, i64* %envptr248280, i64 3              ; &envptr248280[3]
  %_37wind_45stack233694233874 = load i64, i64* %envptr248281, align 8               ; load; *envptr248281
  %envptr248282 = inttoptr i64 %env243164 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr248283 = getelementptr inbounds i64, i64* %envptr248282, i64 2              ; &envptr248282[2]
  %cont234162 = load i64, i64* %envptr248283, align 8                                ; load; *envptr248283
  %envptr248284 = inttoptr i64 %env243164 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr248285 = getelementptr inbounds i64, i64* %envptr248284, i64 1              ; &envptr248284[1]
  %l233727233907 = load i64, i64* %envptr248285, align 8                             ; load; *envptr248285
  %check239047 = call i64 @prim_null_63(i64 %rvp239046)                              ; call prim_null_63
  %cmp248286 = icmp eq i64 %check239047, 15                                          ; false?
  br i1 %cmp248286, label %else248288, label %then248287                             ; if

then248287:
  %msg239051 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str248289, i32 0, i32 0)); quoted string
  %abort239049 = call i64 @prim_halt(i64 %msg239051)                                 ; call prim_halt
  %sym239054 = add i64 0, 0                                                          ; quoted ()
  %cloptr248290 = inttoptr i64 %abort239049 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr248291 = getelementptr inbounds i64, i64* %cloptr248290, i64 0               ; &cloptr248290[0]
  %f248293 = load i64, i64* %i0ptr248291, align 8                                    ; load; *i0ptr248291
  %fptr248292 = inttoptr i64 %f248293 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr248292(i64 %abort239049, i64 %sym239054)            ; tail call
  ret void

else248288:
  %_95234164 = call i64 @prim_car(i64 %rvp239046)                                    ; call prim_car
  %rvp239036 = call i64 @prim_cdr(i64 %rvp239046)                                    ; call prim_cdr
  %check239037 = call i64 @prim_null_63(i64 %rvp239036)                              ; call prim_null_63
  %cmp248294 = icmp eq i64 %check239037, 15                                          ; false?
  br i1 %cmp248294, label %else248296, label %then248295                             ; if

then248295:
  %msg239041 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str248297, i32 0, i32 0)); quoted string
  %abort239039 = call i64 @prim_halt(i64 %msg239041)                                 ; call prim_halt
  %sym239044 = add i64 0, 0                                                          ; quoted ()
  %cloptr248298 = inttoptr i64 %abort239039 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr248299 = getelementptr inbounds i64, i64* %cloptr248298, i64 0               ; &cloptr248298[0]
  %f248301 = load i64, i64* %i0ptr248299, align 8                                    ; load; *i0ptr248299
  %fptr248300 = inttoptr i64 %f248301 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr248300(i64 %abort239039, i64 %sym239044)            ; tail call
  ret void

else248296:
  %rest239043 = call i64 @prim_cdr(i64 %rvp239036)                                   ; call prim_cdr
  %empty239038 = call i64 @prim_null_63(i64 %rest239043)                             ; call prim_null_63
  %cmp248302 = icmp eq i64 %empty239038, 15                                          ; false?
  br i1 %cmp248302, label %else248304, label %then248303                             ; if

then248303:
  %_95t233730233910 = call i64 @prim_car(i64 %rvp239036)                             ; call prim_car
  %na239032 = call i64 @prim_cdr(i64 %rvp239036)                                     ; call prim_cdr
  %arg235350 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %retprim234165 = call i64 @prim_vector_45set_33(i64 %_37wind_45stack233694233874, i64 %arg235350, i64 %l233727233907); call prim_vector_45set_33
  %arg235353 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %sym239033 = add i64 0, 0                                                          ; quoted ()
  %x239034 = call i64 @prim_cons(i64 %retprim234165, i64 %sym239033)                 ; call prim_cons
  %x239035 = call i64 @prim_cons(i64 %arg235353, i64 %x239034)                       ; call prim_cons
  %cloptr248305 = inttoptr i64 %cont234162 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr248306 = getelementptr inbounds i64, i64* %cloptr248305, i64 0               ; &cloptr248305[0]
  %f248308 = load i64, i64* %i0ptr248306, align 8                                    ; load; *i0ptr248306
  %fptr248307 = inttoptr i64 %f248308 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr248307(i64 %cont234162, i64 %x239035)               ; tail call
  ret void

else248304:
  %many239042 = call i64 @const_init_string(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @str248309, i32 0, i32 0)); quoted string
  %fail239040 = call i64 @prim_halt(i64 %many239042)                                 ; call prim_halt
  %sym239045 = add i64 0, 0                                                          ; quoted ()
  %cloptr248310 = inttoptr i64 %fail239040 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr248311 = getelementptr inbounds i64, i64* %cloptr248310, i64 0               ; &cloptr248310[0]
  %f248313 = load i64, i64* %i0ptr248311, align 8                                    ; load; *i0ptr248311
  %fptr248312 = inttoptr i64 %f248313 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr248312(i64 %fail239040, i64 %sym239045)             ; tail call
  ret void
}


define void @lam243128(i64 %env243129, i64 %rvp239291) {
  %envptr248314 = inttoptr i64 %env243129 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr248315 = getelementptr inbounds i64, i64* %envptr248314, i64 3              ; &envptr248314[3]
  %f233724233904 = load i64, i64* %envptr248315, align 8                             ; load; *envptr248315
  %envptr248316 = inttoptr i64 %env243129 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr248317 = getelementptr inbounds i64, i64* %envptr248316, i64 2              ; &envptr248316[2]
  %cont234158 = load i64, i64* %envptr248317, align 8                                ; load; *envptr248317
  %envptr248318 = inttoptr i64 %env243129 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr248319 = getelementptr inbounds i64, i64* %envptr248318, i64 1              ; &envptr248318[1]
  %new233710233890 = load i64, i64* %envptr248319, align 8                           ; load; *envptr248319
  %check239292 = call i64 @prim_null_63(i64 %rvp239291)                              ; call prim_null_63
  %cmp248320 = icmp eq i64 %check239292, 15                                          ; false?
  br i1 %cmp248320, label %else248322, label %then248321                             ; if

then248321:
  %msg239296 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str248323, i32 0, i32 0)); quoted string
  %abort239294 = call i64 @prim_halt(i64 %msg239296)                                 ; call prim_halt
  %sym239299 = add i64 0, 0                                                          ; quoted ()
  %cloptr248324 = inttoptr i64 %abort239294 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr248325 = getelementptr inbounds i64, i64* %cloptr248324, i64 0               ; &cloptr248324[0]
  %f248327 = load i64, i64* %i0ptr248325, align 8                                    ; load; *i0ptr248325
  %fptr248326 = inttoptr i64 %f248327 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr248326(i64 %abort239294, i64 %sym239299)            ; tail call
  ret void

else248322:
  %_95234173 = call i64 @prim_car(i64 %rvp239291)                                    ; call prim_car
  %rvp239281 = call i64 @prim_cdr(i64 %rvp239291)                                    ; call prim_cdr
  %check239282 = call i64 @prim_null_63(i64 %rvp239281)                              ; call prim_null_63
  %cmp248328 = icmp eq i64 %check239282, 15                                          ; false?
  br i1 %cmp248328, label %else248330, label %then248329                             ; if

then248329:
  %msg239286 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str248331, i32 0, i32 0)); quoted string
  %abort239284 = call i64 @prim_halt(i64 %msg239286)                                 ; call prim_halt
  %sym239289 = add i64 0, 0                                                          ; quoted ()
  %cloptr248332 = inttoptr i64 %abort239284 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr248333 = getelementptr inbounds i64, i64* %cloptr248332, i64 0               ; &cloptr248332[0]
  %f248335 = load i64, i64* %i0ptr248333, align 8                                    ; load; *i0ptr248333
  %fptr248334 = inttoptr i64 %f248335 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr248334(i64 %abort239284, i64 %sym239289)            ; tail call
  ret void

else248330:
  %rest239288 = call i64 @prim_cdr(i64 %rvp239281)                                   ; call prim_cdr
  %empty239283 = call i64 @prim_null_63(i64 %rest239288)                             ; call prim_null_63
  %cmp248336 = icmp eq i64 %empty239283, 15                                          ; false?
  br i1 %cmp248336, label %else248338, label %then248337                             ; if

then248337:
  %check233574233733233913 = call i64 @prim_car(i64 %rvp239281)                      ; call prim_car
  %na239274 = call i64 @prim_cdr(i64 %rvp239281)                                     ; call prim_cdr
  %cmp248339 = icmp eq i64 %check233574233733233913, 15                              ; false?
  br i1 %cmp248339, label %else248341, label %then248340                             ; if

then248340:
  %arg235407 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %a234065 = call i64 @prim_vector_45ref(i64 %f233724233904, i64 %arg235407)         ; call prim_vector_45ref
  %sym239275 = add i64 0, 0                                                          ; quoted ()
  %x239276 = call i64 @prim_cons(i64 %new233710233890, i64 %sym239275)               ; call prim_cons
  %x239277 = call i64 @prim_cons(i64 %cont234158, i64 %x239276)                      ; call prim_cons
  %cloptr248342 = inttoptr i64 %a234065 to i64*                                      ; closure/env cast; i64 -> i64*
  %i0ptr248343 = getelementptr inbounds i64, i64* %cloptr248342, i64 0               ; &cloptr248342[0]
  %f248345 = load i64, i64* %i0ptr248343, align 8                                    ; load; *i0ptr248343
  %fptr248344 = inttoptr i64 %f248345 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr248344(i64 %a234065, i64 %x239277)                  ; tail call
  ret void

else248341:
  %arg235412 = call i64 @const_init_string(i8* getelementptr inbounds ([63 x i8], [63 x i8]* @str248346, i32 0, i32 0)); quoted string
  %retprim234174 = call i64 @prim_halt(i64 %arg235412)                               ; call prim_halt
  %arg235414 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %sym239278 = add i64 0, 0                                                          ; quoted ()
  %x239279 = call i64 @prim_cons(i64 %retprim234174, i64 %sym239278)                 ; call prim_cons
  %x239280 = call i64 @prim_cons(i64 %arg235414, i64 %x239279)                       ; call prim_cons
  %cloptr248347 = inttoptr i64 %cont234158 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr248348 = getelementptr inbounds i64, i64* %cloptr248347, i64 0               ; &cloptr248347[0]
  %f248350 = load i64, i64* %i0ptr248348, align 8                                    ; load; *i0ptr248348
  %fptr248349 = inttoptr i64 %f248350 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr248349(i64 %cont234158, i64 %x239280)               ; tail call
  ret void

else248338:
  %many239287 = call i64 @const_init_string(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @str248351, i32 0, i32 0)); quoted string
  %fail239285 = call i64 @prim_halt(i64 %many239287)                                 ; call prim_halt
  %sym239290 = add i64 0, 0                                                          ; quoted ()
  %cloptr248352 = inttoptr i64 %fail239285 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr248353 = getelementptr inbounds i64, i64* %cloptr248352, i64 0               ; &cloptr248352[0]
  %f248355 = load i64, i64* %i0ptr248353, align 8                                    ; load; *i0ptr248353
  %fptr248354 = inttoptr i64 %f248355 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr248354(i64 %fail239285, i64 %sym239290)             ; tail call
  ret void
}


define void @lam243094(i64 %env243095, i64 %rvp239002) {
  %envptr248356 = inttoptr i64 %env243095 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr248357 = getelementptr inbounds i64, i64* %envptr248356, i64 4              ; &envptr248356[4]
  %_37wind_45stack233694233874 = load i64, i64* %envptr248357, align 8               ; load; *envptr248357
  %envptr248358 = inttoptr i64 %env243095 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr248359 = getelementptr inbounds i64, i64* %envptr248358, i64 3              ; &envptr248358[3]
  %tail233711233891 = load i64, i64* %envptr248359, align 8                          ; load; *envptr248359
  %envptr248360 = inttoptr i64 %env243095 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr248361 = getelementptr inbounds i64, i64* %envptr248360, i64 2              ; &envptr248360[2]
  %cont234158 = load i64, i64* %envptr248361, align 8                                ; load; *envptr248361
  %envptr248362 = inttoptr i64 %env243095 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr248363 = getelementptr inbounds i64, i64* %envptr248362, i64 1              ; &envptr248362[1]
  %new233710233890 = load i64, i64* %envptr248363, align 8                           ; load; *envptr248363
  %check239003 = call i64 @prim_null_63(i64 %rvp239002)                              ; call prim_null_63
  %cmp248364 = icmp eq i64 %check239003, 15                                          ; false?
  br i1 %cmp248364, label %else248366, label %then248365                             ; if

then248365:
  %msg239007 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str248367, i32 0, i32 0)); quoted string
  %abort239005 = call i64 @prim_halt(i64 %msg239007)                                 ; call prim_halt
  %sym239010 = add i64 0, 0                                                          ; quoted ()
  %cloptr248368 = inttoptr i64 %abort239005 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr248369 = getelementptr inbounds i64, i64* %cloptr248368, i64 0               ; &cloptr248368[0]
  %f248371 = load i64, i64* %i0ptr248369, align 8                                    ; load; *i0ptr248369
  %fptr248370 = inttoptr i64 %f248371 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr248370(i64 %abort239005, i64 %sym239010)            ; tail call
  ret void

else248366:
  %_95234160 = call i64 @prim_car(i64 %rvp239002)                                    ; call prim_car
  %rvp238992 = call i64 @prim_cdr(i64 %rvp239002)                                    ; call prim_cdr
  %check238993 = call i64 @prim_null_63(i64 %rvp238992)                              ; call prim_null_63
  %cmp248372 = icmp eq i64 %check238993, 15                                          ; false?
  br i1 %cmp248372, label %else248374, label %then248373                             ; if

then248373:
  %msg238997 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str248375, i32 0, i32 0)); quoted string
  %abort238995 = call i64 @prim_halt(i64 %msg238997)                                 ; call prim_halt
  %sym239000 = add i64 0, 0                                                          ; quoted ()
  %cloptr248376 = inttoptr i64 %abort238995 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr248377 = getelementptr inbounds i64, i64* %cloptr248376, i64 0               ; &cloptr248376[0]
  %f248379 = load i64, i64* %i0ptr248377, align 8                                    ; load; *i0ptr248377
  %fptr248378 = inttoptr i64 %f248379 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr248378(i64 %abort238995, i64 %sym239000)            ; tail call
  ret void

else248374:
  %rest238999 = call i64 @prim_cdr(i64 %rvp238992)                                   ; call prim_cdr
  %empty238994 = call i64 @prim_null_63(i64 %rest238999)                             ; call prim_null_63
  %cmp248380 = icmp eq i64 %empty238994, 15                                          ; false?
  br i1 %cmp248380, label %else248382, label %then248381                             ; if

then248381:
  %_95t233713233893 = call i64 @prim_car(i64 %rvp238992)                             ; call prim_car
  %na238661 = call i64 @prim_cdr(i64 %rvp238992)                                     ; call prim_cdr
  %cloptr248383 = call i64* @alloc(i64 8)                                            ; malloc
  %eptr248384 = getelementptr inbounds i64, i64* %cloptr248383, i64 0                ; &cloptr248383[0]
  %f248385 = ptrtoint void(i64,i64)* @lam243090 to i64                               ; fptr cast; i64(...)* -> i64
  store i64 %f248385, i64* %eptr248384                                               ; store fptr
  %arg235205 = ptrtoint i64* %cloptr248383 to i64                                    ; closure cast; i64* -> i64
  %cloptr248386 = call i64* @alloc(i64 40)                                           ; malloc
  %eptr248388 = getelementptr inbounds i64, i64* %cloptr248386, i64 1                ; &eptr248388[1]
  %eptr248389 = getelementptr inbounds i64, i64* %cloptr248386, i64 2                ; &eptr248389[2]
  %eptr248390 = getelementptr inbounds i64, i64* %cloptr248386, i64 3                ; &eptr248390[3]
  %eptr248391 = getelementptr inbounds i64, i64* %cloptr248386, i64 4                ; &eptr248391[4]
  store i64 %new233710233890, i64* %eptr248388                                       ; *eptr248388 = %new233710233890
  store i64 %cont234158, i64* %eptr248389                                            ; *eptr248389 = %cont234158
  store i64 %tail233711233891, i64* %eptr248390                                      ; *eptr248390 = %tail233711233891
  store i64 %_37wind_45stack233694233874, i64* %eptr248391                           ; *eptr248391 = %_37wind_45stack233694233874
  %eptr248387 = getelementptr inbounds i64, i64* %cloptr248386, i64 0                ; &cloptr248386[0]
  %f248392 = ptrtoint void(i64,i64)* @lam243086 to i64                               ; fptr cast; i64(...)* -> i64
  store i64 %f248392, i64* %eptr248387                                               ; store fptr
  %arg235204 = ptrtoint i64* %cloptr248386 to i64                                    ; closure cast; i64* -> i64
  %sym238990 = add i64 0, 0                                                          ; quoted ()
  %x238991 = call i64 @prim_cons(i64 %arg235204, i64 %sym238990)                     ; call prim_cons
  %cloptr248393 = inttoptr i64 %arg235205 to i64*                                    ; closure/env cast; i64 -> i64*
  %i0ptr248394 = getelementptr inbounds i64, i64* %cloptr248393, i64 0               ; &cloptr248393[0]
  %f248396 = load i64, i64* %i0ptr248394, align 8                                    ; load; *i0ptr248394
  %fptr248395 = inttoptr i64 %f248396 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr248395(i64 %arg235205, i64 %x238991)                ; tail call
  ret void

else248382:
  %many238998 = call i64 @const_init_string(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @str248397, i32 0, i32 0)); quoted string
  %fail238996 = call i64 @prim_halt(i64 %many238998)                                 ; call prim_halt
  %sym239001 = add i64 0, 0                                                          ; quoted ()
  %cloptr248398 = inttoptr i64 %fail238996 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr248399 = getelementptr inbounds i64, i64* %cloptr248398, i64 0               ; &cloptr248398[0]
  %f248401 = load i64, i64* %i0ptr248399, align 8                                    ; load; *i0ptr248399
  %fptr248400 = inttoptr i64 %f248401 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr248400(i64 %fail238996, i64 %sym239001)             ; tail call
  ret void
}


define void @lam243090(i64 %env243091, i64 %lst233725233905234179) {
  %cont234178 = call i64 @prim_car(i64 %lst233725233905234179)                       ; call prim_car
  %lst233725233905 = call i64 @prim_cdr(i64 %lst233725233905234179)                  ; call prim_cdr
  %arg235209 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %sym238662 = add i64 0, 0                                                          ; quoted ()
  %x238663 = call i64 @prim_cons(i64 %lst233725233905, i64 %sym238662)               ; call prim_cons
  %x238664 = call i64 @prim_cons(i64 %arg235209, i64 %x238663)                       ; call prim_cons
  %cloptr248402 = inttoptr i64 %cont234178 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr248403 = getelementptr inbounds i64, i64* %cloptr248402, i64 0               ; &cloptr248402[0]
  %f248405 = load i64, i64* %i0ptr248403, align 8                                    ; load; *i0ptr248403
  %fptr248404 = inttoptr i64 %f248405 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr248404(i64 %cont234178, i64 %x238664)               ; tail call
  ret void
}


define void @lam243086(i64 %env243087, i64 %rvp238981) {
  %envptr248406 = inttoptr i64 %env243087 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr248407 = getelementptr inbounds i64, i64* %envptr248406, i64 4              ; &envptr248406[4]
  %_37wind_45stack233694233874 = load i64, i64* %envptr248407, align 8               ; load; *envptr248407
  %envptr248408 = inttoptr i64 %env243087 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr248409 = getelementptr inbounds i64, i64* %envptr248408, i64 3              ; &envptr248408[3]
  %tail233711233891 = load i64, i64* %envptr248409, align 8                          ; load; *envptr248409
  %envptr248410 = inttoptr i64 %env243087 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr248411 = getelementptr inbounds i64, i64* %envptr248410, i64 2              ; &envptr248410[2]
  %cont234158 = load i64, i64* %envptr248411, align 8                                ; load; *envptr248411
  %envptr248412 = inttoptr i64 %env243087 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr248413 = getelementptr inbounds i64, i64* %envptr248412, i64 1              ; &envptr248412[1]
  %new233710233890 = load i64, i64* %envptr248413, align 8                           ; load; *envptr248413
  %check238982 = call i64 @prim_null_63(i64 %rvp238981)                              ; call prim_null_63
  %cmp248414 = icmp eq i64 %check238982, 15                                          ; false?
  br i1 %cmp248414, label %else248416, label %then248415                             ; if

then248415:
  %msg238986 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str248417, i32 0, i32 0)); quoted string
  %abort238984 = call i64 @prim_halt(i64 %msg238986)                                 ; call prim_halt
  %sym238989 = add i64 0, 0                                                          ; quoted ()
  %cloptr248418 = inttoptr i64 %abort238984 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr248419 = getelementptr inbounds i64, i64* %cloptr248418, i64 0               ; &cloptr248418[0]
  %f248421 = load i64, i64* %i0ptr248419, align 8                                    ; load; *i0ptr248419
  %fptr248420 = inttoptr i64 %f248421 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr248420(i64 %abort238984, i64 %sym238989)            ; tail call
  ret void

else248416:
  %_95234176 = call i64 @prim_car(i64 %rvp238981)                                    ; call prim_car
  %rvp238971 = call i64 @prim_cdr(i64 %rvp238981)                                    ; call prim_cdr
  %check238972 = call i64 @prim_null_63(i64 %rvp238971)                              ; call prim_null_63
  %cmp248422 = icmp eq i64 %check238972, 15                                          ; false?
  br i1 %cmp248422, label %else248424, label %then248423                             ; if

then248423:
  %msg238976 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str248425, i32 0, i32 0)); quoted string
  %abort238974 = call i64 @prim_halt(i64 %msg238976)                                 ; call prim_halt
  %sym238979 = add i64 0, 0                                                          ; quoted ()
  %cloptr248426 = inttoptr i64 %abort238974 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr248427 = getelementptr inbounds i64, i64* %cloptr248426, i64 0               ; &cloptr248426[0]
  %f248429 = load i64, i64* %i0ptr248427, align 8                                    ; load; *i0ptr248427
  %fptr248428 = inttoptr i64 %f248429 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr248428(i64 %abort238974, i64 %sym238979)            ; tail call
  ret void

else248424:
  %rest238978 = call i64 @prim_cdr(i64 %rvp238971)                                   ; call prim_cdr
  %empty238973 = call i64 @prim_null_63(i64 %rest238978)                             ; call prim_null_63
  %cmp248430 = icmp eq i64 %empty238973, 15                                          ; false?
  br i1 %cmp248430, label %else248432, label %then248431                             ; if

then248431:
  %a234054 = call i64 @prim_car(i64 %rvp238971)                                      ; call prim_car
  %na238666 = call i64 @prim_cdr(i64 %rvp238971)                                     ; call prim_cdr
  %arg235212 = call i64 @const_init_int(i64 1)                                       ; quoted int
  %retprim234177 = call i64 @prim_make_45vector(i64 %arg235212, i64 %a234054)        ; call prim_make_45vector
  %cloptr248433 = call i64* @alloc(i64 40)                                           ; malloc
  %eptr248435 = getelementptr inbounds i64, i64* %cloptr248433, i64 1                ; &eptr248435[1]
  %eptr248436 = getelementptr inbounds i64, i64* %cloptr248433, i64 2                ; &eptr248436[2]
  %eptr248437 = getelementptr inbounds i64, i64* %cloptr248433, i64 3                ; &eptr248437[3]
  %eptr248438 = getelementptr inbounds i64, i64* %cloptr248433, i64 4                ; &eptr248438[4]
  store i64 %new233710233890, i64* %eptr248435                                       ; *eptr248435 = %new233710233890
  store i64 %cont234158, i64* %eptr248436                                            ; *eptr248436 = %cont234158
  store i64 %tail233711233891, i64* %eptr248437                                      ; *eptr248437 = %tail233711233891
  store i64 %_37wind_45stack233694233874, i64* %eptr248438                           ; *eptr248438 = %_37wind_45stack233694233874
  %eptr248434 = getelementptr inbounds i64, i64* %cloptr248433, i64 0                ; &cloptr248433[0]
  %f248439 = ptrtoint void(i64,i64)* @lam243081 to i64                               ; fptr cast; i64(...)* -> i64
  store i64 %f248439, i64* %eptr248434                                               ; store fptr
  %arg235215 = ptrtoint i64* %cloptr248433 to i64                                    ; closure cast; i64* -> i64
  %arg235214 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %sym238968 = add i64 0, 0                                                          ; quoted ()
  %x238969 = call i64 @prim_cons(i64 %retprim234177, i64 %sym238968)                 ; call prim_cons
  %x238970 = call i64 @prim_cons(i64 %arg235214, i64 %x238969)                       ; call prim_cons
  %cloptr248440 = inttoptr i64 %arg235215 to i64*                                    ; closure/env cast; i64 -> i64*
  %i0ptr248441 = getelementptr inbounds i64, i64* %cloptr248440, i64 0               ; &cloptr248440[0]
  %f248443 = load i64, i64* %i0ptr248441, align 8                                    ; load; *i0ptr248441
  %fptr248442 = inttoptr i64 %f248443 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr248442(i64 %arg235215, i64 %x238970)                ; tail call
  ret void

else248432:
  %many238977 = call i64 @const_init_string(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @str248444, i32 0, i32 0)); quoted string
  %fail238975 = call i64 @prim_halt(i64 %many238977)                                 ; call prim_halt
  %sym238980 = add i64 0, 0                                                          ; quoted ()
  %cloptr248445 = inttoptr i64 %fail238975 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr248446 = getelementptr inbounds i64, i64* %cloptr248445, i64 0               ; &cloptr248445[0]
  %f248448 = load i64, i64* %i0ptr248446, align 8                                    ; load; *i0ptr248446
  %fptr248447 = inttoptr i64 %f248448 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr248447(i64 %fail238975, i64 %sym238980)             ; tail call
  ret void
}


define void @lam243081(i64 %env243082, i64 %rvp238959) {
  %envptr248449 = inttoptr i64 %env243082 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr248450 = getelementptr inbounds i64, i64* %envptr248449, i64 4              ; &envptr248449[4]
  %_37wind_45stack233694233874 = load i64, i64* %envptr248450, align 8               ; load; *envptr248450
  %envptr248451 = inttoptr i64 %env243082 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr248452 = getelementptr inbounds i64, i64* %envptr248451, i64 3              ; &envptr248451[3]
  %tail233711233891 = load i64, i64* %envptr248452, align 8                          ; load; *envptr248452
  %envptr248453 = inttoptr i64 %env243082 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr248454 = getelementptr inbounds i64, i64* %envptr248453, i64 2              ; &envptr248453[2]
  %cont234158 = load i64, i64* %envptr248454, align 8                                ; load; *envptr248454
  %envptr248455 = inttoptr i64 %env243082 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr248456 = getelementptr inbounds i64, i64* %envptr248455, i64 1              ; &envptr248455[1]
  %new233710233890 = load i64, i64* %envptr248456, align 8                           ; load; *envptr248456
  %check238960 = call i64 @prim_null_63(i64 %rvp238959)                              ; call prim_null_63
  %cmp248457 = icmp eq i64 %check238960, 15                                          ; false?
  br i1 %cmp248457, label %else248459, label %then248458                             ; if

then248458:
  %msg238964 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str248460, i32 0, i32 0)); quoted string
  %abort238962 = call i64 @prim_halt(i64 %msg238964)                                 ; call prim_halt
  %sym238967 = add i64 0, 0                                                          ; quoted ()
  %cloptr248461 = inttoptr i64 %abort238962 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr248462 = getelementptr inbounds i64, i64* %cloptr248461, i64 0               ; &cloptr248461[0]
  %f248464 = load i64, i64* %i0ptr248462, align 8                                    ; load; *i0ptr248462
  %fptr248463 = inttoptr i64 %f248464 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr248463(i64 %abort238962, i64 %sym238967)            ; tail call
  ret void

else248459:
  %_95234161 = call i64 @prim_car(i64 %rvp238959)                                    ; call prim_car
  %rvp238949 = call i64 @prim_cdr(i64 %rvp238959)                                    ; call prim_cdr
  %check238950 = call i64 @prim_null_63(i64 %rvp238949)                              ; call prim_null_63
  %cmp248465 = icmp eq i64 %check238950, 15                                          ; false?
  br i1 %cmp248465, label %else248467, label %then248466                             ; if

then248466:
  %msg238954 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str248468, i32 0, i32 0)); quoted string
  %abort238952 = call i64 @prim_halt(i64 %msg238954)                                 ; call prim_halt
  %sym238957 = add i64 0, 0                                                          ; quoted ()
  %cloptr248469 = inttoptr i64 %abort238952 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr248470 = getelementptr inbounds i64, i64* %cloptr248469, i64 0               ; &cloptr248469[0]
  %f248472 = load i64, i64* %i0ptr248470, align 8                                    ; load; *i0ptr248470
  %fptr248471 = inttoptr i64 %f248472 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr248471(i64 %abort238952, i64 %sym238957)            ; tail call
  ret void

else248467:
  %rest238956 = call i64 @prim_cdr(i64 %rvp238949)                                   ; call prim_cdr
  %empty238951 = call i64 @prim_null_63(i64 %rest238956)                             ; call prim_null_63
  %cmp248473 = icmp eq i64 %empty238951, 15                                          ; false?
  br i1 %cmp248473, label %else248475, label %then248474                             ; if

then248474:
  %f233724233904 = call i64 @prim_car(i64 %rvp238949)                                ; call prim_car
  %na238668 = call i64 @prim_cdr(i64 %rvp238949)                                     ; call prim_cdr
  %cloptr248476 = call i64* @alloc(i64 32)                                           ; malloc
  %eptr248478 = getelementptr inbounds i64, i64* %cloptr248476, i64 1                ; &eptr248478[1]
  %eptr248479 = getelementptr inbounds i64, i64* %cloptr248476, i64 2                ; &eptr248479[2]
  %eptr248480 = getelementptr inbounds i64, i64* %cloptr248476, i64 3                ; &eptr248480[3]
  store i64 %tail233711233891, i64* %eptr248478                                      ; *eptr248478 = %tail233711233891
  store i64 %_37wind_45stack233694233874, i64* %eptr248479                           ; *eptr248479 = %_37wind_45stack233694233874
  store i64 %f233724233904, i64* %eptr248480                                         ; *eptr248480 = %f233724233904
  %eptr248477 = getelementptr inbounds i64, i64* %cloptr248476, i64 0                ; &cloptr248476[0]
  %f248481 = ptrtoint void(i64,i64)* @lam243077 to i64                               ; fptr cast; i64(...)* -> i64
  store i64 %f248481, i64* %eptr248477                                               ; store fptr
  %f233571233726233906 = ptrtoint i64* %cloptr248476 to i64                          ; closure cast; i64* -> i64
  %arg235291 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %_95t233732233912 = call i64 @prim_vector_45set_33(i64 %f233724233904, i64 %arg235291, i64 %f233571233726233906); call prim_vector_45set_33
  %arg235293 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %a234064 = call i64 @prim_vector_45ref(i64 %f233724233904, i64 %arg235293)         ; call prim_vector_45ref
  %retprim234175 = call i64 @prim_procedure_63(i64 %a234064)                         ; call prim_procedure_63
  %cloptr248482 = call i64* @alloc(i64 32)                                           ; malloc
  %eptr248484 = getelementptr inbounds i64, i64* %cloptr248482, i64 1                ; &eptr248484[1]
  %eptr248485 = getelementptr inbounds i64, i64* %cloptr248482, i64 2                ; &eptr248485[2]
  %eptr248486 = getelementptr inbounds i64, i64* %cloptr248482, i64 3                ; &eptr248486[3]
  store i64 %new233710233890, i64* %eptr248484                                       ; *eptr248484 = %new233710233890
  store i64 %cont234158, i64* %eptr248485                                            ; *eptr248485 = %cont234158
  store i64 %f233724233904, i64* %eptr248486                                         ; *eptr248486 = %f233724233904
  %eptr248483 = getelementptr inbounds i64, i64* %cloptr248482, i64 0                ; &cloptr248482[0]
  %f248487 = ptrtoint void(i64,i64)* @lam242961 to i64                               ; fptr cast; i64(...)* -> i64
  store i64 %f248487, i64* %eptr248483                                               ; store fptr
  %arg235298 = ptrtoint i64* %cloptr248482 to i64                                    ; closure cast; i64* -> i64
  %arg235297 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %sym238946 = add i64 0, 0                                                          ; quoted ()
  %x238947 = call i64 @prim_cons(i64 %retprim234175, i64 %sym238946)                 ; call prim_cons
  %x238948 = call i64 @prim_cons(i64 %arg235297, i64 %x238947)                       ; call prim_cons
  %cloptr248488 = inttoptr i64 %arg235298 to i64*                                    ; closure/env cast; i64 -> i64*
  %i0ptr248489 = getelementptr inbounds i64, i64* %cloptr248488, i64 0               ; &cloptr248488[0]
  %f248491 = load i64, i64* %i0ptr248489, align 8                                    ; load; *i0ptr248489
  %fptr248490 = inttoptr i64 %f248491 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr248490(i64 %arg235298, i64 %x238948)                ; tail call
  ret void

else248475:
  %many238955 = call i64 @const_init_string(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @str248492, i32 0, i32 0)); quoted string
  %fail238953 = call i64 @prim_halt(i64 %many238955)                                 ; call prim_halt
  %sym238958 = add i64 0, 0                                                          ; quoted ()
  %cloptr248493 = inttoptr i64 %fail238953 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr248494 = getelementptr inbounds i64, i64* %cloptr248493, i64 0               ; &cloptr248493[0]
  %f248496 = load i64, i64* %i0ptr248494, align 8                                    ; load; *i0ptr248494
  %fptr248495 = inttoptr i64 %f248496 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr248495(i64 %fail238953, i64 %sym238958)             ; tail call
  ret void
}


define void @lam243077(i64 %env243078, i64 %rvp238910) {
  %envptr248497 = inttoptr i64 %env243078 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr248498 = getelementptr inbounds i64, i64* %envptr248497, i64 3              ; &envptr248497[3]
  %f233724233904 = load i64, i64* %envptr248498, align 8                             ; load; *envptr248498
  %envptr248499 = inttoptr i64 %env243078 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr248500 = getelementptr inbounds i64, i64* %envptr248499, i64 2              ; &envptr248499[2]
  %_37wind_45stack233694233874 = load i64, i64* %envptr248500, align 8               ; load; *envptr248500
  %envptr248501 = inttoptr i64 %env243078 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr248502 = getelementptr inbounds i64, i64* %envptr248501, i64 1              ; &envptr248501[1]
  %tail233711233891 = load i64, i64* %envptr248502, align 8                          ; load; *envptr248502
  %check238911 = call i64 @prim_null_63(i64 %rvp238910)                              ; call prim_null_63
  %cmp248503 = icmp eq i64 %check238911, 15                                          ; false?
  br i1 %cmp248503, label %else248505, label %then248504                             ; if

then248504:
  %msg238915 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str248506, i32 0, i32 0)); quoted string
  %abort238913 = call i64 @prim_halt(i64 %msg238915)                                 ; call prim_halt
  %sym238918 = add i64 0, 0                                                          ; quoted ()
  %cloptr248507 = inttoptr i64 %abort238913 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr248508 = getelementptr inbounds i64, i64* %cloptr248507, i64 0               ; &cloptr248507[0]
  %f248510 = load i64, i64* %i0ptr248508, align 8                                    ; load; *i0ptr248508
  %fptr248509 = inttoptr i64 %f248510 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr248509(i64 %abort238913, i64 %sym238918)            ; tail call
  ret void

else248505:
  %cont234162 = call i64 @prim_car(i64 %rvp238910)                                   ; call prim_car
  %rvp238900 = call i64 @prim_cdr(i64 %rvp238910)                                    ; call prim_cdr
  %check238901 = call i64 @prim_null_63(i64 %rvp238900)                              ; call prim_null_63
  %cmp248511 = icmp eq i64 %check238901, 15                                          ; false?
  br i1 %cmp248511, label %else248513, label %then248512                             ; if

then248512:
  %msg238905 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str248514, i32 0, i32 0)); quoted string
  %abort238903 = call i64 @prim_halt(i64 %msg238905)                                 ; call prim_halt
  %sym238908 = add i64 0, 0                                                          ; quoted ()
  %cloptr248515 = inttoptr i64 %abort238903 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr248516 = getelementptr inbounds i64, i64* %cloptr248515, i64 0               ; &cloptr248515[0]
  %f248518 = load i64, i64* %i0ptr248516, align 8                                    ; load; *i0ptr248516
  %fptr248517 = inttoptr i64 %f248518 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr248517(i64 %abort238903, i64 %sym238908)            ; tail call
  ret void

else248513:
  %rest238907 = call i64 @prim_cdr(i64 %rvp238900)                                   ; call prim_cdr
  %empty238902 = call i64 @prim_null_63(i64 %rest238907)                             ; call prim_null_63
  %cmp248519 = icmp eq i64 %empty238902, 15                                          ; false?
  br i1 %cmp248519, label %else248521, label %then248520                             ; if

then248520:
  %l233727233907 = call i64 @prim_car(i64 %rvp238900)                                ; call prim_car
  %na238670 = call i64 @prim_cdr(i64 %rvp238900)                                     ; call prim_cdr
  %a234055 = call i64 @prim_eq_63(i64 %l233727233907, i64 %tail233711233891)         ; call prim_eq_63
  %a234056 = call i64 @prim_not(i64 %a234055)                                        ; call prim_not
  %cmp248522 = icmp eq i64 %a234056, 15                                              ; false?
  br i1 %cmp248522, label %else248524, label %then248523                             ; if

then248523:
  %arg235219 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %a234057 = call i64 @prim_vector_45ref(i64 %f233724233904, i64 %arg235219)         ; call prim_vector_45ref
  %retprim234171 = call i64 @prim_procedure_63(i64 %a234057)                         ; call prim_procedure_63
  %cloptr248525 = call i64* @alloc(i64 40)                                           ; malloc
  %eptr248527 = getelementptr inbounds i64, i64* %cloptr248525, i64 1                ; &eptr248527[1]
  %eptr248528 = getelementptr inbounds i64, i64* %cloptr248525, i64 2                ; &eptr248528[2]
  %eptr248529 = getelementptr inbounds i64, i64* %cloptr248525, i64 3                ; &eptr248529[3]
  %eptr248530 = getelementptr inbounds i64, i64* %cloptr248525, i64 4                ; &eptr248530[4]
  store i64 %l233727233907, i64* %eptr248527                                         ; *eptr248527 = %l233727233907
  store i64 %cont234162, i64* %eptr248528                                            ; *eptr248528 = %cont234162
  store i64 %_37wind_45stack233694233874, i64* %eptr248529                           ; *eptr248529 = %_37wind_45stack233694233874
  store i64 %f233724233904, i64* %eptr248530                                         ; *eptr248530 = %f233724233904
  %eptr248526 = getelementptr inbounds i64, i64* %cloptr248525, i64 0                ; &cloptr248525[0]
  %f248531 = ptrtoint void(i64,i64)* @lam243070 to i64                               ; fptr cast; i64(...)* -> i64
  store i64 %f248531, i64* %eptr248526                                               ; store fptr
  %arg235224 = ptrtoint i64* %cloptr248525 to i64                                    ; closure cast; i64* -> i64
  %arg235223 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %sym238894 = add i64 0, 0                                                          ; quoted ()
  %x238895 = call i64 @prim_cons(i64 %retprim234171, i64 %sym238894)                 ; call prim_cons
  %x238896 = call i64 @prim_cons(i64 %arg235223, i64 %x238895)                       ; call prim_cons
  %cloptr248532 = inttoptr i64 %arg235224 to i64*                                    ; closure/env cast; i64 -> i64*
  %i0ptr248533 = getelementptr inbounds i64, i64* %cloptr248532, i64 0               ; &cloptr248532[0]
  %f248535 = load i64, i64* %i0ptr248533, align 8                                    ; load; *i0ptr248533
  %fptr248534 = inttoptr i64 %f248535 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr248534(i64 %arg235224, i64 %x238896)                ; tail call
  ret void

else248524:
  %retprim234172 = call i64 @prim_void()                                             ; call prim_void
  %arg235288 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %sym238897 = add i64 0, 0                                                          ; quoted ()
  %x238898 = call i64 @prim_cons(i64 %retprim234172, i64 %sym238897)                 ; call prim_cons
  %x238899 = call i64 @prim_cons(i64 %arg235288, i64 %x238898)                       ; call prim_cons
  %cloptr248536 = inttoptr i64 %cont234162 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr248537 = getelementptr inbounds i64, i64* %cloptr248536, i64 0               ; &cloptr248536[0]
  %f248539 = load i64, i64* %i0ptr248537, align 8                                    ; load; *i0ptr248537
  %fptr248538 = inttoptr i64 %f248539 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr248538(i64 %cont234162, i64 %x238899)               ; tail call
  ret void

else248521:
  %many238906 = call i64 @const_init_string(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @str248540, i32 0, i32 0)); quoted string
  %fail238904 = call i64 @prim_halt(i64 %many238906)                                 ; call prim_halt
  %sym238909 = add i64 0, 0                                                          ; quoted ()
  %cloptr248541 = inttoptr i64 %fail238904 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr248542 = getelementptr inbounds i64, i64* %cloptr248541, i64 0               ; &cloptr248541[0]
  %f248544 = load i64, i64* %i0ptr248542, align 8                                    ; load; *i0ptr248542
  %fptr248543 = inttoptr i64 %f248544 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr248543(i64 %fail238904, i64 %sym238909)             ; tail call
  ret void
}


define void @lam243070(i64 %env243071, i64 %rvp238885) {
  %envptr248545 = inttoptr i64 %env243071 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr248546 = getelementptr inbounds i64, i64* %envptr248545, i64 4              ; &envptr248545[4]
  %f233724233904 = load i64, i64* %envptr248546, align 8                             ; load; *envptr248546
  %envptr248547 = inttoptr i64 %env243071 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr248548 = getelementptr inbounds i64, i64* %envptr248547, i64 3              ; &envptr248547[3]
  %_37wind_45stack233694233874 = load i64, i64* %envptr248548, align 8               ; load; *envptr248548
  %envptr248549 = inttoptr i64 %env243071 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr248550 = getelementptr inbounds i64, i64* %envptr248549, i64 2              ; &envptr248549[2]
  %cont234162 = load i64, i64* %envptr248550, align 8                                ; load; *envptr248550
  %envptr248551 = inttoptr i64 %env243071 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr248552 = getelementptr inbounds i64, i64* %envptr248551, i64 1              ; &envptr248551[1]
  %l233727233907 = load i64, i64* %envptr248552, align 8                             ; load; *envptr248552
  %check238886 = call i64 @prim_null_63(i64 %rvp238885)                              ; call prim_null_63
  %cmp248553 = icmp eq i64 %check238886, 15                                          ; false?
  br i1 %cmp248553, label %else248555, label %then248554                             ; if

then248554:
  %msg238890 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str248556, i32 0, i32 0)); quoted string
  %abort238888 = call i64 @prim_halt(i64 %msg238890)                                 ; call prim_halt
  %sym238893 = add i64 0, 0                                                          ; quoted ()
  %cloptr248557 = inttoptr i64 %abort238888 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr248558 = getelementptr inbounds i64, i64* %cloptr248557, i64 0               ; &cloptr248557[0]
  %f248560 = load i64, i64* %i0ptr248558, align 8                                    ; load; *i0ptr248558
  %fptr248559 = inttoptr i64 %f248560 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr248559(i64 %abort238888, i64 %sym238893)            ; tail call
  ret void

else248555:
  %_95234169 = call i64 @prim_car(i64 %rvp238885)                                    ; call prim_car
  %rvp238875 = call i64 @prim_cdr(i64 %rvp238885)                                    ; call prim_cdr
  %check238876 = call i64 @prim_null_63(i64 %rvp238875)                              ; call prim_null_63
  %cmp248561 = icmp eq i64 %check238876, 15                                          ; false?
  br i1 %cmp248561, label %else248563, label %then248562                             ; if

then248562:
  %msg238880 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str248564, i32 0, i32 0)); quoted string
  %abort238878 = call i64 @prim_halt(i64 %msg238880)                                 ; call prim_halt
  %sym238883 = add i64 0, 0                                                          ; quoted ()
  %cloptr248565 = inttoptr i64 %abort238878 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr248566 = getelementptr inbounds i64, i64* %cloptr248565, i64 0               ; &cloptr248565[0]
  %f248568 = load i64, i64* %i0ptr248566, align 8                                    ; load; *i0ptr248566
  %fptr248567 = inttoptr i64 %f248568 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr248567(i64 %abort238878, i64 %sym238883)            ; tail call
  ret void

else248563:
  %rest238882 = call i64 @prim_cdr(i64 %rvp238875)                                   ; call prim_cdr
  %empty238877 = call i64 @prim_null_63(i64 %rest238882)                             ; call prim_null_63
  %cmp248569 = icmp eq i64 %empty238877, 15                                          ; false?
  br i1 %cmp248569, label %else248571, label %then248570                             ; if

then248570:
  %check233572233729233909 = call i64 @prim_car(i64 %rvp238875)                      ; call prim_car
  %na238672 = call i64 @prim_cdr(i64 %rvp238875)                                     ; call prim_cdr
  %cmp248572 = icmp eq i64 %check233572233729233909, 15                              ; false?
  br i1 %cmp248572, label %else248574, label %then248573                             ; if

then248573:
  %arg235225 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %a234058 = call i64 @prim_vector_45ref(i64 %f233724233904, i64 %arg235225)         ; call prim_vector_45ref
  %a234059 = call i64 @prim_cdr(i64 %l233727233907)                                  ; call prim_cdr
  %cloptr248575 = call i64* @alloc(i64 32)                                           ; malloc
  %eptr248577 = getelementptr inbounds i64, i64* %cloptr248575, i64 1                ; &eptr248577[1]
  %eptr248578 = getelementptr inbounds i64, i64* %cloptr248575, i64 2                ; &eptr248578[2]
  %eptr248579 = getelementptr inbounds i64, i64* %cloptr248575, i64 3                ; &eptr248579[3]
  store i64 %l233727233907, i64* %eptr248577                                         ; *eptr248577 = %l233727233907
  store i64 %cont234162, i64* %eptr248578                                            ; *eptr248578 = %cont234162
  store i64 %_37wind_45stack233694233874, i64* %eptr248579                           ; *eptr248579 = %_37wind_45stack233694233874
  %eptr248576 = getelementptr inbounds i64, i64* %cloptr248575, i64 0                ; &cloptr248575[0]
  %f248580 = ptrtoint void(i64,i64)* @lam243018 to i64                               ; fptr cast; i64(...)* -> i64
  store i64 %f248580, i64* %eptr248576                                               ; store fptr
  %arg235229 = ptrtoint i64* %cloptr248575 to i64                                    ; closure cast; i64* -> i64
  %sym238771 = add i64 0, 0                                                          ; quoted ()
  %x238772 = call i64 @prim_cons(i64 %a234059, i64 %sym238771)                       ; call prim_cons
  %x238773 = call i64 @prim_cons(i64 %arg235229, i64 %x238772)                       ; call prim_cons
  %cloptr248581 = inttoptr i64 %a234058 to i64*                                      ; closure/env cast; i64 -> i64*
  %i0ptr248582 = getelementptr inbounds i64, i64* %cloptr248581, i64 0               ; &cloptr248581[0]
  %f248584 = load i64, i64* %i0ptr248582, align 8                                    ; load; *i0ptr248582
  %fptr248583 = inttoptr i64 %f248584 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr248583(i64 %a234058, i64 %x238773)                  ; tail call
  ret void

else248574:
  %arg235257 = call i64 @const_init_string(i8* getelementptr inbounds ([67 x i8], [67 x i8]* @str248585, i32 0, i32 0)); quoted string
  %retprim234170 = call i64 @prim_halt(i64 %arg235257)                               ; call prim_halt
  %cloptr248586 = call i64* @alloc(i64 32)                                           ; malloc
  %eptr248588 = getelementptr inbounds i64, i64* %cloptr248586, i64 1                ; &eptr248588[1]
  %eptr248589 = getelementptr inbounds i64, i64* %cloptr248586, i64 2                ; &eptr248589[2]
  %eptr248590 = getelementptr inbounds i64, i64* %cloptr248586, i64 3                ; &eptr248590[3]
  store i64 %l233727233907, i64* %eptr248588                                         ; *eptr248588 = %l233727233907
  store i64 %cont234162, i64* %eptr248589                                            ; *eptr248589 = %cont234162
  store i64 %_37wind_45stack233694233874, i64* %eptr248590                           ; *eptr248590 = %_37wind_45stack233694233874
  %eptr248587 = getelementptr inbounds i64, i64* %cloptr248586, i64 0                ; &cloptr248586[0]
  %f248591 = ptrtoint void(i64,i64)* @lam243065 to i64                               ; fptr cast; i64(...)* -> i64
  store i64 %f248591, i64* %eptr248587                                               ; store fptr
  %arg235260 = ptrtoint i64* %cloptr248586 to i64                                    ; closure cast; i64* -> i64
  %arg235259 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %sym238872 = add i64 0, 0                                                          ; quoted ()
  %x238873 = call i64 @prim_cons(i64 %retprim234170, i64 %sym238872)                 ; call prim_cons
  %x238874 = call i64 @prim_cons(i64 %arg235259, i64 %x238873)                       ; call prim_cons
  %cloptr248592 = inttoptr i64 %arg235260 to i64*                                    ; closure/env cast; i64 -> i64*
  %i0ptr248593 = getelementptr inbounds i64, i64* %cloptr248592, i64 0               ; &cloptr248592[0]
  %f248595 = load i64, i64* %i0ptr248593, align 8                                    ; load; *i0ptr248593
  %fptr248594 = inttoptr i64 %f248595 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr248594(i64 %arg235260, i64 %x238874)                ; tail call
  ret void

else248571:
  %many238881 = call i64 @const_init_string(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @str248596, i32 0, i32 0)); quoted string
  %fail238879 = call i64 @prim_halt(i64 %many238881)                                 ; call prim_halt
  %sym238884 = add i64 0, 0                                                          ; quoted ()
  %cloptr248597 = inttoptr i64 %fail238879 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr248598 = getelementptr inbounds i64, i64* %cloptr248597, i64 0               ; &cloptr248597[0]
  %f248600 = load i64, i64* %i0ptr248598, align 8                                    ; load; *i0ptr248598
  %fptr248599 = inttoptr i64 %f248600 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr248599(i64 %fail238879, i64 %sym238884)             ; tail call
  ret void
}


define void @lam243065(i64 %env243066, i64 %rvp238863) {
  %envptr248601 = inttoptr i64 %env243066 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr248602 = getelementptr inbounds i64, i64* %envptr248601, i64 3              ; &envptr248601[3]
  %_37wind_45stack233694233874 = load i64, i64* %envptr248602, align 8               ; load; *envptr248602
  %envptr248603 = inttoptr i64 %env243066 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr248604 = getelementptr inbounds i64, i64* %envptr248603, i64 2              ; &envptr248603[2]
  %cont234162 = load i64, i64* %envptr248604, align 8                                ; load; *envptr248604
  %envptr248605 = inttoptr i64 %env243066 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr248606 = getelementptr inbounds i64, i64* %envptr248605, i64 1              ; &envptr248605[1]
  %l233727233907 = load i64, i64* %envptr248606, align 8                             ; load; *envptr248606
  %check238864 = call i64 @prim_null_63(i64 %rvp238863)                              ; call prim_null_63
  %cmp248607 = icmp eq i64 %check238864, 15                                          ; false?
  br i1 %cmp248607, label %else248609, label %then248608                             ; if

then248608:
  %msg238868 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str248610, i32 0, i32 0)); quoted string
  %abort238866 = call i64 @prim_halt(i64 %msg238868)                                 ; call prim_halt
  %sym238871 = add i64 0, 0                                                          ; quoted ()
  %cloptr248611 = inttoptr i64 %abort238866 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr248612 = getelementptr inbounds i64, i64* %cloptr248611, i64 0               ; &cloptr248611[0]
  %f248614 = load i64, i64* %i0ptr248612, align 8                                    ; load; *i0ptr248612
  %fptr248613 = inttoptr i64 %f248614 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr248613(i64 %abort238866, i64 %sym238871)            ; tail call
  ret void

else248609:
  %_95234163 = call i64 @prim_car(i64 %rvp238863)                                    ; call prim_car
  %rvp238853 = call i64 @prim_cdr(i64 %rvp238863)                                    ; call prim_cdr
  %check238854 = call i64 @prim_null_63(i64 %rvp238853)                              ; call prim_null_63
  %cmp248615 = icmp eq i64 %check238854, 15                                          ; false?
  br i1 %cmp248615, label %else248617, label %then248616                             ; if

then248616:
  %msg238858 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str248618, i32 0, i32 0)); quoted string
  %abort238856 = call i64 @prim_halt(i64 %msg238858)                                 ; call prim_halt
  %sym238861 = add i64 0, 0                                                          ; quoted ()
  %cloptr248619 = inttoptr i64 %abort238856 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr248620 = getelementptr inbounds i64, i64* %cloptr248619, i64 0               ; &cloptr248619[0]
  %f248622 = load i64, i64* %i0ptr248620, align 8                                    ; load; *i0ptr248620
  %fptr248621 = inttoptr i64 %f248622 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr248621(i64 %abort238856, i64 %sym238861)            ; tail call
  ret void

else248617:
  %rest238860 = call i64 @prim_cdr(i64 %rvp238853)                                   ; call prim_cdr
  %empty238855 = call i64 @prim_null_63(i64 %rest238860)                             ; call prim_null_63
  %cmp248623 = icmp eq i64 %empty238855, 15                                          ; false?
  br i1 %cmp248623, label %else248625, label %then248624                             ; if

then248624:
  %_95t233728233908 = call i64 @prim_car(i64 %rvp238853)                             ; call prim_car
  %na238775 = call i64 @prim_cdr(i64 %rvp238853)                                     ; call prim_cdr
  %a234060 = call i64 @prim_car(i64 %l233727233907)                                  ; call prim_car
  %a234061 = call i64 @prim_car(i64 %a234060)                                        ; call prim_car
  %retprim234168 = call i64 @prim_procedure_63(i64 %a234061)                         ; call prim_procedure_63
  %cloptr248626 = call i64* @alloc(i64 32)                                           ; malloc
  %eptr248628 = getelementptr inbounds i64, i64* %cloptr248626, i64 1                ; &eptr248628[1]
  %eptr248629 = getelementptr inbounds i64, i64* %cloptr248626, i64 2                ; &eptr248629[2]
  %eptr248630 = getelementptr inbounds i64, i64* %cloptr248626, i64 3                ; &eptr248630[3]
  store i64 %l233727233907, i64* %eptr248628                                         ; *eptr248628 = %l233727233907
  store i64 %cont234162, i64* %eptr248629                                            ; *eptr248629 = %cont234162
  store i64 %_37wind_45stack233694233874, i64* %eptr248630                           ; *eptr248630 = %_37wind_45stack233694233874
  %eptr248627 = getelementptr inbounds i64, i64* %cloptr248626, i64 0                ; &cloptr248626[0]
  %f248631 = ptrtoint void(i64,i64)* @lam243061 to i64                               ; fptr cast; i64(...)* -> i64
  store i64 %f248631, i64* %eptr248627                                               ; store fptr
  %arg235266 = ptrtoint i64* %cloptr248626 to i64                                    ; closure cast; i64* -> i64
  %arg235265 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %sym238850 = add i64 0, 0                                                          ; quoted ()
  %x238851 = call i64 @prim_cons(i64 %retprim234168, i64 %sym238850)                 ; call prim_cons
  %x238852 = call i64 @prim_cons(i64 %arg235265, i64 %x238851)                       ; call prim_cons
  %cloptr248632 = inttoptr i64 %arg235266 to i64*                                    ; closure/env cast; i64 -> i64*
  %i0ptr248633 = getelementptr inbounds i64, i64* %cloptr248632, i64 0               ; &cloptr248632[0]
  %f248635 = load i64, i64* %i0ptr248633, align 8                                    ; load; *i0ptr248633
  %fptr248634 = inttoptr i64 %f248635 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr248634(i64 %arg235266, i64 %x238852)                ; tail call
  ret void

else248625:
  %many238859 = call i64 @const_init_string(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @str248636, i32 0, i32 0)); quoted string
  %fail238857 = call i64 @prim_halt(i64 %many238859)                                 ; call prim_halt
  %sym238862 = add i64 0, 0                                                          ; quoted ()
  %cloptr248637 = inttoptr i64 %fail238857 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr248638 = getelementptr inbounds i64, i64* %cloptr248637, i64 0               ; &cloptr248637[0]
  %f248640 = load i64, i64* %i0ptr248638, align 8                                    ; load; *i0ptr248638
  %fptr248639 = inttoptr i64 %f248640 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr248639(i64 %fail238857, i64 %sym238862)             ; tail call
  ret void
}


define void @lam243061(i64 %env243062, i64 %rvp238841) {
  %envptr248641 = inttoptr i64 %env243062 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr248642 = getelementptr inbounds i64, i64* %envptr248641, i64 3              ; &envptr248641[3]
  %_37wind_45stack233694233874 = load i64, i64* %envptr248642, align 8               ; load; *envptr248642
  %envptr248643 = inttoptr i64 %env243062 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr248644 = getelementptr inbounds i64, i64* %envptr248643, i64 2              ; &envptr248643[2]
  %cont234162 = load i64, i64* %envptr248644, align 8                                ; load; *envptr248644
  %envptr248645 = inttoptr i64 %env243062 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr248646 = getelementptr inbounds i64, i64* %envptr248645, i64 1              ; &envptr248645[1]
  %l233727233907 = load i64, i64* %envptr248646, align 8                             ; load; *envptr248646
  %check238842 = call i64 @prim_null_63(i64 %rvp238841)                              ; call prim_null_63
  %cmp248647 = icmp eq i64 %check238842, 15                                          ; false?
  br i1 %cmp248647, label %else248649, label %then248648                             ; if

then248648:
  %msg238846 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str248650, i32 0, i32 0)); quoted string
  %abort238844 = call i64 @prim_halt(i64 %msg238846)                                 ; call prim_halt
  %sym238849 = add i64 0, 0                                                          ; quoted ()
  %cloptr248651 = inttoptr i64 %abort238844 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr248652 = getelementptr inbounds i64, i64* %cloptr248651, i64 0               ; &cloptr248651[0]
  %f248654 = load i64, i64* %i0ptr248652, align 8                                    ; load; *i0ptr248652
  %fptr248653 = inttoptr i64 %f248654 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr248653(i64 %abort238844, i64 %sym238849)            ; tail call
  ret void

else248649:
  %_95234166 = call i64 @prim_car(i64 %rvp238841)                                    ; call prim_car
  %rvp238831 = call i64 @prim_cdr(i64 %rvp238841)                                    ; call prim_cdr
  %check238832 = call i64 @prim_null_63(i64 %rvp238831)                              ; call prim_null_63
  %cmp248655 = icmp eq i64 %check238832, 15                                          ; false?
  br i1 %cmp248655, label %else248657, label %then248656                             ; if

then248656:
  %msg238836 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str248658, i32 0, i32 0)); quoted string
  %abort238834 = call i64 @prim_halt(i64 %msg238836)                                 ; call prim_halt
  %sym238839 = add i64 0, 0                                                          ; quoted ()
  %cloptr248659 = inttoptr i64 %abort238834 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr248660 = getelementptr inbounds i64, i64* %cloptr248659, i64 0               ; &cloptr248659[0]
  %f248662 = load i64, i64* %i0ptr248660, align 8                                    ; load; *i0ptr248660
  %fptr248661 = inttoptr i64 %f248662 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr248661(i64 %abort238834, i64 %sym238839)            ; tail call
  ret void

else248657:
  %rest238838 = call i64 @prim_cdr(i64 %rvp238831)                                   ; call prim_cdr
  %empty238833 = call i64 @prim_null_63(i64 %rest238838)                             ; call prim_null_63
  %cmp248663 = icmp eq i64 %empty238833, 15                                          ; false?
  br i1 %cmp248663, label %else248665, label %then248664                             ; if

then248664:
  %check233573233731233911 = call i64 @prim_car(i64 %rvp238831)                      ; call prim_car
  %na238777 = call i64 @prim_cdr(i64 %rvp238831)                                     ; call prim_cdr
  %cmp248666 = icmp eq i64 %check233573233731233911, 15                              ; false?
  br i1 %cmp248666, label %else248668, label %then248667                             ; if

then248667:
  %a234062 = call i64 @prim_car(i64 %l233727233907)                                  ; call prim_car
  %a234063 = call i64 @prim_car(i64 %a234062)                                        ; call prim_car
  %cloptr248669 = call i64* @alloc(i64 32)                                           ; malloc
  %eptr248671 = getelementptr inbounds i64, i64* %cloptr248669, i64 1                ; &eptr248671[1]
  %eptr248672 = getelementptr inbounds i64, i64* %cloptr248669, i64 2                ; &eptr248672[2]
  %eptr248673 = getelementptr inbounds i64, i64* %cloptr248669, i64 3                ; &eptr248673[3]
  store i64 %l233727233907, i64* %eptr248671                                         ; *eptr248671 = %l233727233907
  store i64 %cont234162, i64* %eptr248672                                            ; *eptr248672 = %cont234162
  store i64 %_37wind_45stack233694233874, i64* %eptr248673                           ; *eptr248673 = %_37wind_45stack233694233874
  %eptr248670 = getelementptr inbounds i64, i64* %cloptr248669, i64 0                ; &cloptr248669[0]
  %f248674 = ptrtoint void(i64,i64)* @lam243043 to i64                               ; fptr cast; i64(...)* -> i64
  store i64 %f248674, i64* %eptr248670                                               ; store fptr
  %arg235269 = ptrtoint i64* %cloptr248669 to i64                                    ; closure cast; i64* -> i64
  %sym238802 = add i64 0, 0                                                          ; quoted ()
  %x238803 = call i64 @prim_cons(i64 %arg235269, i64 %sym238802)                     ; call prim_cons
  %cloptr248675 = inttoptr i64 %a234063 to i64*                                      ; closure/env cast; i64 -> i64*
  %i0ptr248676 = getelementptr inbounds i64, i64* %cloptr248675, i64 0               ; &cloptr248675[0]
  %f248678 = load i64, i64* %i0ptr248676, align 8                                    ; load; *i0ptr248676
  %fptr248677 = inttoptr i64 %f248678 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr248677(i64 %a234063, i64 %x238803)                  ; tail call
  ret void

else248668:
  %arg235277 = call i64 @const_init_string(i8* getelementptr inbounds ([71 x i8], [71 x i8]* @str248679, i32 0, i32 0)); quoted string
  %retprim234167 = call i64 @prim_halt(i64 %arg235277)                               ; call prim_halt
  %cloptr248680 = call i64* @alloc(i64 32)                                           ; malloc
  %eptr248682 = getelementptr inbounds i64, i64* %cloptr248680, i64 1                ; &eptr248682[1]
  %eptr248683 = getelementptr inbounds i64, i64* %cloptr248680, i64 2                ; &eptr248683[2]
  %eptr248684 = getelementptr inbounds i64, i64* %cloptr248680, i64 3                ; &eptr248684[3]
  store i64 %l233727233907, i64* %eptr248682                                         ; *eptr248682 = %l233727233907
  store i64 %cont234162, i64* %eptr248683                                            ; *eptr248683 = %cont234162
  store i64 %_37wind_45stack233694233874, i64* %eptr248684                           ; *eptr248684 = %_37wind_45stack233694233874
  %eptr248681 = getelementptr inbounds i64, i64* %cloptr248680, i64 0                ; &cloptr248680[0]
  %f248685 = ptrtoint void(i64,i64)* @lam243056 to i64                               ; fptr cast; i64(...)* -> i64
  store i64 %f248685, i64* %eptr248681                                               ; store fptr
  %arg235280 = ptrtoint i64* %cloptr248680 to i64                                    ; closure cast; i64* -> i64
  %arg235279 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %sym238828 = add i64 0, 0                                                          ; quoted ()
  %x238829 = call i64 @prim_cons(i64 %retprim234167, i64 %sym238828)                 ; call prim_cons
  %x238830 = call i64 @prim_cons(i64 %arg235279, i64 %x238829)                       ; call prim_cons
  %cloptr248686 = inttoptr i64 %arg235280 to i64*                                    ; closure/env cast; i64 -> i64*
  %i0ptr248687 = getelementptr inbounds i64, i64* %cloptr248686, i64 0               ; &cloptr248686[0]
  %f248689 = load i64, i64* %i0ptr248687, align 8                                    ; load; *i0ptr248687
  %fptr248688 = inttoptr i64 %f248689 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr248688(i64 %arg235280, i64 %x238830)                ; tail call
  ret void

else248665:
  %many238837 = call i64 @const_init_string(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @str248690, i32 0, i32 0)); quoted string
  %fail238835 = call i64 @prim_halt(i64 %many238837)                                 ; call prim_halt
  %sym238840 = add i64 0, 0                                                          ; quoted ()
  %cloptr248691 = inttoptr i64 %fail238835 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr248692 = getelementptr inbounds i64, i64* %cloptr248691, i64 0               ; &cloptr248691[0]
  %f248694 = load i64, i64* %i0ptr248692, align 8                                    ; load; *i0ptr248692
  %fptr248693 = inttoptr i64 %f248694 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr248693(i64 %fail238835, i64 %sym238840)             ; tail call
  ret void
}


define void @lam243056(i64 %env243057, i64 %rvp238819) {
  %envptr248695 = inttoptr i64 %env243057 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr248696 = getelementptr inbounds i64, i64* %envptr248695, i64 3              ; &envptr248695[3]
  %_37wind_45stack233694233874 = load i64, i64* %envptr248696, align 8               ; load; *envptr248696
  %envptr248697 = inttoptr i64 %env243057 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr248698 = getelementptr inbounds i64, i64* %envptr248697, i64 2              ; &envptr248697[2]
  %cont234162 = load i64, i64* %envptr248698, align 8                                ; load; *envptr248698
  %envptr248699 = inttoptr i64 %env243057 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr248700 = getelementptr inbounds i64, i64* %envptr248699, i64 1              ; &envptr248699[1]
  %l233727233907 = load i64, i64* %envptr248700, align 8                             ; load; *envptr248700
  %check238820 = call i64 @prim_null_63(i64 %rvp238819)                              ; call prim_null_63
  %cmp248701 = icmp eq i64 %check238820, 15                                          ; false?
  br i1 %cmp248701, label %else248703, label %then248702                             ; if

then248702:
  %msg238824 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str248704, i32 0, i32 0)); quoted string
  %abort238822 = call i64 @prim_halt(i64 %msg238824)                                 ; call prim_halt
  %sym238827 = add i64 0, 0                                                          ; quoted ()
  %cloptr248705 = inttoptr i64 %abort238822 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr248706 = getelementptr inbounds i64, i64* %cloptr248705, i64 0               ; &cloptr248705[0]
  %f248708 = load i64, i64* %i0ptr248706, align 8                                    ; load; *i0ptr248706
  %fptr248707 = inttoptr i64 %f248708 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr248707(i64 %abort238822, i64 %sym238827)            ; tail call
  ret void

else248703:
  %_95234164 = call i64 @prim_car(i64 %rvp238819)                                    ; call prim_car
  %rvp238809 = call i64 @prim_cdr(i64 %rvp238819)                                    ; call prim_cdr
  %check238810 = call i64 @prim_null_63(i64 %rvp238809)                              ; call prim_null_63
  %cmp248709 = icmp eq i64 %check238810, 15                                          ; false?
  br i1 %cmp248709, label %else248711, label %then248710                             ; if

then248710:
  %msg238814 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str248712, i32 0, i32 0)); quoted string
  %abort238812 = call i64 @prim_halt(i64 %msg238814)                                 ; call prim_halt
  %sym238817 = add i64 0, 0                                                          ; quoted ()
  %cloptr248713 = inttoptr i64 %abort238812 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr248714 = getelementptr inbounds i64, i64* %cloptr248713, i64 0               ; &cloptr248713[0]
  %f248716 = load i64, i64* %i0ptr248714, align 8                                    ; load; *i0ptr248714
  %fptr248715 = inttoptr i64 %f248716 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr248715(i64 %abort238812, i64 %sym238817)            ; tail call
  ret void

else248711:
  %rest238816 = call i64 @prim_cdr(i64 %rvp238809)                                   ; call prim_cdr
  %empty238811 = call i64 @prim_null_63(i64 %rest238816)                             ; call prim_null_63
  %cmp248717 = icmp eq i64 %empty238811, 15                                          ; false?
  br i1 %cmp248717, label %else248719, label %then248718                             ; if

then248718:
  %_95t233730233910 = call i64 @prim_car(i64 %rvp238809)                             ; call prim_car
  %na238805 = call i64 @prim_cdr(i64 %rvp238809)                                     ; call prim_cdr
  %arg235282 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %retprim234165 = call i64 @prim_vector_45set_33(i64 %_37wind_45stack233694233874, i64 %arg235282, i64 %l233727233907); call prim_vector_45set_33
  %arg235285 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %sym238806 = add i64 0, 0                                                          ; quoted ()
  %x238807 = call i64 @prim_cons(i64 %retprim234165, i64 %sym238806)                 ; call prim_cons
  %x238808 = call i64 @prim_cons(i64 %arg235285, i64 %x238807)                       ; call prim_cons
  %cloptr248720 = inttoptr i64 %cont234162 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr248721 = getelementptr inbounds i64, i64* %cloptr248720, i64 0               ; &cloptr248720[0]
  %f248723 = load i64, i64* %i0ptr248721, align 8                                    ; load; *i0ptr248721
  %fptr248722 = inttoptr i64 %f248723 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr248722(i64 %cont234162, i64 %x238808)               ; tail call
  ret void

else248719:
  %many238815 = call i64 @const_init_string(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @str248724, i32 0, i32 0)); quoted string
  %fail238813 = call i64 @prim_halt(i64 %many238815)                                 ; call prim_halt
  %sym238818 = add i64 0, 0                                                          ; quoted ()
  %cloptr248725 = inttoptr i64 %fail238813 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr248726 = getelementptr inbounds i64, i64* %cloptr248725, i64 0               ; &cloptr248725[0]
  %f248728 = load i64, i64* %i0ptr248726, align 8                                    ; load; *i0ptr248726
  %fptr248727 = inttoptr i64 %f248728 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr248727(i64 %fail238813, i64 %sym238818)             ; tail call
  ret void
}


define void @lam243043(i64 %env243044, i64 %rvp238793) {
  %envptr248729 = inttoptr i64 %env243044 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr248730 = getelementptr inbounds i64, i64* %envptr248729, i64 3              ; &envptr248729[3]
  %_37wind_45stack233694233874 = load i64, i64* %envptr248730, align 8               ; load; *envptr248730
  %envptr248731 = inttoptr i64 %env243044 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr248732 = getelementptr inbounds i64, i64* %envptr248731, i64 2              ; &envptr248731[2]
  %cont234162 = load i64, i64* %envptr248732, align 8                                ; load; *envptr248732
  %envptr248733 = inttoptr i64 %env243044 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr248734 = getelementptr inbounds i64, i64* %envptr248733, i64 1              ; &envptr248733[1]
  %l233727233907 = load i64, i64* %envptr248734, align 8                             ; load; *envptr248734
  %check238794 = call i64 @prim_null_63(i64 %rvp238793)                              ; call prim_null_63
  %cmp248735 = icmp eq i64 %check238794, 15                                          ; false?
  br i1 %cmp248735, label %else248737, label %then248736                             ; if

then248736:
  %msg238798 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str248738, i32 0, i32 0)); quoted string
  %abort238796 = call i64 @prim_halt(i64 %msg238798)                                 ; call prim_halt
  %sym238801 = add i64 0, 0                                                          ; quoted ()
  %cloptr248739 = inttoptr i64 %abort238796 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr248740 = getelementptr inbounds i64, i64* %cloptr248739, i64 0               ; &cloptr248739[0]
  %f248742 = load i64, i64* %i0ptr248740, align 8                                    ; load; *i0ptr248740
  %fptr248741 = inttoptr i64 %f248742 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr248741(i64 %abort238796, i64 %sym238801)            ; tail call
  ret void

else248737:
  %_95234164 = call i64 @prim_car(i64 %rvp238793)                                    ; call prim_car
  %rvp238783 = call i64 @prim_cdr(i64 %rvp238793)                                    ; call prim_cdr
  %check238784 = call i64 @prim_null_63(i64 %rvp238783)                              ; call prim_null_63
  %cmp248743 = icmp eq i64 %check238784, 15                                          ; false?
  br i1 %cmp248743, label %else248745, label %then248744                             ; if

then248744:
  %msg238788 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str248746, i32 0, i32 0)); quoted string
  %abort238786 = call i64 @prim_halt(i64 %msg238788)                                 ; call prim_halt
  %sym238791 = add i64 0, 0                                                          ; quoted ()
  %cloptr248747 = inttoptr i64 %abort238786 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr248748 = getelementptr inbounds i64, i64* %cloptr248747, i64 0               ; &cloptr248747[0]
  %f248750 = load i64, i64* %i0ptr248748, align 8                                    ; load; *i0ptr248748
  %fptr248749 = inttoptr i64 %f248750 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr248749(i64 %abort238786, i64 %sym238791)            ; tail call
  ret void

else248745:
  %rest238790 = call i64 @prim_cdr(i64 %rvp238783)                                   ; call prim_cdr
  %empty238785 = call i64 @prim_null_63(i64 %rest238790)                             ; call prim_null_63
  %cmp248751 = icmp eq i64 %empty238785, 15                                          ; false?
  br i1 %cmp248751, label %else248753, label %then248752                             ; if

then248752:
  %_95t233730233910 = call i64 @prim_car(i64 %rvp238783)                             ; call prim_car
  %na238779 = call i64 @prim_cdr(i64 %rvp238783)                                     ; call prim_cdr
  %arg235272 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %retprim234165 = call i64 @prim_vector_45set_33(i64 %_37wind_45stack233694233874, i64 %arg235272, i64 %l233727233907); call prim_vector_45set_33
  %arg235275 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %sym238780 = add i64 0, 0                                                          ; quoted ()
  %x238781 = call i64 @prim_cons(i64 %retprim234165, i64 %sym238780)                 ; call prim_cons
  %x238782 = call i64 @prim_cons(i64 %arg235275, i64 %x238781)                       ; call prim_cons
  %cloptr248754 = inttoptr i64 %cont234162 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr248755 = getelementptr inbounds i64, i64* %cloptr248754, i64 0               ; &cloptr248754[0]
  %f248757 = load i64, i64* %i0ptr248755, align 8                                    ; load; *i0ptr248755
  %fptr248756 = inttoptr i64 %f248757 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr248756(i64 %cont234162, i64 %x238782)               ; tail call
  ret void

else248753:
  %many238789 = call i64 @const_init_string(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @str248758, i32 0, i32 0)); quoted string
  %fail238787 = call i64 @prim_halt(i64 %many238789)                                 ; call prim_halt
  %sym238792 = add i64 0, 0                                                          ; quoted ()
  %cloptr248759 = inttoptr i64 %fail238787 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr248760 = getelementptr inbounds i64, i64* %cloptr248759, i64 0               ; &cloptr248759[0]
  %f248762 = load i64, i64* %i0ptr248760, align 8                                    ; load; *i0ptr248760
  %fptr248761 = inttoptr i64 %f248762 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr248761(i64 %fail238787, i64 %sym238792)             ; tail call
  ret void
}


define void @lam243018(i64 %env243019, i64 %rvp238762) {
  %envptr248763 = inttoptr i64 %env243019 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr248764 = getelementptr inbounds i64, i64* %envptr248763, i64 3              ; &envptr248763[3]
  %_37wind_45stack233694233874 = load i64, i64* %envptr248764, align 8               ; load; *envptr248764
  %envptr248765 = inttoptr i64 %env243019 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr248766 = getelementptr inbounds i64, i64* %envptr248765, i64 2              ; &envptr248765[2]
  %cont234162 = load i64, i64* %envptr248766, align 8                                ; load; *envptr248766
  %envptr248767 = inttoptr i64 %env243019 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr248768 = getelementptr inbounds i64, i64* %envptr248767, i64 1              ; &envptr248767[1]
  %l233727233907 = load i64, i64* %envptr248768, align 8                             ; load; *envptr248768
  %check238763 = call i64 @prim_null_63(i64 %rvp238762)                              ; call prim_null_63
  %cmp248769 = icmp eq i64 %check238763, 15                                          ; false?
  br i1 %cmp248769, label %else248771, label %then248770                             ; if

then248770:
  %msg238767 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str248772, i32 0, i32 0)); quoted string
  %abort238765 = call i64 @prim_halt(i64 %msg238767)                                 ; call prim_halt
  %sym238770 = add i64 0, 0                                                          ; quoted ()
  %cloptr248773 = inttoptr i64 %abort238765 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr248774 = getelementptr inbounds i64, i64* %cloptr248773, i64 0               ; &cloptr248773[0]
  %f248776 = load i64, i64* %i0ptr248774, align 8                                    ; load; *i0ptr248774
  %fptr248775 = inttoptr i64 %f248776 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr248775(i64 %abort238765, i64 %sym238770)            ; tail call
  ret void

else248771:
  %_95234163 = call i64 @prim_car(i64 %rvp238762)                                    ; call prim_car
  %rvp238752 = call i64 @prim_cdr(i64 %rvp238762)                                    ; call prim_cdr
  %check238753 = call i64 @prim_null_63(i64 %rvp238752)                              ; call prim_null_63
  %cmp248777 = icmp eq i64 %check238753, 15                                          ; false?
  br i1 %cmp248777, label %else248779, label %then248778                             ; if

then248778:
  %msg238757 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str248780, i32 0, i32 0)); quoted string
  %abort238755 = call i64 @prim_halt(i64 %msg238757)                                 ; call prim_halt
  %sym238760 = add i64 0, 0                                                          ; quoted ()
  %cloptr248781 = inttoptr i64 %abort238755 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr248782 = getelementptr inbounds i64, i64* %cloptr248781, i64 0               ; &cloptr248781[0]
  %f248784 = load i64, i64* %i0ptr248782, align 8                                    ; load; *i0ptr248782
  %fptr248783 = inttoptr i64 %f248784 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr248783(i64 %abort238755, i64 %sym238760)            ; tail call
  ret void

else248779:
  %rest238759 = call i64 @prim_cdr(i64 %rvp238752)                                   ; call prim_cdr
  %empty238754 = call i64 @prim_null_63(i64 %rest238759)                             ; call prim_null_63
  %cmp248785 = icmp eq i64 %empty238754, 15                                          ; false?
  br i1 %cmp248785, label %else248787, label %then248786                             ; if

then248786:
  %_95t233728233908 = call i64 @prim_car(i64 %rvp238752)                             ; call prim_car
  %na238674 = call i64 @prim_cdr(i64 %rvp238752)                                     ; call prim_cdr
  %a234060 = call i64 @prim_car(i64 %l233727233907)                                  ; call prim_car
  %a234061 = call i64 @prim_car(i64 %a234060)                                        ; call prim_car
  %retprim234168 = call i64 @prim_procedure_63(i64 %a234061)                         ; call prim_procedure_63
  %cloptr248788 = call i64* @alloc(i64 32)                                           ; malloc
  %eptr248790 = getelementptr inbounds i64, i64* %cloptr248788, i64 1                ; &eptr248790[1]
  %eptr248791 = getelementptr inbounds i64, i64* %cloptr248788, i64 2                ; &eptr248791[2]
  %eptr248792 = getelementptr inbounds i64, i64* %cloptr248788, i64 3                ; &eptr248792[3]
  store i64 %l233727233907, i64* %eptr248790                                         ; *eptr248790 = %l233727233907
  store i64 %cont234162, i64* %eptr248791                                            ; *eptr248791 = %cont234162
  store i64 %_37wind_45stack233694233874, i64* %eptr248792                           ; *eptr248792 = %_37wind_45stack233694233874
  %eptr248789 = getelementptr inbounds i64, i64* %cloptr248788, i64 0                ; &cloptr248788[0]
  %f248793 = ptrtoint void(i64,i64)* @lam243014 to i64                               ; fptr cast; i64(...)* -> i64
  store i64 %f248793, i64* %eptr248789                                               ; store fptr
  %arg235236 = ptrtoint i64* %cloptr248788 to i64                                    ; closure cast; i64* -> i64
  %arg235235 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %sym238749 = add i64 0, 0                                                          ; quoted ()
  %x238750 = call i64 @prim_cons(i64 %retprim234168, i64 %sym238749)                 ; call prim_cons
  %x238751 = call i64 @prim_cons(i64 %arg235235, i64 %x238750)                       ; call prim_cons
  %cloptr248794 = inttoptr i64 %arg235236 to i64*                                    ; closure/env cast; i64 -> i64*
  %i0ptr248795 = getelementptr inbounds i64, i64* %cloptr248794, i64 0               ; &cloptr248794[0]
  %f248797 = load i64, i64* %i0ptr248795, align 8                                    ; load; *i0ptr248795
  %fptr248796 = inttoptr i64 %f248797 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr248796(i64 %arg235236, i64 %x238751)                ; tail call
  ret void

else248787:
  %many238758 = call i64 @const_init_string(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @str248798, i32 0, i32 0)); quoted string
  %fail238756 = call i64 @prim_halt(i64 %many238758)                                 ; call prim_halt
  %sym238761 = add i64 0, 0                                                          ; quoted ()
  %cloptr248799 = inttoptr i64 %fail238756 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr248800 = getelementptr inbounds i64, i64* %cloptr248799, i64 0               ; &cloptr248799[0]
  %f248802 = load i64, i64* %i0ptr248800, align 8                                    ; load; *i0ptr248800
  %fptr248801 = inttoptr i64 %f248802 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr248801(i64 %fail238756, i64 %sym238761)             ; tail call
  ret void
}


define void @lam243014(i64 %env243015, i64 %rvp238740) {
  %envptr248803 = inttoptr i64 %env243015 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr248804 = getelementptr inbounds i64, i64* %envptr248803, i64 3              ; &envptr248803[3]
  %_37wind_45stack233694233874 = load i64, i64* %envptr248804, align 8               ; load; *envptr248804
  %envptr248805 = inttoptr i64 %env243015 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr248806 = getelementptr inbounds i64, i64* %envptr248805, i64 2              ; &envptr248805[2]
  %cont234162 = load i64, i64* %envptr248806, align 8                                ; load; *envptr248806
  %envptr248807 = inttoptr i64 %env243015 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr248808 = getelementptr inbounds i64, i64* %envptr248807, i64 1              ; &envptr248807[1]
  %l233727233907 = load i64, i64* %envptr248808, align 8                             ; load; *envptr248808
  %check238741 = call i64 @prim_null_63(i64 %rvp238740)                              ; call prim_null_63
  %cmp248809 = icmp eq i64 %check238741, 15                                          ; false?
  br i1 %cmp248809, label %else248811, label %then248810                             ; if

then248810:
  %msg238745 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str248812, i32 0, i32 0)); quoted string
  %abort238743 = call i64 @prim_halt(i64 %msg238745)                                 ; call prim_halt
  %sym238748 = add i64 0, 0                                                          ; quoted ()
  %cloptr248813 = inttoptr i64 %abort238743 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr248814 = getelementptr inbounds i64, i64* %cloptr248813, i64 0               ; &cloptr248813[0]
  %f248816 = load i64, i64* %i0ptr248814, align 8                                    ; load; *i0ptr248814
  %fptr248815 = inttoptr i64 %f248816 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr248815(i64 %abort238743, i64 %sym238748)            ; tail call
  ret void

else248811:
  %_95234166 = call i64 @prim_car(i64 %rvp238740)                                    ; call prim_car
  %rvp238730 = call i64 @prim_cdr(i64 %rvp238740)                                    ; call prim_cdr
  %check238731 = call i64 @prim_null_63(i64 %rvp238730)                              ; call prim_null_63
  %cmp248817 = icmp eq i64 %check238731, 15                                          ; false?
  br i1 %cmp248817, label %else248819, label %then248818                             ; if

then248818:
  %msg238735 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str248820, i32 0, i32 0)); quoted string
  %abort238733 = call i64 @prim_halt(i64 %msg238735)                                 ; call prim_halt
  %sym238738 = add i64 0, 0                                                          ; quoted ()
  %cloptr248821 = inttoptr i64 %abort238733 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr248822 = getelementptr inbounds i64, i64* %cloptr248821, i64 0               ; &cloptr248821[0]
  %f248824 = load i64, i64* %i0ptr248822, align 8                                    ; load; *i0ptr248822
  %fptr248823 = inttoptr i64 %f248824 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr248823(i64 %abort238733, i64 %sym238738)            ; tail call
  ret void

else248819:
  %rest238737 = call i64 @prim_cdr(i64 %rvp238730)                                   ; call prim_cdr
  %empty238732 = call i64 @prim_null_63(i64 %rest238737)                             ; call prim_null_63
  %cmp248825 = icmp eq i64 %empty238732, 15                                          ; false?
  br i1 %cmp248825, label %else248827, label %then248826                             ; if

then248826:
  %check233573233731233911 = call i64 @prim_car(i64 %rvp238730)                      ; call prim_car
  %na238676 = call i64 @prim_cdr(i64 %rvp238730)                                     ; call prim_cdr
  %cmp248828 = icmp eq i64 %check233573233731233911, 15                              ; false?
  br i1 %cmp248828, label %else248830, label %then248829                             ; if

then248829:
  %a234062 = call i64 @prim_car(i64 %l233727233907)                                  ; call prim_car
  %a234063 = call i64 @prim_car(i64 %a234062)                                        ; call prim_car
  %cloptr248831 = call i64* @alloc(i64 32)                                           ; malloc
  %eptr248833 = getelementptr inbounds i64, i64* %cloptr248831, i64 1                ; &eptr248833[1]
  %eptr248834 = getelementptr inbounds i64, i64* %cloptr248831, i64 2                ; &eptr248834[2]
  %eptr248835 = getelementptr inbounds i64, i64* %cloptr248831, i64 3                ; &eptr248835[3]
  store i64 %l233727233907, i64* %eptr248833                                         ; *eptr248833 = %l233727233907
  store i64 %cont234162, i64* %eptr248834                                            ; *eptr248834 = %cont234162
  store i64 %_37wind_45stack233694233874, i64* %eptr248835                           ; *eptr248835 = %_37wind_45stack233694233874
  %eptr248832 = getelementptr inbounds i64, i64* %cloptr248831, i64 0                ; &cloptr248831[0]
  %f248836 = ptrtoint void(i64,i64)* @lam242996 to i64                               ; fptr cast; i64(...)* -> i64
  store i64 %f248836, i64* %eptr248832                                               ; store fptr
  %arg235239 = ptrtoint i64* %cloptr248831 to i64                                    ; closure cast; i64* -> i64
  %sym238701 = add i64 0, 0                                                          ; quoted ()
  %x238702 = call i64 @prim_cons(i64 %arg235239, i64 %sym238701)                     ; call prim_cons
  %cloptr248837 = inttoptr i64 %a234063 to i64*                                      ; closure/env cast; i64 -> i64*
  %i0ptr248838 = getelementptr inbounds i64, i64* %cloptr248837, i64 0               ; &cloptr248837[0]
  %f248840 = load i64, i64* %i0ptr248838, align 8                                    ; load; *i0ptr248838
  %fptr248839 = inttoptr i64 %f248840 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr248839(i64 %a234063, i64 %x238702)                  ; tail call
  ret void

else248830:
  %arg235247 = call i64 @const_init_string(i8* getelementptr inbounds ([71 x i8], [71 x i8]* @str248841, i32 0, i32 0)); quoted string
  %retprim234167 = call i64 @prim_halt(i64 %arg235247)                               ; call prim_halt
  %cloptr248842 = call i64* @alloc(i64 32)                                           ; malloc
  %eptr248844 = getelementptr inbounds i64, i64* %cloptr248842, i64 1                ; &eptr248844[1]
  %eptr248845 = getelementptr inbounds i64, i64* %cloptr248842, i64 2                ; &eptr248845[2]
  %eptr248846 = getelementptr inbounds i64, i64* %cloptr248842, i64 3                ; &eptr248846[3]
  store i64 %l233727233907, i64* %eptr248844                                         ; *eptr248844 = %l233727233907
  store i64 %cont234162, i64* %eptr248845                                            ; *eptr248845 = %cont234162
  store i64 %_37wind_45stack233694233874, i64* %eptr248846                           ; *eptr248846 = %_37wind_45stack233694233874
  %eptr248843 = getelementptr inbounds i64, i64* %cloptr248842, i64 0                ; &cloptr248842[0]
  %f248847 = ptrtoint void(i64,i64)* @lam243009 to i64                               ; fptr cast; i64(...)* -> i64
  store i64 %f248847, i64* %eptr248843                                               ; store fptr
  %arg235250 = ptrtoint i64* %cloptr248842 to i64                                    ; closure cast; i64* -> i64
  %arg235249 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %sym238727 = add i64 0, 0                                                          ; quoted ()
  %x238728 = call i64 @prim_cons(i64 %retprim234167, i64 %sym238727)                 ; call prim_cons
  %x238729 = call i64 @prim_cons(i64 %arg235249, i64 %x238728)                       ; call prim_cons
  %cloptr248848 = inttoptr i64 %arg235250 to i64*                                    ; closure/env cast; i64 -> i64*
  %i0ptr248849 = getelementptr inbounds i64, i64* %cloptr248848, i64 0               ; &cloptr248848[0]
  %f248851 = load i64, i64* %i0ptr248849, align 8                                    ; load; *i0ptr248849
  %fptr248850 = inttoptr i64 %f248851 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr248850(i64 %arg235250, i64 %x238729)                ; tail call
  ret void

else248827:
  %many238736 = call i64 @const_init_string(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @str248852, i32 0, i32 0)); quoted string
  %fail238734 = call i64 @prim_halt(i64 %many238736)                                 ; call prim_halt
  %sym238739 = add i64 0, 0                                                          ; quoted ()
  %cloptr248853 = inttoptr i64 %fail238734 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr248854 = getelementptr inbounds i64, i64* %cloptr248853, i64 0               ; &cloptr248853[0]
  %f248856 = load i64, i64* %i0ptr248854, align 8                                    ; load; *i0ptr248854
  %fptr248855 = inttoptr i64 %f248856 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr248855(i64 %fail238734, i64 %sym238739)             ; tail call
  ret void
}


define void @lam243009(i64 %env243010, i64 %rvp238718) {
  %envptr248857 = inttoptr i64 %env243010 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr248858 = getelementptr inbounds i64, i64* %envptr248857, i64 3              ; &envptr248857[3]
  %_37wind_45stack233694233874 = load i64, i64* %envptr248858, align 8               ; load; *envptr248858
  %envptr248859 = inttoptr i64 %env243010 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr248860 = getelementptr inbounds i64, i64* %envptr248859, i64 2              ; &envptr248859[2]
  %cont234162 = load i64, i64* %envptr248860, align 8                                ; load; *envptr248860
  %envptr248861 = inttoptr i64 %env243010 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr248862 = getelementptr inbounds i64, i64* %envptr248861, i64 1              ; &envptr248861[1]
  %l233727233907 = load i64, i64* %envptr248862, align 8                             ; load; *envptr248862
  %check238719 = call i64 @prim_null_63(i64 %rvp238718)                              ; call prim_null_63
  %cmp248863 = icmp eq i64 %check238719, 15                                          ; false?
  br i1 %cmp248863, label %else248865, label %then248864                             ; if

then248864:
  %msg238723 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str248866, i32 0, i32 0)); quoted string
  %abort238721 = call i64 @prim_halt(i64 %msg238723)                                 ; call prim_halt
  %sym238726 = add i64 0, 0                                                          ; quoted ()
  %cloptr248867 = inttoptr i64 %abort238721 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr248868 = getelementptr inbounds i64, i64* %cloptr248867, i64 0               ; &cloptr248867[0]
  %f248870 = load i64, i64* %i0ptr248868, align 8                                    ; load; *i0ptr248868
  %fptr248869 = inttoptr i64 %f248870 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr248869(i64 %abort238721, i64 %sym238726)            ; tail call
  ret void

else248865:
  %_95234164 = call i64 @prim_car(i64 %rvp238718)                                    ; call prim_car
  %rvp238708 = call i64 @prim_cdr(i64 %rvp238718)                                    ; call prim_cdr
  %check238709 = call i64 @prim_null_63(i64 %rvp238708)                              ; call prim_null_63
  %cmp248871 = icmp eq i64 %check238709, 15                                          ; false?
  br i1 %cmp248871, label %else248873, label %then248872                             ; if

then248872:
  %msg238713 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str248874, i32 0, i32 0)); quoted string
  %abort238711 = call i64 @prim_halt(i64 %msg238713)                                 ; call prim_halt
  %sym238716 = add i64 0, 0                                                          ; quoted ()
  %cloptr248875 = inttoptr i64 %abort238711 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr248876 = getelementptr inbounds i64, i64* %cloptr248875, i64 0               ; &cloptr248875[0]
  %f248878 = load i64, i64* %i0ptr248876, align 8                                    ; load; *i0ptr248876
  %fptr248877 = inttoptr i64 %f248878 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr248877(i64 %abort238711, i64 %sym238716)            ; tail call
  ret void

else248873:
  %rest238715 = call i64 @prim_cdr(i64 %rvp238708)                                   ; call prim_cdr
  %empty238710 = call i64 @prim_null_63(i64 %rest238715)                             ; call prim_null_63
  %cmp248879 = icmp eq i64 %empty238710, 15                                          ; false?
  br i1 %cmp248879, label %else248881, label %then248880                             ; if

then248880:
  %_95t233730233910 = call i64 @prim_car(i64 %rvp238708)                             ; call prim_car
  %na238704 = call i64 @prim_cdr(i64 %rvp238708)                                     ; call prim_cdr
  %arg235252 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %retprim234165 = call i64 @prim_vector_45set_33(i64 %_37wind_45stack233694233874, i64 %arg235252, i64 %l233727233907); call prim_vector_45set_33
  %arg235255 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %sym238705 = add i64 0, 0                                                          ; quoted ()
  %x238706 = call i64 @prim_cons(i64 %retprim234165, i64 %sym238705)                 ; call prim_cons
  %x238707 = call i64 @prim_cons(i64 %arg235255, i64 %x238706)                       ; call prim_cons
  %cloptr248882 = inttoptr i64 %cont234162 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr248883 = getelementptr inbounds i64, i64* %cloptr248882, i64 0               ; &cloptr248882[0]
  %f248885 = load i64, i64* %i0ptr248883, align 8                                    ; load; *i0ptr248883
  %fptr248884 = inttoptr i64 %f248885 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr248884(i64 %cont234162, i64 %x238707)               ; tail call
  ret void

else248881:
  %many238714 = call i64 @const_init_string(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @str248886, i32 0, i32 0)); quoted string
  %fail238712 = call i64 @prim_halt(i64 %many238714)                                 ; call prim_halt
  %sym238717 = add i64 0, 0                                                          ; quoted ()
  %cloptr248887 = inttoptr i64 %fail238712 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr248888 = getelementptr inbounds i64, i64* %cloptr248887, i64 0               ; &cloptr248887[0]
  %f248890 = load i64, i64* %i0ptr248888, align 8                                    ; load; *i0ptr248888
  %fptr248889 = inttoptr i64 %f248890 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr248889(i64 %fail238712, i64 %sym238717)             ; tail call
  ret void
}


define void @lam242996(i64 %env242997, i64 %rvp238692) {
  %envptr248891 = inttoptr i64 %env242997 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr248892 = getelementptr inbounds i64, i64* %envptr248891, i64 3              ; &envptr248891[3]
  %_37wind_45stack233694233874 = load i64, i64* %envptr248892, align 8               ; load; *envptr248892
  %envptr248893 = inttoptr i64 %env242997 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr248894 = getelementptr inbounds i64, i64* %envptr248893, i64 2              ; &envptr248893[2]
  %cont234162 = load i64, i64* %envptr248894, align 8                                ; load; *envptr248894
  %envptr248895 = inttoptr i64 %env242997 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr248896 = getelementptr inbounds i64, i64* %envptr248895, i64 1              ; &envptr248895[1]
  %l233727233907 = load i64, i64* %envptr248896, align 8                             ; load; *envptr248896
  %check238693 = call i64 @prim_null_63(i64 %rvp238692)                              ; call prim_null_63
  %cmp248897 = icmp eq i64 %check238693, 15                                          ; false?
  br i1 %cmp248897, label %else248899, label %then248898                             ; if

then248898:
  %msg238697 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str248900, i32 0, i32 0)); quoted string
  %abort238695 = call i64 @prim_halt(i64 %msg238697)                                 ; call prim_halt
  %sym238700 = add i64 0, 0                                                          ; quoted ()
  %cloptr248901 = inttoptr i64 %abort238695 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr248902 = getelementptr inbounds i64, i64* %cloptr248901, i64 0               ; &cloptr248901[0]
  %f248904 = load i64, i64* %i0ptr248902, align 8                                    ; load; *i0ptr248902
  %fptr248903 = inttoptr i64 %f248904 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr248903(i64 %abort238695, i64 %sym238700)            ; tail call
  ret void

else248899:
  %_95234164 = call i64 @prim_car(i64 %rvp238692)                                    ; call prim_car
  %rvp238682 = call i64 @prim_cdr(i64 %rvp238692)                                    ; call prim_cdr
  %check238683 = call i64 @prim_null_63(i64 %rvp238682)                              ; call prim_null_63
  %cmp248905 = icmp eq i64 %check238683, 15                                          ; false?
  br i1 %cmp248905, label %else248907, label %then248906                             ; if

then248906:
  %msg238687 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str248908, i32 0, i32 0)); quoted string
  %abort238685 = call i64 @prim_halt(i64 %msg238687)                                 ; call prim_halt
  %sym238690 = add i64 0, 0                                                          ; quoted ()
  %cloptr248909 = inttoptr i64 %abort238685 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr248910 = getelementptr inbounds i64, i64* %cloptr248909, i64 0               ; &cloptr248909[0]
  %f248912 = load i64, i64* %i0ptr248910, align 8                                    ; load; *i0ptr248910
  %fptr248911 = inttoptr i64 %f248912 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr248911(i64 %abort238685, i64 %sym238690)            ; tail call
  ret void

else248907:
  %rest238689 = call i64 @prim_cdr(i64 %rvp238682)                                   ; call prim_cdr
  %empty238684 = call i64 @prim_null_63(i64 %rest238689)                             ; call prim_null_63
  %cmp248913 = icmp eq i64 %empty238684, 15                                          ; false?
  br i1 %cmp248913, label %else248915, label %then248914                             ; if

then248914:
  %_95t233730233910 = call i64 @prim_car(i64 %rvp238682)                             ; call prim_car
  %na238678 = call i64 @prim_cdr(i64 %rvp238682)                                     ; call prim_cdr
  %arg235242 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %retprim234165 = call i64 @prim_vector_45set_33(i64 %_37wind_45stack233694233874, i64 %arg235242, i64 %l233727233907); call prim_vector_45set_33
  %arg235245 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %sym238679 = add i64 0, 0                                                          ; quoted ()
  %x238680 = call i64 @prim_cons(i64 %retprim234165, i64 %sym238679)                 ; call prim_cons
  %x238681 = call i64 @prim_cons(i64 %arg235245, i64 %x238680)                       ; call prim_cons
  %cloptr248916 = inttoptr i64 %cont234162 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr248917 = getelementptr inbounds i64, i64* %cloptr248916, i64 0               ; &cloptr248916[0]
  %f248919 = load i64, i64* %i0ptr248917, align 8                                    ; load; *i0ptr248917
  %fptr248918 = inttoptr i64 %f248919 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr248918(i64 %cont234162, i64 %x238681)               ; tail call
  ret void

else248915:
  %many238688 = call i64 @const_init_string(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @str248920, i32 0, i32 0)); quoted string
  %fail238686 = call i64 @prim_halt(i64 %many238688)                                 ; call prim_halt
  %sym238691 = add i64 0, 0                                                          ; quoted ()
  %cloptr248921 = inttoptr i64 %fail238686 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr248922 = getelementptr inbounds i64, i64* %cloptr248921, i64 0               ; &cloptr248921[0]
  %f248924 = load i64, i64* %i0ptr248922, align 8                                    ; load; *i0ptr248922
  %fptr248923 = inttoptr i64 %f248924 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr248923(i64 %fail238686, i64 %sym238691)             ; tail call
  ret void
}


define void @lam242961(i64 %env242962, i64 %rvp238937) {
  %envptr248925 = inttoptr i64 %env242962 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr248926 = getelementptr inbounds i64, i64* %envptr248925, i64 3              ; &envptr248925[3]
  %f233724233904 = load i64, i64* %envptr248926, align 8                             ; load; *envptr248926
  %envptr248927 = inttoptr i64 %env242962 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr248928 = getelementptr inbounds i64, i64* %envptr248927, i64 2              ; &envptr248927[2]
  %cont234158 = load i64, i64* %envptr248928, align 8                                ; load; *envptr248928
  %envptr248929 = inttoptr i64 %env242962 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr248930 = getelementptr inbounds i64, i64* %envptr248929, i64 1              ; &envptr248929[1]
  %new233710233890 = load i64, i64* %envptr248930, align 8                           ; load; *envptr248930
  %check238938 = call i64 @prim_null_63(i64 %rvp238937)                              ; call prim_null_63
  %cmp248931 = icmp eq i64 %check238938, 15                                          ; false?
  br i1 %cmp248931, label %else248933, label %then248932                             ; if

then248932:
  %msg238942 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str248934, i32 0, i32 0)); quoted string
  %abort238940 = call i64 @prim_halt(i64 %msg238942)                                 ; call prim_halt
  %sym238945 = add i64 0, 0                                                          ; quoted ()
  %cloptr248935 = inttoptr i64 %abort238940 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr248936 = getelementptr inbounds i64, i64* %cloptr248935, i64 0               ; &cloptr248935[0]
  %f248938 = load i64, i64* %i0ptr248936, align 8                                    ; load; *i0ptr248936
  %fptr248937 = inttoptr i64 %f248938 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr248937(i64 %abort238940, i64 %sym238945)            ; tail call
  ret void

else248933:
  %_95234173 = call i64 @prim_car(i64 %rvp238937)                                    ; call prim_car
  %rvp238927 = call i64 @prim_cdr(i64 %rvp238937)                                    ; call prim_cdr
  %check238928 = call i64 @prim_null_63(i64 %rvp238927)                              ; call prim_null_63
  %cmp248939 = icmp eq i64 %check238928, 15                                          ; false?
  br i1 %cmp248939, label %else248941, label %then248940                             ; if

then248940:
  %msg238932 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str248942, i32 0, i32 0)); quoted string
  %abort238930 = call i64 @prim_halt(i64 %msg238932)                                 ; call prim_halt
  %sym238935 = add i64 0, 0                                                          ; quoted ()
  %cloptr248943 = inttoptr i64 %abort238930 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr248944 = getelementptr inbounds i64, i64* %cloptr248943, i64 0               ; &cloptr248943[0]
  %f248946 = load i64, i64* %i0ptr248944, align 8                                    ; load; *i0ptr248944
  %fptr248945 = inttoptr i64 %f248946 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr248945(i64 %abort238930, i64 %sym238935)            ; tail call
  ret void

else248941:
  %rest238934 = call i64 @prim_cdr(i64 %rvp238927)                                   ; call prim_cdr
  %empty238929 = call i64 @prim_null_63(i64 %rest238934)                             ; call prim_null_63
  %cmp248947 = icmp eq i64 %empty238929, 15                                          ; false?
  br i1 %cmp248947, label %else248949, label %then248948                             ; if

then248948:
  %check233574233733233913 = call i64 @prim_car(i64 %rvp238927)                      ; call prim_car
  %na238920 = call i64 @prim_cdr(i64 %rvp238927)                                     ; call prim_cdr
  %cmp248950 = icmp eq i64 %check233574233733233913, 15                              ; false?
  br i1 %cmp248950, label %else248952, label %then248951                             ; if

then248951:
  %arg235299 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %a234065 = call i64 @prim_vector_45ref(i64 %f233724233904, i64 %arg235299)         ; call prim_vector_45ref
  %sym238921 = add i64 0, 0                                                          ; quoted ()
  %x238922 = call i64 @prim_cons(i64 %new233710233890, i64 %sym238921)               ; call prim_cons
  %x238923 = call i64 @prim_cons(i64 %cont234158, i64 %x238922)                      ; call prim_cons
  %cloptr248953 = inttoptr i64 %a234065 to i64*                                      ; closure/env cast; i64 -> i64*
  %i0ptr248954 = getelementptr inbounds i64, i64* %cloptr248953, i64 0               ; &cloptr248953[0]
  %f248956 = load i64, i64* %i0ptr248954, align 8                                    ; load; *i0ptr248954
  %fptr248955 = inttoptr i64 %f248956 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr248955(i64 %a234065, i64 %x238923)                  ; tail call
  ret void

else248952:
  %arg235304 = call i64 @const_init_string(i8* getelementptr inbounds ([63 x i8], [63 x i8]* @str248957, i32 0, i32 0)); quoted string
  %retprim234174 = call i64 @prim_halt(i64 %arg235304)                               ; call prim_halt
  %arg235306 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %sym238924 = add i64 0, 0                                                          ; quoted ()
  %x238925 = call i64 @prim_cons(i64 %retprim234174, i64 %sym238924)                 ; call prim_cons
  %x238926 = call i64 @prim_cons(i64 %arg235306, i64 %x238925)                       ; call prim_cons
  %cloptr248958 = inttoptr i64 %cont234158 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr248959 = getelementptr inbounds i64, i64* %cloptr248958, i64 0               ; &cloptr248958[0]
  %f248961 = load i64, i64* %i0ptr248959, align 8                                    ; load; *i0ptr248959
  %fptr248960 = inttoptr i64 %f248961 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr248960(i64 %cont234158, i64 %x238926)               ; tail call
  ret void

else248949:
  %many238933 = call i64 @const_init_string(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @str248962, i32 0, i32 0)); quoted string
  %fail238931 = call i64 @prim_halt(i64 %many238933)                                 ; call prim_halt
  %sym238936 = add i64 0, 0                                                          ; quoted ()
  %cloptr248963 = inttoptr i64 %fail238931 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr248964 = getelementptr inbounds i64, i64* %cloptr248963, i64 0               ; &cloptr248963[0]
  %f248966 = load i64, i64* %i0ptr248964, align 8                                    ; load; *i0ptr248964
  %fptr248965 = inttoptr i64 %f248966 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr248965(i64 %fail238931, i64 %sym238936)             ; tail call
  ret void
}


define void @lam242906(i64 %env242907, i64 %rvp238457) {
  %envptr248967 = inttoptr i64 %env242907 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr248968 = getelementptr inbounds i64, i64* %envptr248967, i64 3              ; &envptr248967[3]
  %_37wind_45stack233694233874 = load i64, i64* %envptr248968, align 8               ; load; *envptr248968
  %envptr248969 = inttoptr i64 %env242907 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr248970 = getelementptr inbounds i64, i64* %envptr248969, i64 2              ; &envptr248969[2]
  %cont234158 = load i64, i64* %envptr248970, align 8                                ; load; *envptr248970
  %envptr248971 = inttoptr i64 %env242907 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr248972 = getelementptr inbounds i64, i64* %envptr248971, i64 1              ; &envptr248971[1]
  %new233710233890 = load i64, i64* %envptr248972, align 8                           ; load; *envptr248972
  %check238458 = call i64 @prim_null_63(i64 %rvp238457)                              ; call prim_null_63
  %cmp248973 = icmp eq i64 %check238458, 15                                          ; false?
  br i1 %cmp248973, label %else248975, label %then248974                             ; if

then248974:
  %msg238462 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str248976, i32 0, i32 0)); quoted string
  %abort238460 = call i64 @prim_halt(i64 %msg238462)                                 ; call prim_halt
  %sym238465 = add i64 0, 0                                                          ; quoted ()
  %cloptr248977 = inttoptr i64 %abort238460 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr248978 = getelementptr inbounds i64, i64* %cloptr248977, i64 0               ; &cloptr248977[0]
  %f248980 = load i64, i64* %i0ptr248978, align 8                                    ; load; *i0ptr248978
  %fptr248979 = inttoptr i64 %f248980 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr248979(i64 %abort238460, i64 %sym238465)            ; tail call
  ret void

else248975:
  %_95234159 = call i64 @prim_car(i64 %rvp238457)                                    ; call prim_car
  %rvp238447 = call i64 @prim_cdr(i64 %rvp238457)                                    ; call prim_cdr
  %check238448 = call i64 @prim_null_63(i64 %rvp238447)                              ; call prim_null_63
  %cmp248981 = icmp eq i64 %check238448, 15                                          ; false?
  br i1 %cmp248981, label %else248983, label %then248982                             ; if

then248982:
  %msg238452 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str248984, i32 0, i32 0)); quoted string
  %abort238450 = call i64 @prim_halt(i64 %msg238452)                                 ; call prim_halt
  %sym238455 = add i64 0, 0                                                          ; quoted ()
  %cloptr248985 = inttoptr i64 %abort238450 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr248986 = getelementptr inbounds i64, i64* %cloptr248985, i64 0               ; &cloptr248985[0]
  %f248988 = load i64, i64* %i0ptr248986, align 8                                    ; load; *i0ptr248986
  %fptr248987 = inttoptr i64 %f248988 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr248987(i64 %abort238450, i64 %sym238455)            ; tail call
  ret void

else248983:
  %rest238454 = call i64 @prim_cdr(i64 %rvp238447)                                   ; call prim_cdr
  %empty238449 = call i64 @prim_null_63(i64 %rest238454)                             ; call prim_null_63
  %cmp248989 = icmp eq i64 %empty238449, 15                                          ; false?
  br i1 %cmp248989, label %else248991, label %then248990                             ; if

then248990:
  %tail233711233891 = call i64 @prim_car(i64 %rvp238447)                             ; call prim_car
  %na237485 = call i64 @prim_cdr(i64 %rvp238447)                                     ; call prim_cdr
  %cloptr248992 = call i64* @alloc(i64 8)                                            ; malloc
  %eptr248993 = getelementptr inbounds i64, i64* %cloptr248992, i64 0                ; &cloptr248992[0]
  %f248994 = ptrtoint void(i64,i64)* @lam242902 to i64                               ; fptr cast; i64(...)* -> i64
  store i64 %f248994, i64* %eptr248993                                               ; store fptr
  %arg234815 = ptrtoint i64* %cloptr248992 to i64                                    ; closure cast; i64* -> i64
  %cloptr248995 = call i64* @alloc(i64 40)                                           ; malloc
  %eptr248997 = getelementptr inbounds i64, i64* %cloptr248995, i64 1                ; &eptr248997[1]
  %eptr248998 = getelementptr inbounds i64, i64* %cloptr248995, i64 2                ; &eptr248998[2]
  %eptr248999 = getelementptr inbounds i64, i64* %cloptr248995, i64 3                ; &eptr248999[3]
  %eptr249000 = getelementptr inbounds i64, i64* %cloptr248995, i64 4                ; &eptr249000[4]
  store i64 %new233710233890, i64* %eptr248997                                       ; *eptr248997 = %new233710233890
  store i64 %cont234158, i64* %eptr248998                                            ; *eptr248998 = %cont234158
  store i64 %tail233711233891, i64* %eptr248999                                      ; *eptr248999 = %tail233711233891
  store i64 %_37wind_45stack233694233874, i64* %eptr249000                           ; *eptr249000 = %_37wind_45stack233694233874
  %eptr248996 = getelementptr inbounds i64, i64* %cloptr248995, i64 0                ; &cloptr248995[0]
  %f249001 = ptrtoint void(i64,i64)* @lam242898 to i64                               ; fptr cast; i64(...)* -> i64
  store i64 %f249001, i64* %eptr248996                                               ; store fptr
  %arg234814 = ptrtoint i64* %cloptr248995 to i64                                    ; closure cast; i64* -> i64
  %sym238445 = add i64 0, 0                                                          ; quoted ()
  %x238446 = call i64 @prim_cons(i64 %arg234814, i64 %sym238445)                     ; call prim_cons
  %cloptr249002 = inttoptr i64 %arg234815 to i64*                                    ; closure/env cast; i64 -> i64*
  %i0ptr249003 = getelementptr inbounds i64, i64* %cloptr249002, i64 0               ; &cloptr249002[0]
  %f249005 = load i64, i64* %i0ptr249003, align 8                                    ; load; *i0ptr249003
  %fptr249004 = inttoptr i64 %f249005 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr249004(i64 %arg234815, i64 %x238446)                ; tail call
  ret void

else248991:
  %many238453 = call i64 @const_init_string(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @str249006, i32 0, i32 0)); quoted string
  %fail238451 = call i64 @prim_halt(i64 %many238453)                                 ; call prim_halt
  %sym238456 = add i64 0, 0                                                          ; quoted ()
  %cloptr249007 = inttoptr i64 %fail238451 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr249008 = getelementptr inbounds i64, i64* %cloptr249007, i64 0               ; &cloptr249007[0]
  %f249010 = load i64, i64* %i0ptr249008, align 8                                    ; load; *i0ptr249008
  %fptr249009 = inttoptr i64 %f249010 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr249009(i64 %fail238451, i64 %sym238456)             ; tail call
  ret void
}


define void @lam242902(i64 %env242903, i64 %lst233715233895234198) {
  %cont234197 = call i64 @prim_car(i64 %lst233715233895234198)                       ; call prim_car
  %lst233715233895 = call i64 @prim_cdr(i64 %lst233715233895234198)                  ; call prim_cdr
  %arg234819 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %sym237486 = add i64 0, 0                                                          ; quoted ()
  %x237487 = call i64 @prim_cons(i64 %lst233715233895, i64 %sym237486)               ; call prim_cons
  %x237488 = call i64 @prim_cons(i64 %arg234819, i64 %x237487)                       ; call prim_cons
  %cloptr249011 = inttoptr i64 %cont234197 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr249012 = getelementptr inbounds i64, i64* %cloptr249011, i64 0               ; &cloptr249011[0]
  %f249014 = load i64, i64* %i0ptr249012, align 8                                    ; load; *i0ptr249012
  %fptr249013 = inttoptr i64 %f249014 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr249013(i64 %cont234197, i64 %x237488)               ; tail call
  ret void
}


define void @lam242898(i64 %env242899, i64 %rvp238436) {
  %envptr249015 = inttoptr i64 %env242899 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr249016 = getelementptr inbounds i64, i64* %envptr249015, i64 4              ; &envptr249015[4]
  %_37wind_45stack233694233874 = load i64, i64* %envptr249016, align 8               ; load; *envptr249016
  %envptr249017 = inttoptr i64 %env242899 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr249018 = getelementptr inbounds i64, i64* %envptr249017, i64 3              ; &envptr249017[3]
  %tail233711233891 = load i64, i64* %envptr249018, align 8                          ; load; *envptr249018
  %envptr249019 = inttoptr i64 %env242899 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr249020 = getelementptr inbounds i64, i64* %envptr249019, i64 2              ; &envptr249019[2]
  %cont234158 = load i64, i64* %envptr249020, align 8                                ; load; *envptr249020
  %envptr249021 = inttoptr i64 %env242899 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr249022 = getelementptr inbounds i64, i64* %envptr249021, i64 1              ; &envptr249021[1]
  %new233710233890 = load i64, i64* %envptr249022, align 8                           ; load; *envptr249022
  %check238437 = call i64 @prim_null_63(i64 %rvp238436)                              ; call prim_null_63
  %cmp249023 = icmp eq i64 %check238437, 15                                          ; false?
  br i1 %cmp249023, label %else249025, label %then249024                             ; if

then249024:
  %msg238441 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str249026, i32 0, i32 0)); quoted string
  %abort238439 = call i64 @prim_halt(i64 %msg238441)                                 ; call prim_halt
  %sym238444 = add i64 0, 0                                                          ; quoted ()
  %cloptr249027 = inttoptr i64 %abort238439 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr249028 = getelementptr inbounds i64, i64* %cloptr249027, i64 0               ; &cloptr249027[0]
  %f249030 = load i64, i64* %i0ptr249028, align 8                                    ; load; *i0ptr249028
  %fptr249029 = inttoptr i64 %f249030 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr249029(i64 %abort238439, i64 %sym238444)            ; tail call
  ret void

else249025:
  %_95234195 = call i64 @prim_car(i64 %rvp238436)                                    ; call prim_car
  %rvp238426 = call i64 @prim_cdr(i64 %rvp238436)                                    ; call prim_cdr
  %check238427 = call i64 @prim_null_63(i64 %rvp238426)                              ; call prim_null_63
  %cmp249031 = icmp eq i64 %check238427, 15                                          ; false?
  br i1 %cmp249031, label %else249033, label %then249032                             ; if

then249032:
  %msg238431 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str249034, i32 0, i32 0)); quoted string
  %abort238429 = call i64 @prim_halt(i64 %msg238431)                                 ; call prim_halt
  %sym238434 = add i64 0, 0                                                          ; quoted ()
  %cloptr249035 = inttoptr i64 %abort238429 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr249036 = getelementptr inbounds i64, i64* %cloptr249035, i64 0               ; &cloptr249035[0]
  %f249038 = load i64, i64* %i0ptr249036, align 8                                    ; load; *i0ptr249036
  %fptr249037 = inttoptr i64 %f249038 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr249037(i64 %abort238429, i64 %sym238434)            ; tail call
  ret void

else249033:
  %rest238433 = call i64 @prim_cdr(i64 %rvp238426)                                   ; call prim_cdr
  %empty238428 = call i64 @prim_null_63(i64 %rest238433)                             ; call prim_null_63
  %cmp249039 = icmp eq i64 %empty238428, 15                                          ; false?
  br i1 %cmp249039, label %else249041, label %then249040                             ; if

then249040:
  %a234040 = call i64 @prim_car(i64 %rvp238426)                                      ; call prim_car
  %na237490 = call i64 @prim_cdr(i64 %rvp238426)                                     ; call prim_cdr
  %arg234822 = call i64 @const_init_int(i64 1)                                       ; quoted int
  %retprim234196 = call i64 @prim_make_45vector(i64 %arg234822, i64 %a234040)        ; call prim_make_45vector
  %cloptr249042 = call i64* @alloc(i64 40)                                           ; malloc
  %eptr249044 = getelementptr inbounds i64, i64* %cloptr249042, i64 1                ; &eptr249044[1]
  %eptr249045 = getelementptr inbounds i64, i64* %cloptr249042, i64 2                ; &eptr249045[2]
  %eptr249046 = getelementptr inbounds i64, i64* %cloptr249042, i64 3                ; &eptr249046[3]
  %eptr249047 = getelementptr inbounds i64, i64* %cloptr249042, i64 4                ; &eptr249047[4]
  store i64 %new233710233890, i64* %eptr249044                                       ; *eptr249044 = %new233710233890
  store i64 %cont234158, i64* %eptr249045                                            ; *eptr249045 = %cont234158
  store i64 %tail233711233891, i64* %eptr249046                                      ; *eptr249046 = %tail233711233891
  store i64 %_37wind_45stack233694233874, i64* %eptr249047                           ; *eptr249047 = %_37wind_45stack233694233874
  %eptr249043 = getelementptr inbounds i64, i64* %cloptr249042, i64 0                ; &cloptr249042[0]
  %f249048 = ptrtoint void(i64,i64)* @lam242893 to i64                               ; fptr cast; i64(...)* -> i64
  store i64 %f249048, i64* %eptr249043                                               ; store fptr
  %arg234825 = ptrtoint i64* %cloptr249042 to i64                                    ; closure cast; i64* -> i64
  %arg234824 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %sym238423 = add i64 0, 0                                                          ; quoted ()
  %x238424 = call i64 @prim_cons(i64 %retprim234196, i64 %sym238423)                 ; call prim_cons
  %x238425 = call i64 @prim_cons(i64 %arg234824, i64 %x238424)                       ; call prim_cons
  %cloptr249049 = inttoptr i64 %arg234825 to i64*                                    ; closure/env cast; i64 -> i64*
  %i0ptr249050 = getelementptr inbounds i64, i64* %cloptr249049, i64 0               ; &cloptr249049[0]
  %f249052 = load i64, i64* %i0ptr249050, align 8                                    ; load; *i0ptr249050
  %fptr249051 = inttoptr i64 %f249052 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr249051(i64 %arg234825, i64 %x238425)                ; tail call
  ret void

else249041:
  %many238432 = call i64 @const_init_string(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @str249053, i32 0, i32 0)); quoted string
  %fail238430 = call i64 @prim_halt(i64 %many238432)                                 ; call prim_halt
  %sym238435 = add i64 0, 0                                                          ; quoted ()
  %cloptr249054 = inttoptr i64 %fail238430 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr249055 = getelementptr inbounds i64, i64* %cloptr249054, i64 0               ; &cloptr249054[0]
  %f249057 = load i64, i64* %i0ptr249055, align 8                                    ; load; *i0ptr249055
  %fptr249056 = inttoptr i64 %f249057 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr249056(i64 %fail238430, i64 %sym238435)             ; tail call
  ret void
}


define void @lam242893(i64 %env242894, i64 %rvp238414) {
  %envptr249058 = inttoptr i64 %env242894 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr249059 = getelementptr inbounds i64, i64* %envptr249058, i64 4              ; &envptr249058[4]
  %_37wind_45stack233694233874 = load i64, i64* %envptr249059, align 8               ; load; *envptr249059
  %envptr249060 = inttoptr i64 %env242894 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr249061 = getelementptr inbounds i64, i64* %envptr249060, i64 3              ; &envptr249060[3]
  %tail233711233891 = load i64, i64* %envptr249061, align 8                          ; load; *envptr249061
  %envptr249062 = inttoptr i64 %env242894 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr249063 = getelementptr inbounds i64, i64* %envptr249062, i64 2              ; &envptr249062[2]
  %cont234158 = load i64, i64* %envptr249063, align 8                                ; load; *envptr249063
  %envptr249064 = inttoptr i64 %env242894 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr249065 = getelementptr inbounds i64, i64* %envptr249064, i64 1              ; &envptr249064[1]
  %new233710233890 = load i64, i64* %envptr249065, align 8                           ; load; *envptr249065
  %check238415 = call i64 @prim_null_63(i64 %rvp238414)                              ; call prim_null_63
  %cmp249066 = icmp eq i64 %check238415, 15                                          ; false?
  br i1 %cmp249066, label %else249068, label %then249067                             ; if

then249067:
  %msg238419 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str249069, i32 0, i32 0)); quoted string
  %abort238417 = call i64 @prim_halt(i64 %msg238419)                                 ; call prim_halt
  %sym238422 = add i64 0, 0                                                          ; quoted ()
  %cloptr249070 = inttoptr i64 %abort238417 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr249071 = getelementptr inbounds i64, i64* %cloptr249070, i64 0               ; &cloptr249070[0]
  %f249073 = load i64, i64* %i0ptr249071, align 8                                    ; load; *i0ptr249071
  %fptr249072 = inttoptr i64 %f249073 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr249072(i64 %abort238417, i64 %sym238422)            ; tail call
  ret void

else249068:
  %_95234180 = call i64 @prim_car(i64 %rvp238414)                                    ; call prim_car
  %rvp238404 = call i64 @prim_cdr(i64 %rvp238414)                                    ; call prim_cdr
  %check238405 = call i64 @prim_null_63(i64 %rvp238404)                              ; call prim_null_63
  %cmp249074 = icmp eq i64 %check238405, 15                                          ; false?
  br i1 %cmp249074, label %else249076, label %then249075                             ; if

then249075:
  %msg238409 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str249077, i32 0, i32 0)); quoted string
  %abort238407 = call i64 @prim_halt(i64 %msg238409)                                 ; call prim_halt
  %sym238412 = add i64 0, 0                                                          ; quoted ()
  %cloptr249078 = inttoptr i64 %abort238407 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr249079 = getelementptr inbounds i64, i64* %cloptr249078, i64 0               ; &cloptr249078[0]
  %f249081 = load i64, i64* %i0ptr249079, align 8                                    ; load; *i0ptr249079
  %fptr249080 = inttoptr i64 %f249081 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr249080(i64 %abort238407, i64 %sym238412)            ; tail call
  ret void

else249076:
  %rest238411 = call i64 @prim_cdr(i64 %rvp238404)                                   ; call prim_cdr
  %empty238406 = call i64 @prim_null_63(i64 %rest238411)                             ; call prim_null_63
  %cmp249082 = icmp eq i64 %empty238406, 15                                          ; false?
  br i1 %cmp249082, label %else249084, label %then249083                             ; if

then249083:
  %f233714233894 = call i64 @prim_car(i64 %rvp238404)                                ; call prim_car
  %na237492 = call i64 @prim_cdr(i64 %rvp238404)                                     ; call prim_cdr
  %cloptr249085 = call i64* @alloc(i64 32)                                           ; malloc
  %eptr249087 = getelementptr inbounds i64, i64* %cloptr249085, i64 1                ; &eptr249087[1]
  %eptr249088 = getelementptr inbounds i64, i64* %cloptr249085, i64 2                ; &eptr249088[2]
  %eptr249089 = getelementptr inbounds i64, i64* %cloptr249085, i64 3                ; &eptr249089[3]
  store i64 %f233714233894, i64* %eptr249087                                         ; *eptr249087 = %f233714233894
  store i64 %tail233711233891, i64* %eptr249088                                      ; *eptr249088 = %tail233711233891
  store i64 %_37wind_45stack233694233874, i64* %eptr249089                           ; *eptr249089 = %_37wind_45stack233694233874
  %eptr249086 = getelementptr inbounds i64, i64* %cloptr249085, i64 0                ; &cloptr249085[0]
  %f249090 = ptrtoint void(i64,i64)* @lam242889 to i64                               ; fptr cast; i64(...)* -> i64
  store i64 %f249090, i64* %eptr249086                                               ; store fptr
  %f233567233716233896 = ptrtoint i64* %cloptr249085 to i64                          ; closure cast; i64* -> i64
  %arg234886 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %_95t233722233902 = call i64 @prim_vector_45set_33(i64 %f233714233894, i64 %arg234886, i64 %f233567233716233896); call prim_vector_45set_33
  %arg234888 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %a234051 = call i64 @prim_vector_45ref(i64 %f233714233894, i64 %arg234888)         ; call prim_vector_45ref
  %retprim234194 = call i64 @prim_procedure_63(i64 %a234051)                         ; call prim_procedure_63
  %cloptr249091 = call i64* @alloc(i64 48)                                           ; malloc
  %eptr249093 = getelementptr inbounds i64, i64* %cloptr249091, i64 1                ; &eptr249093[1]
  %eptr249094 = getelementptr inbounds i64, i64* %cloptr249091, i64 2                ; &eptr249094[2]
  %eptr249095 = getelementptr inbounds i64, i64* %cloptr249091, i64 3                ; &eptr249095[3]
  %eptr249096 = getelementptr inbounds i64, i64* %cloptr249091, i64 4                ; &eptr249096[4]
  %eptr249097 = getelementptr inbounds i64, i64* %cloptr249091, i64 5                ; &eptr249097[5]
  store i64 %new233710233890, i64* %eptr249093                                       ; *eptr249093 = %new233710233890
  store i64 %cont234158, i64* %eptr249094                                            ; *eptr249094 = %cont234158
  store i64 %f233714233894, i64* %eptr249095                                         ; *eptr249095 = %f233714233894
  store i64 %tail233711233891, i64* %eptr249096                                      ; *eptr249096 = %tail233711233891
  store i64 %_37wind_45stack233694233874, i64* %eptr249097                           ; *eptr249097 = %_37wind_45stack233694233874
  %eptr249092 = getelementptr inbounds i64, i64* %cloptr249091, i64 0                ; &cloptr249091[0]
  %f249098 = ptrtoint void(i64,i64)* @lam242804 to i64                               ; fptr cast; i64(...)* -> i64
  store i64 %f249098, i64* %eptr249092                                               ; store fptr
  %arg234893 = ptrtoint i64* %cloptr249091 to i64                                    ; closure cast; i64* -> i64
  %arg234892 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %sym238401 = add i64 0, 0                                                          ; quoted ()
  %x238402 = call i64 @prim_cons(i64 %retprim234194, i64 %sym238401)                 ; call prim_cons
  %x238403 = call i64 @prim_cons(i64 %arg234892, i64 %x238402)                       ; call prim_cons
  %cloptr249099 = inttoptr i64 %arg234893 to i64*                                    ; closure/env cast; i64 -> i64*
  %i0ptr249100 = getelementptr inbounds i64, i64* %cloptr249099, i64 0               ; &cloptr249099[0]
  %f249102 = load i64, i64* %i0ptr249100, align 8                                    ; load; *i0ptr249100
  %fptr249101 = inttoptr i64 %f249102 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr249101(i64 %arg234893, i64 %x238403)                ; tail call
  ret void

else249084:
  %many238410 = call i64 @const_init_string(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @str249103, i32 0, i32 0)); quoted string
  %fail238408 = call i64 @prim_halt(i64 %many238410)                                 ; call prim_halt
  %sym238413 = add i64 0, 0                                                          ; quoted ()
  %cloptr249104 = inttoptr i64 %fail238408 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr249105 = getelementptr inbounds i64, i64* %cloptr249104, i64 0               ; &cloptr249104[0]
  %f249107 = load i64, i64* %i0ptr249105, align 8                                    ; load; *i0ptr249105
  %fptr249106 = inttoptr i64 %f249107 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr249106(i64 %fail238408, i64 %sym238413)             ; tail call
  ret void
}


define void @lam242889(i64 %env242890, i64 %rvp237663) {
  %envptr249108 = inttoptr i64 %env242890 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr249109 = getelementptr inbounds i64, i64* %envptr249108, i64 3              ; &envptr249108[3]
  %_37wind_45stack233694233874 = load i64, i64* %envptr249109, align 8               ; load; *envptr249109
  %envptr249110 = inttoptr i64 %env242890 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr249111 = getelementptr inbounds i64, i64* %envptr249110, i64 2              ; &envptr249110[2]
  %tail233711233891 = load i64, i64* %envptr249111, align 8                          ; load; *envptr249111
  %envptr249112 = inttoptr i64 %env242890 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr249113 = getelementptr inbounds i64, i64* %envptr249112, i64 1              ; &envptr249112[1]
  %f233714233894 = load i64, i64* %envptr249113, align 8                             ; load; *envptr249113
  %check237664 = call i64 @prim_null_63(i64 %rvp237663)                              ; call prim_null_63
  %cmp249114 = icmp eq i64 %check237664, 15                                          ; false?
  br i1 %cmp249114, label %else249116, label %then249115                             ; if

then249115:
  %msg237668 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str249117, i32 0, i32 0)); quoted string
  %abort237666 = call i64 @prim_halt(i64 %msg237668)                                 ; call prim_halt
  %sym237671 = add i64 0, 0                                                          ; quoted ()
  %cloptr249118 = inttoptr i64 %abort237666 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr249119 = getelementptr inbounds i64, i64* %cloptr249118, i64 0               ; &cloptr249118[0]
  %f249121 = load i64, i64* %i0ptr249119, align 8                                    ; load; *i0ptr249119
  %fptr249120 = inttoptr i64 %f249121 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr249120(i64 %abort237666, i64 %sym237671)            ; tail call
  ret void

else249116:
  %cont234181 = call i64 @prim_car(i64 %rvp237663)                                   ; call prim_car
  %rvp237653 = call i64 @prim_cdr(i64 %rvp237663)                                    ; call prim_cdr
  %check237654 = call i64 @prim_null_63(i64 %rvp237653)                              ; call prim_null_63
  %cmp249122 = icmp eq i64 %check237654, 15                                          ; false?
  br i1 %cmp249122, label %else249124, label %then249123                             ; if

then249123:
  %msg237658 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str249125, i32 0, i32 0)); quoted string
  %abort237656 = call i64 @prim_halt(i64 %msg237658)                                 ; call prim_halt
  %sym237661 = add i64 0, 0                                                          ; quoted ()
  %cloptr249126 = inttoptr i64 %abort237656 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr249127 = getelementptr inbounds i64, i64* %cloptr249126, i64 0               ; &cloptr249126[0]
  %f249129 = load i64, i64* %i0ptr249127, align 8                                    ; load; *i0ptr249127
  %fptr249128 = inttoptr i64 %f249129 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr249128(i64 %abort237656, i64 %sym237661)            ; tail call
  ret void

else249124:
  %rest237660 = call i64 @prim_cdr(i64 %rvp237653)                                   ; call prim_cdr
  %empty237655 = call i64 @prim_null_63(i64 %rest237660)                             ; call prim_null_63
  %cmp249130 = icmp eq i64 %empty237655, 15                                          ; false?
  br i1 %cmp249130, label %else249132, label %then249131                             ; if

then249131:
  %l233717233897 = call i64 @prim_car(i64 %rvp237653)                                ; call prim_car
  %na237494 = call i64 @prim_cdr(i64 %rvp237653)                                     ; call prim_cdr
  %a234041 = call i64 @prim_eq_63(i64 %l233717233897, i64 %tail233711233891)         ; call prim_eq_63
  %a234042 = call i64 @prim_not(i64 %a234041)                                        ; call prim_not
  %cmp249133 = icmp eq i64 %a234042, 15                                              ; false?
  br i1 %cmp249133, label %else249135, label %then249134                             ; if

then249134:
  %a234043 = call i64 @prim_cdr(i64 %l233717233897)                                  ; call prim_cdr
  %arg234831 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %retprim234190 = call i64 @prim_vector_45set_33(i64 %_37wind_45stack233694233874, i64 %arg234831, i64 %a234043); call prim_vector_45set_33
  %cloptr249136 = call i64* @alloc(i64 32)                                           ; malloc
  %eptr249138 = getelementptr inbounds i64, i64* %cloptr249136, i64 1                ; &eptr249138[1]
  %eptr249139 = getelementptr inbounds i64, i64* %cloptr249136, i64 2                ; &eptr249139[2]
  %eptr249140 = getelementptr inbounds i64, i64* %cloptr249136, i64 3                ; &eptr249140[3]
  store i64 %l233717233897, i64* %eptr249138                                         ; *eptr249138 = %l233717233897
  store i64 %cont234181, i64* %eptr249139                                            ; *eptr249139 = %cont234181
  store i64 %f233714233894, i64* %eptr249140                                         ; *eptr249140 = %f233714233894
  %eptr249137 = getelementptr inbounds i64, i64* %cloptr249136, i64 0                ; &cloptr249136[0]
  %f249141 = ptrtoint void(i64,i64)* @lam242882 to i64                               ; fptr cast; i64(...)* -> i64
  store i64 %f249141, i64* %eptr249137                                               ; store fptr
  %arg234835 = ptrtoint i64* %cloptr249136 to i64                                    ; closure cast; i64* -> i64
  %arg234834 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %sym237647 = add i64 0, 0                                                          ; quoted ()
  %x237648 = call i64 @prim_cons(i64 %retprim234190, i64 %sym237647)                 ; call prim_cons
  %x237649 = call i64 @prim_cons(i64 %arg234834, i64 %x237648)                       ; call prim_cons
  %cloptr249142 = inttoptr i64 %arg234835 to i64*                                    ; closure/env cast; i64 -> i64*
  %i0ptr249143 = getelementptr inbounds i64, i64* %cloptr249142, i64 0               ; &cloptr249142[0]
  %f249145 = load i64, i64* %i0ptr249143, align 8                                    ; load; *i0ptr249143
  %fptr249144 = inttoptr i64 %f249145 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr249144(i64 %arg234835, i64 %x237649)                ; tail call
  ret void

else249135:
  %retprim234191 = call i64 @prim_void()                                             ; call prim_void
  %arg234883 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %sym237650 = add i64 0, 0                                                          ; quoted ()
  %x237651 = call i64 @prim_cons(i64 %retprim234191, i64 %sym237650)                 ; call prim_cons
  %x237652 = call i64 @prim_cons(i64 %arg234883, i64 %x237651)                       ; call prim_cons
  %cloptr249146 = inttoptr i64 %cont234181 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr249147 = getelementptr inbounds i64, i64* %cloptr249146, i64 0               ; &cloptr249146[0]
  %f249149 = load i64, i64* %i0ptr249147, align 8                                    ; load; *i0ptr249147
  %fptr249148 = inttoptr i64 %f249149 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr249148(i64 %cont234181, i64 %x237652)               ; tail call
  ret void

else249132:
  %many237659 = call i64 @const_init_string(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @str249150, i32 0, i32 0)); quoted string
  %fail237657 = call i64 @prim_halt(i64 %many237659)                                 ; call prim_halt
  %sym237662 = add i64 0, 0                                                          ; quoted ()
  %cloptr249151 = inttoptr i64 %fail237657 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr249152 = getelementptr inbounds i64, i64* %cloptr249151, i64 0               ; &cloptr249151[0]
  %f249154 = load i64, i64* %i0ptr249152, align 8                                    ; load; *i0ptr249152
  %fptr249153 = inttoptr i64 %f249154 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr249153(i64 %fail237657, i64 %sym237662)             ; tail call
  ret void
}


define void @lam242882(i64 %env242883, i64 %rvp237638) {
  %envptr249155 = inttoptr i64 %env242883 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr249156 = getelementptr inbounds i64, i64* %envptr249155, i64 3              ; &envptr249155[3]
  %f233714233894 = load i64, i64* %envptr249156, align 8                             ; load; *envptr249156
  %envptr249157 = inttoptr i64 %env242883 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr249158 = getelementptr inbounds i64, i64* %envptr249157, i64 2              ; &envptr249157[2]
  %cont234181 = load i64, i64* %envptr249158, align 8                                ; load; *envptr249158
  %envptr249159 = inttoptr i64 %env242883 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr249160 = getelementptr inbounds i64, i64* %envptr249159, i64 1              ; &envptr249159[1]
  %l233717233897 = load i64, i64* %envptr249160, align 8                             ; load; *envptr249160
  %check237639 = call i64 @prim_null_63(i64 %rvp237638)                              ; call prim_null_63
  %cmp249161 = icmp eq i64 %check237639, 15                                          ; false?
  br i1 %cmp249161, label %else249163, label %then249162                             ; if

then249162:
  %msg237643 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str249164, i32 0, i32 0)); quoted string
  %abort237641 = call i64 @prim_halt(i64 %msg237643)                                 ; call prim_halt
  %sym237646 = add i64 0, 0                                                          ; quoted ()
  %cloptr249165 = inttoptr i64 %abort237641 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr249166 = getelementptr inbounds i64, i64* %cloptr249165, i64 0               ; &cloptr249165[0]
  %f249168 = load i64, i64* %i0ptr249166, align 8                                    ; load; *i0ptr249166
  %fptr249167 = inttoptr i64 %f249168 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr249167(i64 %abort237641, i64 %sym237646)            ; tail call
  ret void

else249163:
  %_95234182 = call i64 @prim_car(i64 %rvp237638)                                    ; call prim_car
  %rvp237628 = call i64 @prim_cdr(i64 %rvp237638)                                    ; call prim_cdr
  %check237629 = call i64 @prim_null_63(i64 %rvp237628)                              ; call prim_null_63
  %cmp249169 = icmp eq i64 %check237629, 15                                          ; false?
  br i1 %cmp249169, label %else249171, label %then249170                             ; if

then249170:
  %msg237633 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str249172, i32 0, i32 0)); quoted string
  %abort237631 = call i64 @prim_halt(i64 %msg237633)                                 ; call prim_halt
  %sym237636 = add i64 0, 0                                                          ; quoted ()
  %cloptr249173 = inttoptr i64 %abort237631 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr249174 = getelementptr inbounds i64, i64* %cloptr249173, i64 0               ; &cloptr249173[0]
  %f249176 = load i64, i64* %i0ptr249174, align 8                                    ; load; *i0ptr249174
  %fptr249175 = inttoptr i64 %f249176 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr249175(i64 %abort237631, i64 %sym237636)            ; tail call
  ret void

else249171:
  %rest237635 = call i64 @prim_cdr(i64 %rvp237628)                                   ; call prim_cdr
  %empty237630 = call i64 @prim_null_63(i64 %rest237635)                             ; call prim_null_63
  %cmp249177 = icmp eq i64 %empty237630, 15                                          ; false?
  br i1 %cmp249177, label %else249179, label %then249178                             ; if

then249178:
  %_95t233718233898 = call i64 @prim_car(i64 %rvp237628)                             ; call prim_car
  %na237496 = call i64 @prim_cdr(i64 %rvp237628)                                     ; call prim_cdr
  %a234044 = call i64 @prim_car(i64 %l233717233897)                                  ; call prim_car
  %a234045 = call i64 @prim_cdr(i64 %a234044)                                        ; call prim_cdr
  %retprim234189 = call i64 @prim_procedure_63(i64 %a234045)                         ; call prim_procedure_63
  %cloptr249180 = call i64* @alloc(i64 32)                                           ; malloc
  %eptr249182 = getelementptr inbounds i64, i64* %cloptr249180, i64 1                ; &eptr249182[1]
  %eptr249183 = getelementptr inbounds i64, i64* %cloptr249180, i64 2                ; &eptr249183[2]
  %eptr249184 = getelementptr inbounds i64, i64* %cloptr249180, i64 3                ; &eptr249184[3]
  store i64 %l233717233897, i64* %eptr249182                                         ; *eptr249182 = %l233717233897
  store i64 %cont234181, i64* %eptr249183                                            ; *eptr249183 = %cont234181
  store i64 %f233714233894, i64* %eptr249184                                         ; *eptr249184 = %f233714233894
  %eptr249181 = getelementptr inbounds i64, i64* %cloptr249180, i64 0                ; &cloptr249180[0]
  %f249185 = ptrtoint void(i64,i64)* @lam242878 to i64                               ; fptr cast; i64(...)* -> i64
  store i64 %f249185, i64* %eptr249181                                               ; store fptr
  %arg234841 = ptrtoint i64* %cloptr249180 to i64                                    ; closure cast; i64* -> i64
  %arg234840 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %sym237625 = add i64 0, 0                                                          ; quoted ()
  %x237626 = call i64 @prim_cons(i64 %retprim234189, i64 %sym237625)                 ; call prim_cons
  %x237627 = call i64 @prim_cons(i64 %arg234840, i64 %x237626)                       ; call prim_cons
  %cloptr249186 = inttoptr i64 %arg234841 to i64*                                    ; closure/env cast; i64 -> i64*
  %i0ptr249187 = getelementptr inbounds i64, i64* %cloptr249186, i64 0               ; &cloptr249186[0]
  %f249189 = load i64, i64* %i0ptr249187, align 8                                    ; load; *i0ptr249187
  %fptr249188 = inttoptr i64 %f249189 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr249188(i64 %arg234841, i64 %x237627)                ; tail call
  ret void

else249179:
  %many237634 = call i64 @const_init_string(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @str249190, i32 0, i32 0)); quoted string
  %fail237632 = call i64 @prim_halt(i64 %many237634)                                 ; call prim_halt
  %sym237637 = add i64 0, 0                                                          ; quoted ()
  %cloptr249191 = inttoptr i64 %fail237632 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr249192 = getelementptr inbounds i64, i64* %cloptr249191, i64 0               ; &cloptr249191[0]
  %f249194 = load i64, i64* %i0ptr249192, align 8                                    ; load; *i0ptr249192
  %fptr249193 = inttoptr i64 %f249194 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr249193(i64 %fail237632, i64 %sym237637)             ; tail call
  ret void
}


define void @lam242878(i64 %env242879, i64 %rvp237616) {
  %envptr249195 = inttoptr i64 %env242879 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr249196 = getelementptr inbounds i64, i64* %envptr249195, i64 3              ; &envptr249195[3]
  %f233714233894 = load i64, i64* %envptr249196, align 8                             ; load; *envptr249196
  %envptr249197 = inttoptr i64 %env242879 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr249198 = getelementptr inbounds i64, i64* %envptr249197, i64 2              ; &envptr249197[2]
  %cont234181 = load i64, i64* %envptr249198, align 8                                ; load; *envptr249198
  %envptr249199 = inttoptr i64 %env242879 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr249200 = getelementptr inbounds i64, i64* %envptr249199, i64 1              ; &envptr249199[1]
  %l233717233897 = load i64, i64* %envptr249200, align 8                             ; load; *envptr249200
  %check237617 = call i64 @prim_null_63(i64 %rvp237616)                              ; call prim_null_63
  %cmp249201 = icmp eq i64 %check237617, 15                                          ; false?
  br i1 %cmp249201, label %else249203, label %then249202                             ; if

then249202:
  %msg237621 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str249204, i32 0, i32 0)); quoted string
  %abort237619 = call i64 @prim_halt(i64 %msg237621)                                 ; call prim_halt
  %sym237624 = add i64 0, 0                                                          ; quoted ()
  %cloptr249205 = inttoptr i64 %abort237619 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr249206 = getelementptr inbounds i64, i64* %cloptr249205, i64 0               ; &cloptr249205[0]
  %f249208 = load i64, i64* %i0ptr249206, align 8                                    ; load; *i0ptr249206
  %fptr249207 = inttoptr i64 %f249208 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr249207(i64 %abort237619, i64 %sym237624)            ; tail call
  ret void

else249203:
  %_95234187 = call i64 @prim_car(i64 %rvp237616)                                    ; call prim_car
  %rvp237606 = call i64 @prim_cdr(i64 %rvp237616)                                    ; call prim_cdr
  %check237607 = call i64 @prim_null_63(i64 %rvp237606)                              ; call prim_null_63
  %cmp249209 = icmp eq i64 %check237607, 15                                          ; false?
  br i1 %cmp249209, label %else249211, label %then249210                             ; if

then249210:
  %msg237611 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str249212, i32 0, i32 0)); quoted string
  %abort237609 = call i64 @prim_halt(i64 %msg237611)                                 ; call prim_halt
  %sym237614 = add i64 0, 0                                                          ; quoted ()
  %cloptr249213 = inttoptr i64 %abort237609 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr249214 = getelementptr inbounds i64, i64* %cloptr249213, i64 0               ; &cloptr249213[0]
  %f249216 = load i64, i64* %i0ptr249214, align 8                                    ; load; *i0ptr249214
  %fptr249215 = inttoptr i64 %f249216 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr249215(i64 %abort237609, i64 %sym237614)            ; tail call
  ret void

else249211:
  %rest237613 = call i64 @prim_cdr(i64 %rvp237606)                                   ; call prim_cdr
  %empty237608 = call i64 @prim_null_63(i64 %rest237613)                             ; call prim_null_63
  %cmp249217 = icmp eq i64 %empty237608, 15                                          ; false?
  br i1 %cmp249217, label %else249219, label %then249218                             ; if

then249218:
  %check233568233720233900 = call i64 @prim_car(i64 %rvp237606)                      ; call prim_car
  %na237498 = call i64 @prim_cdr(i64 %rvp237606)                                     ; call prim_cdr
  %cmp249220 = icmp eq i64 %check233568233720233900, 15                              ; false?
  br i1 %cmp249220, label %else249222, label %then249221                             ; if

then249221:
  %a234046 = call i64 @prim_car(i64 %l233717233897)                                  ; call prim_car
  %a234047 = call i64 @prim_cdr(i64 %a234046)                                        ; call prim_cdr
  %cloptr249223 = call i64* @alloc(i64 32)                                           ; malloc
  %eptr249225 = getelementptr inbounds i64, i64* %cloptr249223, i64 1                ; &eptr249225[1]
  %eptr249226 = getelementptr inbounds i64, i64* %cloptr249223, i64 2                ; &eptr249226[2]
  %eptr249227 = getelementptr inbounds i64, i64* %cloptr249223, i64 3                ; &eptr249227[3]
  store i64 %l233717233897, i64* %eptr249225                                         ; *eptr249225 = %l233717233897
  store i64 %cont234181, i64* %eptr249226                                            ; *eptr249226 = %cont234181
  store i64 %f233714233894, i64* %eptr249227                                         ; *eptr249227 = %f233714233894
  %eptr249224 = getelementptr inbounds i64, i64* %cloptr249223, i64 0                ; &cloptr249223[0]
  %f249228 = ptrtoint void(i64,i64)* @lam242847 to i64                               ; fptr cast; i64(...)* -> i64
  store i64 %f249228, i64* %eptr249224                                               ; store fptr
  %arg234844 = ptrtoint i64* %cloptr249223 to i64                                    ; closure cast; i64* -> i64
  %sym237550 = add i64 0, 0                                                          ; quoted ()
  %x237551 = call i64 @prim_cons(i64 %arg234844, i64 %sym237550)                     ; call prim_cons
  %cloptr249229 = inttoptr i64 %a234047 to i64*                                      ; closure/env cast; i64 -> i64*
  %i0ptr249230 = getelementptr inbounds i64, i64* %cloptr249229, i64 0               ; &cloptr249229[0]
  %f249232 = load i64, i64* %i0ptr249230, align 8                                    ; load; *i0ptr249230
  %fptr249231 = inttoptr i64 %f249232 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr249231(i64 %a234047, i64 %x237551)                  ; tail call
  ret void

else249222:
  %arg234862 = call i64 @const_init_string(i8* getelementptr inbounds ([71 x i8], [71 x i8]* @str249233, i32 0, i32 0)); quoted string
  %retprim234188 = call i64 @prim_halt(i64 %arg234862)                               ; call prim_halt
  %cloptr249234 = call i64* @alloc(i64 32)                                           ; malloc
  %eptr249236 = getelementptr inbounds i64, i64* %cloptr249234, i64 1                ; &eptr249236[1]
  %eptr249237 = getelementptr inbounds i64, i64* %cloptr249234, i64 2                ; &eptr249237[2]
  %eptr249238 = getelementptr inbounds i64, i64* %cloptr249234, i64 3                ; &eptr249238[3]
  store i64 %l233717233897, i64* %eptr249236                                         ; *eptr249236 = %l233717233897
  store i64 %cont234181, i64* %eptr249237                                            ; *eptr249237 = %cont234181
  store i64 %f233714233894, i64* %eptr249238                                         ; *eptr249238 = %f233714233894
  %eptr249235 = getelementptr inbounds i64, i64* %cloptr249234, i64 0                ; &cloptr249234[0]
  %f249239 = ptrtoint void(i64,i64)* @lam242873 to i64                               ; fptr cast; i64(...)* -> i64
  store i64 %f249239, i64* %eptr249235                                               ; store fptr
  %arg234865 = ptrtoint i64* %cloptr249234 to i64                                    ; closure cast; i64* -> i64
  %arg234864 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %sym237603 = add i64 0, 0                                                          ; quoted ()
  %x237604 = call i64 @prim_cons(i64 %retprim234188, i64 %sym237603)                 ; call prim_cons
  %x237605 = call i64 @prim_cons(i64 %arg234864, i64 %x237604)                       ; call prim_cons
  %cloptr249240 = inttoptr i64 %arg234865 to i64*                                    ; closure/env cast; i64 -> i64*
  %i0ptr249241 = getelementptr inbounds i64, i64* %cloptr249240, i64 0               ; &cloptr249240[0]
  %f249243 = load i64, i64* %i0ptr249241, align 8                                    ; load; *i0ptr249241
  %fptr249242 = inttoptr i64 %f249243 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr249242(i64 %arg234865, i64 %x237605)                ; tail call
  ret void

else249219:
  %many237612 = call i64 @const_init_string(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @str249244, i32 0, i32 0)); quoted string
  %fail237610 = call i64 @prim_halt(i64 %many237612)                                 ; call prim_halt
  %sym237615 = add i64 0, 0                                                          ; quoted ()
  %cloptr249245 = inttoptr i64 %fail237610 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr249246 = getelementptr inbounds i64, i64* %cloptr249245, i64 0               ; &cloptr249245[0]
  %f249248 = load i64, i64* %i0ptr249246, align 8                                    ; load; *i0ptr249246
  %fptr249247 = inttoptr i64 %f249248 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr249247(i64 %fail237610, i64 %sym237615)             ; tail call
  ret void
}


define void @lam242873(i64 %env242874, i64 %rvp237594) {
  %envptr249249 = inttoptr i64 %env242874 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr249250 = getelementptr inbounds i64, i64* %envptr249249, i64 3              ; &envptr249249[3]
  %f233714233894 = load i64, i64* %envptr249250, align 8                             ; load; *envptr249250
  %envptr249251 = inttoptr i64 %env242874 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr249252 = getelementptr inbounds i64, i64* %envptr249251, i64 2              ; &envptr249251[2]
  %cont234181 = load i64, i64* %envptr249252, align 8                                ; load; *envptr249252
  %envptr249253 = inttoptr i64 %env242874 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr249254 = getelementptr inbounds i64, i64* %envptr249253, i64 1              ; &envptr249253[1]
  %l233717233897 = load i64, i64* %envptr249254, align 8                             ; load; *envptr249254
  %check237595 = call i64 @prim_null_63(i64 %rvp237594)                              ; call prim_null_63
  %cmp249255 = icmp eq i64 %check237595, 15                                          ; false?
  br i1 %cmp249255, label %else249257, label %then249256                             ; if

then249256:
  %msg237599 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str249258, i32 0, i32 0)); quoted string
  %abort237597 = call i64 @prim_halt(i64 %msg237599)                                 ; call prim_halt
  %sym237602 = add i64 0, 0                                                          ; quoted ()
  %cloptr249259 = inttoptr i64 %abort237597 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr249260 = getelementptr inbounds i64, i64* %cloptr249259, i64 0               ; &cloptr249259[0]
  %f249262 = load i64, i64* %i0ptr249260, align 8                                    ; load; *i0ptr249260
  %fptr249261 = inttoptr i64 %f249262 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr249261(i64 %abort237597, i64 %sym237602)            ; tail call
  ret void

else249257:
  %_95234183 = call i64 @prim_car(i64 %rvp237594)                                    ; call prim_car
  %rvp237584 = call i64 @prim_cdr(i64 %rvp237594)                                    ; call prim_cdr
  %check237585 = call i64 @prim_null_63(i64 %rvp237584)                              ; call prim_null_63
  %cmp249263 = icmp eq i64 %check237585, 15                                          ; false?
  br i1 %cmp249263, label %else249265, label %then249264                             ; if

then249264:
  %msg237589 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str249266, i32 0, i32 0)); quoted string
  %abort237587 = call i64 @prim_halt(i64 %msg237589)                                 ; call prim_halt
  %sym237592 = add i64 0, 0                                                          ; quoted ()
  %cloptr249267 = inttoptr i64 %abort237587 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr249268 = getelementptr inbounds i64, i64* %cloptr249267, i64 0               ; &cloptr249267[0]
  %f249270 = load i64, i64* %i0ptr249268, align 8                                    ; load; *i0ptr249268
  %fptr249269 = inttoptr i64 %f249270 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr249269(i64 %abort237587, i64 %sym237592)            ; tail call
  ret void

else249265:
  %rest237591 = call i64 @prim_cdr(i64 %rvp237584)                                   ; call prim_cdr
  %empty237586 = call i64 @prim_null_63(i64 %rest237591)                             ; call prim_null_63
  %cmp249271 = icmp eq i64 %empty237586, 15                                          ; false?
  br i1 %cmp249271, label %else249273, label %then249272                             ; if

then249272:
  %_95t233719233899 = call i64 @prim_car(i64 %rvp237584)                             ; call prim_car
  %na237553 = call i64 @prim_cdr(i64 %rvp237584)                                     ; call prim_cdr
  %arg234866 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %a234048 = call i64 @prim_vector_45ref(i64 %f233714233894, i64 %arg234866)         ; call prim_vector_45ref
  %retprim234186 = call i64 @prim_procedure_63(i64 %a234048)                         ; call prim_procedure_63
  %cloptr249274 = call i64* @alloc(i64 32)                                           ; malloc
  %eptr249276 = getelementptr inbounds i64, i64* %cloptr249274, i64 1                ; &eptr249276[1]
  %eptr249277 = getelementptr inbounds i64, i64* %cloptr249274, i64 2                ; &eptr249277[2]
  %eptr249278 = getelementptr inbounds i64, i64* %cloptr249274, i64 3                ; &eptr249278[3]
  store i64 %l233717233897, i64* %eptr249276                                         ; *eptr249276 = %l233717233897
  store i64 %cont234181, i64* %eptr249277                                            ; *eptr249277 = %cont234181
  store i64 %f233714233894, i64* %eptr249278                                         ; *eptr249278 = %f233714233894
  %eptr249275 = getelementptr inbounds i64, i64* %cloptr249274, i64 0                ; &cloptr249274[0]
  %f249279 = ptrtoint void(i64,i64)* @lam242868 to i64                               ; fptr cast; i64(...)* -> i64
  store i64 %f249279, i64* %eptr249275                                               ; store fptr
  %arg234871 = ptrtoint i64* %cloptr249274 to i64                                    ; closure cast; i64* -> i64
  %arg234870 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %sym237581 = add i64 0, 0                                                          ; quoted ()
  %x237582 = call i64 @prim_cons(i64 %retprim234186, i64 %sym237581)                 ; call prim_cons
  %x237583 = call i64 @prim_cons(i64 %arg234870, i64 %x237582)                       ; call prim_cons
  %cloptr249280 = inttoptr i64 %arg234871 to i64*                                    ; closure/env cast; i64 -> i64*
  %i0ptr249281 = getelementptr inbounds i64, i64* %cloptr249280, i64 0               ; &cloptr249280[0]
  %f249283 = load i64, i64* %i0ptr249281, align 8                                    ; load; *i0ptr249281
  %fptr249282 = inttoptr i64 %f249283 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr249282(i64 %arg234871, i64 %x237583)                ; tail call
  ret void

else249273:
  %many237590 = call i64 @const_init_string(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @str249284, i32 0, i32 0)); quoted string
  %fail237588 = call i64 @prim_halt(i64 %many237590)                                 ; call prim_halt
  %sym237593 = add i64 0, 0                                                          ; quoted ()
  %cloptr249285 = inttoptr i64 %fail237588 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr249286 = getelementptr inbounds i64, i64* %cloptr249285, i64 0               ; &cloptr249285[0]
  %f249288 = load i64, i64* %i0ptr249286, align 8                                    ; load; *i0ptr249286
  %fptr249287 = inttoptr i64 %f249288 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr249287(i64 %fail237588, i64 %sym237593)             ; tail call
  ret void
}


define void @lam242868(i64 %env242869, i64 %rvp237572) {
  %envptr249289 = inttoptr i64 %env242869 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr249290 = getelementptr inbounds i64, i64* %envptr249289, i64 3              ; &envptr249289[3]
  %f233714233894 = load i64, i64* %envptr249290, align 8                             ; load; *envptr249290
  %envptr249291 = inttoptr i64 %env242869 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr249292 = getelementptr inbounds i64, i64* %envptr249291, i64 2              ; &envptr249291[2]
  %cont234181 = load i64, i64* %envptr249292, align 8                                ; load; *envptr249292
  %envptr249293 = inttoptr i64 %env242869 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr249294 = getelementptr inbounds i64, i64* %envptr249293, i64 1              ; &envptr249293[1]
  %l233717233897 = load i64, i64* %envptr249294, align 8                             ; load; *envptr249294
  %check237573 = call i64 @prim_null_63(i64 %rvp237572)                              ; call prim_null_63
  %cmp249295 = icmp eq i64 %check237573, 15                                          ; false?
  br i1 %cmp249295, label %else249297, label %then249296                             ; if

then249296:
  %msg237577 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str249298, i32 0, i32 0)); quoted string
  %abort237575 = call i64 @prim_halt(i64 %msg237577)                                 ; call prim_halt
  %sym237580 = add i64 0, 0                                                          ; quoted ()
  %cloptr249299 = inttoptr i64 %abort237575 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr249300 = getelementptr inbounds i64, i64* %cloptr249299, i64 0               ; &cloptr249299[0]
  %f249302 = load i64, i64* %i0ptr249300, align 8                                    ; load; *i0ptr249300
  %fptr249301 = inttoptr i64 %f249302 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr249301(i64 %abort237575, i64 %sym237580)            ; tail call
  ret void

else249297:
  %_95234184 = call i64 @prim_car(i64 %rvp237572)                                    ; call prim_car
  %rvp237562 = call i64 @prim_cdr(i64 %rvp237572)                                    ; call prim_cdr
  %check237563 = call i64 @prim_null_63(i64 %rvp237562)                              ; call prim_null_63
  %cmp249303 = icmp eq i64 %check237563, 15                                          ; false?
  br i1 %cmp249303, label %else249305, label %then249304                             ; if

then249304:
  %msg237567 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str249306, i32 0, i32 0)); quoted string
  %abort237565 = call i64 @prim_halt(i64 %msg237567)                                 ; call prim_halt
  %sym237570 = add i64 0, 0                                                          ; quoted ()
  %cloptr249307 = inttoptr i64 %abort237565 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr249308 = getelementptr inbounds i64, i64* %cloptr249307, i64 0               ; &cloptr249307[0]
  %f249310 = load i64, i64* %i0ptr249308, align 8                                    ; load; *i0ptr249308
  %fptr249309 = inttoptr i64 %f249310 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr249309(i64 %abort237565, i64 %sym237570)            ; tail call
  ret void

else249305:
  %rest237569 = call i64 @prim_cdr(i64 %rvp237562)                                   ; call prim_cdr
  %empty237564 = call i64 @prim_null_63(i64 %rest237569)                             ; call prim_null_63
  %cmp249311 = icmp eq i64 %empty237564, 15                                          ; false?
  br i1 %cmp249311, label %else249313, label %then249312                             ; if

then249312:
  %check233569233721233901 = call i64 @prim_car(i64 %rvp237562)                      ; call prim_car
  %na237555 = call i64 @prim_cdr(i64 %rvp237562)                                     ; call prim_cdr
  %cmp249314 = icmp eq i64 %check233569233721233901, 15                              ; false?
  br i1 %cmp249314, label %else249316, label %then249315                             ; if

then249315:
  %arg234872 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %a234049 = call i64 @prim_vector_45ref(i64 %f233714233894, i64 %arg234872)         ; call prim_vector_45ref
  %a234050 = call i64 @prim_cdr(i64 %l233717233897)                                  ; call prim_cdr
  %sym237556 = add i64 0, 0                                                          ; quoted ()
  %x237557 = call i64 @prim_cons(i64 %a234050, i64 %sym237556)                       ; call prim_cons
  %x237558 = call i64 @prim_cons(i64 %cont234181, i64 %x237557)                      ; call prim_cons
  %cloptr249317 = inttoptr i64 %a234049 to i64*                                      ; closure/env cast; i64 -> i64*
  %i0ptr249318 = getelementptr inbounds i64, i64* %cloptr249317, i64 0               ; &cloptr249317[0]
  %f249320 = load i64, i64* %i0ptr249318, align 8                                    ; load; *i0ptr249318
  %fptr249319 = inttoptr i64 %f249320 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr249319(i64 %a234049, i64 %x237558)                  ; tail call
  ret void

else249316:
  %arg234878 = call i64 @const_init_string(i8* getelementptr inbounds ([67 x i8], [67 x i8]* @str249321, i32 0, i32 0)); quoted string
  %retprim234185 = call i64 @prim_halt(i64 %arg234878)                               ; call prim_halt
  %arg234880 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %sym237559 = add i64 0, 0                                                          ; quoted ()
  %x237560 = call i64 @prim_cons(i64 %retprim234185, i64 %sym237559)                 ; call prim_cons
  %x237561 = call i64 @prim_cons(i64 %arg234880, i64 %x237560)                       ; call prim_cons
  %cloptr249322 = inttoptr i64 %cont234181 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr249323 = getelementptr inbounds i64, i64* %cloptr249322, i64 0               ; &cloptr249322[0]
  %f249325 = load i64, i64* %i0ptr249323, align 8                                    ; load; *i0ptr249323
  %fptr249324 = inttoptr i64 %f249325 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr249324(i64 %cont234181, i64 %x237561)               ; tail call
  ret void

else249313:
  %many237568 = call i64 @const_init_string(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @str249326, i32 0, i32 0)); quoted string
  %fail237566 = call i64 @prim_halt(i64 %many237568)                                 ; call prim_halt
  %sym237571 = add i64 0, 0                                                          ; quoted ()
  %cloptr249327 = inttoptr i64 %fail237566 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr249328 = getelementptr inbounds i64, i64* %cloptr249327, i64 0               ; &cloptr249327[0]
  %f249330 = load i64, i64* %i0ptr249328, align 8                                    ; load; *i0ptr249328
  %fptr249329 = inttoptr i64 %f249330 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr249329(i64 %fail237566, i64 %sym237571)             ; tail call
  ret void
}


define void @lam242847(i64 %env242848, i64 %rvp237541) {
  %envptr249331 = inttoptr i64 %env242848 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr249332 = getelementptr inbounds i64, i64* %envptr249331, i64 3              ; &envptr249331[3]
  %f233714233894 = load i64, i64* %envptr249332, align 8                             ; load; *envptr249332
  %envptr249333 = inttoptr i64 %env242848 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr249334 = getelementptr inbounds i64, i64* %envptr249333, i64 2              ; &envptr249333[2]
  %cont234181 = load i64, i64* %envptr249334, align 8                                ; load; *envptr249334
  %envptr249335 = inttoptr i64 %env242848 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr249336 = getelementptr inbounds i64, i64* %envptr249335, i64 1              ; &envptr249335[1]
  %l233717233897 = load i64, i64* %envptr249336, align 8                             ; load; *envptr249336
  %check237542 = call i64 @prim_null_63(i64 %rvp237541)                              ; call prim_null_63
  %cmp249337 = icmp eq i64 %check237542, 15                                          ; false?
  br i1 %cmp249337, label %else249339, label %then249338                             ; if

then249338:
  %msg237546 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str249340, i32 0, i32 0)); quoted string
  %abort237544 = call i64 @prim_halt(i64 %msg237546)                                 ; call prim_halt
  %sym237549 = add i64 0, 0                                                          ; quoted ()
  %cloptr249341 = inttoptr i64 %abort237544 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr249342 = getelementptr inbounds i64, i64* %cloptr249341, i64 0               ; &cloptr249341[0]
  %f249344 = load i64, i64* %i0ptr249342, align 8                                    ; load; *i0ptr249342
  %fptr249343 = inttoptr i64 %f249344 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr249343(i64 %abort237544, i64 %sym237549)            ; tail call
  ret void

else249339:
  %_95234183 = call i64 @prim_car(i64 %rvp237541)                                    ; call prim_car
  %rvp237531 = call i64 @prim_cdr(i64 %rvp237541)                                    ; call prim_cdr
  %check237532 = call i64 @prim_null_63(i64 %rvp237531)                              ; call prim_null_63
  %cmp249345 = icmp eq i64 %check237532, 15                                          ; false?
  br i1 %cmp249345, label %else249347, label %then249346                             ; if

then249346:
  %msg237536 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str249348, i32 0, i32 0)); quoted string
  %abort237534 = call i64 @prim_halt(i64 %msg237536)                                 ; call prim_halt
  %sym237539 = add i64 0, 0                                                          ; quoted ()
  %cloptr249349 = inttoptr i64 %abort237534 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr249350 = getelementptr inbounds i64, i64* %cloptr249349, i64 0               ; &cloptr249349[0]
  %f249352 = load i64, i64* %i0ptr249350, align 8                                    ; load; *i0ptr249350
  %fptr249351 = inttoptr i64 %f249352 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr249351(i64 %abort237534, i64 %sym237539)            ; tail call
  ret void

else249347:
  %rest237538 = call i64 @prim_cdr(i64 %rvp237531)                                   ; call prim_cdr
  %empty237533 = call i64 @prim_null_63(i64 %rest237538)                             ; call prim_null_63
  %cmp249353 = icmp eq i64 %empty237533, 15                                          ; false?
  br i1 %cmp249353, label %else249355, label %then249354                             ; if

then249354:
  %_95t233719233899 = call i64 @prim_car(i64 %rvp237531)                             ; call prim_car
  %na237500 = call i64 @prim_cdr(i64 %rvp237531)                                     ; call prim_cdr
  %arg234846 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %a234048 = call i64 @prim_vector_45ref(i64 %f233714233894, i64 %arg234846)         ; call prim_vector_45ref
  %retprim234186 = call i64 @prim_procedure_63(i64 %a234048)                         ; call prim_procedure_63
  %cloptr249356 = call i64* @alloc(i64 32)                                           ; malloc
  %eptr249358 = getelementptr inbounds i64, i64* %cloptr249356, i64 1                ; &eptr249358[1]
  %eptr249359 = getelementptr inbounds i64, i64* %cloptr249356, i64 2                ; &eptr249359[2]
  %eptr249360 = getelementptr inbounds i64, i64* %cloptr249356, i64 3                ; &eptr249360[3]
  store i64 %l233717233897, i64* %eptr249358                                         ; *eptr249358 = %l233717233897
  store i64 %cont234181, i64* %eptr249359                                            ; *eptr249359 = %cont234181
  store i64 %f233714233894, i64* %eptr249360                                         ; *eptr249360 = %f233714233894
  %eptr249357 = getelementptr inbounds i64, i64* %cloptr249356, i64 0                ; &cloptr249356[0]
  %f249361 = ptrtoint void(i64,i64)* @lam242842 to i64                               ; fptr cast; i64(...)* -> i64
  store i64 %f249361, i64* %eptr249357                                               ; store fptr
  %arg234851 = ptrtoint i64* %cloptr249356 to i64                                    ; closure cast; i64* -> i64
  %arg234850 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %sym237528 = add i64 0, 0                                                          ; quoted ()
  %x237529 = call i64 @prim_cons(i64 %retprim234186, i64 %sym237528)                 ; call prim_cons
  %x237530 = call i64 @prim_cons(i64 %arg234850, i64 %x237529)                       ; call prim_cons
  %cloptr249362 = inttoptr i64 %arg234851 to i64*                                    ; closure/env cast; i64 -> i64*
  %i0ptr249363 = getelementptr inbounds i64, i64* %cloptr249362, i64 0               ; &cloptr249362[0]
  %f249365 = load i64, i64* %i0ptr249363, align 8                                    ; load; *i0ptr249363
  %fptr249364 = inttoptr i64 %f249365 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr249364(i64 %arg234851, i64 %x237530)                ; tail call
  ret void

else249355:
  %many237537 = call i64 @const_init_string(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @str249366, i32 0, i32 0)); quoted string
  %fail237535 = call i64 @prim_halt(i64 %many237537)                                 ; call prim_halt
  %sym237540 = add i64 0, 0                                                          ; quoted ()
  %cloptr249367 = inttoptr i64 %fail237535 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr249368 = getelementptr inbounds i64, i64* %cloptr249367, i64 0               ; &cloptr249367[0]
  %f249370 = load i64, i64* %i0ptr249368, align 8                                    ; load; *i0ptr249368
  %fptr249369 = inttoptr i64 %f249370 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr249369(i64 %fail237535, i64 %sym237540)             ; tail call
  ret void
}


define void @lam242842(i64 %env242843, i64 %rvp237519) {
  %envptr249371 = inttoptr i64 %env242843 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr249372 = getelementptr inbounds i64, i64* %envptr249371, i64 3              ; &envptr249371[3]
  %f233714233894 = load i64, i64* %envptr249372, align 8                             ; load; *envptr249372
  %envptr249373 = inttoptr i64 %env242843 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr249374 = getelementptr inbounds i64, i64* %envptr249373, i64 2              ; &envptr249373[2]
  %cont234181 = load i64, i64* %envptr249374, align 8                                ; load; *envptr249374
  %envptr249375 = inttoptr i64 %env242843 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr249376 = getelementptr inbounds i64, i64* %envptr249375, i64 1              ; &envptr249375[1]
  %l233717233897 = load i64, i64* %envptr249376, align 8                             ; load; *envptr249376
  %check237520 = call i64 @prim_null_63(i64 %rvp237519)                              ; call prim_null_63
  %cmp249377 = icmp eq i64 %check237520, 15                                          ; false?
  br i1 %cmp249377, label %else249379, label %then249378                             ; if

then249378:
  %msg237524 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str249380, i32 0, i32 0)); quoted string
  %abort237522 = call i64 @prim_halt(i64 %msg237524)                                 ; call prim_halt
  %sym237527 = add i64 0, 0                                                          ; quoted ()
  %cloptr249381 = inttoptr i64 %abort237522 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr249382 = getelementptr inbounds i64, i64* %cloptr249381, i64 0               ; &cloptr249381[0]
  %f249384 = load i64, i64* %i0ptr249382, align 8                                    ; load; *i0ptr249382
  %fptr249383 = inttoptr i64 %f249384 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr249383(i64 %abort237522, i64 %sym237527)            ; tail call
  ret void

else249379:
  %_95234184 = call i64 @prim_car(i64 %rvp237519)                                    ; call prim_car
  %rvp237509 = call i64 @prim_cdr(i64 %rvp237519)                                    ; call prim_cdr
  %check237510 = call i64 @prim_null_63(i64 %rvp237509)                              ; call prim_null_63
  %cmp249385 = icmp eq i64 %check237510, 15                                          ; false?
  br i1 %cmp249385, label %else249387, label %then249386                             ; if

then249386:
  %msg237514 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str249388, i32 0, i32 0)); quoted string
  %abort237512 = call i64 @prim_halt(i64 %msg237514)                                 ; call prim_halt
  %sym237517 = add i64 0, 0                                                          ; quoted ()
  %cloptr249389 = inttoptr i64 %abort237512 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr249390 = getelementptr inbounds i64, i64* %cloptr249389, i64 0               ; &cloptr249389[0]
  %f249392 = load i64, i64* %i0ptr249390, align 8                                    ; load; *i0ptr249390
  %fptr249391 = inttoptr i64 %f249392 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr249391(i64 %abort237512, i64 %sym237517)            ; tail call
  ret void

else249387:
  %rest237516 = call i64 @prim_cdr(i64 %rvp237509)                                   ; call prim_cdr
  %empty237511 = call i64 @prim_null_63(i64 %rest237516)                             ; call prim_null_63
  %cmp249393 = icmp eq i64 %empty237511, 15                                          ; false?
  br i1 %cmp249393, label %else249395, label %then249394                             ; if

then249394:
  %check233569233721233901 = call i64 @prim_car(i64 %rvp237509)                      ; call prim_car
  %na237502 = call i64 @prim_cdr(i64 %rvp237509)                                     ; call prim_cdr
  %cmp249396 = icmp eq i64 %check233569233721233901, 15                              ; false?
  br i1 %cmp249396, label %else249398, label %then249397                             ; if

then249397:
  %arg234852 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %a234049 = call i64 @prim_vector_45ref(i64 %f233714233894, i64 %arg234852)         ; call prim_vector_45ref
  %a234050 = call i64 @prim_cdr(i64 %l233717233897)                                  ; call prim_cdr
  %sym237503 = add i64 0, 0                                                          ; quoted ()
  %x237504 = call i64 @prim_cons(i64 %a234050, i64 %sym237503)                       ; call prim_cons
  %x237505 = call i64 @prim_cons(i64 %cont234181, i64 %x237504)                      ; call prim_cons
  %cloptr249399 = inttoptr i64 %a234049 to i64*                                      ; closure/env cast; i64 -> i64*
  %i0ptr249400 = getelementptr inbounds i64, i64* %cloptr249399, i64 0               ; &cloptr249399[0]
  %f249402 = load i64, i64* %i0ptr249400, align 8                                    ; load; *i0ptr249400
  %fptr249401 = inttoptr i64 %f249402 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr249401(i64 %a234049, i64 %x237505)                  ; tail call
  ret void

else249398:
  %arg234858 = call i64 @const_init_string(i8* getelementptr inbounds ([67 x i8], [67 x i8]* @str249403, i32 0, i32 0)); quoted string
  %retprim234185 = call i64 @prim_halt(i64 %arg234858)                               ; call prim_halt
  %arg234860 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %sym237506 = add i64 0, 0                                                          ; quoted ()
  %x237507 = call i64 @prim_cons(i64 %retprim234185, i64 %sym237506)                 ; call prim_cons
  %x237508 = call i64 @prim_cons(i64 %arg234860, i64 %x237507)                       ; call prim_cons
  %cloptr249404 = inttoptr i64 %cont234181 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr249405 = getelementptr inbounds i64, i64* %cloptr249404, i64 0               ; &cloptr249404[0]
  %f249407 = load i64, i64* %i0ptr249405, align 8                                    ; load; *i0ptr249405
  %fptr249406 = inttoptr i64 %f249407 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr249406(i64 %cont234181, i64 %x237508)               ; tail call
  ret void

else249395:
  %many237515 = call i64 @const_init_string(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @str249408, i32 0, i32 0)); quoted string
  %fail237513 = call i64 @prim_halt(i64 %many237515)                                 ; call prim_halt
  %sym237518 = add i64 0, 0                                                          ; quoted ()
  %cloptr249409 = inttoptr i64 %fail237513 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr249410 = getelementptr inbounds i64, i64* %cloptr249409, i64 0               ; &cloptr249409[0]
  %f249412 = load i64, i64* %i0ptr249410, align 8                                    ; load; *i0ptr249410
  %fptr249411 = inttoptr i64 %f249412 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr249411(i64 %fail237513, i64 %sym237518)             ; tail call
  ret void
}


define void @lam242804(i64 %env242805, i64 %rvp238392) {
  %envptr249413 = inttoptr i64 %env242805 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr249414 = getelementptr inbounds i64, i64* %envptr249413, i64 5              ; &envptr249413[5]
  %_37wind_45stack233694233874 = load i64, i64* %envptr249414, align 8               ; load; *envptr249414
  %envptr249415 = inttoptr i64 %env242805 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr249416 = getelementptr inbounds i64, i64* %envptr249415, i64 4              ; &envptr249415[4]
  %tail233711233891 = load i64, i64* %envptr249416, align 8                          ; load; *envptr249416
  %envptr249417 = inttoptr i64 %env242805 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr249418 = getelementptr inbounds i64, i64* %envptr249417, i64 3              ; &envptr249417[3]
  %f233714233894 = load i64, i64* %envptr249418, align 8                             ; load; *envptr249418
  %envptr249419 = inttoptr i64 %env242805 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr249420 = getelementptr inbounds i64, i64* %envptr249419, i64 2              ; &envptr249419[2]
  %cont234158 = load i64, i64* %envptr249420, align 8                                ; load; *envptr249420
  %envptr249421 = inttoptr i64 %env242805 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr249422 = getelementptr inbounds i64, i64* %envptr249421, i64 1              ; &envptr249421[1]
  %new233710233890 = load i64, i64* %envptr249422, align 8                           ; load; *envptr249422
  %check238393 = call i64 @prim_null_63(i64 %rvp238392)                              ; call prim_null_63
  %cmp249423 = icmp eq i64 %check238393, 15                                          ; false?
  br i1 %cmp249423, label %else249425, label %then249424                             ; if

then249424:
  %msg238397 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str249426, i32 0, i32 0)); quoted string
  %abort238395 = call i64 @prim_halt(i64 %msg238397)                                 ; call prim_halt
  %sym238400 = add i64 0, 0                                                          ; quoted ()
  %cloptr249427 = inttoptr i64 %abort238395 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr249428 = getelementptr inbounds i64, i64* %cloptr249427, i64 0               ; &cloptr249427[0]
  %f249430 = load i64, i64* %i0ptr249428, align 8                                    ; load; *i0ptr249428
  %fptr249429 = inttoptr i64 %f249430 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr249429(i64 %abort238395, i64 %sym238400)            ; tail call
  ret void

else249425:
  %_95234192 = call i64 @prim_car(i64 %rvp238392)                                    ; call prim_car
  %rvp238382 = call i64 @prim_cdr(i64 %rvp238392)                                    ; call prim_cdr
  %check238383 = call i64 @prim_null_63(i64 %rvp238382)                              ; call prim_null_63
  %cmp249431 = icmp eq i64 %check238383, 15                                          ; false?
  br i1 %cmp249431, label %else249433, label %then249432                             ; if

then249432:
  %msg238387 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str249434, i32 0, i32 0)); quoted string
  %abort238385 = call i64 @prim_halt(i64 %msg238387)                                 ; call prim_halt
  %sym238390 = add i64 0, 0                                                          ; quoted ()
  %cloptr249435 = inttoptr i64 %abort238385 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr249436 = getelementptr inbounds i64, i64* %cloptr249435, i64 0               ; &cloptr249435[0]
  %f249438 = load i64, i64* %i0ptr249436, align 8                                    ; load; *i0ptr249436
  %fptr249437 = inttoptr i64 %f249438 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr249437(i64 %abort238385, i64 %sym238390)            ; tail call
  ret void

else249433:
  %rest238389 = call i64 @prim_cdr(i64 %rvp238382)                                   ; call prim_cdr
  %empty238384 = call i64 @prim_null_63(i64 %rest238389)                             ; call prim_null_63
  %cmp249439 = icmp eq i64 %empty238384, 15                                          ; false?
  br i1 %cmp249439, label %else249441, label %then249440                             ; if

then249440:
  %check233570233723233903 = call i64 @prim_car(i64 %rvp238382)                      ; call prim_car
  %na237673 = call i64 @prim_cdr(i64 %rvp238382)                                     ; call prim_cdr
  %cmp249442 = icmp eq i64 %check233570233723233903, 15                              ; false?
  br i1 %cmp249442, label %else249444, label %then249443                             ; if

then249443:
  %arg234894 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %a234052 = call i64 @prim_vector_45ref(i64 %f233714233894, i64 %arg234894)         ; call prim_vector_45ref
  %arg234896 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %a234053 = call i64 @prim_vector_45ref(i64 %_37wind_45stack233694233874, i64 %arg234896); call prim_vector_45ref
  %cloptr249445 = call i64* @alloc(i64 40)                                           ; malloc
  %eptr249447 = getelementptr inbounds i64, i64* %cloptr249445, i64 1                ; &eptr249447[1]
  %eptr249448 = getelementptr inbounds i64, i64* %cloptr249445, i64 2                ; &eptr249448[2]
  %eptr249449 = getelementptr inbounds i64, i64* %cloptr249445, i64 3                ; &eptr249449[3]
  %eptr249450 = getelementptr inbounds i64, i64* %cloptr249445, i64 4                ; &eptr249450[4]
  store i64 %new233710233890, i64* %eptr249447                                       ; *eptr249447 = %new233710233890
  store i64 %cont234158, i64* %eptr249448                                            ; *eptr249448 = %cont234158
  store i64 %tail233711233891, i64* %eptr249449                                      ; *eptr249449 = %tail233711233891
  store i64 %_37wind_45stack233694233874, i64* %eptr249450                           ; *eptr249450 = %_37wind_45stack233694233874
  %eptr249446 = getelementptr inbounds i64, i64* %cloptr249445, i64 0                ; &cloptr249445[0]
  %f249451 = ptrtoint void(i64,i64)* @lam242632 to i64                               ; fptr cast; i64(...)* -> i64
  store i64 %f249451, i64* %eptr249446                                               ; store fptr
  %arg234899 = ptrtoint i64* %cloptr249445 to i64                                    ; closure cast; i64* -> i64
  %sym238025 = add i64 0, 0                                                          ; quoted ()
  %x238026 = call i64 @prim_cons(i64 %a234053, i64 %sym238025)                       ; call prim_cons
  %x238027 = call i64 @prim_cons(i64 %arg234899, i64 %x238026)                       ; call prim_cons
  %cloptr249452 = inttoptr i64 %a234052 to i64*                                      ; closure/env cast; i64 -> i64*
  %i0ptr249453 = getelementptr inbounds i64, i64* %cloptr249452, i64 0               ; &cloptr249452[0]
  %f249455 = load i64, i64* %i0ptr249453, align 8                                    ; load; *i0ptr249453
  %fptr249454 = inttoptr i64 %f249455 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr249454(i64 %a234052, i64 %x238027)                  ; tail call
  ret void

else249444:
  %arg235005 = call i64 @const_init_string(i8* getelementptr inbounds ([71 x i8], [71 x i8]* @str249456, i32 0, i32 0)); quoted string
  %retprim234193 = call i64 @prim_halt(i64 %arg235005)                               ; call prim_halt
  %cloptr249457 = call i64* @alloc(i64 40)                                           ; malloc
  %eptr249459 = getelementptr inbounds i64, i64* %cloptr249457, i64 1                ; &eptr249459[1]
  %eptr249460 = getelementptr inbounds i64, i64* %cloptr249457, i64 2                ; &eptr249460[2]
  %eptr249461 = getelementptr inbounds i64, i64* %cloptr249457, i64 3                ; &eptr249461[3]
  %eptr249462 = getelementptr inbounds i64, i64* %cloptr249457, i64 4                ; &eptr249462[4]
  store i64 %new233710233890, i64* %eptr249459                                       ; *eptr249459 = %new233710233890
  store i64 %cont234158, i64* %eptr249460                                            ; *eptr249460 = %cont234158
  store i64 %tail233711233891, i64* %eptr249461                                      ; *eptr249461 = %tail233711233891
  store i64 %_37wind_45stack233694233874, i64* %eptr249462                           ; *eptr249462 = %_37wind_45stack233694233874
  %eptr249458 = getelementptr inbounds i64, i64* %cloptr249457, i64 0                ; &cloptr249457[0]
  %f249463 = ptrtoint void(i64,i64)* @lam242799 to i64                               ; fptr cast; i64(...)* -> i64
  store i64 %f249463, i64* %eptr249458                                               ; store fptr
  %arg235008 = ptrtoint i64* %cloptr249457 to i64                                    ; closure cast; i64* -> i64
  %arg235007 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %sym238379 = add i64 0, 0                                                          ; quoted ()
  %x238380 = call i64 @prim_cons(i64 %retprim234193, i64 %sym238379)                 ; call prim_cons
  %x238381 = call i64 @prim_cons(i64 %arg235007, i64 %x238380)                       ; call prim_cons
  %cloptr249464 = inttoptr i64 %arg235008 to i64*                                    ; closure/env cast; i64 -> i64*
  %i0ptr249465 = getelementptr inbounds i64, i64* %cloptr249464, i64 0               ; &cloptr249464[0]
  %f249467 = load i64, i64* %i0ptr249465, align 8                                    ; load; *i0ptr249465
  %fptr249466 = inttoptr i64 %f249467 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr249466(i64 %arg235008, i64 %x238381)                ; tail call
  ret void

else249441:
  %many238388 = call i64 @const_init_string(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @str249468, i32 0, i32 0)); quoted string
  %fail238386 = call i64 @prim_halt(i64 %many238388)                                 ; call prim_halt
  %sym238391 = add i64 0, 0                                                          ; quoted ()
  %cloptr249469 = inttoptr i64 %fail238386 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr249470 = getelementptr inbounds i64, i64* %cloptr249469, i64 0               ; &cloptr249469[0]
  %f249472 = load i64, i64* %i0ptr249470, align 8                                    ; load; *i0ptr249470
  %fptr249471 = inttoptr i64 %f249472 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr249471(i64 %fail238386, i64 %sym238391)             ; tail call
  ret void
}


define void @lam242799(i64 %env242800, i64 %rvp238370) {
  %envptr249473 = inttoptr i64 %env242800 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr249474 = getelementptr inbounds i64, i64* %envptr249473, i64 4              ; &envptr249473[4]
  %_37wind_45stack233694233874 = load i64, i64* %envptr249474, align 8               ; load; *envptr249474
  %envptr249475 = inttoptr i64 %env242800 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr249476 = getelementptr inbounds i64, i64* %envptr249475, i64 3              ; &envptr249475[3]
  %tail233711233891 = load i64, i64* %envptr249476, align 8                          ; load; *envptr249476
  %envptr249477 = inttoptr i64 %env242800 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr249478 = getelementptr inbounds i64, i64* %envptr249477, i64 2              ; &envptr249477[2]
  %cont234158 = load i64, i64* %envptr249478, align 8                                ; load; *envptr249478
  %envptr249479 = inttoptr i64 %env242800 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr249480 = getelementptr inbounds i64, i64* %envptr249479, i64 1              ; &envptr249479[1]
  %new233710233890 = load i64, i64* %envptr249480, align 8                           ; load; *envptr249480
  %check238371 = call i64 @prim_null_63(i64 %rvp238370)                              ; call prim_null_63
  %cmp249481 = icmp eq i64 %check238371, 15                                          ; false?
  br i1 %cmp249481, label %else249483, label %then249482                             ; if

then249482:
  %msg238375 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str249484, i32 0, i32 0)); quoted string
  %abort238373 = call i64 @prim_halt(i64 %msg238375)                                 ; call prim_halt
  %sym238378 = add i64 0, 0                                                          ; quoted ()
  %cloptr249485 = inttoptr i64 %abort238373 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr249486 = getelementptr inbounds i64, i64* %cloptr249485, i64 0               ; &cloptr249485[0]
  %f249488 = load i64, i64* %i0ptr249486, align 8                                    ; load; *i0ptr249486
  %fptr249487 = inttoptr i64 %f249488 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr249487(i64 %abort238373, i64 %sym238378)            ; tail call
  ret void

else249483:
  %_95234160 = call i64 @prim_car(i64 %rvp238370)                                    ; call prim_car
  %rvp238360 = call i64 @prim_cdr(i64 %rvp238370)                                    ; call prim_cdr
  %check238361 = call i64 @prim_null_63(i64 %rvp238360)                              ; call prim_null_63
  %cmp249489 = icmp eq i64 %check238361, 15                                          ; false?
  br i1 %cmp249489, label %else249491, label %then249490                             ; if

then249490:
  %msg238365 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str249492, i32 0, i32 0)); quoted string
  %abort238363 = call i64 @prim_halt(i64 %msg238365)                                 ; call prim_halt
  %sym238368 = add i64 0, 0                                                          ; quoted ()
  %cloptr249493 = inttoptr i64 %abort238363 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr249494 = getelementptr inbounds i64, i64* %cloptr249493, i64 0               ; &cloptr249493[0]
  %f249496 = load i64, i64* %i0ptr249494, align 8                                    ; load; *i0ptr249494
  %fptr249495 = inttoptr i64 %f249496 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr249495(i64 %abort238363, i64 %sym238368)            ; tail call
  ret void

else249491:
  %rest238367 = call i64 @prim_cdr(i64 %rvp238360)                                   ; call prim_cdr
  %empty238362 = call i64 @prim_null_63(i64 %rest238367)                             ; call prim_null_63
  %cmp249497 = icmp eq i64 %empty238362, 15                                          ; false?
  br i1 %cmp249497, label %else249499, label %then249498                             ; if

then249498:
  %_95t233713233893 = call i64 @prim_car(i64 %rvp238360)                             ; call prim_car
  %na238029 = call i64 @prim_cdr(i64 %rvp238360)                                     ; call prim_cdr
  %cloptr249500 = call i64* @alloc(i64 8)                                            ; malloc
  %eptr249501 = getelementptr inbounds i64, i64* %cloptr249500, i64 0                ; &cloptr249500[0]
  %f249502 = ptrtoint void(i64,i64)* @lam242795 to i64                               ; fptr cast; i64(...)* -> i64
  store i64 %f249502, i64* %eptr249501                                               ; store fptr
  %arg235010 = ptrtoint i64* %cloptr249500 to i64                                    ; closure cast; i64* -> i64
  %cloptr249503 = call i64* @alloc(i64 40)                                           ; malloc
  %eptr249505 = getelementptr inbounds i64, i64* %cloptr249503, i64 1                ; &eptr249505[1]
  %eptr249506 = getelementptr inbounds i64, i64* %cloptr249503, i64 2                ; &eptr249506[2]
  %eptr249507 = getelementptr inbounds i64, i64* %cloptr249503, i64 3                ; &eptr249507[3]
  %eptr249508 = getelementptr inbounds i64, i64* %cloptr249503, i64 4                ; &eptr249508[4]
  store i64 %new233710233890, i64* %eptr249505                                       ; *eptr249505 = %new233710233890
  store i64 %cont234158, i64* %eptr249506                                            ; *eptr249506 = %cont234158
  store i64 %tail233711233891, i64* %eptr249507                                      ; *eptr249507 = %tail233711233891
  store i64 %_37wind_45stack233694233874, i64* %eptr249508                           ; *eptr249508 = %_37wind_45stack233694233874
  %eptr249504 = getelementptr inbounds i64, i64* %cloptr249503, i64 0                ; &cloptr249503[0]
  %f249509 = ptrtoint void(i64,i64)* @lam242791 to i64                               ; fptr cast; i64(...)* -> i64
  store i64 %f249509, i64* %eptr249504                                               ; store fptr
  %arg235009 = ptrtoint i64* %cloptr249503 to i64                                    ; closure cast; i64* -> i64
  %sym238358 = add i64 0, 0                                                          ; quoted ()
  %x238359 = call i64 @prim_cons(i64 %arg235009, i64 %sym238358)                     ; call prim_cons
  %cloptr249510 = inttoptr i64 %arg235010 to i64*                                    ; closure/env cast; i64 -> i64*
  %i0ptr249511 = getelementptr inbounds i64, i64* %cloptr249510, i64 0               ; &cloptr249510[0]
  %f249513 = load i64, i64* %i0ptr249511, align 8                                    ; load; *i0ptr249511
  %fptr249512 = inttoptr i64 %f249513 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr249512(i64 %arg235010, i64 %x238359)                ; tail call
  ret void

else249499:
  %many238366 = call i64 @const_init_string(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @str249514, i32 0, i32 0)); quoted string
  %fail238364 = call i64 @prim_halt(i64 %many238366)                                 ; call prim_halt
  %sym238369 = add i64 0, 0                                                          ; quoted ()
  %cloptr249515 = inttoptr i64 %fail238364 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr249516 = getelementptr inbounds i64, i64* %cloptr249515, i64 0               ; &cloptr249515[0]
  %f249518 = load i64, i64* %i0ptr249516, align 8                                    ; load; *i0ptr249516
  %fptr249517 = inttoptr i64 %f249518 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr249517(i64 %fail238364, i64 %sym238369)             ; tail call
  ret void
}


define void @lam242795(i64 %env242796, i64 %lst233725233905234179) {
  %cont234178 = call i64 @prim_car(i64 %lst233725233905234179)                       ; call prim_car
  %lst233725233905 = call i64 @prim_cdr(i64 %lst233725233905234179)                  ; call prim_cdr
  %arg235014 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %sym238030 = add i64 0, 0                                                          ; quoted ()
  %x238031 = call i64 @prim_cons(i64 %lst233725233905, i64 %sym238030)               ; call prim_cons
  %x238032 = call i64 @prim_cons(i64 %arg235014, i64 %x238031)                       ; call prim_cons
  %cloptr249519 = inttoptr i64 %cont234178 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr249520 = getelementptr inbounds i64, i64* %cloptr249519, i64 0               ; &cloptr249519[0]
  %f249522 = load i64, i64* %i0ptr249520, align 8                                    ; load; *i0ptr249520
  %fptr249521 = inttoptr i64 %f249522 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr249521(i64 %cont234178, i64 %x238032)               ; tail call
  ret void
}


define void @lam242791(i64 %env242792, i64 %rvp238349) {
  %envptr249523 = inttoptr i64 %env242792 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr249524 = getelementptr inbounds i64, i64* %envptr249523, i64 4              ; &envptr249523[4]
  %_37wind_45stack233694233874 = load i64, i64* %envptr249524, align 8               ; load; *envptr249524
  %envptr249525 = inttoptr i64 %env242792 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr249526 = getelementptr inbounds i64, i64* %envptr249525, i64 3              ; &envptr249525[3]
  %tail233711233891 = load i64, i64* %envptr249526, align 8                          ; load; *envptr249526
  %envptr249527 = inttoptr i64 %env242792 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr249528 = getelementptr inbounds i64, i64* %envptr249527, i64 2              ; &envptr249527[2]
  %cont234158 = load i64, i64* %envptr249528, align 8                                ; load; *envptr249528
  %envptr249529 = inttoptr i64 %env242792 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr249530 = getelementptr inbounds i64, i64* %envptr249529, i64 1              ; &envptr249529[1]
  %new233710233890 = load i64, i64* %envptr249530, align 8                           ; load; *envptr249530
  %check238350 = call i64 @prim_null_63(i64 %rvp238349)                              ; call prim_null_63
  %cmp249531 = icmp eq i64 %check238350, 15                                          ; false?
  br i1 %cmp249531, label %else249533, label %then249532                             ; if

then249532:
  %msg238354 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str249534, i32 0, i32 0)); quoted string
  %abort238352 = call i64 @prim_halt(i64 %msg238354)                                 ; call prim_halt
  %sym238357 = add i64 0, 0                                                          ; quoted ()
  %cloptr249535 = inttoptr i64 %abort238352 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr249536 = getelementptr inbounds i64, i64* %cloptr249535, i64 0               ; &cloptr249535[0]
  %f249538 = load i64, i64* %i0ptr249536, align 8                                    ; load; *i0ptr249536
  %fptr249537 = inttoptr i64 %f249538 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr249537(i64 %abort238352, i64 %sym238357)            ; tail call
  ret void

else249533:
  %_95234176 = call i64 @prim_car(i64 %rvp238349)                                    ; call prim_car
  %rvp238339 = call i64 @prim_cdr(i64 %rvp238349)                                    ; call prim_cdr
  %check238340 = call i64 @prim_null_63(i64 %rvp238339)                              ; call prim_null_63
  %cmp249539 = icmp eq i64 %check238340, 15                                          ; false?
  br i1 %cmp249539, label %else249541, label %then249540                             ; if

then249540:
  %msg238344 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str249542, i32 0, i32 0)); quoted string
  %abort238342 = call i64 @prim_halt(i64 %msg238344)                                 ; call prim_halt
  %sym238347 = add i64 0, 0                                                          ; quoted ()
  %cloptr249543 = inttoptr i64 %abort238342 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr249544 = getelementptr inbounds i64, i64* %cloptr249543, i64 0               ; &cloptr249543[0]
  %f249546 = load i64, i64* %i0ptr249544, align 8                                    ; load; *i0ptr249544
  %fptr249545 = inttoptr i64 %f249546 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr249545(i64 %abort238342, i64 %sym238347)            ; tail call
  ret void

else249541:
  %rest238346 = call i64 @prim_cdr(i64 %rvp238339)                                   ; call prim_cdr
  %empty238341 = call i64 @prim_null_63(i64 %rest238346)                             ; call prim_null_63
  %cmp249547 = icmp eq i64 %empty238341, 15                                          ; false?
  br i1 %cmp249547, label %else249549, label %then249548                             ; if

then249548:
  %a234054 = call i64 @prim_car(i64 %rvp238339)                                      ; call prim_car
  %na238034 = call i64 @prim_cdr(i64 %rvp238339)                                     ; call prim_cdr
  %arg235017 = call i64 @const_init_int(i64 1)                                       ; quoted int
  %retprim234177 = call i64 @prim_make_45vector(i64 %arg235017, i64 %a234054)        ; call prim_make_45vector
  %cloptr249550 = call i64* @alloc(i64 40)                                           ; malloc
  %eptr249552 = getelementptr inbounds i64, i64* %cloptr249550, i64 1                ; &eptr249552[1]
  %eptr249553 = getelementptr inbounds i64, i64* %cloptr249550, i64 2                ; &eptr249553[2]
  %eptr249554 = getelementptr inbounds i64, i64* %cloptr249550, i64 3                ; &eptr249554[3]
  %eptr249555 = getelementptr inbounds i64, i64* %cloptr249550, i64 4                ; &eptr249555[4]
  store i64 %new233710233890, i64* %eptr249552                                       ; *eptr249552 = %new233710233890
  store i64 %cont234158, i64* %eptr249553                                            ; *eptr249553 = %cont234158
  store i64 %tail233711233891, i64* %eptr249554                                      ; *eptr249554 = %tail233711233891
  store i64 %_37wind_45stack233694233874, i64* %eptr249555                           ; *eptr249555 = %_37wind_45stack233694233874
  %eptr249551 = getelementptr inbounds i64, i64* %cloptr249550, i64 0                ; &cloptr249550[0]
  %f249556 = ptrtoint void(i64,i64)* @lam242786 to i64                               ; fptr cast; i64(...)* -> i64
  store i64 %f249556, i64* %eptr249551                                               ; store fptr
  %arg235020 = ptrtoint i64* %cloptr249550 to i64                                    ; closure cast; i64* -> i64
  %arg235019 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %sym238336 = add i64 0, 0                                                          ; quoted ()
  %x238337 = call i64 @prim_cons(i64 %retprim234177, i64 %sym238336)                 ; call prim_cons
  %x238338 = call i64 @prim_cons(i64 %arg235019, i64 %x238337)                       ; call prim_cons
  %cloptr249557 = inttoptr i64 %arg235020 to i64*                                    ; closure/env cast; i64 -> i64*
  %i0ptr249558 = getelementptr inbounds i64, i64* %cloptr249557, i64 0               ; &cloptr249557[0]
  %f249560 = load i64, i64* %i0ptr249558, align 8                                    ; load; *i0ptr249558
  %fptr249559 = inttoptr i64 %f249560 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr249559(i64 %arg235020, i64 %x238338)                ; tail call
  ret void

else249549:
  %many238345 = call i64 @const_init_string(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @str249561, i32 0, i32 0)); quoted string
  %fail238343 = call i64 @prim_halt(i64 %many238345)                                 ; call prim_halt
  %sym238348 = add i64 0, 0                                                          ; quoted ()
  %cloptr249562 = inttoptr i64 %fail238343 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr249563 = getelementptr inbounds i64, i64* %cloptr249562, i64 0               ; &cloptr249562[0]
  %f249565 = load i64, i64* %i0ptr249563, align 8                                    ; load; *i0ptr249563
  %fptr249564 = inttoptr i64 %f249565 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr249564(i64 %fail238343, i64 %sym238348)             ; tail call
  ret void
}


define void @lam242786(i64 %env242787, i64 %rvp238327) {
  %envptr249566 = inttoptr i64 %env242787 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr249567 = getelementptr inbounds i64, i64* %envptr249566, i64 4              ; &envptr249566[4]
  %_37wind_45stack233694233874 = load i64, i64* %envptr249567, align 8               ; load; *envptr249567
  %envptr249568 = inttoptr i64 %env242787 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr249569 = getelementptr inbounds i64, i64* %envptr249568, i64 3              ; &envptr249568[3]
  %tail233711233891 = load i64, i64* %envptr249569, align 8                          ; load; *envptr249569
  %envptr249570 = inttoptr i64 %env242787 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr249571 = getelementptr inbounds i64, i64* %envptr249570, i64 2              ; &envptr249570[2]
  %cont234158 = load i64, i64* %envptr249571, align 8                                ; load; *envptr249571
  %envptr249572 = inttoptr i64 %env242787 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr249573 = getelementptr inbounds i64, i64* %envptr249572, i64 1              ; &envptr249572[1]
  %new233710233890 = load i64, i64* %envptr249573, align 8                           ; load; *envptr249573
  %check238328 = call i64 @prim_null_63(i64 %rvp238327)                              ; call prim_null_63
  %cmp249574 = icmp eq i64 %check238328, 15                                          ; false?
  br i1 %cmp249574, label %else249576, label %then249575                             ; if

then249575:
  %msg238332 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str249577, i32 0, i32 0)); quoted string
  %abort238330 = call i64 @prim_halt(i64 %msg238332)                                 ; call prim_halt
  %sym238335 = add i64 0, 0                                                          ; quoted ()
  %cloptr249578 = inttoptr i64 %abort238330 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr249579 = getelementptr inbounds i64, i64* %cloptr249578, i64 0               ; &cloptr249578[0]
  %f249581 = load i64, i64* %i0ptr249579, align 8                                    ; load; *i0ptr249579
  %fptr249580 = inttoptr i64 %f249581 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr249580(i64 %abort238330, i64 %sym238335)            ; tail call
  ret void

else249576:
  %_95234161 = call i64 @prim_car(i64 %rvp238327)                                    ; call prim_car
  %rvp238317 = call i64 @prim_cdr(i64 %rvp238327)                                    ; call prim_cdr
  %check238318 = call i64 @prim_null_63(i64 %rvp238317)                              ; call prim_null_63
  %cmp249582 = icmp eq i64 %check238318, 15                                          ; false?
  br i1 %cmp249582, label %else249584, label %then249583                             ; if

then249583:
  %msg238322 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str249585, i32 0, i32 0)); quoted string
  %abort238320 = call i64 @prim_halt(i64 %msg238322)                                 ; call prim_halt
  %sym238325 = add i64 0, 0                                                          ; quoted ()
  %cloptr249586 = inttoptr i64 %abort238320 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr249587 = getelementptr inbounds i64, i64* %cloptr249586, i64 0               ; &cloptr249586[0]
  %f249589 = load i64, i64* %i0ptr249587, align 8                                    ; load; *i0ptr249587
  %fptr249588 = inttoptr i64 %f249589 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr249588(i64 %abort238320, i64 %sym238325)            ; tail call
  ret void

else249584:
  %rest238324 = call i64 @prim_cdr(i64 %rvp238317)                                   ; call prim_cdr
  %empty238319 = call i64 @prim_null_63(i64 %rest238324)                             ; call prim_null_63
  %cmp249590 = icmp eq i64 %empty238319, 15                                          ; false?
  br i1 %cmp249590, label %else249592, label %then249591                             ; if

then249591:
  %f233724233904 = call i64 @prim_car(i64 %rvp238317)                                ; call prim_car
  %na238036 = call i64 @prim_cdr(i64 %rvp238317)                                     ; call prim_cdr
  %cloptr249593 = call i64* @alloc(i64 32)                                           ; malloc
  %eptr249595 = getelementptr inbounds i64, i64* %cloptr249593, i64 1                ; &eptr249595[1]
  %eptr249596 = getelementptr inbounds i64, i64* %cloptr249593, i64 2                ; &eptr249596[2]
  %eptr249597 = getelementptr inbounds i64, i64* %cloptr249593, i64 3                ; &eptr249597[3]
  store i64 %tail233711233891, i64* %eptr249595                                      ; *eptr249595 = %tail233711233891
  store i64 %_37wind_45stack233694233874, i64* %eptr249596                           ; *eptr249596 = %_37wind_45stack233694233874
  store i64 %f233724233904, i64* %eptr249597                                         ; *eptr249597 = %f233724233904
  %eptr249594 = getelementptr inbounds i64, i64* %cloptr249593, i64 0                ; &cloptr249593[0]
  %f249598 = ptrtoint void(i64,i64)* @lam242782 to i64                               ; fptr cast; i64(...)* -> i64
  store i64 %f249598, i64* %eptr249594                                               ; store fptr
  %f233571233726233906 = ptrtoint i64* %cloptr249593 to i64                          ; closure cast; i64* -> i64
  %arg235096 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %_95t233732233912 = call i64 @prim_vector_45set_33(i64 %f233724233904, i64 %arg235096, i64 %f233571233726233906); call prim_vector_45set_33
  %arg235098 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %a234064 = call i64 @prim_vector_45ref(i64 %f233724233904, i64 %arg235098)         ; call prim_vector_45ref
  %retprim234175 = call i64 @prim_procedure_63(i64 %a234064)                         ; call prim_procedure_63
  %cloptr249599 = call i64* @alloc(i64 32)                                           ; malloc
  %eptr249601 = getelementptr inbounds i64, i64* %cloptr249599, i64 1                ; &eptr249601[1]
  %eptr249602 = getelementptr inbounds i64, i64* %cloptr249599, i64 2                ; &eptr249602[2]
  %eptr249603 = getelementptr inbounds i64, i64* %cloptr249599, i64 3                ; &eptr249603[3]
  store i64 %new233710233890, i64* %eptr249601                                       ; *eptr249601 = %new233710233890
  store i64 %cont234158, i64* %eptr249602                                            ; *eptr249602 = %cont234158
  store i64 %f233724233904, i64* %eptr249603                                         ; *eptr249603 = %f233724233904
  %eptr249600 = getelementptr inbounds i64, i64* %cloptr249599, i64 0                ; &cloptr249599[0]
  %f249604 = ptrtoint void(i64,i64)* @lam242666 to i64                               ; fptr cast; i64(...)* -> i64
  store i64 %f249604, i64* %eptr249600                                               ; store fptr
  %arg235103 = ptrtoint i64* %cloptr249599 to i64                                    ; closure cast; i64* -> i64
  %arg235102 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %sym238314 = add i64 0, 0                                                          ; quoted ()
  %x238315 = call i64 @prim_cons(i64 %retprim234175, i64 %sym238314)                 ; call prim_cons
  %x238316 = call i64 @prim_cons(i64 %arg235102, i64 %x238315)                       ; call prim_cons
  %cloptr249605 = inttoptr i64 %arg235103 to i64*                                    ; closure/env cast; i64 -> i64*
  %i0ptr249606 = getelementptr inbounds i64, i64* %cloptr249605, i64 0               ; &cloptr249605[0]
  %f249608 = load i64, i64* %i0ptr249606, align 8                                    ; load; *i0ptr249606
  %fptr249607 = inttoptr i64 %f249608 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr249607(i64 %arg235103, i64 %x238316)                ; tail call
  ret void

else249592:
  %many238323 = call i64 @const_init_string(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @str249609, i32 0, i32 0)); quoted string
  %fail238321 = call i64 @prim_halt(i64 %many238323)                                 ; call prim_halt
  %sym238326 = add i64 0, 0                                                          ; quoted ()
  %cloptr249610 = inttoptr i64 %fail238321 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr249611 = getelementptr inbounds i64, i64* %cloptr249610, i64 0               ; &cloptr249610[0]
  %f249613 = load i64, i64* %i0ptr249611, align 8                                    ; load; *i0ptr249611
  %fptr249612 = inttoptr i64 %f249613 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr249612(i64 %fail238321, i64 %sym238326)             ; tail call
  ret void
}


define void @lam242782(i64 %env242783, i64 %rvp238278) {
  %envptr249614 = inttoptr i64 %env242783 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr249615 = getelementptr inbounds i64, i64* %envptr249614, i64 3              ; &envptr249614[3]
  %f233724233904 = load i64, i64* %envptr249615, align 8                             ; load; *envptr249615
  %envptr249616 = inttoptr i64 %env242783 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr249617 = getelementptr inbounds i64, i64* %envptr249616, i64 2              ; &envptr249616[2]
  %_37wind_45stack233694233874 = load i64, i64* %envptr249617, align 8               ; load; *envptr249617
  %envptr249618 = inttoptr i64 %env242783 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr249619 = getelementptr inbounds i64, i64* %envptr249618, i64 1              ; &envptr249618[1]
  %tail233711233891 = load i64, i64* %envptr249619, align 8                          ; load; *envptr249619
  %check238279 = call i64 @prim_null_63(i64 %rvp238278)                              ; call prim_null_63
  %cmp249620 = icmp eq i64 %check238279, 15                                          ; false?
  br i1 %cmp249620, label %else249622, label %then249621                             ; if

then249621:
  %msg238283 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str249623, i32 0, i32 0)); quoted string
  %abort238281 = call i64 @prim_halt(i64 %msg238283)                                 ; call prim_halt
  %sym238286 = add i64 0, 0                                                          ; quoted ()
  %cloptr249624 = inttoptr i64 %abort238281 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr249625 = getelementptr inbounds i64, i64* %cloptr249624, i64 0               ; &cloptr249624[0]
  %f249627 = load i64, i64* %i0ptr249625, align 8                                    ; load; *i0ptr249625
  %fptr249626 = inttoptr i64 %f249627 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr249626(i64 %abort238281, i64 %sym238286)            ; tail call
  ret void

else249622:
  %cont234162 = call i64 @prim_car(i64 %rvp238278)                                   ; call prim_car
  %rvp238268 = call i64 @prim_cdr(i64 %rvp238278)                                    ; call prim_cdr
  %check238269 = call i64 @prim_null_63(i64 %rvp238268)                              ; call prim_null_63
  %cmp249628 = icmp eq i64 %check238269, 15                                          ; false?
  br i1 %cmp249628, label %else249630, label %then249629                             ; if

then249629:
  %msg238273 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str249631, i32 0, i32 0)); quoted string
  %abort238271 = call i64 @prim_halt(i64 %msg238273)                                 ; call prim_halt
  %sym238276 = add i64 0, 0                                                          ; quoted ()
  %cloptr249632 = inttoptr i64 %abort238271 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr249633 = getelementptr inbounds i64, i64* %cloptr249632, i64 0               ; &cloptr249632[0]
  %f249635 = load i64, i64* %i0ptr249633, align 8                                    ; load; *i0ptr249633
  %fptr249634 = inttoptr i64 %f249635 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr249634(i64 %abort238271, i64 %sym238276)            ; tail call
  ret void

else249630:
  %rest238275 = call i64 @prim_cdr(i64 %rvp238268)                                   ; call prim_cdr
  %empty238270 = call i64 @prim_null_63(i64 %rest238275)                             ; call prim_null_63
  %cmp249636 = icmp eq i64 %empty238270, 15                                          ; false?
  br i1 %cmp249636, label %else249638, label %then249637                             ; if

then249637:
  %l233727233907 = call i64 @prim_car(i64 %rvp238268)                                ; call prim_car
  %na238038 = call i64 @prim_cdr(i64 %rvp238268)                                     ; call prim_cdr
  %a234055 = call i64 @prim_eq_63(i64 %l233727233907, i64 %tail233711233891)         ; call prim_eq_63
  %a234056 = call i64 @prim_not(i64 %a234055)                                        ; call prim_not
  %cmp249639 = icmp eq i64 %a234056, 15                                              ; false?
  br i1 %cmp249639, label %else249641, label %then249640                             ; if

then249640:
  %arg235024 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %a234057 = call i64 @prim_vector_45ref(i64 %f233724233904, i64 %arg235024)         ; call prim_vector_45ref
  %retprim234171 = call i64 @prim_procedure_63(i64 %a234057)                         ; call prim_procedure_63
  %cloptr249642 = call i64* @alloc(i64 40)                                           ; malloc
  %eptr249644 = getelementptr inbounds i64, i64* %cloptr249642, i64 1                ; &eptr249644[1]
  %eptr249645 = getelementptr inbounds i64, i64* %cloptr249642, i64 2                ; &eptr249645[2]
  %eptr249646 = getelementptr inbounds i64, i64* %cloptr249642, i64 3                ; &eptr249646[3]
  %eptr249647 = getelementptr inbounds i64, i64* %cloptr249642, i64 4                ; &eptr249647[4]
  store i64 %l233727233907, i64* %eptr249644                                         ; *eptr249644 = %l233727233907
  store i64 %cont234162, i64* %eptr249645                                            ; *eptr249645 = %cont234162
  store i64 %_37wind_45stack233694233874, i64* %eptr249646                           ; *eptr249646 = %_37wind_45stack233694233874
  store i64 %f233724233904, i64* %eptr249647                                         ; *eptr249647 = %f233724233904
  %eptr249643 = getelementptr inbounds i64, i64* %cloptr249642, i64 0                ; &cloptr249642[0]
  %f249648 = ptrtoint void(i64,i64)* @lam242775 to i64                               ; fptr cast; i64(...)* -> i64
  store i64 %f249648, i64* %eptr249643                                               ; store fptr
  %arg235029 = ptrtoint i64* %cloptr249642 to i64                                    ; closure cast; i64* -> i64
  %arg235028 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %sym238262 = add i64 0, 0                                                          ; quoted ()
  %x238263 = call i64 @prim_cons(i64 %retprim234171, i64 %sym238262)                 ; call prim_cons
  %x238264 = call i64 @prim_cons(i64 %arg235028, i64 %x238263)                       ; call prim_cons
  %cloptr249649 = inttoptr i64 %arg235029 to i64*                                    ; closure/env cast; i64 -> i64*
  %i0ptr249650 = getelementptr inbounds i64, i64* %cloptr249649, i64 0               ; &cloptr249649[0]
  %f249652 = load i64, i64* %i0ptr249650, align 8                                    ; load; *i0ptr249650
  %fptr249651 = inttoptr i64 %f249652 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr249651(i64 %arg235029, i64 %x238264)                ; tail call
  ret void

else249641:
  %retprim234172 = call i64 @prim_void()                                             ; call prim_void
  %arg235093 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %sym238265 = add i64 0, 0                                                          ; quoted ()
  %x238266 = call i64 @prim_cons(i64 %retprim234172, i64 %sym238265)                 ; call prim_cons
  %x238267 = call i64 @prim_cons(i64 %arg235093, i64 %x238266)                       ; call prim_cons
  %cloptr249653 = inttoptr i64 %cont234162 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr249654 = getelementptr inbounds i64, i64* %cloptr249653, i64 0               ; &cloptr249653[0]
  %f249656 = load i64, i64* %i0ptr249654, align 8                                    ; load; *i0ptr249654
  %fptr249655 = inttoptr i64 %f249656 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr249655(i64 %cont234162, i64 %x238267)               ; tail call
  ret void

else249638:
  %many238274 = call i64 @const_init_string(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @str249657, i32 0, i32 0)); quoted string
  %fail238272 = call i64 @prim_halt(i64 %many238274)                                 ; call prim_halt
  %sym238277 = add i64 0, 0                                                          ; quoted ()
  %cloptr249658 = inttoptr i64 %fail238272 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr249659 = getelementptr inbounds i64, i64* %cloptr249658, i64 0               ; &cloptr249658[0]
  %f249661 = load i64, i64* %i0ptr249659, align 8                                    ; load; *i0ptr249659
  %fptr249660 = inttoptr i64 %f249661 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr249660(i64 %fail238272, i64 %sym238277)             ; tail call
  ret void
}


define void @lam242775(i64 %env242776, i64 %rvp238253) {
  %envptr249662 = inttoptr i64 %env242776 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr249663 = getelementptr inbounds i64, i64* %envptr249662, i64 4              ; &envptr249662[4]
  %f233724233904 = load i64, i64* %envptr249663, align 8                             ; load; *envptr249663
  %envptr249664 = inttoptr i64 %env242776 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr249665 = getelementptr inbounds i64, i64* %envptr249664, i64 3              ; &envptr249664[3]
  %_37wind_45stack233694233874 = load i64, i64* %envptr249665, align 8               ; load; *envptr249665
  %envptr249666 = inttoptr i64 %env242776 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr249667 = getelementptr inbounds i64, i64* %envptr249666, i64 2              ; &envptr249666[2]
  %cont234162 = load i64, i64* %envptr249667, align 8                                ; load; *envptr249667
  %envptr249668 = inttoptr i64 %env242776 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr249669 = getelementptr inbounds i64, i64* %envptr249668, i64 1              ; &envptr249668[1]
  %l233727233907 = load i64, i64* %envptr249669, align 8                             ; load; *envptr249669
  %check238254 = call i64 @prim_null_63(i64 %rvp238253)                              ; call prim_null_63
  %cmp249670 = icmp eq i64 %check238254, 15                                          ; false?
  br i1 %cmp249670, label %else249672, label %then249671                             ; if

then249671:
  %msg238258 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str249673, i32 0, i32 0)); quoted string
  %abort238256 = call i64 @prim_halt(i64 %msg238258)                                 ; call prim_halt
  %sym238261 = add i64 0, 0                                                          ; quoted ()
  %cloptr249674 = inttoptr i64 %abort238256 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr249675 = getelementptr inbounds i64, i64* %cloptr249674, i64 0               ; &cloptr249674[0]
  %f249677 = load i64, i64* %i0ptr249675, align 8                                    ; load; *i0ptr249675
  %fptr249676 = inttoptr i64 %f249677 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr249676(i64 %abort238256, i64 %sym238261)            ; tail call
  ret void

else249672:
  %_95234169 = call i64 @prim_car(i64 %rvp238253)                                    ; call prim_car
  %rvp238243 = call i64 @prim_cdr(i64 %rvp238253)                                    ; call prim_cdr
  %check238244 = call i64 @prim_null_63(i64 %rvp238243)                              ; call prim_null_63
  %cmp249678 = icmp eq i64 %check238244, 15                                          ; false?
  br i1 %cmp249678, label %else249680, label %then249679                             ; if

then249679:
  %msg238248 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str249681, i32 0, i32 0)); quoted string
  %abort238246 = call i64 @prim_halt(i64 %msg238248)                                 ; call prim_halt
  %sym238251 = add i64 0, 0                                                          ; quoted ()
  %cloptr249682 = inttoptr i64 %abort238246 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr249683 = getelementptr inbounds i64, i64* %cloptr249682, i64 0               ; &cloptr249682[0]
  %f249685 = load i64, i64* %i0ptr249683, align 8                                    ; load; *i0ptr249683
  %fptr249684 = inttoptr i64 %f249685 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr249684(i64 %abort238246, i64 %sym238251)            ; tail call
  ret void

else249680:
  %rest238250 = call i64 @prim_cdr(i64 %rvp238243)                                   ; call prim_cdr
  %empty238245 = call i64 @prim_null_63(i64 %rest238250)                             ; call prim_null_63
  %cmp249686 = icmp eq i64 %empty238245, 15                                          ; false?
  br i1 %cmp249686, label %else249688, label %then249687                             ; if

then249687:
  %check233572233729233909 = call i64 @prim_car(i64 %rvp238243)                      ; call prim_car
  %na238040 = call i64 @prim_cdr(i64 %rvp238243)                                     ; call prim_cdr
  %cmp249689 = icmp eq i64 %check233572233729233909, 15                              ; false?
  br i1 %cmp249689, label %else249691, label %then249690                             ; if

then249690:
  %arg235030 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %a234058 = call i64 @prim_vector_45ref(i64 %f233724233904, i64 %arg235030)         ; call prim_vector_45ref
  %a234059 = call i64 @prim_cdr(i64 %l233727233907)                                  ; call prim_cdr
  %cloptr249692 = call i64* @alloc(i64 32)                                           ; malloc
  %eptr249694 = getelementptr inbounds i64, i64* %cloptr249692, i64 1                ; &eptr249694[1]
  %eptr249695 = getelementptr inbounds i64, i64* %cloptr249692, i64 2                ; &eptr249695[2]
  %eptr249696 = getelementptr inbounds i64, i64* %cloptr249692, i64 3                ; &eptr249696[3]
  store i64 %l233727233907, i64* %eptr249694                                         ; *eptr249694 = %l233727233907
  store i64 %cont234162, i64* %eptr249695                                            ; *eptr249695 = %cont234162
  store i64 %_37wind_45stack233694233874, i64* %eptr249696                           ; *eptr249696 = %_37wind_45stack233694233874
  %eptr249693 = getelementptr inbounds i64, i64* %cloptr249692, i64 0                ; &cloptr249692[0]
  %f249697 = ptrtoint void(i64,i64)* @lam242723 to i64                               ; fptr cast; i64(...)* -> i64
  store i64 %f249697, i64* %eptr249693                                               ; store fptr
  %arg235034 = ptrtoint i64* %cloptr249692 to i64                                    ; closure cast; i64* -> i64
  %sym238139 = add i64 0, 0                                                          ; quoted ()
  %x238140 = call i64 @prim_cons(i64 %a234059, i64 %sym238139)                       ; call prim_cons
  %x238141 = call i64 @prim_cons(i64 %arg235034, i64 %x238140)                       ; call prim_cons
  %cloptr249698 = inttoptr i64 %a234058 to i64*                                      ; closure/env cast; i64 -> i64*
  %i0ptr249699 = getelementptr inbounds i64, i64* %cloptr249698, i64 0               ; &cloptr249698[0]
  %f249701 = load i64, i64* %i0ptr249699, align 8                                    ; load; *i0ptr249699
  %fptr249700 = inttoptr i64 %f249701 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr249700(i64 %a234058, i64 %x238141)                  ; tail call
  ret void

else249691:
  %arg235062 = call i64 @const_init_string(i8* getelementptr inbounds ([67 x i8], [67 x i8]* @str249702, i32 0, i32 0)); quoted string
  %retprim234170 = call i64 @prim_halt(i64 %arg235062)                               ; call prim_halt
  %cloptr249703 = call i64* @alloc(i64 32)                                           ; malloc
  %eptr249705 = getelementptr inbounds i64, i64* %cloptr249703, i64 1                ; &eptr249705[1]
  %eptr249706 = getelementptr inbounds i64, i64* %cloptr249703, i64 2                ; &eptr249706[2]
  %eptr249707 = getelementptr inbounds i64, i64* %cloptr249703, i64 3                ; &eptr249707[3]
  store i64 %l233727233907, i64* %eptr249705                                         ; *eptr249705 = %l233727233907
  store i64 %cont234162, i64* %eptr249706                                            ; *eptr249706 = %cont234162
  store i64 %_37wind_45stack233694233874, i64* %eptr249707                           ; *eptr249707 = %_37wind_45stack233694233874
  %eptr249704 = getelementptr inbounds i64, i64* %cloptr249703, i64 0                ; &cloptr249703[0]
  %f249708 = ptrtoint void(i64,i64)* @lam242770 to i64                               ; fptr cast; i64(...)* -> i64
  store i64 %f249708, i64* %eptr249704                                               ; store fptr
  %arg235065 = ptrtoint i64* %cloptr249703 to i64                                    ; closure cast; i64* -> i64
  %arg235064 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %sym238240 = add i64 0, 0                                                          ; quoted ()
  %x238241 = call i64 @prim_cons(i64 %retprim234170, i64 %sym238240)                 ; call prim_cons
  %x238242 = call i64 @prim_cons(i64 %arg235064, i64 %x238241)                       ; call prim_cons
  %cloptr249709 = inttoptr i64 %arg235065 to i64*                                    ; closure/env cast; i64 -> i64*
  %i0ptr249710 = getelementptr inbounds i64, i64* %cloptr249709, i64 0               ; &cloptr249709[0]
  %f249712 = load i64, i64* %i0ptr249710, align 8                                    ; load; *i0ptr249710
  %fptr249711 = inttoptr i64 %f249712 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr249711(i64 %arg235065, i64 %x238242)                ; tail call
  ret void

else249688:
  %many238249 = call i64 @const_init_string(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @str249713, i32 0, i32 0)); quoted string
  %fail238247 = call i64 @prim_halt(i64 %many238249)                                 ; call prim_halt
  %sym238252 = add i64 0, 0                                                          ; quoted ()
  %cloptr249714 = inttoptr i64 %fail238247 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr249715 = getelementptr inbounds i64, i64* %cloptr249714, i64 0               ; &cloptr249714[0]
  %f249717 = load i64, i64* %i0ptr249715, align 8                                    ; load; *i0ptr249715
  %fptr249716 = inttoptr i64 %f249717 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr249716(i64 %fail238247, i64 %sym238252)             ; tail call
  ret void
}


define void @lam242770(i64 %env242771, i64 %rvp238231) {
  %envptr249718 = inttoptr i64 %env242771 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr249719 = getelementptr inbounds i64, i64* %envptr249718, i64 3              ; &envptr249718[3]
  %_37wind_45stack233694233874 = load i64, i64* %envptr249719, align 8               ; load; *envptr249719
  %envptr249720 = inttoptr i64 %env242771 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr249721 = getelementptr inbounds i64, i64* %envptr249720, i64 2              ; &envptr249720[2]
  %cont234162 = load i64, i64* %envptr249721, align 8                                ; load; *envptr249721
  %envptr249722 = inttoptr i64 %env242771 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr249723 = getelementptr inbounds i64, i64* %envptr249722, i64 1              ; &envptr249722[1]
  %l233727233907 = load i64, i64* %envptr249723, align 8                             ; load; *envptr249723
  %check238232 = call i64 @prim_null_63(i64 %rvp238231)                              ; call prim_null_63
  %cmp249724 = icmp eq i64 %check238232, 15                                          ; false?
  br i1 %cmp249724, label %else249726, label %then249725                             ; if

then249725:
  %msg238236 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str249727, i32 0, i32 0)); quoted string
  %abort238234 = call i64 @prim_halt(i64 %msg238236)                                 ; call prim_halt
  %sym238239 = add i64 0, 0                                                          ; quoted ()
  %cloptr249728 = inttoptr i64 %abort238234 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr249729 = getelementptr inbounds i64, i64* %cloptr249728, i64 0               ; &cloptr249728[0]
  %f249731 = load i64, i64* %i0ptr249729, align 8                                    ; load; *i0ptr249729
  %fptr249730 = inttoptr i64 %f249731 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr249730(i64 %abort238234, i64 %sym238239)            ; tail call
  ret void

else249726:
  %_95234163 = call i64 @prim_car(i64 %rvp238231)                                    ; call prim_car
  %rvp238221 = call i64 @prim_cdr(i64 %rvp238231)                                    ; call prim_cdr
  %check238222 = call i64 @prim_null_63(i64 %rvp238221)                              ; call prim_null_63
  %cmp249732 = icmp eq i64 %check238222, 15                                          ; false?
  br i1 %cmp249732, label %else249734, label %then249733                             ; if

then249733:
  %msg238226 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str249735, i32 0, i32 0)); quoted string
  %abort238224 = call i64 @prim_halt(i64 %msg238226)                                 ; call prim_halt
  %sym238229 = add i64 0, 0                                                          ; quoted ()
  %cloptr249736 = inttoptr i64 %abort238224 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr249737 = getelementptr inbounds i64, i64* %cloptr249736, i64 0               ; &cloptr249736[0]
  %f249739 = load i64, i64* %i0ptr249737, align 8                                    ; load; *i0ptr249737
  %fptr249738 = inttoptr i64 %f249739 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr249738(i64 %abort238224, i64 %sym238229)            ; tail call
  ret void

else249734:
  %rest238228 = call i64 @prim_cdr(i64 %rvp238221)                                   ; call prim_cdr
  %empty238223 = call i64 @prim_null_63(i64 %rest238228)                             ; call prim_null_63
  %cmp249740 = icmp eq i64 %empty238223, 15                                          ; false?
  br i1 %cmp249740, label %else249742, label %then249741                             ; if

then249741:
  %_95t233728233908 = call i64 @prim_car(i64 %rvp238221)                             ; call prim_car
  %na238143 = call i64 @prim_cdr(i64 %rvp238221)                                     ; call prim_cdr
  %a234060 = call i64 @prim_car(i64 %l233727233907)                                  ; call prim_car
  %a234061 = call i64 @prim_car(i64 %a234060)                                        ; call prim_car
  %retprim234168 = call i64 @prim_procedure_63(i64 %a234061)                         ; call prim_procedure_63
  %cloptr249743 = call i64* @alloc(i64 32)                                           ; malloc
  %eptr249745 = getelementptr inbounds i64, i64* %cloptr249743, i64 1                ; &eptr249745[1]
  %eptr249746 = getelementptr inbounds i64, i64* %cloptr249743, i64 2                ; &eptr249746[2]
  %eptr249747 = getelementptr inbounds i64, i64* %cloptr249743, i64 3                ; &eptr249747[3]
  store i64 %l233727233907, i64* %eptr249745                                         ; *eptr249745 = %l233727233907
  store i64 %cont234162, i64* %eptr249746                                            ; *eptr249746 = %cont234162
  store i64 %_37wind_45stack233694233874, i64* %eptr249747                           ; *eptr249747 = %_37wind_45stack233694233874
  %eptr249744 = getelementptr inbounds i64, i64* %cloptr249743, i64 0                ; &cloptr249743[0]
  %f249748 = ptrtoint void(i64,i64)* @lam242766 to i64                               ; fptr cast; i64(...)* -> i64
  store i64 %f249748, i64* %eptr249744                                               ; store fptr
  %arg235071 = ptrtoint i64* %cloptr249743 to i64                                    ; closure cast; i64* -> i64
  %arg235070 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %sym238218 = add i64 0, 0                                                          ; quoted ()
  %x238219 = call i64 @prim_cons(i64 %retprim234168, i64 %sym238218)                 ; call prim_cons
  %x238220 = call i64 @prim_cons(i64 %arg235070, i64 %x238219)                       ; call prim_cons
  %cloptr249749 = inttoptr i64 %arg235071 to i64*                                    ; closure/env cast; i64 -> i64*
  %i0ptr249750 = getelementptr inbounds i64, i64* %cloptr249749, i64 0               ; &cloptr249749[0]
  %f249752 = load i64, i64* %i0ptr249750, align 8                                    ; load; *i0ptr249750
  %fptr249751 = inttoptr i64 %f249752 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr249751(i64 %arg235071, i64 %x238220)                ; tail call
  ret void

else249742:
  %many238227 = call i64 @const_init_string(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @str249753, i32 0, i32 0)); quoted string
  %fail238225 = call i64 @prim_halt(i64 %many238227)                                 ; call prim_halt
  %sym238230 = add i64 0, 0                                                          ; quoted ()
  %cloptr249754 = inttoptr i64 %fail238225 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr249755 = getelementptr inbounds i64, i64* %cloptr249754, i64 0               ; &cloptr249754[0]
  %f249757 = load i64, i64* %i0ptr249755, align 8                                    ; load; *i0ptr249755
  %fptr249756 = inttoptr i64 %f249757 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr249756(i64 %fail238225, i64 %sym238230)             ; tail call
  ret void
}


define void @lam242766(i64 %env242767, i64 %rvp238209) {
  %envptr249758 = inttoptr i64 %env242767 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr249759 = getelementptr inbounds i64, i64* %envptr249758, i64 3              ; &envptr249758[3]
  %_37wind_45stack233694233874 = load i64, i64* %envptr249759, align 8               ; load; *envptr249759
  %envptr249760 = inttoptr i64 %env242767 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr249761 = getelementptr inbounds i64, i64* %envptr249760, i64 2              ; &envptr249760[2]
  %cont234162 = load i64, i64* %envptr249761, align 8                                ; load; *envptr249761
  %envptr249762 = inttoptr i64 %env242767 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr249763 = getelementptr inbounds i64, i64* %envptr249762, i64 1              ; &envptr249762[1]
  %l233727233907 = load i64, i64* %envptr249763, align 8                             ; load; *envptr249763
  %check238210 = call i64 @prim_null_63(i64 %rvp238209)                              ; call prim_null_63
  %cmp249764 = icmp eq i64 %check238210, 15                                          ; false?
  br i1 %cmp249764, label %else249766, label %then249765                             ; if

then249765:
  %msg238214 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str249767, i32 0, i32 0)); quoted string
  %abort238212 = call i64 @prim_halt(i64 %msg238214)                                 ; call prim_halt
  %sym238217 = add i64 0, 0                                                          ; quoted ()
  %cloptr249768 = inttoptr i64 %abort238212 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr249769 = getelementptr inbounds i64, i64* %cloptr249768, i64 0               ; &cloptr249768[0]
  %f249771 = load i64, i64* %i0ptr249769, align 8                                    ; load; *i0ptr249769
  %fptr249770 = inttoptr i64 %f249771 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr249770(i64 %abort238212, i64 %sym238217)            ; tail call
  ret void

else249766:
  %_95234166 = call i64 @prim_car(i64 %rvp238209)                                    ; call prim_car
  %rvp238199 = call i64 @prim_cdr(i64 %rvp238209)                                    ; call prim_cdr
  %check238200 = call i64 @prim_null_63(i64 %rvp238199)                              ; call prim_null_63
  %cmp249772 = icmp eq i64 %check238200, 15                                          ; false?
  br i1 %cmp249772, label %else249774, label %then249773                             ; if

then249773:
  %msg238204 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str249775, i32 0, i32 0)); quoted string
  %abort238202 = call i64 @prim_halt(i64 %msg238204)                                 ; call prim_halt
  %sym238207 = add i64 0, 0                                                          ; quoted ()
  %cloptr249776 = inttoptr i64 %abort238202 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr249777 = getelementptr inbounds i64, i64* %cloptr249776, i64 0               ; &cloptr249776[0]
  %f249779 = load i64, i64* %i0ptr249777, align 8                                    ; load; *i0ptr249777
  %fptr249778 = inttoptr i64 %f249779 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr249778(i64 %abort238202, i64 %sym238207)            ; tail call
  ret void

else249774:
  %rest238206 = call i64 @prim_cdr(i64 %rvp238199)                                   ; call prim_cdr
  %empty238201 = call i64 @prim_null_63(i64 %rest238206)                             ; call prim_null_63
  %cmp249780 = icmp eq i64 %empty238201, 15                                          ; false?
  br i1 %cmp249780, label %else249782, label %then249781                             ; if

then249781:
  %check233573233731233911 = call i64 @prim_car(i64 %rvp238199)                      ; call prim_car
  %na238145 = call i64 @prim_cdr(i64 %rvp238199)                                     ; call prim_cdr
  %cmp249783 = icmp eq i64 %check233573233731233911, 15                              ; false?
  br i1 %cmp249783, label %else249785, label %then249784                             ; if

then249784:
  %a234062 = call i64 @prim_car(i64 %l233727233907)                                  ; call prim_car
  %a234063 = call i64 @prim_car(i64 %a234062)                                        ; call prim_car
  %cloptr249786 = call i64* @alloc(i64 32)                                           ; malloc
  %eptr249788 = getelementptr inbounds i64, i64* %cloptr249786, i64 1                ; &eptr249788[1]
  %eptr249789 = getelementptr inbounds i64, i64* %cloptr249786, i64 2                ; &eptr249789[2]
  %eptr249790 = getelementptr inbounds i64, i64* %cloptr249786, i64 3                ; &eptr249790[3]
  store i64 %l233727233907, i64* %eptr249788                                         ; *eptr249788 = %l233727233907
  store i64 %cont234162, i64* %eptr249789                                            ; *eptr249789 = %cont234162
  store i64 %_37wind_45stack233694233874, i64* %eptr249790                           ; *eptr249790 = %_37wind_45stack233694233874
  %eptr249787 = getelementptr inbounds i64, i64* %cloptr249786, i64 0                ; &cloptr249786[0]
  %f249791 = ptrtoint void(i64,i64)* @lam242748 to i64                               ; fptr cast; i64(...)* -> i64
  store i64 %f249791, i64* %eptr249787                                               ; store fptr
  %arg235074 = ptrtoint i64* %cloptr249786 to i64                                    ; closure cast; i64* -> i64
  %sym238170 = add i64 0, 0                                                          ; quoted ()
  %x238171 = call i64 @prim_cons(i64 %arg235074, i64 %sym238170)                     ; call prim_cons
  %cloptr249792 = inttoptr i64 %a234063 to i64*                                      ; closure/env cast; i64 -> i64*
  %i0ptr249793 = getelementptr inbounds i64, i64* %cloptr249792, i64 0               ; &cloptr249792[0]
  %f249795 = load i64, i64* %i0ptr249793, align 8                                    ; load; *i0ptr249793
  %fptr249794 = inttoptr i64 %f249795 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr249794(i64 %a234063, i64 %x238171)                  ; tail call
  ret void

else249785:
  %arg235082 = call i64 @const_init_string(i8* getelementptr inbounds ([71 x i8], [71 x i8]* @str249796, i32 0, i32 0)); quoted string
  %retprim234167 = call i64 @prim_halt(i64 %arg235082)                               ; call prim_halt
  %cloptr249797 = call i64* @alloc(i64 32)                                           ; malloc
  %eptr249799 = getelementptr inbounds i64, i64* %cloptr249797, i64 1                ; &eptr249799[1]
  %eptr249800 = getelementptr inbounds i64, i64* %cloptr249797, i64 2                ; &eptr249800[2]
  %eptr249801 = getelementptr inbounds i64, i64* %cloptr249797, i64 3                ; &eptr249801[3]
  store i64 %l233727233907, i64* %eptr249799                                         ; *eptr249799 = %l233727233907
  store i64 %cont234162, i64* %eptr249800                                            ; *eptr249800 = %cont234162
  store i64 %_37wind_45stack233694233874, i64* %eptr249801                           ; *eptr249801 = %_37wind_45stack233694233874
  %eptr249798 = getelementptr inbounds i64, i64* %cloptr249797, i64 0                ; &cloptr249797[0]
  %f249802 = ptrtoint void(i64,i64)* @lam242761 to i64                               ; fptr cast; i64(...)* -> i64
  store i64 %f249802, i64* %eptr249798                                               ; store fptr
  %arg235085 = ptrtoint i64* %cloptr249797 to i64                                    ; closure cast; i64* -> i64
  %arg235084 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %sym238196 = add i64 0, 0                                                          ; quoted ()
  %x238197 = call i64 @prim_cons(i64 %retprim234167, i64 %sym238196)                 ; call prim_cons
  %x238198 = call i64 @prim_cons(i64 %arg235084, i64 %x238197)                       ; call prim_cons
  %cloptr249803 = inttoptr i64 %arg235085 to i64*                                    ; closure/env cast; i64 -> i64*
  %i0ptr249804 = getelementptr inbounds i64, i64* %cloptr249803, i64 0               ; &cloptr249803[0]
  %f249806 = load i64, i64* %i0ptr249804, align 8                                    ; load; *i0ptr249804
  %fptr249805 = inttoptr i64 %f249806 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr249805(i64 %arg235085, i64 %x238198)                ; tail call
  ret void

else249782:
  %many238205 = call i64 @const_init_string(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @str249807, i32 0, i32 0)); quoted string
  %fail238203 = call i64 @prim_halt(i64 %many238205)                                 ; call prim_halt
  %sym238208 = add i64 0, 0                                                          ; quoted ()
  %cloptr249808 = inttoptr i64 %fail238203 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr249809 = getelementptr inbounds i64, i64* %cloptr249808, i64 0               ; &cloptr249808[0]
  %f249811 = load i64, i64* %i0ptr249809, align 8                                    ; load; *i0ptr249809
  %fptr249810 = inttoptr i64 %f249811 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr249810(i64 %fail238203, i64 %sym238208)             ; tail call
  ret void
}


define void @lam242761(i64 %env242762, i64 %rvp238187) {
  %envptr249812 = inttoptr i64 %env242762 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr249813 = getelementptr inbounds i64, i64* %envptr249812, i64 3              ; &envptr249812[3]
  %_37wind_45stack233694233874 = load i64, i64* %envptr249813, align 8               ; load; *envptr249813
  %envptr249814 = inttoptr i64 %env242762 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr249815 = getelementptr inbounds i64, i64* %envptr249814, i64 2              ; &envptr249814[2]
  %cont234162 = load i64, i64* %envptr249815, align 8                                ; load; *envptr249815
  %envptr249816 = inttoptr i64 %env242762 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr249817 = getelementptr inbounds i64, i64* %envptr249816, i64 1              ; &envptr249816[1]
  %l233727233907 = load i64, i64* %envptr249817, align 8                             ; load; *envptr249817
  %check238188 = call i64 @prim_null_63(i64 %rvp238187)                              ; call prim_null_63
  %cmp249818 = icmp eq i64 %check238188, 15                                          ; false?
  br i1 %cmp249818, label %else249820, label %then249819                             ; if

then249819:
  %msg238192 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str249821, i32 0, i32 0)); quoted string
  %abort238190 = call i64 @prim_halt(i64 %msg238192)                                 ; call prim_halt
  %sym238195 = add i64 0, 0                                                          ; quoted ()
  %cloptr249822 = inttoptr i64 %abort238190 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr249823 = getelementptr inbounds i64, i64* %cloptr249822, i64 0               ; &cloptr249822[0]
  %f249825 = load i64, i64* %i0ptr249823, align 8                                    ; load; *i0ptr249823
  %fptr249824 = inttoptr i64 %f249825 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr249824(i64 %abort238190, i64 %sym238195)            ; tail call
  ret void

else249820:
  %_95234164 = call i64 @prim_car(i64 %rvp238187)                                    ; call prim_car
  %rvp238177 = call i64 @prim_cdr(i64 %rvp238187)                                    ; call prim_cdr
  %check238178 = call i64 @prim_null_63(i64 %rvp238177)                              ; call prim_null_63
  %cmp249826 = icmp eq i64 %check238178, 15                                          ; false?
  br i1 %cmp249826, label %else249828, label %then249827                             ; if

then249827:
  %msg238182 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str249829, i32 0, i32 0)); quoted string
  %abort238180 = call i64 @prim_halt(i64 %msg238182)                                 ; call prim_halt
  %sym238185 = add i64 0, 0                                                          ; quoted ()
  %cloptr249830 = inttoptr i64 %abort238180 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr249831 = getelementptr inbounds i64, i64* %cloptr249830, i64 0               ; &cloptr249830[0]
  %f249833 = load i64, i64* %i0ptr249831, align 8                                    ; load; *i0ptr249831
  %fptr249832 = inttoptr i64 %f249833 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr249832(i64 %abort238180, i64 %sym238185)            ; tail call
  ret void

else249828:
  %rest238184 = call i64 @prim_cdr(i64 %rvp238177)                                   ; call prim_cdr
  %empty238179 = call i64 @prim_null_63(i64 %rest238184)                             ; call prim_null_63
  %cmp249834 = icmp eq i64 %empty238179, 15                                          ; false?
  br i1 %cmp249834, label %else249836, label %then249835                             ; if

then249835:
  %_95t233730233910 = call i64 @prim_car(i64 %rvp238177)                             ; call prim_car
  %na238173 = call i64 @prim_cdr(i64 %rvp238177)                                     ; call prim_cdr
  %arg235087 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %retprim234165 = call i64 @prim_vector_45set_33(i64 %_37wind_45stack233694233874, i64 %arg235087, i64 %l233727233907); call prim_vector_45set_33
  %arg235090 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %sym238174 = add i64 0, 0                                                          ; quoted ()
  %x238175 = call i64 @prim_cons(i64 %retprim234165, i64 %sym238174)                 ; call prim_cons
  %x238176 = call i64 @prim_cons(i64 %arg235090, i64 %x238175)                       ; call prim_cons
  %cloptr249837 = inttoptr i64 %cont234162 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr249838 = getelementptr inbounds i64, i64* %cloptr249837, i64 0               ; &cloptr249837[0]
  %f249840 = load i64, i64* %i0ptr249838, align 8                                    ; load; *i0ptr249838
  %fptr249839 = inttoptr i64 %f249840 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr249839(i64 %cont234162, i64 %x238176)               ; tail call
  ret void

else249836:
  %many238183 = call i64 @const_init_string(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @str249841, i32 0, i32 0)); quoted string
  %fail238181 = call i64 @prim_halt(i64 %many238183)                                 ; call prim_halt
  %sym238186 = add i64 0, 0                                                          ; quoted ()
  %cloptr249842 = inttoptr i64 %fail238181 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr249843 = getelementptr inbounds i64, i64* %cloptr249842, i64 0               ; &cloptr249842[0]
  %f249845 = load i64, i64* %i0ptr249843, align 8                                    ; load; *i0ptr249843
  %fptr249844 = inttoptr i64 %f249845 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr249844(i64 %fail238181, i64 %sym238186)             ; tail call
  ret void
}


define void @lam242748(i64 %env242749, i64 %rvp238161) {
  %envptr249846 = inttoptr i64 %env242749 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr249847 = getelementptr inbounds i64, i64* %envptr249846, i64 3              ; &envptr249846[3]
  %_37wind_45stack233694233874 = load i64, i64* %envptr249847, align 8               ; load; *envptr249847
  %envptr249848 = inttoptr i64 %env242749 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr249849 = getelementptr inbounds i64, i64* %envptr249848, i64 2              ; &envptr249848[2]
  %cont234162 = load i64, i64* %envptr249849, align 8                                ; load; *envptr249849
  %envptr249850 = inttoptr i64 %env242749 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr249851 = getelementptr inbounds i64, i64* %envptr249850, i64 1              ; &envptr249850[1]
  %l233727233907 = load i64, i64* %envptr249851, align 8                             ; load; *envptr249851
  %check238162 = call i64 @prim_null_63(i64 %rvp238161)                              ; call prim_null_63
  %cmp249852 = icmp eq i64 %check238162, 15                                          ; false?
  br i1 %cmp249852, label %else249854, label %then249853                             ; if

then249853:
  %msg238166 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str249855, i32 0, i32 0)); quoted string
  %abort238164 = call i64 @prim_halt(i64 %msg238166)                                 ; call prim_halt
  %sym238169 = add i64 0, 0                                                          ; quoted ()
  %cloptr249856 = inttoptr i64 %abort238164 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr249857 = getelementptr inbounds i64, i64* %cloptr249856, i64 0               ; &cloptr249856[0]
  %f249859 = load i64, i64* %i0ptr249857, align 8                                    ; load; *i0ptr249857
  %fptr249858 = inttoptr i64 %f249859 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr249858(i64 %abort238164, i64 %sym238169)            ; tail call
  ret void

else249854:
  %_95234164 = call i64 @prim_car(i64 %rvp238161)                                    ; call prim_car
  %rvp238151 = call i64 @prim_cdr(i64 %rvp238161)                                    ; call prim_cdr
  %check238152 = call i64 @prim_null_63(i64 %rvp238151)                              ; call prim_null_63
  %cmp249860 = icmp eq i64 %check238152, 15                                          ; false?
  br i1 %cmp249860, label %else249862, label %then249861                             ; if

then249861:
  %msg238156 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str249863, i32 0, i32 0)); quoted string
  %abort238154 = call i64 @prim_halt(i64 %msg238156)                                 ; call prim_halt
  %sym238159 = add i64 0, 0                                                          ; quoted ()
  %cloptr249864 = inttoptr i64 %abort238154 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr249865 = getelementptr inbounds i64, i64* %cloptr249864, i64 0               ; &cloptr249864[0]
  %f249867 = load i64, i64* %i0ptr249865, align 8                                    ; load; *i0ptr249865
  %fptr249866 = inttoptr i64 %f249867 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr249866(i64 %abort238154, i64 %sym238159)            ; tail call
  ret void

else249862:
  %rest238158 = call i64 @prim_cdr(i64 %rvp238151)                                   ; call prim_cdr
  %empty238153 = call i64 @prim_null_63(i64 %rest238158)                             ; call prim_null_63
  %cmp249868 = icmp eq i64 %empty238153, 15                                          ; false?
  br i1 %cmp249868, label %else249870, label %then249869                             ; if

then249869:
  %_95t233730233910 = call i64 @prim_car(i64 %rvp238151)                             ; call prim_car
  %na238147 = call i64 @prim_cdr(i64 %rvp238151)                                     ; call prim_cdr
  %arg235077 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %retprim234165 = call i64 @prim_vector_45set_33(i64 %_37wind_45stack233694233874, i64 %arg235077, i64 %l233727233907); call prim_vector_45set_33
  %arg235080 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %sym238148 = add i64 0, 0                                                          ; quoted ()
  %x238149 = call i64 @prim_cons(i64 %retprim234165, i64 %sym238148)                 ; call prim_cons
  %x238150 = call i64 @prim_cons(i64 %arg235080, i64 %x238149)                       ; call prim_cons
  %cloptr249871 = inttoptr i64 %cont234162 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr249872 = getelementptr inbounds i64, i64* %cloptr249871, i64 0               ; &cloptr249871[0]
  %f249874 = load i64, i64* %i0ptr249872, align 8                                    ; load; *i0ptr249872
  %fptr249873 = inttoptr i64 %f249874 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr249873(i64 %cont234162, i64 %x238150)               ; tail call
  ret void

else249870:
  %many238157 = call i64 @const_init_string(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @str249875, i32 0, i32 0)); quoted string
  %fail238155 = call i64 @prim_halt(i64 %many238157)                                 ; call prim_halt
  %sym238160 = add i64 0, 0                                                          ; quoted ()
  %cloptr249876 = inttoptr i64 %fail238155 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr249877 = getelementptr inbounds i64, i64* %cloptr249876, i64 0               ; &cloptr249876[0]
  %f249879 = load i64, i64* %i0ptr249877, align 8                                    ; load; *i0ptr249877
  %fptr249878 = inttoptr i64 %f249879 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr249878(i64 %fail238155, i64 %sym238160)             ; tail call
  ret void
}


define void @lam242723(i64 %env242724, i64 %rvp238130) {
  %envptr249880 = inttoptr i64 %env242724 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr249881 = getelementptr inbounds i64, i64* %envptr249880, i64 3              ; &envptr249880[3]
  %_37wind_45stack233694233874 = load i64, i64* %envptr249881, align 8               ; load; *envptr249881
  %envptr249882 = inttoptr i64 %env242724 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr249883 = getelementptr inbounds i64, i64* %envptr249882, i64 2              ; &envptr249882[2]
  %cont234162 = load i64, i64* %envptr249883, align 8                                ; load; *envptr249883
  %envptr249884 = inttoptr i64 %env242724 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr249885 = getelementptr inbounds i64, i64* %envptr249884, i64 1              ; &envptr249884[1]
  %l233727233907 = load i64, i64* %envptr249885, align 8                             ; load; *envptr249885
  %check238131 = call i64 @prim_null_63(i64 %rvp238130)                              ; call prim_null_63
  %cmp249886 = icmp eq i64 %check238131, 15                                          ; false?
  br i1 %cmp249886, label %else249888, label %then249887                             ; if

then249887:
  %msg238135 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str249889, i32 0, i32 0)); quoted string
  %abort238133 = call i64 @prim_halt(i64 %msg238135)                                 ; call prim_halt
  %sym238138 = add i64 0, 0                                                          ; quoted ()
  %cloptr249890 = inttoptr i64 %abort238133 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr249891 = getelementptr inbounds i64, i64* %cloptr249890, i64 0               ; &cloptr249890[0]
  %f249893 = load i64, i64* %i0ptr249891, align 8                                    ; load; *i0ptr249891
  %fptr249892 = inttoptr i64 %f249893 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr249892(i64 %abort238133, i64 %sym238138)            ; tail call
  ret void

else249888:
  %_95234163 = call i64 @prim_car(i64 %rvp238130)                                    ; call prim_car
  %rvp238120 = call i64 @prim_cdr(i64 %rvp238130)                                    ; call prim_cdr
  %check238121 = call i64 @prim_null_63(i64 %rvp238120)                              ; call prim_null_63
  %cmp249894 = icmp eq i64 %check238121, 15                                          ; false?
  br i1 %cmp249894, label %else249896, label %then249895                             ; if

then249895:
  %msg238125 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str249897, i32 0, i32 0)); quoted string
  %abort238123 = call i64 @prim_halt(i64 %msg238125)                                 ; call prim_halt
  %sym238128 = add i64 0, 0                                                          ; quoted ()
  %cloptr249898 = inttoptr i64 %abort238123 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr249899 = getelementptr inbounds i64, i64* %cloptr249898, i64 0               ; &cloptr249898[0]
  %f249901 = load i64, i64* %i0ptr249899, align 8                                    ; load; *i0ptr249899
  %fptr249900 = inttoptr i64 %f249901 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr249900(i64 %abort238123, i64 %sym238128)            ; tail call
  ret void

else249896:
  %rest238127 = call i64 @prim_cdr(i64 %rvp238120)                                   ; call prim_cdr
  %empty238122 = call i64 @prim_null_63(i64 %rest238127)                             ; call prim_null_63
  %cmp249902 = icmp eq i64 %empty238122, 15                                          ; false?
  br i1 %cmp249902, label %else249904, label %then249903                             ; if

then249903:
  %_95t233728233908 = call i64 @prim_car(i64 %rvp238120)                             ; call prim_car
  %na238042 = call i64 @prim_cdr(i64 %rvp238120)                                     ; call prim_cdr
  %a234060 = call i64 @prim_car(i64 %l233727233907)                                  ; call prim_car
  %a234061 = call i64 @prim_car(i64 %a234060)                                        ; call prim_car
  %retprim234168 = call i64 @prim_procedure_63(i64 %a234061)                         ; call prim_procedure_63
  %cloptr249905 = call i64* @alloc(i64 32)                                           ; malloc
  %eptr249907 = getelementptr inbounds i64, i64* %cloptr249905, i64 1                ; &eptr249907[1]
  %eptr249908 = getelementptr inbounds i64, i64* %cloptr249905, i64 2                ; &eptr249908[2]
  %eptr249909 = getelementptr inbounds i64, i64* %cloptr249905, i64 3                ; &eptr249909[3]
  store i64 %l233727233907, i64* %eptr249907                                         ; *eptr249907 = %l233727233907
  store i64 %cont234162, i64* %eptr249908                                            ; *eptr249908 = %cont234162
  store i64 %_37wind_45stack233694233874, i64* %eptr249909                           ; *eptr249909 = %_37wind_45stack233694233874
  %eptr249906 = getelementptr inbounds i64, i64* %cloptr249905, i64 0                ; &cloptr249905[0]
  %f249910 = ptrtoint void(i64,i64)* @lam242719 to i64                               ; fptr cast; i64(...)* -> i64
  store i64 %f249910, i64* %eptr249906                                               ; store fptr
  %arg235041 = ptrtoint i64* %cloptr249905 to i64                                    ; closure cast; i64* -> i64
  %arg235040 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %sym238117 = add i64 0, 0                                                          ; quoted ()
  %x238118 = call i64 @prim_cons(i64 %retprim234168, i64 %sym238117)                 ; call prim_cons
  %x238119 = call i64 @prim_cons(i64 %arg235040, i64 %x238118)                       ; call prim_cons
  %cloptr249911 = inttoptr i64 %arg235041 to i64*                                    ; closure/env cast; i64 -> i64*
  %i0ptr249912 = getelementptr inbounds i64, i64* %cloptr249911, i64 0               ; &cloptr249911[0]
  %f249914 = load i64, i64* %i0ptr249912, align 8                                    ; load; *i0ptr249912
  %fptr249913 = inttoptr i64 %f249914 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr249913(i64 %arg235041, i64 %x238119)                ; tail call
  ret void

else249904:
  %many238126 = call i64 @const_init_string(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @str249915, i32 0, i32 0)); quoted string
  %fail238124 = call i64 @prim_halt(i64 %many238126)                                 ; call prim_halt
  %sym238129 = add i64 0, 0                                                          ; quoted ()
  %cloptr249916 = inttoptr i64 %fail238124 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr249917 = getelementptr inbounds i64, i64* %cloptr249916, i64 0               ; &cloptr249916[0]
  %f249919 = load i64, i64* %i0ptr249917, align 8                                    ; load; *i0ptr249917
  %fptr249918 = inttoptr i64 %f249919 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr249918(i64 %fail238124, i64 %sym238129)             ; tail call
  ret void
}


define void @lam242719(i64 %env242720, i64 %rvp238108) {
  %envptr249920 = inttoptr i64 %env242720 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr249921 = getelementptr inbounds i64, i64* %envptr249920, i64 3              ; &envptr249920[3]
  %_37wind_45stack233694233874 = load i64, i64* %envptr249921, align 8               ; load; *envptr249921
  %envptr249922 = inttoptr i64 %env242720 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr249923 = getelementptr inbounds i64, i64* %envptr249922, i64 2              ; &envptr249922[2]
  %cont234162 = load i64, i64* %envptr249923, align 8                                ; load; *envptr249923
  %envptr249924 = inttoptr i64 %env242720 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr249925 = getelementptr inbounds i64, i64* %envptr249924, i64 1              ; &envptr249924[1]
  %l233727233907 = load i64, i64* %envptr249925, align 8                             ; load; *envptr249925
  %check238109 = call i64 @prim_null_63(i64 %rvp238108)                              ; call prim_null_63
  %cmp249926 = icmp eq i64 %check238109, 15                                          ; false?
  br i1 %cmp249926, label %else249928, label %then249927                             ; if

then249927:
  %msg238113 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str249929, i32 0, i32 0)); quoted string
  %abort238111 = call i64 @prim_halt(i64 %msg238113)                                 ; call prim_halt
  %sym238116 = add i64 0, 0                                                          ; quoted ()
  %cloptr249930 = inttoptr i64 %abort238111 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr249931 = getelementptr inbounds i64, i64* %cloptr249930, i64 0               ; &cloptr249930[0]
  %f249933 = load i64, i64* %i0ptr249931, align 8                                    ; load; *i0ptr249931
  %fptr249932 = inttoptr i64 %f249933 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr249932(i64 %abort238111, i64 %sym238116)            ; tail call
  ret void

else249928:
  %_95234166 = call i64 @prim_car(i64 %rvp238108)                                    ; call prim_car
  %rvp238098 = call i64 @prim_cdr(i64 %rvp238108)                                    ; call prim_cdr
  %check238099 = call i64 @prim_null_63(i64 %rvp238098)                              ; call prim_null_63
  %cmp249934 = icmp eq i64 %check238099, 15                                          ; false?
  br i1 %cmp249934, label %else249936, label %then249935                             ; if

then249935:
  %msg238103 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str249937, i32 0, i32 0)); quoted string
  %abort238101 = call i64 @prim_halt(i64 %msg238103)                                 ; call prim_halt
  %sym238106 = add i64 0, 0                                                          ; quoted ()
  %cloptr249938 = inttoptr i64 %abort238101 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr249939 = getelementptr inbounds i64, i64* %cloptr249938, i64 0               ; &cloptr249938[0]
  %f249941 = load i64, i64* %i0ptr249939, align 8                                    ; load; *i0ptr249939
  %fptr249940 = inttoptr i64 %f249941 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr249940(i64 %abort238101, i64 %sym238106)            ; tail call
  ret void

else249936:
  %rest238105 = call i64 @prim_cdr(i64 %rvp238098)                                   ; call prim_cdr
  %empty238100 = call i64 @prim_null_63(i64 %rest238105)                             ; call prim_null_63
  %cmp249942 = icmp eq i64 %empty238100, 15                                          ; false?
  br i1 %cmp249942, label %else249944, label %then249943                             ; if

then249943:
  %check233573233731233911 = call i64 @prim_car(i64 %rvp238098)                      ; call prim_car
  %na238044 = call i64 @prim_cdr(i64 %rvp238098)                                     ; call prim_cdr
  %cmp249945 = icmp eq i64 %check233573233731233911, 15                              ; false?
  br i1 %cmp249945, label %else249947, label %then249946                             ; if

then249946:
  %a234062 = call i64 @prim_car(i64 %l233727233907)                                  ; call prim_car
  %a234063 = call i64 @prim_car(i64 %a234062)                                        ; call prim_car
  %cloptr249948 = call i64* @alloc(i64 32)                                           ; malloc
  %eptr249950 = getelementptr inbounds i64, i64* %cloptr249948, i64 1                ; &eptr249950[1]
  %eptr249951 = getelementptr inbounds i64, i64* %cloptr249948, i64 2                ; &eptr249951[2]
  %eptr249952 = getelementptr inbounds i64, i64* %cloptr249948, i64 3                ; &eptr249952[3]
  store i64 %l233727233907, i64* %eptr249950                                         ; *eptr249950 = %l233727233907
  store i64 %cont234162, i64* %eptr249951                                            ; *eptr249951 = %cont234162
  store i64 %_37wind_45stack233694233874, i64* %eptr249952                           ; *eptr249952 = %_37wind_45stack233694233874
  %eptr249949 = getelementptr inbounds i64, i64* %cloptr249948, i64 0                ; &cloptr249948[0]
  %f249953 = ptrtoint void(i64,i64)* @lam242701 to i64                               ; fptr cast; i64(...)* -> i64
  store i64 %f249953, i64* %eptr249949                                               ; store fptr
  %arg235044 = ptrtoint i64* %cloptr249948 to i64                                    ; closure cast; i64* -> i64
  %sym238069 = add i64 0, 0                                                          ; quoted ()
  %x238070 = call i64 @prim_cons(i64 %arg235044, i64 %sym238069)                     ; call prim_cons
  %cloptr249954 = inttoptr i64 %a234063 to i64*                                      ; closure/env cast; i64 -> i64*
  %i0ptr249955 = getelementptr inbounds i64, i64* %cloptr249954, i64 0               ; &cloptr249954[0]
  %f249957 = load i64, i64* %i0ptr249955, align 8                                    ; load; *i0ptr249955
  %fptr249956 = inttoptr i64 %f249957 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr249956(i64 %a234063, i64 %x238070)                  ; tail call
  ret void

else249947:
  %arg235052 = call i64 @const_init_string(i8* getelementptr inbounds ([71 x i8], [71 x i8]* @str249958, i32 0, i32 0)); quoted string
  %retprim234167 = call i64 @prim_halt(i64 %arg235052)                               ; call prim_halt
  %cloptr249959 = call i64* @alloc(i64 32)                                           ; malloc
  %eptr249961 = getelementptr inbounds i64, i64* %cloptr249959, i64 1                ; &eptr249961[1]
  %eptr249962 = getelementptr inbounds i64, i64* %cloptr249959, i64 2                ; &eptr249962[2]
  %eptr249963 = getelementptr inbounds i64, i64* %cloptr249959, i64 3                ; &eptr249963[3]
  store i64 %l233727233907, i64* %eptr249961                                         ; *eptr249961 = %l233727233907
  store i64 %cont234162, i64* %eptr249962                                            ; *eptr249962 = %cont234162
  store i64 %_37wind_45stack233694233874, i64* %eptr249963                           ; *eptr249963 = %_37wind_45stack233694233874
  %eptr249960 = getelementptr inbounds i64, i64* %cloptr249959, i64 0                ; &cloptr249959[0]
  %f249964 = ptrtoint void(i64,i64)* @lam242714 to i64                               ; fptr cast; i64(...)* -> i64
  store i64 %f249964, i64* %eptr249960                                               ; store fptr
  %arg235055 = ptrtoint i64* %cloptr249959 to i64                                    ; closure cast; i64* -> i64
  %arg235054 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %sym238095 = add i64 0, 0                                                          ; quoted ()
  %x238096 = call i64 @prim_cons(i64 %retprim234167, i64 %sym238095)                 ; call prim_cons
  %x238097 = call i64 @prim_cons(i64 %arg235054, i64 %x238096)                       ; call prim_cons
  %cloptr249965 = inttoptr i64 %arg235055 to i64*                                    ; closure/env cast; i64 -> i64*
  %i0ptr249966 = getelementptr inbounds i64, i64* %cloptr249965, i64 0               ; &cloptr249965[0]
  %f249968 = load i64, i64* %i0ptr249966, align 8                                    ; load; *i0ptr249966
  %fptr249967 = inttoptr i64 %f249968 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr249967(i64 %arg235055, i64 %x238097)                ; tail call
  ret void

else249944:
  %many238104 = call i64 @const_init_string(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @str249969, i32 0, i32 0)); quoted string
  %fail238102 = call i64 @prim_halt(i64 %many238104)                                 ; call prim_halt
  %sym238107 = add i64 0, 0                                                          ; quoted ()
  %cloptr249970 = inttoptr i64 %fail238102 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr249971 = getelementptr inbounds i64, i64* %cloptr249970, i64 0               ; &cloptr249970[0]
  %f249973 = load i64, i64* %i0ptr249971, align 8                                    ; load; *i0ptr249971
  %fptr249972 = inttoptr i64 %f249973 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr249972(i64 %fail238102, i64 %sym238107)             ; tail call
  ret void
}


define void @lam242714(i64 %env242715, i64 %rvp238086) {
  %envptr249974 = inttoptr i64 %env242715 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr249975 = getelementptr inbounds i64, i64* %envptr249974, i64 3              ; &envptr249974[3]
  %_37wind_45stack233694233874 = load i64, i64* %envptr249975, align 8               ; load; *envptr249975
  %envptr249976 = inttoptr i64 %env242715 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr249977 = getelementptr inbounds i64, i64* %envptr249976, i64 2              ; &envptr249976[2]
  %cont234162 = load i64, i64* %envptr249977, align 8                                ; load; *envptr249977
  %envptr249978 = inttoptr i64 %env242715 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr249979 = getelementptr inbounds i64, i64* %envptr249978, i64 1              ; &envptr249978[1]
  %l233727233907 = load i64, i64* %envptr249979, align 8                             ; load; *envptr249979
  %check238087 = call i64 @prim_null_63(i64 %rvp238086)                              ; call prim_null_63
  %cmp249980 = icmp eq i64 %check238087, 15                                          ; false?
  br i1 %cmp249980, label %else249982, label %then249981                             ; if

then249981:
  %msg238091 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str249983, i32 0, i32 0)); quoted string
  %abort238089 = call i64 @prim_halt(i64 %msg238091)                                 ; call prim_halt
  %sym238094 = add i64 0, 0                                                          ; quoted ()
  %cloptr249984 = inttoptr i64 %abort238089 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr249985 = getelementptr inbounds i64, i64* %cloptr249984, i64 0               ; &cloptr249984[0]
  %f249987 = load i64, i64* %i0ptr249985, align 8                                    ; load; *i0ptr249985
  %fptr249986 = inttoptr i64 %f249987 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr249986(i64 %abort238089, i64 %sym238094)            ; tail call
  ret void

else249982:
  %_95234164 = call i64 @prim_car(i64 %rvp238086)                                    ; call prim_car
  %rvp238076 = call i64 @prim_cdr(i64 %rvp238086)                                    ; call prim_cdr
  %check238077 = call i64 @prim_null_63(i64 %rvp238076)                              ; call prim_null_63
  %cmp249988 = icmp eq i64 %check238077, 15                                          ; false?
  br i1 %cmp249988, label %else249990, label %then249989                             ; if

then249989:
  %msg238081 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str249991, i32 0, i32 0)); quoted string
  %abort238079 = call i64 @prim_halt(i64 %msg238081)                                 ; call prim_halt
  %sym238084 = add i64 0, 0                                                          ; quoted ()
  %cloptr249992 = inttoptr i64 %abort238079 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr249993 = getelementptr inbounds i64, i64* %cloptr249992, i64 0               ; &cloptr249992[0]
  %f249995 = load i64, i64* %i0ptr249993, align 8                                    ; load; *i0ptr249993
  %fptr249994 = inttoptr i64 %f249995 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr249994(i64 %abort238079, i64 %sym238084)            ; tail call
  ret void

else249990:
  %rest238083 = call i64 @prim_cdr(i64 %rvp238076)                                   ; call prim_cdr
  %empty238078 = call i64 @prim_null_63(i64 %rest238083)                             ; call prim_null_63
  %cmp249996 = icmp eq i64 %empty238078, 15                                          ; false?
  br i1 %cmp249996, label %else249998, label %then249997                             ; if

then249997:
  %_95t233730233910 = call i64 @prim_car(i64 %rvp238076)                             ; call prim_car
  %na238072 = call i64 @prim_cdr(i64 %rvp238076)                                     ; call prim_cdr
  %arg235057 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %retprim234165 = call i64 @prim_vector_45set_33(i64 %_37wind_45stack233694233874, i64 %arg235057, i64 %l233727233907); call prim_vector_45set_33
  %arg235060 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %sym238073 = add i64 0, 0                                                          ; quoted ()
  %x238074 = call i64 @prim_cons(i64 %retprim234165, i64 %sym238073)                 ; call prim_cons
  %x238075 = call i64 @prim_cons(i64 %arg235060, i64 %x238074)                       ; call prim_cons
  %cloptr249999 = inttoptr i64 %cont234162 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr250000 = getelementptr inbounds i64, i64* %cloptr249999, i64 0               ; &cloptr249999[0]
  %f250002 = load i64, i64* %i0ptr250000, align 8                                    ; load; *i0ptr250000
  %fptr250001 = inttoptr i64 %f250002 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr250001(i64 %cont234162, i64 %x238075)               ; tail call
  ret void

else249998:
  %many238082 = call i64 @const_init_string(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @str250003, i32 0, i32 0)); quoted string
  %fail238080 = call i64 @prim_halt(i64 %many238082)                                 ; call prim_halt
  %sym238085 = add i64 0, 0                                                          ; quoted ()
  %cloptr250004 = inttoptr i64 %fail238080 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr250005 = getelementptr inbounds i64, i64* %cloptr250004, i64 0               ; &cloptr250004[0]
  %f250007 = load i64, i64* %i0ptr250005, align 8                                    ; load; *i0ptr250005
  %fptr250006 = inttoptr i64 %f250007 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr250006(i64 %fail238080, i64 %sym238085)             ; tail call
  ret void
}


define void @lam242701(i64 %env242702, i64 %rvp238060) {
  %envptr250008 = inttoptr i64 %env242702 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr250009 = getelementptr inbounds i64, i64* %envptr250008, i64 3              ; &envptr250008[3]
  %_37wind_45stack233694233874 = load i64, i64* %envptr250009, align 8               ; load; *envptr250009
  %envptr250010 = inttoptr i64 %env242702 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr250011 = getelementptr inbounds i64, i64* %envptr250010, i64 2              ; &envptr250010[2]
  %cont234162 = load i64, i64* %envptr250011, align 8                                ; load; *envptr250011
  %envptr250012 = inttoptr i64 %env242702 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr250013 = getelementptr inbounds i64, i64* %envptr250012, i64 1              ; &envptr250012[1]
  %l233727233907 = load i64, i64* %envptr250013, align 8                             ; load; *envptr250013
  %check238061 = call i64 @prim_null_63(i64 %rvp238060)                              ; call prim_null_63
  %cmp250014 = icmp eq i64 %check238061, 15                                          ; false?
  br i1 %cmp250014, label %else250016, label %then250015                             ; if

then250015:
  %msg238065 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str250017, i32 0, i32 0)); quoted string
  %abort238063 = call i64 @prim_halt(i64 %msg238065)                                 ; call prim_halt
  %sym238068 = add i64 0, 0                                                          ; quoted ()
  %cloptr250018 = inttoptr i64 %abort238063 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr250019 = getelementptr inbounds i64, i64* %cloptr250018, i64 0               ; &cloptr250018[0]
  %f250021 = load i64, i64* %i0ptr250019, align 8                                    ; load; *i0ptr250019
  %fptr250020 = inttoptr i64 %f250021 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr250020(i64 %abort238063, i64 %sym238068)            ; tail call
  ret void

else250016:
  %_95234164 = call i64 @prim_car(i64 %rvp238060)                                    ; call prim_car
  %rvp238050 = call i64 @prim_cdr(i64 %rvp238060)                                    ; call prim_cdr
  %check238051 = call i64 @prim_null_63(i64 %rvp238050)                              ; call prim_null_63
  %cmp250022 = icmp eq i64 %check238051, 15                                          ; false?
  br i1 %cmp250022, label %else250024, label %then250023                             ; if

then250023:
  %msg238055 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str250025, i32 0, i32 0)); quoted string
  %abort238053 = call i64 @prim_halt(i64 %msg238055)                                 ; call prim_halt
  %sym238058 = add i64 0, 0                                                          ; quoted ()
  %cloptr250026 = inttoptr i64 %abort238053 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr250027 = getelementptr inbounds i64, i64* %cloptr250026, i64 0               ; &cloptr250026[0]
  %f250029 = load i64, i64* %i0ptr250027, align 8                                    ; load; *i0ptr250027
  %fptr250028 = inttoptr i64 %f250029 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr250028(i64 %abort238053, i64 %sym238058)            ; tail call
  ret void

else250024:
  %rest238057 = call i64 @prim_cdr(i64 %rvp238050)                                   ; call prim_cdr
  %empty238052 = call i64 @prim_null_63(i64 %rest238057)                             ; call prim_null_63
  %cmp250030 = icmp eq i64 %empty238052, 15                                          ; false?
  br i1 %cmp250030, label %else250032, label %then250031                             ; if

then250031:
  %_95t233730233910 = call i64 @prim_car(i64 %rvp238050)                             ; call prim_car
  %na238046 = call i64 @prim_cdr(i64 %rvp238050)                                     ; call prim_cdr
  %arg235047 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %retprim234165 = call i64 @prim_vector_45set_33(i64 %_37wind_45stack233694233874, i64 %arg235047, i64 %l233727233907); call prim_vector_45set_33
  %arg235050 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %sym238047 = add i64 0, 0                                                          ; quoted ()
  %x238048 = call i64 @prim_cons(i64 %retprim234165, i64 %sym238047)                 ; call prim_cons
  %x238049 = call i64 @prim_cons(i64 %arg235050, i64 %x238048)                       ; call prim_cons
  %cloptr250033 = inttoptr i64 %cont234162 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr250034 = getelementptr inbounds i64, i64* %cloptr250033, i64 0               ; &cloptr250033[0]
  %f250036 = load i64, i64* %i0ptr250034, align 8                                    ; load; *i0ptr250034
  %fptr250035 = inttoptr i64 %f250036 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr250035(i64 %cont234162, i64 %x238049)               ; tail call
  ret void

else250032:
  %many238056 = call i64 @const_init_string(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @str250037, i32 0, i32 0)); quoted string
  %fail238054 = call i64 @prim_halt(i64 %many238056)                                 ; call prim_halt
  %sym238059 = add i64 0, 0                                                          ; quoted ()
  %cloptr250038 = inttoptr i64 %fail238054 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr250039 = getelementptr inbounds i64, i64* %cloptr250038, i64 0               ; &cloptr250038[0]
  %f250041 = load i64, i64* %i0ptr250039, align 8                                    ; load; *i0ptr250039
  %fptr250040 = inttoptr i64 %f250041 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr250040(i64 %fail238054, i64 %sym238059)             ; tail call
  ret void
}


define void @lam242666(i64 %env242667, i64 %rvp238305) {
  %envptr250042 = inttoptr i64 %env242667 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr250043 = getelementptr inbounds i64, i64* %envptr250042, i64 3              ; &envptr250042[3]
  %f233724233904 = load i64, i64* %envptr250043, align 8                             ; load; *envptr250043
  %envptr250044 = inttoptr i64 %env242667 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr250045 = getelementptr inbounds i64, i64* %envptr250044, i64 2              ; &envptr250044[2]
  %cont234158 = load i64, i64* %envptr250045, align 8                                ; load; *envptr250045
  %envptr250046 = inttoptr i64 %env242667 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr250047 = getelementptr inbounds i64, i64* %envptr250046, i64 1              ; &envptr250046[1]
  %new233710233890 = load i64, i64* %envptr250047, align 8                           ; load; *envptr250047
  %check238306 = call i64 @prim_null_63(i64 %rvp238305)                              ; call prim_null_63
  %cmp250048 = icmp eq i64 %check238306, 15                                          ; false?
  br i1 %cmp250048, label %else250050, label %then250049                             ; if

then250049:
  %msg238310 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str250051, i32 0, i32 0)); quoted string
  %abort238308 = call i64 @prim_halt(i64 %msg238310)                                 ; call prim_halt
  %sym238313 = add i64 0, 0                                                          ; quoted ()
  %cloptr250052 = inttoptr i64 %abort238308 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr250053 = getelementptr inbounds i64, i64* %cloptr250052, i64 0               ; &cloptr250052[0]
  %f250055 = load i64, i64* %i0ptr250053, align 8                                    ; load; *i0ptr250053
  %fptr250054 = inttoptr i64 %f250055 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr250054(i64 %abort238308, i64 %sym238313)            ; tail call
  ret void

else250050:
  %_95234173 = call i64 @prim_car(i64 %rvp238305)                                    ; call prim_car
  %rvp238295 = call i64 @prim_cdr(i64 %rvp238305)                                    ; call prim_cdr
  %check238296 = call i64 @prim_null_63(i64 %rvp238295)                              ; call prim_null_63
  %cmp250056 = icmp eq i64 %check238296, 15                                          ; false?
  br i1 %cmp250056, label %else250058, label %then250057                             ; if

then250057:
  %msg238300 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str250059, i32 0, i32 0)); quoted string
  %abort238298 = call i64 @prim_halt(i64 %msg238300)                                 ; call prim_halt
  %sym238303 = add i64 0, 0                                                          ; quoted ()
  %cloptr250060 = inttoptr i64 %abort238298 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr250061 = getelementptr inbounds i64, i64* %cloptr250060, i64 0               ; &cloptr250060[0]
  %f250063 = load i64, i64* %i0ptr250061, align 8                                    ; load; *i0ptr250061
  %fptr250062 = inttoptr i64 %f250063 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr250062(i64 %abort238298, i64 %sym238303)            ; tail call
  ret void

else250058:
  %rest238302 = call i64 @prim_cdr(i64 %rvp238295)                                   ; call prim_cdr
  %empty238297 = call i64 @prim_null_63(i64 %rest238302)                             ; call prim_null_63
  %cmp250064 = icmp eq i64 %empty238297, 15                                          ; false?
  br i1 %cmp250064, label %else250066, label %then250065                             ; if

then250065:
  %check233574233733233913 = call i64 @prim_car(i64 %rvp238295)                      ; call prim_car
  %na238288 = call i64 @prim_cdr(i64 %rvp238295)                                     ; call prim_cdr
  %cmp250067 = icmp eq i64 %check233574233733233913, 15                              ; false?
  br i1 %cmp250067, label %else250069, label %then250068                             ; if

then250068:
  %arg235104 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %a234065 = call i64 @prim_vector_45ref(i64 %f233724233904, i64 %arg235104)         ; call prim_vector_45ref
  %sym238289 = add i64 0, 0                                                          ; quoted ()
  %x238290 = call i64 @prim_cons(i64 %new233710233890, i64 %sym238289)               ; call prim_cons
  %x238291 = call i64 @prim_cons(i64 %cont234158, i64 %x238290)                      ; call prim_cons
  %cloptr250070 = inttoptr i64 %a234065 to i64*                                      ; closure/env cast; i64 -> i64*
  %i0ptr250071 = getelementptr inbounds i64, i64* %cloptr250070, i64 0               ; &cloptr250070[0]
  %f250073 = load i64, i64* %i0ptr250071, align 8                                    ; load; *i0ptr250071
  %fptr250072 = inttoptr i64 %f250073 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr250072(i64 %a234065, i64 %x238291)                  ; tail call
  ret void

else250069:
  %arg235109 = call i64 @const_init_string(i8* getelementptr inbounds ([63 x i8], [63 x i8]* @str250074, i32 0, i32 0)); quoted string
  %retprim234174 = call i64 @prim_halt(i64 %arg235109)                               ; call prim_halt
  %arg235111 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %sym238292 = add i64 0, 0                                                          ; quoted ()
  %x238293 = call i64 @prim_cons(i64 %retprim234174, i64 %sym238292)                 ; call prim_cons
  %x238294 = call i64 @prim_cons(i64 %arg235111, i64 %x238293)                       ; call prim_cons
  %cloptr250075 = inttoptr i64 %cont234158 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr250076 = getelementptr inbounds i64, i64* %cloptr250075, i64 0               ; &cloptr250075[0]
  %f250078 = load i64, i64* %i0ptr250076, align 8                                    ; load; *i0ptr250076
  %fptr250077 = inttoptr i64 %f250078 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr250077(i64 %cont234158, i64 %x238294)               ; tail call
  ret void

else250066:
  %many238301 = call i64 @const_init_string(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @str250079, i32 0, i32 0)); quoted string
  %fail238299 = call i64 @prim_halt(i64 %many238301)                                 ; call prim_halt
  %sym238304 = add i64 0, 0                                                          ; quoted ()
  %cloptr250080 = inttoptr i64 %fail238299 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr250081 = getelementptr inbounds i64, i64* %cloptr250080, i64 0               ; &cloptr250080[0]
  %f250083 = load i64, i64* %i0ptr250081, align 8                                    ; load; *i0ptr250081
  %fptr250082 = inttoptr i64 %f250083 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr250082(i64 %fail238299, i64 %sym238304)             ; tail call
  ret void
}


define void @lam242632(i64 %env242633, i64 %rvp238016) {
  %envptr250084 = inttoptr i64 %env242633 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr250085 = getelementptr inbounds i64, i64* %envptr250084, i64 4              ; &envptr250084[4]
  %_37wind_45stack233694233874 = load i64, i64* %envptr250085, align 8               ; load; *envptr250085
  %envptr250086 = inttoptr i64 %env242633 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr250087 = getelementptr inbounds i64, i64* %envptr250086, i64 3              ; &envptr250086[3]
  %tail233711233891 = load i64, i64* %envptr250087, align 8                          ; load; *envptr250087
  %envptr250088 = inttoptr i64 %env242633 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr250089 = getelementptr inbounds i64, i64* %envptr250088, i64 2              ; &envptr250088[2]
  %cont234158 = load i64, i64* %envptr250089, align 8                                ; load; *envptr250089
  %envptr250090 = inttoptr i64 %env242633 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr250091 = getelementptr inbounds i64, i64* %envptr250090, i64 1              ; &envptr250090[1]
  %new233710233890 = load i64, i64* %envptr250091, align 8                           ; load; *envptr250091
  %check238017 = call i64 @prim_null_63(i64 %rvp238016)                              ; call prim_null_63
  %cmp250092 = icmp eq i64 %check238017, 15                                          ; false?
  br i1 %cmp250092, label %else250094, label %then250093                             ; if

then250093:
  %msg238021 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str250095, i32 0, i32 0)); quoted string
  %abort238019 = call i64 @prim_halt(i64 %msg238021)                                 ; call prim_halt
  %sym238024 = add i64 0, 0                                                          ; quoted ()
  %cloptr250096 = inttoptr i64 %abort238019 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr250097 = getelementptr inbounds i64, i64* %cloptr250096, i64 0               ; &cloptr250096[0]
  %f250099 = load i64, i64* %i0ptr250097, align 8                                    ; load; *i0ptr250097
  %fptr250098 = inttoptr i64 %f250099 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr250098(i64 %abort238019, i64 %sym238024)            ; tail call
  ret void

else250094:
  %_95234160 = call i64 @prim_car(i64 %rvp238016)                                    ; call prim_car
  %rvp238006 = call i64 @prim_cdr(i64 %rvp238016)                                    ; call prim_cdr
  %check238007 = call i64 @prim_null_63(i64 %rvp238006)                              ; call prim_null_63
  %cmp250100 = icmp eq i64 %check238007, 15                                          ; false?
  br i1 %cmp250100, label %else250102, label %then250101                             ; if

then250101:
  %msg238011 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str250103, i32 0, i32 0)); quoted string
  %abort238009 = call i64 @prim_halt(i64 %msg238011)                                 ; call prim_halt
  %sym238014 = add i64 0, 0                                                          ; quoted ()
  %cloptr250104 = inttoptr i64 %abort238009 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr250105 = getelementptr inbounds i64, i64* %cloptr250104, i64 0               ; &cloptr250104[0]
  %f250107 = load i64, i64* %i0ptr250105, align 8                                    ; load; *i0ptr250105
  %fptr250106 = inttoptr i64 %f250107 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr250106(i64 %abort238009, i64 %sym238014)            ; tail call
  ret void

else250102:
  %rest238013 = call i64 @prim_cdr(i64 %rvp238006)                                   ; call prim_cdr
  %empty238008 = call i64 @prim_null_63(i64 %rest238013)                             ; call prim_null_63
  %cmp250108 = icmp eq i64 %empty238008, 15                                          ; false?
  br i1 %cmp250108, label %else250110, label %then250109                             ; if

then250109:
  %_95t233713233893 = call i64 @prim_car(i64 %rvp238006)                             ; call prim_car
  %na237675 = call i64 @prim_cdr(i64 %rvp238006)                                     ; call prim_cdr
  %cloptr250111 = call i64* @alloc(i64 8)                                            ; malloc
  %eptr250112 = getelementptr inbounds i64, i64* %cloptr250111, i64 0                ; &cloptr250111[0]
  %f250113 = ptrtoint void(i64,i64)* @lam242628 to i64                               ; fptr cast; i64(...)* -> i64
  store i64 %f250113, i64* %eptr250112                                               ; store fptr
  %arg234902 = ptrtoint i64* %cloptr250111 to i64                                    ; closure cast; i64* -> i64
  %cloptr250114 = call i64* @alloc(i64 40)                                           ; malloc
  %eptr250116 = getelementptr inbounds i64, i64* %cloptr250114, i64 1                ; &eptr250116[1]
  %eptr250117 = getelementptr inbounds i64, i64* %cloptr250114, i64 2                ; &eptr250117[2]
  %eptr250118 = getelementptr inbounds i64, i64* %cloptr250114, i64 3                ; &eptr250118[3]
  %eptr250119 = getelementptr inbounds i64, i64* %cloptr250114, i64 4                ; &eptr250119[4]
  store i64 %new233710233890, i64* %eptr250116                                       ; *eptr250116 = %new233710233890
  store i64 %cont234158, i64* %eptr250117                                            ; *eptr250117 = %cont234158
  store i64 %tail233711233891, i64* %eptr250118                                      ; *eptr250118 = %tail233711233891
  store i64 %_37wind_45stack233694233874, i64* %eptr250119                           ; *eptr250119 = %_37wind_45stack233694233874
  %eptr250115 = getelementptr inbounds i64, i64* %cloptr250114, i64 0                ; &cloptr250114[0]
  %f250120 = ptrtoint void(i64,i64)* @lam242624 to i64                               ; fptr cast; i64(...)* -> i64
  store i64 %f250120, i64* %eptr250115                                               ; store fptr
  %arg234901 = ptrtoint i64* %cloptr250114 to i64                                    ; closure cast; i64* -> i64
  %sym238004 = add i64 0, 0                                                          ; quoted ()
  %x238005 = call i64 @prim_cons(i64 %arg234901, i64 %sym238004)                     ; call prim_cons
  %cloptr250121 = inttoptr i64 %arg234902 to i64*                                    ; closure/env cast; i64 -> i64*
  %i0ptr250122 = getelementptr inbounds i64, i64* %cloptr250121, i64 0               ; &cloptr250121[0]
  %f250124 = load i64, i64* %i0ptr250122, align 8                                    ; load; *i0ptr250122
  %fptr250123 = inttoptr i64 %f250124 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr250123(i64 %arg234902, i64 %x238005)                ; tail call
  ret void

else250110:
  %many238012 = call i64 @const_init_string(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @str250125, i32 0, i32 0)); quoted string
  %fail238010 = call i64 @prim_halt(i64 %many238012)                                 ; call prim_halt
  %sym238015 = add i64 0, 0                                                          ; quoted ()
  %cloptr250126 = inttoptr i64 %fail238010 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr250127 = getelementptr inbounds i64, i64* %cloptr250126, i64 0               ; &cloptr250126[0]
  %f250129 = load i64, i64* %i0ptr250127, align 8                                    ; load; *i0ptr250127
  %fptr250128 = inttoptr i64 %f250129 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr250128(i64 %fail238010, i64 %sym238015)             ; tail call
  ret void
}


define void @lam242628(i64 %env242629, i64 %lst233725233905234179) {
  %cont234178 = call i64 @prim_car(i64 %lst233725233905234179)                       ; call prim_car
  %lst233725233905 = call i64 @prim_cdr(i64 %lst233725233905234179)                  ; call prim_cdr
  %arg234906 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %sym237676 = add i64 0, 0                                                          ; quoted ()
  %x237677 = call i64 @prim_cons(i64 %lst233725233905, i64 %sym237676)               ; call prim_cons
  %x237678 = call i64 @prim_cons(i64 %arg234906, i64 %x237677)                       ; call prim_cons
  %cloptr250130 = inttoptr i64 %cont234178 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr250131 = getelementptr inbounds i64, i64* %cloptr250130, i64 0               ; &cloptr250130[0]
  %f250133 = load i64, i64* %i0ptr250131, align 8                                    ; load; *i0ptr250131
  %fptr250132 = inttoptr i64 %f250133 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr250132(i64 %cont234178, i64 %x237678)               ; tail call
  ret void
}


define void @lam242624(i64 %env242625, i64 %rvp237995) {
  %envptr250134 = inttoptr i64 %env242625 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr250135 = getelementptr inbounds i64, i64* %envptr250134, i64 4              ; &envptr250134[4]
  %_37wind_45stack233694233874 = load i64, i64* %envptr250135, align 8               ; load; *envptr250135
  %envptr250136 = inttoptr i64 %env242625 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr250137 = getelementptr inbounds i64, i64* %envptr250136, i64 3              ; &envptr250136[3]
  %tail233711233891 = load i64, i64* %envptr250137, align 8                          ; load; *envptr250137
  %envptr250138 = inttoptr i64 %env242625 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr250139 = getelementptr inbounds i64, i64* %envptr250138, i64 2              ; &envptr250138[2]
  %cont234158 = load i64, i64* %envptr250139, align 8                                ; load; *envptr250139
  %envptr250140 = inttoptr i64 %env242625 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr250141 = getelementptr inbounds i64, i64* %envptr250140, i64 1              ; &envptr250140[1]
  %new233710233890 = load i64, i64* %envptr250141, align 8                           ; load; *envptr250141
  %check237996 = call i64 @prim_null_63(i64 %rvp237995)                              ; call prim_null_63
  %cmp250142 = icmp eq i64 %check237996, 15                                          ; false?
  br i1 %cmp250142, label %else250144, label %then250143                             ; if

then250143:
  %msg238000 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str250145, i32 0, i32 0)); quoted string
  %abort237998 = call i64 @prim_halt(i64 %msg238000)                                 ; call prim_halt
  %sym238003 = add i64 0, 0                                                          ; quoted ()
  %cloptr250146 = inttoptr i64 %abort237998 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr250147 = getelementptr inbounds i64, i64* %cloptr250146, i64 0               ; &cloptr250146[0]
  %f250149 = load i64, i64* %i0ptr250147, align 8                                    ; load; *i0ptr250147
  %fptr250148 = inttoptr i64 %f250149 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr250148(i64 %abort237998, i64 %sym238003)            ; tail call
  ret void

else250144:
  %_95234176 = call i64 @prim_car(i64 %rvp237995)                                    ; call prim_car
  %rvp237985 = call i64 @prim_cdr(i64 %rvp237995)                                    ; call prim_cdr
  %check237986 = call i64 @prim_null_63(i64 %rvp237985)                              ; call prim_null_63
  %cmp250150 = icmp eq i64 %check237986, 15                                          ; false?
  br i1 %cmp250150, label %else250152, label %then250151                             ; if

then250151:
  %msg237990 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str250153, i32 0, i32 0)); quoted string
  %abort237988 = call i64 @prim_halt(i64 %msg237990)                                 ; call prim_halt
  %sym237993 = add i64 0, 0                                                          ; quoted ()
  %cloptr250154 = inttoptr i64 %abort237988 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr250155 = getelementptr inbounds i64, i64* %cloptr250154, i64 0               ; &cloptr250154[0]
  %f250157 = load i64, i64* %i0ptr250155, align 8                                    ; load; *i0ptr250155
  %fptr250156 = inttoptr i64 %f250157 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr250156(i64 %abort237988, i64 %sym237993)            ; tail call
  ret void

else250152:
  %rest237992 = call i64 @prim_cdr(i64 %rvp237985)                                   ; call prim_cdr
  %empty237987 = call i64 @prim_null_63(i64 %rest237992)                             ; call prim_null_63
  %cmp250158 = icmp eq i64 %empty237987, 15                                          ; false?
  br i1 %cmp250158, label %else250160, label %then250159                             ; if

then250159:
  %a234054 = call i64 @prim_car(i64 %rvp237985)                                      ; call prim_car
  %na237680 = call i64 @prim_cdr(i64 %rvp237985)                                     ; call prim_cdr
  %arg234909 = call i64 @const_init_int(i64 1)                                       ; quoted int
  %retprim234177 = call i64 @prim_make_45vector(i64 %arg234909, i64 %a234054)        ; call prim_make_45vector
  %cloptr250161 = call i64* @alloc(i64 40)                                           ; malloc
  %eptr250163 = getelementptr inbounds i64, i64* %cloptr250161, i64 1                ; &eptr250163[1]
  %eptr250164 = getelementptr inbounds i64, i64* %cloptr250161, i64 2                ; &eptr250164[2]
  %eptr250165 = getelementptr inbounds i64, i64* %cloptr250161, i64 3                ; &eptr250165[3]
  %eptr250166 = getelementptr inbounds i64, i64* %cloptr250161, i64 4                ; &eptr250166[4]
  store i64 %new233710233890, i64* %eptr250163                                       ; *eptr250163 = %new233710233890
  store i64 %cont234158, i64* %eptr250164                                            ; *eptr250164 = %cont234158
  store i64 %tail233711233891, i64* %eptr250165                                      ; *eptr250165 = %tail233711233891
  store i64 %_37wind_45stack233694233874, i64* %eptr250166                           ; *eptr250166 = %_37wind_45stack233694233874
  %eptr250162 = getelementptr inbounds i64, i64* %cloptr250161, i64 0                ; &cloptr250161[0]
  %f250167 = ptrtoint void(i64,i64)* @lam242619 to i64                               ; fptr cast; i64(...)* -> i64
  store i64 %f250167, i64* %eptr250162                                               ; store fptr
  %arg234912 = ptrtoint i64* %cloptr250161 to i64                                    ; closure cast; i64* -> i64
  %arg234911 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %sym237982 = add i64 0, 0                                                          ; quoted ()
  %x237983 = call i64 @prim_cons(i64 %retprim234177, i64 %sym237982)                 ; call prim_cons
  %x237984 = call i64 @prim_cons(i64 %arg234911, i64 %x237983)                       ; call prim_cons
  %cloptr250168 = inttoptr i64 %arg234912 to i64*                                    ; closure/env cast; i64 -> i64*
  %i0ptr250169 = getelementptr inbounds i64, i64* %cloptr250168, i64 0               ; &cloptr250168[0]
  %f250171 = load i64, i64* %i0ptr250169, align 8                                    ; load; *i0ptr250169
  %fptr250170 = inttoptr i64 %f250171 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr250170(i64 %arg234912, i64 %x237984)                ; tail call
  ret void

else250160:
  %many237991 = call i64 @const_init_string(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @str250172, i32 0, i32 0)); quoted string
  %fail237989 = call i64 @prim_halt(i64 %many237991)                                 ; call prim_halt
  %sym237994 = add i64 0, 0                                                          ; quoted ()
  %cloptr250173 = inttoptr i64 %fail237989 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr250174 = getelementptr inbounds i64, i64* %cloptr250173, i64 0               ; &cloptr250173[0]
  %f250176 = load i64, i64* %i0ptr250174, align 8                                    ; load; *i0ptr250174
  %fptr250175 = inttoptr i64 %f250176 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr250175(i64 %fail237989, i64 %sym237994)             ; tail call
  ret void
}


define void @lam242619(i64 %env242620, i64 %rvp237973) {
  %envptr250177 = inttoptr i64 %env242620 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr250178 = getelementptr inbounds i64, i64* %envptr250177, i64 4              ; &envptr250177[4]
  %_37wind_45stack233694233874 = load i64, i64* %envptr250178, align 8               ; load; *envptr250178
  %envptr250179 = inttoptr i64 %env242620 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr250180 = getelementptr inbounds i64, i64* %envptr250179, i64 3              ; &envptr250179[3]
  %tail233711233891 = load i64, i64* %envptr250180, align 8                          ; load; *envptr250180
  %envptr250181 = inttoptr i64 %env242620 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr250182 = getelementptr inbounds i64, i64* %envptr250181, i64 2              ; &envptr250181[2]
  %cont234158 = load i64, i64* %envptr250182, align 8                                ; load; *envptr250182
  %envptr250183 = inttoptr i64 %env242620 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr250184 = getelementptr inbounds i64, i64* %envptr250183, i64 1              ; &envptr250183[1]
  %new233710233890 = load i64, i64* %envptr250184, align 8                           ; load; *envptr250184
  %check237974 = call i64 @prim_null_63(i64 %rvp237973)                              ; call prim_null_63
  %cmp250185 = icmp eq i64 %check237974, 15                                          ; false?
  br i1 %cmp250185, label %else250187, label %then250186                             ; if

then250186:
  %msg237978 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str250188, i32 0, i32 0)); quoted string
  %abort237976 = call i64 @prim_halt(i64 %msg237978)                                 ; call prim_halt
  %sym237981 = add i64 0, 0                                                          ; quoted ()
  %cloptr250189 = inttoptr i64 %abort237976 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr250190 = getelementptr inbounds i64, i64* %cloptr250189, i64 0               ; &cloptr250189[0]
  %f250192 = load i64, i64* %i0ptr250190, align 8                                    ; load; *i0ptr250190
  %fptr250191 = inttoptr i64 %f250192 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr250191(i64 %abort237976, i64 %sym237981)            ; tail call
  ret void

else250187:
  %_95234161 = call i64 @prim_car(i64 %rvp237973)                                    ; call prim_car
  %rvp237963 = call i64 @prim_cdr(i64 %rvp237973)                                    ; call prim_cdr
  %check237964 = call i64 @prim_null_63(i64 %rvp237963)                              ; call prim_null_63
  %cmp250193 = icmp eq i64 %check237964, 15                                          ; false?
  br i1 %cmp250193, label %else250195, label %then250194                             ; if

then250194:
  %msg237968 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str250196, i32 0, i32 0)); quoted string
  %abort237966 = call i64 @prim_halt(i64 %msg237968)                                 ; call prim_halt
  %sym237971 = add i64 0, 0                                                          ; quoted ()
  %cloptr250197 = inttoptr i64 %abort237966 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr250198 = getelementptr inbounds i64, i64* %cloptr250197, i64 0               ; &cloptr250197[0]
  %f250200 = load i64, i64* %i0ptr250198, align 8                                    ; load; *i0ptr250198
  %fptr250199 = inttoptr i64 %f250200 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr250199(i64 %abort237966, i64 %sym237971)            ; tail call
  ret void

else250195:
  %rest237970 = call i64 @prim_cdr(i64 %rvp237963)                                   ; call prim_cdr
  %empty237965 = call i64 @prim_null_63(i64 %rest237970)                             ; call prim_null_63
  %cmp250201 = icmp eq i64 %empty237965, 15                                          ; false?
  br i1 %cmp250201, label %else250203, label %then250202                             ; if

then250202:
  %f233724233904 = call i64 @prim_car(i64 %rvp237963)                                ; call prim_car
  %na237682 = call i64 @prim_cdr(i64 %rvp237963)                                     ; call prim_cdr
  %cloptr250204 = call i64* @alloc(i64 32)                                           ; malloc
  %eptr250206 = getelementptr inbounds i64, i64* %cloptr250204, i64 1                ; &eptr250206[1]
  %eptr250207 = getelementptr inbounds i64, i64* %cloptr250204, i64 2                ; &eptr250207[2]
  %eptr250208 = getelementptr inbounds i64, i64* %cloptr250204, i64 3                ; &eptr250208[3]
  store i64 %tail233711233891, i64* %eptr250206                                      ; *eptr250206 = %tail233711233891
  store i64 %_37wind_45stack233694233874, i64* %eptr250207                           ; *eptr250207 = %_37wind_45stack233694233874
  store i64 %f233724233904, i64* %eptr250208                                         ; *eptr250208 = %f233724233904
  %eptr250205 = getelementptr inbounds i64, i64* %cloptr250204, i64 0                ; &cloptr250204[0]
  %f250209 = ptrtoint void(i64,i64)* @lam242615 to i64                               ; fptr cast; i64(...)* -> i64
  store i64 %f250209, i64* %eptr250205                                               ; store fptr
  %f233571233726233906 = ptrtoint i64* %cloptr250204 to i64                          ; closure cast; i64* -> i64
  %arg234988 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %_95t233732233912 = call i64 @prim_vector_45set_33(i64 %f233724233904, i64 %arg234988, i64 %f233571233726233906); call prim_vector_45set_33
  %arg234990 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %a234064 = call i64 @prim_vector_45ref(i64 %f233724233904, i64 %arg234990)         ; call prim_vector_45ref
  %retprim234175 = call i64 @prim_procedure_63(i64 %a234064)                         ; call prim_procedure_63
  %cloptr250210 = call i64* @alloc(i64 32)                                           ; malloc
  %eptr250212 = getelementptr inbounds i64, i64* %cloptr250210, i64 1                ; &eptr250212[1]
  %eptr250213 = getelementptr inbounds i64, i64* %cloptr250210, i64 2                ; &eptr250213[2]
  %eptr250214 = getelementptr inbounds i64, i64* %cloptr250210, i64 3                ; &eptr250214[3]
  store i64 %new233710233890, i64* %eptr250212                                       ; *eptr250212 = %new233710233890
  store i64 %cont234158, i64* %eptr250213                                            ; *eptr250213 = %cont234158
  store i64 %f233724233904, i64* %eptr250214                                         ; *eptr250214 = %f233724233904
  %eptr250211 = getelementptr inbounds i64, i64* %cloptr250210, i64 0                ; &cloptr250210[0]
  %f250215 = ptrtoint void(i64,i64)* @lam242499 to i64                               ; fptr cast; i64(...)* -> i64
  store i64 %f250215, i64* %eptr250211                                               ; store fptr
  %arg234995 = ptrtoint i64* %cloptr250210 to i64                                    ; closure cast; i64* -> i64
  %arg234994 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %sym237960 = add i64 0, 0                                                          ; quoted ()
  %x237961 = call i64 @prim_cons(i64 %retprim234175, i64 %sym237960)                 ; call prim_cons
  %x237962 = call i64 @prim_cons(i64 %arg234994, i64 %x237961)                       ; call prim_cons
  %cloptr250216 = inttoptr i64 %arg234995 to i64*                                    ; closure/env cast; i64 -> i64*
  %i0ptr250217 = getelementptr inbounds i64, i64* %cloptr250216, i64 0               ; &cloptr250216[0]
  %f250219 = load i64, i64* %i0ptr250217, align 8                                    ; load; *i0ptr250217
  %fptr250218 = inttoptr i64 %f250219 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr250218(i64 %arg234995, i64 %x237962)                ; tail call
  ret void

else250203:
  %many237969 = call i64 @const_init_string(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @str250220, i32 0, i32 0)); quoted string
  %fail237967 = call i64 @prim_halt(i64 %many237969)                                 ; call prim_halt
  %sym237972 = add i64 0, 0                                                          ; quoted ()
  %cloptr250221 = inttoptr i64 %fail237967 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr250222 = getelementptr inbounds i64, i64* %cloptr250221, i64 0               ; &cloptr250221[0]
  %f250224 = load i64, i64* %i0ptr250222, align 8                                    ; load; *i0ptr250222
  %fptr250223 = inttoptr i64 %f250224 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr250223(i64 %fail237967, i64 %sym237972)             ; tail call
  ret void
}


define void @lam242615(i64 %env242616, i64 %rvp237924) {
  %envptr250225 = inttoptr i64 %env242616 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr250226 = getelementptr inbounds i64, i64* %envptr250225, i64 3              ; &envptr250225[3]
  %f233724233904 = load i64, i64* %envptr250226, align 8                             ; load; *envptr250226
  %envptr250227 = inttoptr i64 %env242616 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr250228 = getelementptr inbounds i64, i64* %envptr250227, i64 2              ; &envptr250227[2]
  %_37wind_45stack233694233874 = load i64, i64* %envptr250228, align 8               ; load; *envptr250228
  %envptr250229 = inttoptr i64 %env242616 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr250230 = getelementptr inbounds i64, i64* %envptr250229, i64 1              ; &envptr250229[1]
  %tail233711233891 = load i64, i64* %envptr250230, align 8                          ; load; *envptr250230
  %check237925 = call i64 @prim_null_63(i64 %rvp237924)                              ; call prim_null_63
  %cmp250231 = icmp eq i64 %check237925, 15                                          ; false?
  br i1 %cmp250231, label %else250233, label %then250232                             ; if

then250232:
  %msg237929 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str250234, i32 0, i32 0)); quoted string
  %abort237927 = call i64 @prim_halt(i64 %msg237929)                                 ; call prim_halt
  %sym237932 = add i64 0, 0                                                          ; quoted ()
  %cloptr250235 = inttoptr i64 %abort237927 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr250236 = getelementptr inbounds i64, i64* %cloptr250235, i64 0               ; &cloptr250235[0]
  %f250238 = load i64, i64* %i0ptr250236, align 8                                    ; load; *i0ptr250236
  %fptr250237 = inttoptr i64 %f250238 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr250237(i64 %abort237927, i64 %sym237932)            ; tail call
  ret void

else250233:
  %cont234162 = call i64 @prim_car(i64 %rvp237924)                                   ; call prim_car
  %rvp237914 = call i64 @prim_cdr(i64 %rvp237924)                                    ; call prim_cdr
  %check237915 = call i64 @prim_null_63(i64 %rvp237914)                              ; call prim_null_63
  %cmp250239 = icmp eq i64 %check237915, 15                                          ; false?
  br i1 %cmp250239, label %else250241, label %then250240                             ; if

then250240:
  %msg237919 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str250242, i32 0, i32 0)); quoted string
  %abort237917 = call i64 @prim_halt(i64 %msg237919)                                 ; call prim_halt
  %sym237922 = add i64 0, 0                                                          ; quoted ()
  %cloptr250243 = inttoptr i64 %abort237917 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr250244 = getelementptr inbounds i64, i64* %cloptr250243, i64 0               ; &cloptr250243[0]
  %f250246 = load i64, i64* %i0ptr250244, align 8                                    ; load; *i0ptr250244
  %fptr250245 = inttoptr i64 %f250246 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr250245(i64 %abort237917, i64 %sym237922)            ; tail call
  ret void

else250241:
  %rest237921 = call i64 @prim_cdr(i64 %rvp237914)                                   ; call prim_cdr
  %empty237916 = call i64 @prim_null_63(i64 %rest237921)                             ; call prim_null_63
  %cmp250247 = icmp eq i64 %empty237916, 15                                          ; false?
  br i1 %cmp250247, label %else250249, label %then250248                             ; if

then250248:
  %l233727233907 = call i64 @prim_car(i64 %rvp237914)                                ; call prim_car
  %na237684 = call i64 @prim_cdr(i64 %rvp237914)                                     ; call prim_cdr
  %a234055 = call i64 @prim_eq_63(i64 %l233727233907, i64 %tail233711233891)         ; call prim_eq_63
  %a234056 = call i64 @prim_not(i64 %a234055)                                        ; call prim_not
  %cmp250250 = icmp eq i64 %a234056, 15                                              ; false?
  br i1 %cmp250250, label %else250252, label %then250251                             ; if

then250251:
  %arg234916 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %a234057 = call i64 @prim_vector_45ref(i64 %f233724233904, i64 %arg234916)         ; call prim_vector_45ref
  %retprim234171 = call i64 @prim_procedure_63(i64 %a234057)                         ; call prim_procedure_63
  %cloptr250253 = call i64* @alloc(i64 40)                                           ; malloc
  %eptr250255 = getelementptr inbounds i64, i64* %cloptr250253, i64 1                ; &eptr250255[1]
  %eptr250256 = getelementptr inbounds i64, i64* %cloptr250253, i64 2                ; &eptr250256[2]
  %eptr250257 = getelementptr inbounds i64, i64* %cloptr250253, i64 3                ; &eptr250257[3]
  %eptr250258 = getelementptr inbounds i64, i64* %cloptr250253, i64 4                ; &eptr250258[4]
  store i64 %l233727233907, i64* %eptr250255                                         ; *eptr250255 = %l233727233907
  store i64 %cont234162, i64* %eptr250256                                            ; *eptr250256 = %cont234162
  store i64 %_37wind_45stack233694233874, i64* %eptr250257                           ; *eptr250257 = %_37wind_45stack233694233874
  store i64 %f233724233904, i64* %eptr250258                                         ; *eptr250258 = %f233724233904
  %eptr250254 = getelementptr inbounds i64, i64* %cloptr250253, i64 0                ; &cloptr250253[0]
  %f250259 = ptrtoint void(i64,i64)* @lam242608 to i64                               ; fptr cast; i64(...)* -> i64
  store i64 %f250259, i64* %eptr250254                                               ; store fptr
  %arg234921 = ptrtoint i64* %cloptr250253 to i64                                    ; closure cast; i64* -> i64
  %arg234920 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %sym237908 = add i64 0, 0                                                          ; quoted ()
  %x237909 = call i64 @prim_cons(i64 %retprim234171, i64 %sym237908)                 ; call prim_cons
  %x237910 = call i64 @prim_cons(i64 %arg234920, i64 %x237909)                       ; call prim_cons
  %cloptr250260 = inttoptr i64 %arg234921 to i64*                                    ; closure/env cast; i64 -> i64*
  %i0ptr250261 = getelementptr inbounds i64, i64* %cloptr250260, i64 0               ; &cloptr250260[0]
  %f250263 = load i64, i64* %i0ptr250261, align 8                                    ; load; *i0ptr250261
  %fptr250262 = inttoptr i64 %f250263 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr250262(i64 %arg234921, i64 %x237910)                ; tail call
  ret void

else250252:
  %retprim234172 = call i64 @prim_void()                                             ; call prim_void
  %arg234985 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %sym237911 = add i64 0, 0                                                          ; quoted ()
  %x237912 = call i64 @prim_cons(i64 %retprim234172, i64 %sym237911)                 ; call prim_cons
  %x237913 = call i64 @prim_cons(i64 %arg234985, i64 %x237912)                       ; call prim_cons
  %cloptr250264 = inttoptr i64 %cont234162 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr250265 = getelementptr inbounds i64, i64* %cloptr250264, i64 0               ; &cloptr250264[0]
  %f250267 = load i64, i64* %i0ptr250265, align 8                                    ; load; *i0ptr250265
  %fptr250266 = inttoptr i64 %f250267 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr250266(i64 %cont234162, i64 %x237913)               ; tail call
  ret void

else250249:
  %many237920 = call i64 @const_init_string(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @str250268, i32 0, i32 0)); quoted string
  %fail237918 = call i64 @prim_halt(i64 %many237920)                                 ; call prim_halt
  %sym237923 = add i64 0, 0                                                          ; quoted ()
  %cloptr250269 = inttoptr i64 %fail237918 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr250270 = getelementptr inbounds i64, i64* %cloptr250269, i64 0               ; &cloptr250269[0]
  %f250272 = load i64, i64* %i0ptr250270, align 8                                    ; load; *i0ptr250270
  %fptr250271 = inttoptr i64 %f250272 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr250271(i64 %fail237918, i64 %sym237923)             ; tail call
  ret void
}


define void @lam242608(i64 %env242609, i64 %rvp237899) {
  %envptr250273 = inttoptr i64 %env242609 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr250274 = getelementptr inbounds i64, i64* %envptr250273, i64 4              ; &envptr250273[4]
  %f233724233904 = load i64, i64* %envptr250274, align 8                             ; load; *envptr250274
  %envptr250275 = inttoptr i64 %env242609 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr250276 = getelementptr inbounds i64, i64* %envptr250275, i64 3              ; &envptr250275[3]
  %_37wind_45stack233694233874 = load i64, i64* %envptr250276, align 8               ; load; *envptr250276
  %envptr250277 = inttoptr i64 %env242609 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr250278 = getelementptr inbounds i64, i64* %envptr250277, i64 2              ; &envptr250277[2]
  %cont234162 = load i64, i64* %envptr250278, align 8                                ; load; *envptr250278
  %envptr250279 = inttoptr i64 %env242609 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr250280 = getelementptr inbounds i64, i64* %envptr250279, i64 1              ; &envptr250279[1]
  %l233727233907 = load i64, i64* %envptr250280, align 8                             ; load; *envptr250280
  %check237900 = call i64 @prim_null_63(i64 %rvp237899)                              ; call prim_null_63
  %cmp250281 = icmp eq i64 %check237900, 15                                          ; false?
  br i1 %cmp250281, label %else250283, label %then250282                             ; if

then250282:
  %msg237904 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str250284, i32 0, i32 0)); quoted string
  %abort237902 = call i64 @prim_halt(i64 %msg237904)                                 ; call prim_halt
  %sym237907 = add i64 0, 0                                                          ; quoted ()
  %cloptr250285 = inttoptr i64 %abort237902 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr250286 = getelementptr inbounds i64, i64* %cloptr250285, i64 0               ; &cloptr250285[0]
  %f250288 = load i64, i64* %i0ptr250286, align 8                                    ; load; *i0ptr250286
  %fptr250287 = inttoptr i64 %f250288 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr250287(i64 %abort237902, i64 %sym237907)            ; tail call
  ret void

else250283:
  %_95234169 = call i64 @prim_car(i64 %rvp237899)                                    ; call prim_car
  %rvp237889 = call i64 @prim_cdr(i64 %rvp237899)                                    ; call prim_cdr
  %check237890 = call i64 @prim_null_63(i64 %rvp237889)                              ; call prim_null_63
  %cmp250289 = icmp eq i64 %check237890, 15                                          ; false?
  br i1 %cmp250289, label %else250291, label %then250290                             ; if

then250290:
  %msg237894 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str250292, i32 0, i32 0)); quoted string
  %abort237892 = call i64 @prim_halt(i64 %msg237894)                                 ; call prim_halt
  %sym237897 = add i64 0, 0                                                          ; quoted ()
  %cloptr250293 = inttoptr i64 %abort237892 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr250294 = getelementptr inbounds i64, i64* %cloptr250293, i64 0               ; &cloptr250293[0]
  %f250296 = load i64, i64* %i0ptr250294, align 8                                    ; load; *i0ptr250294
  %fptr250295 = inttoptr i64 %f250296 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr250295(i64 %abort237892, i64 %sym237897)            ; tail call
  ret void

else250291:
  %rest237896 = call i64 @prim_cdr(i64 %rvp237889)                                   ; call prim_cdr
  %empty237891 = call i64 @prim_null_63(i64 %rest237896)                             ; call prim_null_63
  %cmp250297 = icmp eq i64 %empty237891, 15                                          ; false?
  br i1 %cmp250297, label %else250299, label %then250298                             ; if

then250298:
  %check233572233729233909 = call i64 @prim_car(i64 %rvp237889)                      ; call prim_car
  %na237686 = call i64 @prim_cdr(i64 %rvp237889)                                     ; call prim_cdr
  %cmp250300 = icmp eq i64 %check233572233729233909, 15                              ; false?
  br i1 %cmp250300, label %else250302, label %then250301                             ; if

then250301:
  %arg234922 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %a234058 = call i64 @prim_vector_45ref(i64 %f233724233904, i64 %arg234922)         ; call prim_vector_45ref
  %a234059 = call i64 @prim_cdr(i64 %l233727233907)                                  ; call prim_cdr
  %cloptr250303 = call i64* @alloc(i64 32)                                           ; malloc
  %eptr250305 = getelementptr inbounds i64, i64* %cloptr250303, i64 1                ; &eptr250305[1]
  %eptr250306 = getelementptr inbounds i64, i64* %cloptr250303, i64 2                ; &eptr250306[2]
  %eptr250307 = getelementptr inbounds i64, i64* %cloptr250303, i64 3                ; &eptr250307[3]
  store i64 %l233727233907, i64* %eptr250305                                         ; *eptr250305 = %l233727233907
  store i64 %cont234162, i64* %eptr250306                                            ; *eptr250306 = %cont234162
  store i64 %_37wind_45stack233694233874, i64* %eptr250307                           ; *eptr250307 = %_37wind_45stack233694233874
  %eptr250304 = getelementptr inbounds i64, i64* %cloptr250303, i64 0                ; &cloptr250303[0]
  %f250308 = ptrtoint void(i64,i64)* @lam242556 to i64                               ; fptr cast; i64(...)* -> i64
  store i64 %f250308, i64* %eptr250304                                               ; store fptr
  %arg234926 = ptrtoint i64* %cloptr250303 to i64                                    ; closure cast; i64* -> i64
  %sym237785 = add i64 0, 0                                                          ; quoted ()
  %x237786 = call i64 @prim_cons(i64 %a234059, i64 %sym237785)                       ; call prim_cons
  %x237787 = call i64 @prim_cons(i64 %arg234926, i64 %x237786)                       ; call prim_cons
  %cloptr250309 = inttoptr i64 %a234058 to i64*                                      ; closure/env cast; i64 -> i64*
  %i0ptr250310 = getelementptr inbounds i64, i64* %cloptr250309, i64 0               ; &cloptr250309[0]
  %f250312 = load i64, i64* %i0ptr250310, align 8                                    ; load; *i0ptr250310
  %fptr250311 = inttoptr i64 %f250312 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr250311(i64 %a234058, i64 %x237787)                  ; tail call
  ret void

else250302:
  %arg234954 = call i64 @const_init_string(i8* getelementptr inbounds ([67 x i8], [67 x i8]* @str250313, i32 0, i32 0)); quoted string
  %retprim234170 = call i64 @prim_halt(i64 %arg234954)                               ; call prim_halt
  %cloptr250314 = call i64* @alloc(i64 32)                                           ; malloc
  %eptr250316 = getelementptr inbounds i64, i64* %cloptr250314, i64 1                ; &eptr250316[1]
  %eptr250317 = getelementptr inbounds i64, i64* %cloptr250314, i64 2                ; &eptr250317[2]
  %eptr250318 = getelementptr inbounds i64, i64* %cloptr250314, i64 3                ; &eptr250318[3]
  store i64 %l233727233907, i64* %eptr250316                                         ; *eptr250316 = %l233727233907
  store i64 %cont234162, i64* %eptr250317                                            ; *eptr250317 = %cont234162
  store i64 %_37wind_45stack233694233874, i64* %eptr250318                           ; *eptr250318 = %_37wind_45stack233694233874
  %eptr250315 = getelementptr inbounds i64, i64* %cloptr250314, i64 0                ; &cloptr250314[0]
  %f250319 = ptrtoint void(i64,i64)* @lam242603 to i64                               ; fptr cast; i64(...)* -> i64
  store i64 %f250319, i64* %eptr250315                                               ; store fptr
  %arg234957 = ptrtoint i64* %cloptr250314 to i64                                    ; closure cast; i64* -> i64
  %arg234956 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %sym237886 = add i64 0, 0                                                          ; quoted ()
  %x237887 = call i64 @prim_cons(i64 %retprim234170, i64 %sym237886)                 ; call prim_cons
  %x237888 = call i64 @prim_cons(i64 %arg234956, i64 %x237887)                       ; call prim_cons
  %cloptr250320 = inttoptr i64 %arg234957 to i64*                                    ; closure/env cast; i64 -> i64*
  %i0ptr250321 = getelementptr inbounds i64, i64* %cloptr250320, i64 0               ; &cloptr250320[0]
  %f250323 = load i64, i64* %i0ptr250321, align 8                                    ; load; *i0ptr250321
  %fptr250322 = inttoptr i64 %f250323 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr250322(i64 %arg234957, i64 %x237888)                ; tail call
  ret void

else250299:
  %many237895 = call i64 @const_init_string(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @str250324, i32 0, i32 0)); quoted string
  %fail237893 = call i64 @prim_halt(i64 %many237895)                                 ; call prim_halt
  %sym237898 = add i64 0, 0                                                          ; quoted ()
  %cloptr250325 = inttoptr i64 %fail237893 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr250326 = getelementptr inbounds i64, i64* %cloptr250325, i64 0               ; &cloptr250325[0]
  %f250328 = load i64, i64* %i0ptr250326, align 8                                    ; load; *i0ptr250326
  %fptr250327 = inttoptr i64 %f250328 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr250327(i64 %fail237893, i64 %sym237898)             ; tail call
  ret void
}


define void @lam242603(i64 %env242604, i64 %rvp237877) {
  %envptr250329 = inttoptr i64 %env242604 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr250330 = getelementptr inbounds i64, i64* %envptr250329, i64 3              ; &envptr250329[3]
  %_37wind_45stack233694233874 = load i64, i64* %envptr250330, align 8               ; load; *envptr250330
  %envptr250331 = inttoptr i64 %env242604 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr250332 = getelementptr inbounds i64, i64* %envptr250331, i64 2              ; &envptr250331[2]
  %cont234162 = load i64, i64* %envptr250332, align 8                                ; load; *envptr250332
  %envptr250333 = inttoptr i64 %env242604 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr250334 = getelementptr inbounds i64, i64* %envptr250333, i64 1              ; &envptr250333[1]
  %l233727233907 = load i64, i64* %envptr250334, align 8                             ; load; *envptr250334
  %check237878 = call i64 @prim_null_63(i64 %rvp237877)                              ; call prim_null_63
  %cmp250335 = icmp eq i64 %check237878, 15                                          ; false?
  br i1 %cmp250335, label %else250337, label %then250336                             ; if

then250336:
  %msg237882 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str250338, i32 0, i32 0)); quoted string
  %abort237880 = call i64 @prim_halt(i64 %msg237882)                                 ; call prim_halt
  %sym237885 = add i64 0, 0                                                          ; quoted ()
  %cloptr250339 = inttoptr i64 %abort237880 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr250340 = getelementptr inbounds i64, i64* %cloptr250339, i64 0               ; &cloptr250339[0]
  %f250342 = load i64, i64* %i0ptr250340, align 8                                    ; load; *i0ptr250340
  %fptr250341 = inttoptr i64 %f250342 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr250341(i64 %abort237880, i64 %sym237885)            ; tail call
  ret void

else250337:
  %_95234163 = call i64 @prim_car(i64 %rvp237877)                                    ; call prim_car
  %rvp237867 = call i64 @prim_cdr(i64 %rvp237877)                                    ; call prim_cdr
  %check237868 = call i64 @prim_null_63(i64 %rvp237867)                              ; call prim_null_63
  %cmp250343 = icmp eq i64 %check237868, 15                                          ; false?
  br i1 %cmp250343, label %else250345, label %then250344                             ; if

then250344:
  %msg237872 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str250346, i32 0, i32 0)); quoted string
  %abort237870 = call i64 @prim_halt(i64 %msg237872)                                 ; call prim_halt
  %sym237875 = add i64 0, 0                                                          ; quoted ()
  %cloptr250347 = inttoptr i64 %abort237870 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr250348 = getelementptr inbounds i64, i64* %cloptr250347, i64 0               ; &cloptr250347[0]
  %f250350 = load i64, i64* %i0ptr250348, align 8                                    ; load; *i0ptr250348
  %fptr250349 = inttoptr i64 %f250350 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr250349(i64 %abort237870, i64 %sym237875)            ; tail call
  ret void

else250345:
  %rest237874 = call i64 @prim_cdr(i64 %rvp237867)                                   ; call prim_cdr
  %empty237869 = call i64 @prim_null_63(i64 %rest237874)                             ; call prim_null_63
  %cmp250351 = icmp eq i64 %empty237869, 15                                          ; false?
  br i1 %cmp250351, label %else250353, label %then250352                             ; if

then250352:
  %_95t233728233908 = call i64 @prim_car(i64 %rvp237867)                             ; call prim_car
  %na237789 = call i64 @prim_cdr(i64 %rvp237867)                                     ; call prim_cdr
  %a234060 = call i64 @prim_car(i64 %l233727233907)                                  ; call prim_car
  %a234061 = call i64 @prim_car(i64 %a234060)                                        ; call prim_car
  %retprim234168 = call i64 @prim_procedure_63(i64 %a234061)                         ; call prim_procedure_63
  %cloptr250354 = call i64* @alloc(i64 32)                                           ; malloc
  %eptr250356 = getelementptr inbounds i64, i64* %cloptr250354, i64 1                ; &eptr250356[1]
  %eptr250357 = getelementptr inbounds i64, i64* %cloptr250354, i64 2                ; &eptr250357[2]
  %eptr250358 = getelementptr inbounds i64, i64* %cloptr250354, i64 3                ; &eptr250358[3]
  store i64 %l233727233907, i64* %eptr250356                                         ; *eptr250356 = %l233727233907
  store i64 %cont234162, i64* %eptr250357                                            ; *eptr250357 = %cont234162
  store i64 %_37wind_45stack233694233874, i64* %eptr250358                           ; *eptr250358 = %_37wind_45stack233694233874
  %eptr250355 = getelementptr inbounds i64, i64* %cloptr250354, i64 0                ; &cloptr250354[0]
  %f250359 = ptrtoint void(i64,i64)* @lam242599 to i64                               ; fptr cast; i64(...)* -> i64
  store i64 %f250359, i64* %eptr250355                                               ; store fptr
  %arg234963 = ptrtoint i64* %cloptr250354 to i64                                    ; closure cast; i64* -> i64
  %arg234962 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %sym237864 = add i64 0, 0                                                          ; quoted ()
  %x237865 = call i64 @prim_cons(i64 %retprim234168, i64 %sym237864)                 ; call prim_cons
  %x237866 = call i64 @prim_cons(i64 %arg234962, i64 %x237865)                       ; call prim_cons
  %cloptr250360 = inttoptr i64 %arg234963 to i64*                                    ; closure/env cast; i64 -> i64*
  %i0ptr250361 = getelementptr inbounds i64, i64* %cloptr250360, i64 0               ; &cloptr250360[0]
  %f250363 = load i64, i64* %i0ptr250361, align 8                                    ; load; *i0ptr250361
  %fptr250362 = inttoptr i64 %f250363 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr250362(i64 %arg234963, i64 %x237866)                ; tail call
  ret void

else250353:
  %many237873 = call i64 @const_init_string(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @str250364, i32 0, i32 0)); quoted string
  %fail237871 = call i64 @prim_halt(i64 %many237873)                                 ; call prim_halt
  %sym237876 = add i64 0, 0                                                          ; quoted ()
  %cloptr250365 = inttoptr i64 %fail237871 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr250366 = getelementptr inbounds i64, i64* %cloptr250365, i64 0               ; &cloptr250365[0]
  %f250368 = load i64, i64* %i0ptr250366, align 8                                    ; load; *i0ptr250366
  %fptr250367 = inttoptr i64 %f250368 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr250367(i64 %fail237871, i64 %sym237876)             ; tail call
  ret void
}


define void @lam242599(i64 %env242600, i64 %rvp237855) {
  %envptr250369 = inttoptr i64 %env242600 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr250370 = getelementptr inbounds i64, i64* %envptr250369, i64 3              ; &envptr250369[3]
  %_37wind_45stack233694233874 = load i64, i64* %envptr250370, align 8               ; load; *envptr250370
  %envptr250371 = inttoptr i64 %env242600 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr250372 = getelementptr inbounds i64, i64* %envptr250371, i64 2              ; &envptr250371[2]
  %cont234162 = load i64, i64* %envptr250372, align 8                                ; load; *envptr250372
  %envptr250373 = inttoptr i64 %env242600 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr250374 = getelementptr inbounds i64, i64* %envptr250373, i64 1              ; &envptr250373[1]
  %l233727233907 = load i64, i64* %envptr250374, align 8                             ; load; *envptr250374
  %check237856 = call i64 @prim_null_63(i64 %rvp237855)                              ; call prim_null_63
  %cmp250375 = icmp eq i64 %check237856, 15                                          ; false?
  br i1 %cmp250375, label %else250377, label %then250376                             ; if

then250376:
  %msg237860 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str250378, i32 0, i32 0)); quoted string
  %abort237858 = call i64 @prim_halt(i64 %msg237860)                                 ; call prim_halt
  %sym237863 = add i64 0, 0                                                          ; quoted ()
  %cloptr250379 = inttoptr i64 %abort237858 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr250380 = getelementptr inbounds i64, i64* %cloptr250379, i64 0               ; &cloptr250379[0]
  %f250382 = load i64, i64* %i0ptr250380, align 8                                    ; load; *i0ptr250380
  %fptr250381 = inttoptr i64 %f250382 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr250381(i64 %abort237858, i64 %sym237863)            ; tail call
  ret void

else250377:
  %_95234166 = call i64 @prim_car(i64 %rvp237855)                                    ; call prim_car
  %rvp237845 = call i64 @prim_cdr(i64 %rvp237855)                                    ; call prim_cdr
  %check237846 = call i64 @prim_null_63(i64 %rvp237845)                              ; call prim_null_63
  %cmp250383 = icmp eq i64 %check237846, 15                                          ; false?
  br i1 %cmp250383, label %else250385, label %then250384                             ; if

then250384:
  %msg237850 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str250386, i32 0, i32 0)); quoted string
  %abort237848 = call i64 @prim_halt(i64 %msg237850)                                 ; call prim_halt
  %sym237853 = add i64 0, 0                                                          ; quoted ()
  %cloptr250387 = inttoptr i64 %abort237848 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr250388 = getelementptr inbounds i64, i64* %cloptr250387, i64 0               ; &cloptr250387[0]
  %f250390 = load i64, i64* %i0ptr250388, align 8                                    ; load; *i0ptr250388
  %fptr250389 = inttoptr i64 %f250390 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr250389(i64 %abort237848, i64 %sym237853)            ; tail call
  ret void

else250385:
  %rest237852 = call i64 @prim_cdr(i64 %rvp237845)                                   ; call prim_cdr
  %empty237847 = call i64 @prim_null_63(i64 %rest237852)                             ; call prim_null_63
  %cmp250391 = icmp eq i64 %empty237847, 15                                          ; false?
  br i1 %cmp250391, label %else250393, label %then250392                             ; if

then250392:
  %check233573233731233911 = call i64 @prim_car(i64 %rvp237845)                      ; call prim_car
  %na237791 = call i64 @prim_cdr(i64 %rvp237845)                                     ; call prim_cdr
  %cmp250394 = icmp eq i64 %check233573233731233911, 15                              ; false?
  br i1 %cmp250394, label %else250396, label %then250395                             ; if

then250395:
  %a234062 = call i64 @prim_car(i64 %l233727233907)                                  ; call prim_car
  %a234063 = call i64 @prim_car(i64 %a234062)                                        ; call prim_car
  %cloptr250397 = call i64* @alloc(i64 32)                                           ; malloc
  %eptr250399 = getelementptr inbounds i64, i64* %cloptr250397, i64 1                ; &eptr250399[1]
  %eptr250400 = getelementptr inbounds i64, i64* %cloptr250397, i64 2                ; &eptr250400[2]
  %eptr250401 = getelementptr inbounds i64, i64* %cloptr250397, i64 3                ; &eptr250401[3]
  store i64 %l233727233907, i64* %eptr250399                                         ; *eptr250399 = %l233727233907
  store i64 %cont234162, i64* %eptr250400                                            ; *eptr250400 = %cont234162
  store i64 %_37wind_45stack233694233874, i64* %eptr250401                           ; *eptr250401 = %_37wind_45stack233694233874
  %eptr250398 = getelementptr inbounds i64, i64* %cloptr250397, i64 0                ; &cloptr250397[0]
  %f250402 = ptrtoint void(i64,i64)* @lam242581 to i64                               ; fptr cast; i64(...)* -> i64
  store i64 %f250402, i64* %eptr250398                                               ; store fptr
  %arg234966 = ptrtoint i64* %cloptr250397 to i64                                    ; closure cast; i64* -> i64
  %sym237816 = add i64 0, 0                                                          ; quoted ()
  %x237817 = call i64 @prim_cons(i64 %arg234966, i64 %sym237816)                     ; call prim_cons
  %cloptr250403 = inttoptr i64 %a234063 to i64*                                      ; closure/env cast; i64 -> i64*
  %i0ptr250404 = getelementptr inbounds i64, i64* %cloptr250403, i64 0               ; &cloptr250403[0]
  %f250406 = load i64, i64* %i0ptr250404, align 8                                    ; load; *i0ptr250404
  %fptr250405 = inttoptr i64 %f250406 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr250405(i64 %a234063, i64 %x237817)                  ; tail call
  ret void

else250396:
  %arg234974 = call i64 @const_init_string(i8* getelementptr inbounds ([71 x i8], [71 x i8]* @str250407, i32 0, i32 0)); quoted string
  %retprim234167 = call i64 @prim_halt(i64 %arg234974)                               ; call prim_halt
  %cloptr250408 = call i64* @alloc(i64 32)                                           ; malloc
  %eptr250410 = getelementptr inbounds i64, i64* %cloptr250408, i64 1                ; &eptr250410[1]
  %eptr250411 = getelementptr inbounds i64, i64* %cloptr250408, i64 2                ; &eptr250411[2]
  %eptr250412 = getelementptr inbounds i64, i64* %cloptr250408, i64 3                ; &eptr250412[3]
  store i64 %l233727233907, i64* %eptr250410                                         ; *eptr250410 = %l233727233907
  store i64 %cont234162, i64* %eptr250411                                            ; *eptr250411 = %cont234162
  store i64 %_37wind_45stack233694233874, i64* %eptr250412                           ; *eptr250412 = %_37wind_45stack233694233874
  %eptr250409 = getelementptr inbounds i64, i64* %cloptr250408, i64 0                ; &cloptr250408[0]
  %f250413 = ptrtoint void(i64,i64)* @lam242594 to i64                               ; fptr cast; i64(...)* -> i64
  store i64 %f250413, i64* %eptr250409                                               ; store fptr
  %arg234977 = ptrtoint i64* %cloptr250408 to i64                                    ; closure cast; i64* -> i64
  %arg234976 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %sym237842 = add i64 0, 0                                                          ; quoted ()
  %x237843 = call i64 @prim_cons(i64 %retprim234167, i64 %sym237842)                 ; call prim_cons
  %x237844 = call i64 @prim_cons(i64 %arg234976, i64 %x237843)                       ; call prim_cons
  %cloptr250414 = inttoptr i64 %arg234977 to i64*                                    ; closure/env cast; i64 -> i64*
  %i0ptr250415 = getelementptr inbounds i64, i64* %cloptr250414, i64 0               ; &cloptr250414[0]
  %f250417 = load i64, i64* %i0ptr250415, align 8                                    ; load; *i0ptr250415
  %fptr250416 = inttoptr i64 %f250417 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr250416(i64 %arg234977, i64 %x237844)                ; tail call
  ret void

else250393:
  %many237851 = call i64 @const_init_string(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @str250418, i32 0, i32 0)); quoted string
  %fail237849 = call i64 @prim_halt(i64 %many237851)                                 ; call prim_halt
  %sym237854 = add i64 0, 0                                                          ; quoted ()
  %cloptr250419 = inttoptr i64 %fail237849 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr250420 = getelementptr inbounds i64, i64* %cloptr250419, i64 0               ; &cloptr250419[0]
  %f250422 = load i64, i64* %i0ptr250420, align 8                                    ; load; *i0ptr250420
  %fptr250421 = inttoptr i64 %f250422 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr250421(i64 %fail237849, i64 %sym237854)             ; tail call
  ret void
}


define void @lam242594(i64 %env242595, i64 %rvp237833) {
  %envptr250423 = inttoptr i64 %env242595 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr250424 = getelementptr inbounds i64, i64* %envptr250423, i64 3              ; &envptr250423[3]
  %_37wind_45stack233694233874 = load i64, i64* %envptr250424, align 8               ; load; *envptr250424
  %envptr250425 = inttoptr i64 %env242595 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr250426 = getelementptr inbounds i64, i64* %envptr250425, i64 2              ; &envptr250425[2]
  %cont234162 = load i64, i64* %envptr250426, align 8                                ; load; *envptr250426
  %envptr250427 = inttoptr i64 %env242595 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr250428 = getelementptr inbounds i64, i64* %envptr250427, i64 1              ; &envptr250427[1]
  %l233727233907 = load i64, i64* %envptr250428, align 8                             ; load; *envptr250428
  %check237834 = call i64 @prim_null_63(i64 %rvp237833)                              ; call prim_null_63
  %cmp250429 = icmp eq i64 %check237834, 15                                          ; false?
  br i1 %cmp250429, label %else250431, label %then250430                             ; if

then250430:
  %msg237838 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str250432, i32 0, i32 0)); quoted string
  %abort237836 = call i64 @prim_halt(i64 %msg237838)                                 ; call prim_halt
  %sym237841 = add i64 0, 0                                                          ; quoted ()
  %cloptr250433 = inttoptr i64 %abort237836 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr250434 = getelementptr inbounds i64, i64* %cloptr250433, i64 0               ; &cloptr250433[0]
  %f250436 = load i64, i64* %i0ptr250434, align 8                                    ; load; *i0ptr250434
  %fptr250435 = inttoptr i64 %f250436 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr250435(i64 %abort237836, i64 %sym237841)            ; tail call
  ret void

else250431:
  %_95234164 = call i64 @prim_car(i64 %rvp237833)                                    ; call prim_car
  %rvp237823 = call i64 @prim_cdr(i64 %rvp237833)                                    ; call prim_cdr
  %check237824 = call i64 @prim_null_63(i64 %rvp237823)                              ; call prim_null_63
  %cmp250437 = icmp eq i64 %check237824, 15                                          ; false?
  br i1 %cmp250437, label %else250439, label %then250438                             ; if

then250438:
  %msg237828 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str250440, i32 0, i32 0)); quoted string
  %abort237826 = call i64 @prim_halt(i64 %msg237828)                                 ; call prim_halt
  %sym237831 = add i64 0, 0                                                          ; quoted ()
  %cloptr250441 = inttoptr i64 %abort237826 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr250442 = getelementptr inbounds i64, i64* %cloptr250441, i64 0               ; &cloptr250441[0]
  %f250444 = load i64, i64* %i0ptr250442, align 8                                    ; load; *i0ptr250442
  %fptr250443 = inttoptr i64 %f250444 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr250443(i64 %abort237826, i64 %sym237831)            ; tail call
  ret void

else250439:
  %rest237830 = call i64 @prim_cdr(i64 %rvp237823)                                   ; call prim_cdr
  %empty237825 = call i64 @prim_null_63(i64 %rest237830)                             ; call prim_null_63
  %cmp250445 = icmp eq i64 %empty237825, 15                                          ; false?
  br i1 %cmp250445, label %else250447, label %then250446                             ; if

then250446:
  %_95t233730233910 = call i64 @prim_car(i64 %rvp237823)                             ; call prim_car
  %na237819 = call i64 @prim_cdr(i64 %rvp237823)                                     ; call prim_cdr
  %arg234979 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %retprim234165 = call i64 @prim_vector_45set_33(i64 %_37wind_45stack233694233874, i64 %arg234979, i64 %l233727233907); call prim_vector_45set_33
  %arg234982 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %sym237820 = add i64 0, 0                                                          ; quoted ()
  %x237821 = call i64 @prim_cons(i64 %retprim234165, i64 %sym237820)                 ; call prim_cons
  %x237822 = call i64 @prim_cons(i64 %arg234982, i64 %x237821)                       ; call prim_cons
  %cloptr250448 = inttoptr i64 %cont234162 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr250449 = getelementptr inbounds i64, i64* %cloptr250448, i64 0               ; &cloptr250448[0]
  %f250451 = load i64, i64* %i0ptr250449, align 8                                    ; load; *i0ptr250449
  %fptr250450 = inttoptr i64 %f250451 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr250450(i64 %cont234162, i64 %x237822)               ; tail call
  ret void

else250447:
  %many237829 = call i64 @const_init_string(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @str250452, i32 0, i32 0)); quoted string
  %fail237827 = call i64 @prim_halt(i64 %many237829)                                 ; call prim_halt
  %sym237832 = add i64 0, 0                                                          ; quoted ()
  %cloptr250453 = inttoptr i64 %fail237827 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr250454 = getelementptr inbounds i64, i64* %cloptr250453, i64 0               ; &cloptr250453[0]
  %f250456 = load i64, i64* %i0ptr250454, align 8                                    ; load; *i0ptr250454
  %fptr250455 = inttoptr i64 %f250456 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr250455(i64 %fail237827, i64 %sym237832)             ; tail call
  ret void
}


define void @lam242581(i64 %env242582, i64 %rvp237807) {
  %envptr250457 = inttoptr i64 %env242582 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr250458 = getelementptr inbounds i64, i64* %envptr250457, i64 3              ; &envptr250457[3]
  %_37wind_45stack233694233874 = load i64, i64* %envptr250458, align 8               ; load; *envptr250458
  %envptr250459 = inttoptr i64 %env242582 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr250460 = getelementptr inbounds i64, i64* %envptr250459, i64 2              ; &envptr250459[2]
  %cont234162 = load i64, i64* %envptr250460, align 8                                ; load; *envptr250460
  %envptr250461 = inttoptr i64 %env242582 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr250462 = getelementptr inbounds i64, i64* %envptr250461, i64 1              ; &envptr250461[1]
  %l233727233907 = load i64, i64* %envptr250462, align 8                             ; load; *envptr250462
  %check237808 = call i64 @prim_null_63(i64 %rvp237807)                              ; call prim_null_63
  %cmp250463 = icmp eq i64 %check237808, 15                                          ; false?
  br i1 %cmp250463, label %else250465, label %then250464                             ; if

then250464:
  %msg237812 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str250466, i32 0, i32 0)); quoted string
  %abort237810 = call i64 @prim_halt(i64 %msg237812)                                 ; call prim_halt
  %sym237815 = add i64 0, 0                                                          ; quoted ()
  %cloptr250467 = inttoptr i64 %abort237810 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr250468 = getelementptr inbounds i64, i64* %cloptr250467, i64 0               ; &cloptr250467[0]
  %f250470 = load i64, i64* %i0ptr250468, align 8                                    ; load; *i0ptr250468
  %fptr250469 = inttoptr i64 %f250470 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr250469(i64 %abort237810, i64 %sym237815)            ; tail call
  ret void

else250465:
  %_95234164 = call i64 @prim_car(i64 %rvp237807)                                    ; call prim_car
  %rvp237797 = call i64 @prim_cdr(i64 %rvp237807)                                    ; call prim_cdr
  %check237798 = call i64 @prim_null_63(i64 %rvp237797)                              ; call prim_null_63
  %cmp250471 = icmp eq i64 %check237798, 15                                          ; false?
  br i1 %cmp250471, label %else250473, label %then250472                             ; if

then250472:
  %msg237802 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str250474, i32 0, i32 0)); quoted string
  %abort237800 = call i64 @prim_halt(i64 %msg237802)                                 ; call prim_halt
  %sym237805 = add i64 0, 0                                                          ; quoted ()
  %cloptr250475 = inttoptr i64 %abort237800 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr250476 = getelementptr inbounds i64, i64* %cloptr250475, i64 0               ; &cloptr250475[0]
  %f250478 = load i64, i64* %i0ptr250476, align 8                                    ; load; *i0ptr250476
  %fptr250477 = inttoptr i64 %f250478 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr250477(i64 %abort237800, i64 %sym237805)            ; tail call
  ret void

else250473:
  %rest237804 = call i64 @prim_cdr(i64 %rvp237797)                                   ; call prim_cdr
  %empty237799 = call i64 @prim_null_63(i64 %rest237804)                             ; call prim_null_63
  %cmp250479 = icmp eq i64 %empty237799, 15                                          ; false?
  br i1 %cmp250479, label %else250481, label %then250480                             ; if

then250480:
  %_95t233730233910 = call i64 @prim_car(i64 %rvp237797)                             ; call prim_car
  %na237793 = call i64 @prim_cdr(i64 %rvp237797)                                     ; call prim_cdr
  %arg234969 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %retprim234165 = call i64 @prim_vector_45set_33(i64 %_37wind_45stack233694233874, i64 %arg234969, i64 %l233727233907); call prim_vector_45set_33
  %arg234972 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %sym237794 = add i64 0, 0                                                          ; quoted ()
  %x237795 = call i64 @prim_cons(i64 %retprim234165, i64 %sym237794)                 ; call prim_cons
  %x237796 = call i64 @prim_cons(i64 %arg234972, i64 %x237795)                       ; call prim_cons
  %cloptr250482 = inttoptr i64 %cont234162 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr250483 = getelementptr inbounds i64, i64* %cloptr250482, i64 0               ; &cloptr250482[0]
  %f250485 = load i64, i64* %i0ptr250483, align 8                                    ; load; *i0ptr250483
  %fptr250484 = inttoptr i64 %f250485 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr250484(i64 %cont234162, i64 %x237796)               ; tail call
  ret void

else250481:
  %many237803 = call i64 @const_init_string(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @str250486, i32 0, i32 0)); quoted string
  %fail237801 = call i64 @prim_halt(i64 %many237803)                                 ; call prim_halt
  %sym237806 = add i64 0, 0                                                          ; quoted ()
  %cloptr250487 = inttoptr i64 %fail237801 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr250488 = getelementptr inbounds i64, i64* %cloptr250487, i64 0               ; &cloptr250487[0]
  %f250490 = load i64, i64* %i0ptr250488, align 8                                    ; load; *i0ptr250488
  %fptr250489 = inttoptr i64 %f250490 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr250489(i64 %fail237801, i64 %sym237806)             ; tail call
  ret void
}


define void @lam242556(i64 %env242557, i64 %rvp237776) {
  %envptr250491 = inttoptr i64 %env242557 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr250492 = getelementptr inbounds i64, i64* %envptr250491, i64 3              ; &envptr250491[3]
  %_37wind_45stack233694233874 = load i64, i64* %envptr250492, align 8               ; load; *envptr250492
  %envptr250493 = inttoptr i64 %env242557 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr250494 = getelementptr inbounds i64, i64* %envptr250493, i64 2              ; &envptr250493[2]
  %cont234162 = load i64, i64* %envptr250494, align 8                                ; load; *envptr250494
  %envptr250495 = inttoptr i64 %env242557 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr250496 = getelementptr inbounds i64, i64* %envptr250495, i64 1              ; &envptr250495[1]
  %l233727233907 = load i64, i64* %envptr250496, align 8                             ; load; *envptr250496
  %check237777 = call i64 @prim_null_63(i64 %rvp237776)                              ; call prim_null_63
  %cmp250497 = icmp eq i64 %check237777, 15                                          ; false?
  br i1 %cmp250497, label %else250499, label %then250498                             ; if

then250498:
  %msg237781 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str250500, i32 0, i32 0)); quoted string
  %abort237779 = call i64 @prim_halt(i64 %msg237781)                                 ; call prim_halt
  %sym237784 = add i64 0, 0                                                          ; quoted ()
  %cloptr250501 = inttoptr i64 %abort237779 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr250502 = getelementptr inbounds i64, i64* %cloptr250501, i64 0               ; &cloptr250501[0]
  %f250504 = load i64, i64* %i0ptr250502, align 8                                    ; load; *i0ptr250502
  %fptr250503 = inttoptr i64 %f250504 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr250503(i64 %abort237779, i64 %sym237784)            ; tail call
  ret void

else250499:
  %_95234163 = call i64 @prim_car(i64 %rvp237776)                                    ; call prim_car
  %rvp237766 = call i64 @prim_cdr(i64 %rvp237776)                                    ; call prim_cdr
  %check237767 = call i64 @prim_null_63(i64 %rvp237766)                              ; call prim_null_63
  %cmp250505 = icmp eq i64 %check237767, 15                                          ; false?
  br i1 %cmp250505, label %else250507, label %then250506                             ; if

then250506:
  %msg237771 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str250508, i32 0, i32 0)); quoted string
  %abort237769 = call i64 @prim_halt(i64 %msg237771)                                 ; call prim_halt
  %sym237774 = add i64 0, 0                                                          ; quoted ()
  %cloptr250509 = inttoptr i64 %abort237769 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr250510 = getelementptr inbounds i64, i64* %cloptr250509, i64 0               ; &cloptr250509[0]
  %f250512 = load i64, i64* %i0ptr250510, align 8                                    ; load; *i0ptr250510
  %fptr250511 = inttoptr i64 %f250512 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr250511(i64 %abort237769, i64 %sym237774)            ; tail call
  ret void

else250507:
  %rest237773 = call i64 @prim_cdr(i64 %rvp237766)                                   ; call prim_cdr
  %empty237768 = call i64 @prim_null_63(i64 %rest237773)                             ; call prim_null_63
  %cmp250513 = icmp eq i64 %empty237768, 15                                          ; false?
  br i1 %cmp250513, label %else250515, label %then250514                             ; if

then250514:
  %_95t233728233908 = call i64 @prim_car(i64 %rvp237766)                             ; call prim_car
  %na237688 = call i64 @prim_cdr(i64 %rvp237766)                                     ; call prim_cdr
  %a234060 = call i64 @prim_car(i64 %l233727233907)                                  ; call prim_car
  %a234061 = call i64 @prim_car(i64 %a234060)                                        ; call prim_car
  %retprim234168 = call i64 @prim_procedure_63(i64 %a234061)                         ; call prim_procedure_63
  %cloptr250516 = call i64* @alloc(i64 32)                                           ; malloc
  %eptr250518 = getelementptr inbounds i64, i64* %cloptr250516, i64 1                ; &eptr250518[1]
  %eptr250519 = getelementptr inbounds i64, i64* %cloptr250516, i64 2                ; &eptr250519[2]
  %eptr250520 = getelementptr inbounds i64, i64* %cloptr250516, i64 3                ; &eptr250520[3]
  store i64 %l233727233907, i64* %eptr250518                                         ; *eptr250518 = %l233727233907
  store i64 %cont234162, i64* %eptr250519                                            ; *eptr250519 = %cont234162
  store i64 %_37wind_45stack233694233874, i64* %eptr250520                           ; *eptr250520 = %_37wind_45stack233694233874
  %eptr250517 = getelementptr inbounds i64, i64* %cloptr250516, i64 0                ; &cloptr250516[0]
  %f250521 = ptrtoint void(i64,i64)* @lam242552 to i64                               ; fptr cast; i64(...)* -> i64
  store i64 %f250521, i64* %eptr250517                                               ; store fptr
  %arg234933 = ptrtoint i64* %cloptr250516 to i64                                    ; closure cast; i64* -> i64
  %arg234932 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %sym237763 = add i64 0, 0                                                          ; quoted ()
  %x237764 = call i64 @prim_cons(i64 %retprim234168, i64 %sym237763)                 ; call prim_cons
  %x237765 = call i64 @prim_cons(i64 %arg234932, i64 %x237764)                       ; call prim_cons
  %cloptr250522 = inttoptr i64 %arg234933 to i64*                                    ; closure/env cast; i64 -> i64*
  %i0ptr250523 = getelementptr inbounds i64, i64* %cloptr250522, i64 0               ; &cloptr250522[0]
  %f250525 = load i64, i64* %i0ptr250523, align 8                                    ; load; *i0ptr250523
  %fptr250524 = inttoptr i64 %f250525 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr250524(i64 %arg234933, i64 %x237765)                ; tail call
  ret void

else250515:
  %many237772 = call i64 @const_init_string(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @str250526, i32 0, i32 0)); quoted string
  %fail237770 = call i64 @prim_halt(i64 %many237772)                                 ; call prim_halt
  %sym237775 = add i64 0, 0                                                          ; quoted ()
  %cloptr250527 = inttoptr i64 %fail237770 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr250528 = getelementptr inbounds i64, i64* %cloptr250527, i64 0               ; &cloptr250527[0]
  %f250530 = load i64, i64* %i0ptr250528, align 8                                    ; load; *i0ptr250528
  %fptr250529 = inttoptr i64 %f250530 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr250529(i64 %fail237770, i64 %sym237775)             ; tail call
  ret void
}


define void @lam242552(i64 %env242553, i64 %rvp237754) {
  %envptr250531 = inttoptr i64 %env242553 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr250532 = getelementptr inbounds i64, i64* %envptr250531, i64 3              ; &envptr250531[3]
  %_37wind_45stack233694233874 = load i64, i64* %envptr250532, align 8               ; load; *envptr250532
  %envptr250533 = inttoptr i64 %env242553 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr250534 = getelementptr inbounds i64, i64* %envptr250533, i64 2              ; &envptr250533[2]
  %cont234162 = load i64, i64* %envptr250534, align 8                                ; load; *envptr250534
  %envptr250535 = inttoptr i64 %env242553 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr250536 = getelementptr inbounds i64, i64* %envptr250535, i64 1              ; &envptr250535[1]
  %l233727233907 = load i64, i64* %envptr250536, align 8                             ; load; *envptr250536
  %check237755 = call i64 @prim_null_63(i64 %rvp237754)                              ; call prim_null_63
  %cmp250537 = icmp eq i64 %check237755, 15                                          ; false?
  br i1 %cmp250537, label %else250539, label %then250538                             ; if

then250538:
  %msg237759 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str250540, i32 0, i32 0)); quoted string
  %abort237757 = call i64 @prim_halt(i64 %msg237759)                                 ; call prim_halt
  %sym237762 = add i64 0, 0                                                          ; quoted ()
  %cloptr250541 = inttoptr i64 %abort237757 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr250542 = getelementptr inbounds i64, i64* %cloptr250541, i64 0               ; &cloptr250541[0]
  %f250544 = load i64, i64* %i0ptr250542, align 8                                    ; load; *i0ptr250542
  %fptr250543 = inttoptr i64 %f250544 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr250543(i64 %abort237757, i64 %sym237762)            ; tail call
  ret void

else250539:
  %_95234166 = call i64 @prim_car(i64 %rvp237754)                                    ; call prim_car
  %rvp237744 = call i64 @prim_cdr(i64 %rvp237754)                                    ; call prim_cdr
  %check237745 = call i64 @prim_null_63(i64 %rvp237744)                              ; call prim_null_63
  %cmp250545 = icmp eq i64 %check237745, 15                                          ; false?
  br i1 %cmp250545, label %else250547, label %then250546                             ; if

then250546:
  %msg237749 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str250548, i32 0, i32 0)); quoted string
  %abort237747 = call i64 @prim_halt(i64 %msg237749)                                 ; call prim_halt
  %sym237752 = add i64 0, 0                                                          ; quoted ()
  %cloptr250549 = inttoptr i64 %abort237747 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr250550 = getelementptr inbounds i64, i64* %cloptr250549, i64 0               ; &cloptr250549[0]
  %f250552 = load i64, i64* %i0ptr250550, align 8                                    ; load; *i0ptr250550
  %fptr250551 = inttoptr i64 %f250552 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr250551(i64 %abort237747, i64 %sym237752)            ; tail call
  ret void

else250547:
  %rest237751 = call i64 @prim_cdr(i64 %rvp237744)                                   ; call prim_cdr
  %empty237746 = call i64 @prim_null_63(i64 %rest237751)                             ; call prim_null_63
  %cmp250553 = icmp eq i64 %empty237746, 15                                          ; false?
  br i1 %cmp250553, label %else250555, label %then250554                             ; if

then250554:
  %check233573233731233911 = call i64 @prim_car(i64 %rvp237744)                      ; call prim_car
  %na237690 = call i64 @prim_cdr(i64 %rvp237744)                                     ; call prim_cdr
  %cmp250556 = icmp eq i64 %check233573233731233911, 15                              ; false?
  br i1 %cmp250556, label %else250558, label %then250557                             ; if

then250557:
  %a234062 = call i64 @prim_car(i64 %l233727233907)                                  ; call prim_car
  %a234063 = call i64 @prim_car(i64 %a234062)                                        ; call prim_car
  %cloptr250559 = call i64* @alloc(i64 32)                                           ; malloc
  %eptr250561 = getelementptr inbounds i64, i64* %cloptr250559, i64 1                ; &eptr250561[1]
  %eptr250562 = getelementptr inbounds i64, i64* %cloptr250559, i64 2                ; &eptr250562[2]
  %eptr250563 = getelementptr inbounds i64, i64* %cloptr250559, i64 3                ; &eptr250563[3]
  store i64 %l233727233907, i64* %eptr250561                                         ; *eptr250561 = %l233727233907
  store i64 %cont234162, i64* %eptr250562                                            ; *eptr250562 = %cont234162
  store i64 %_37wind_45stack233694233874, i64* %eptr250563                           ; *eptr250563 = %_37wind_45stack233694233874
  %eptr250560 = getelementptr inbounds i64, i64* %cloptr250559, i64 0                ; &cloptr250559[0]
  %f250564 = ptrtoint void(i64,i64)* @lam242534 to i64                               ; fptr cast; i64(...)* -> i64
  store i64 %f250564, i64* %eptr250560                                               ; store fptr
  %arg234936 = ptrtoint i64* %cloptr250559 to i64                                    ; closure cast; i64* -> i64
  %sym237715 = add i64 0, 0                                                          ; quoted ()
  %x237716 = call i64 @prim_cons(i64 %arg234936, i64 %sym237715)                     ; call prim_cons
  %cloptr250565 = inttoptr i64 %a234063 to i64*                                      ; closure/env cast; i64 -> i64*
  %i0ptr250566 = getelementptr inbounds i64, i64* %cloptr250565, i64 0               ; &cloptr250565[0]
  %f250568 = load i64, i64* %i0ptr250566, align 8                                    ; load; *i0ptr250566
  %fptr250567 = inttoptr i64 %f250568 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr250567(i64 %a234063, i64 %x237716)                  ; tail call
  ret void

else250558:
  %arg234944 = call i64 @const_init_string(i8* getelementptr inbounds ([71 x i8], [71 x i8]* @str250569, i32 0, i32 0)); quoted string
  %retprim234167 = call i64 @prim_halt(i64 %arg234944)                               ; call prim_halt
  %cloptr250570 = call i64* @alloc(i64 32)                                           ; malloc
  %eptr250572 = getelementptr inbounds i64, i64* %cloptr250570, i64 1                ; &eptr250572[1]
  %eptr250573 = getelementptr inbounds i64, i64* %cloptr250570, i64 2                ; &eptr250573[2]
  %eptr250574 = getelementptr inbounds i64, i64* %cloptr250570, i64 3                ; &eptr250574[3]
  store i64 %l233727233907, i64* %eptr250572                                         ; *eptr250572 = %l233727233907
  store i64 %cont234162, i64* %eptr250573                                            ; *eptr250573 = %cont234162
  store i64 %_37wind_45stack233694233874, i64* %eptr250574                           ; *eptr250574 = %_37wind_45stack233694233874
  %eptr250571 = getelementptr inbounds i64, i64* %cloptr250570, i64 0                ; &cloptr250570[0]
  %f250575 = ptrtoint void(i64,i64)* @lam242547 to i64                               ; fptr cast; i64(...)* -> i64
  store i64 %f250575, i64* %eptr250571                                               ; store fptr
  %arg234947 = ptrtoint i64* %cloptr250570 to i64                                    ; closure cast; i64* -> i64
  %arg234946 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %sym237741 = add i64 0, 0                                                          ; quoted ()
  %x237742 = call i64 @prim_cons(i64 %retprim234167, i64 %sym237741)                 ; call prim_cons
  %x237743 = call i64 @prim_cons(i64 %arg234946, i64 %x237742)                       ; call prim_cons
  %cloptr250576 = inttoptr i64 %arg234947 to i64*                                    ; closure/env cast; i64 -> i64*
  %i0ptr250577 = getelementptr inbounds i64, i64* %cloptr250576, i64 0               ; &cloptr250576[0]
  %f250579 = load i64, i64* %i0ptr250577, align 8                                    ; load; *i0ptr250577
  %fptr250578 = inttoptr i64 %f250579 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr250578(i64 %arg234947, i64 %x237743)                ; tail call
  ret void

else250555:
  %many237750 = call i64 @const_init_string(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @str250580, i32 0, i32 0)); quoted string
  %fail237748 = call i64 @prim_halt(i64 %many237750)                                 ; call prim_halt
  %sym237753 = add i64 0, 0                                                          ; quoted ()
  %cloptr250581 = inttoptr i64 %fail237748 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr250582 = getelementptr inbounds i64, i64* %cloptr250581, i64 0               ; &cloptr250581[0]
  %f250584 = load i64, i64* %i0ptr250582, align 8                                    ; load; *i0ptr250582
  %fptr250583 = inttoptr i64 %f250584 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr250583(i64 %fail237748, i64 %sym237753)             ; tail call
  ret void
}


define void @lam242547(i64 %env242548, i64 %rvp237732) {
  %envptr250585 = inttoptr i64 %env242548 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr250586 = getelementptr inbounds i64, i64* %envptr250585, i64 3              ; &envptr250585[3]
  %_37wind_45stack233694233874 = load i64, i64* %envptr250586, align 8               ; load; *envptr250586
  %envptr250587 = inttoptr i64 %env242548 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr250588 = getelementptr inbounds i64, i64* %envptr250587, i64 2              ; &envptr250587[2]
  %cont234162 = load i64, i64* %envptr250588, align 8                                ; load; *envptr250588
  %envptr250589 = inttoptr i64 %env242548 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr250590 = getelementptr inbounds i64, i64* %envptr250589, i64 1              ; &envptr250589[1]
  %l233727233907 = load i64, i64* %envptr250590, align 8                             ; load; *envptr250590
  %check237733 = call i64 @prim_null_63(i64 %rvp237732)                              ; call prim_null_63
  %cmp250591 = icmp eq i64 %check237733, 15                                          ; false?
  br i1 %cmp250591, label %else250593, label %then250592                             ; if

then250592:
  %msg237737 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str250594, i32 0, i32 0)); quoted string
  %abort237735 = call i64 @prim_halt(i64 %msg237737)                                 ; call prim_halt
  %sym237740 = add i64 0, 0                                                          ; quoted ()
  %cloptr250595 = inttoptr i64 %abort237735 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr250596 = getelementptr inbounds i64, i64* %cloptr250595, i64 0               ; &cloptr250595[0]
  %f250598 = load i64, i64* %i0ptr250596, align 8                                    ; load; *i0ptr250596
  %fptr250597 = inttoptr i64 %f250598 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr250597(i64 %abort237735, i64 %sym237740)            ; tail call
  ret void

else250593:
  %_95234164 = call i64 @prim_car(i64 %rvp237732)                                    ; call prim_car
  %rvp237722 = call i64 @prim_cdr(i64 %rvp237732)                                    ; call prim_cdr
  %check237723 = call i64 @prim_null_63(i64 %rvp237722)                              ; call prim_null_63
  %cmp250599 = icmp eq i64 %check237723, 15                                          ; false?
  br i1 %cmp250599, label %else250601, label %then250600                             ; if

then250600:
  %msg237727 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str250602, i32 0, i32 0)); quoted string
  %abort237725 = call i64 @prim_halt(i64 %msg237727)                                 ; call prim_halt
  %sym237730 = add i64 0, 0                                                          ; quoted ()
  %cloptr250603 = inttoptr i64 %abort237725 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr250604 = getelementptr inbounds i64, i64* %cloptr250603, i64 0               ; &cloptr250603[0]
  %f250606 = load i64, i64* %i0ptr250604, align 8                                    ; load; *i0ptr250604
  %fptr250605 = inttoptr i64 %f250606 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr250605(i64 %abort237725, i64 %sym237730)            ; tail call
  ret void

else250601:
  %rest237729 = call i64 @prim_cdr(i64 %rvp237722)                                   ; call prim_cdr
  %empty237724 = call i64 @prim_null_63(i64 %rest237729)                             ; call prim_null_63
  %cmp250607 = icmp eq i64 %empty237724, 15                                          ; false?
  br i1 %cmp250607, label %else250609, label %then250608                             ; if

then250608:
  %_95t233730233910 = call i64 @prim_car(i64 %rvp237722)                             ; call prim_car
  %na237718 = call i64 @prim_cdr(i64 %rvp237722)                                     ; call prim_cdr
  %arg234949 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %retprim234165 = call i64 @prim_vector_45set_33(i64 %_37wind_45stack233694233874, i64 %arg234949, i64 %l233727233907); call prim_vector_45set_33
  %arg234952 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %sym237719 = add i64 0, 0                                                          ; quoted ()
  %x237720 = call i64 @prim_cons(i64 %retprim234165, i64 %sym237719)                 ; call prim_cons
  %x237721 = call i64 @prim_cons(i64 %arg234952, i64 %x237720)                       ; call prim_cons
  %cloptr250610 = inttoptr i64 %cont234162 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr250611 = getelementptr inbounds i64, i64* %cloptr250610, i64 0               ; &cloptr250610[0]
  %f250613 = load i64, i64* %i0ptr250611, align 8                                    ; load; *i0ptr250611
  %fptr250612 = inttoptr i64 %f250613 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr250612(i64 %cont234162, i64 %x237721)               ; tail call
  ret void

else250609:
  %many237728 = call i64 @const_init_string(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @str250614, i32 0, i32 0)); quoted string
  %fail237726 = call i64 @prim_halt(i64 %many237728)                                 ; call prim_halt
  %sym237731 = add i64 0, 0                                                          ; quoted ()
  %cloptr250615 = inttoptr i64 %fail237726 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr250616 = getelementptr inbounds i64, i64* %cloptr250615, i64 0               ; &cloptr250615[0]
  %f250618 = load i64, i64* %i0ptr250616, align 8                                    ; load; *i0ptr250616
  %fptr250617 = inttoptr i64 %f250618 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr250617(i64 %fail237726, i64 %sym237731)             ; tail call
  ret void
}


define void @lam242534(i64 %env242535, i64 %rvp237706) {
  %envptr250619 = inttoptr i64 %env242535 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr250620 = getelementptr inbounds i64, i64* %envptr250619, i64 3              ; &envptr250619[3]
  %_37wind_45stack233694233874 = load i64, i64* %envptr250620, align 8               ; load; *envptr250620
  %envptr250621 = inttoptr i64 %env242535 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr250622 = getelementptr inbounds i64, i64* %envptr250621, i64 2              ; &envptr250621[2]
  %cont234162 = load i64, i64* %envptr250622, align 8                                ; load; *envptr250622
  %envptr250623 = inttoptr i64 %env242535 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr250624 = getelementptr inbounds i64, i64* %envptr250623, i64 1              ; &envptr250623[1]
  %l233727233907 = load i64, i64* %envptr250624, align 8                             ; load; *envptr250624
  %check237707 = call i64 @prim_null_63(i64 %rvp237706)                              ; call prim_null_63
  %cmp250625 = icmp eq i64 %check237707, 15                                          ; false?
  br i1 %cmp250625, label %else250627, label %then250626                             ; if

then250626:
  %msg237711 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str250628, i32 0, i32 0)); quoted string
  %abort237709 = call i64 @prim_halt(i64 %msg237711)                                 ; call prim_halt
  %sym237714 = add i64 0, 0                                                          ; quoted ()
  %cloptr250629 = inttoptr i64 %abort237709 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr250630 = getelementptr inbounds i64, i64* %cloptr250629, i64 0               ; &cloptr250629[0]
  %f250632 = load i64, i64* %i0ptr250630, align 8                                    ; load; *i0ptr250630
  %fptr250631 = inttoptr i64 %f250632 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr250631(i64 %abort237709, i64 %sym237714)            ; tail call
  ret void

else250627:
  %_95234164 = call i64 @prim_car(i64 %rvp237706)                                    ; call prim_car
  %rvp237696 = call i64 @prim_cdr(i64 %rvp237706)                                    ; call prim_cdr
  %check237697 = call i64 @prim_null_63(i64 %rvp237696)                              ; call prim_null_63
  %cmp250633 = icmp eq i64 %check237697, 15                                          ; false?
  br i1 %cmp250633, label %else250635, label %then250634                             ; if

then250634:
  %msg237701 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str250636, i32 0, i32 0)); quoted string
  %abort237699 = call i64 @prim_halt(i64 %msg237701)                                 ; call prim_halt
  %sym237704 = add i64 0, 0                                                          ; quoted ()
  %cloptr250637 = inttoptr i64 %abort237699 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr250638 = getelementptr inbounds i64, i64* %cloptr250637, i64 0               ; &cloptr250637[0]
  %f250640 = load i64, i64* %i0ptr250638, align 8                                    ; load; *i0ptr250638
  %fptr250639 = inttoptr i64 %f250640 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr250639(i64 %abort237699, i64 %sym237704)            ; tail call
  ret void

else250635:
  %rest237703 = call i64 @prim_cdr(i64 %rvp237696)                                   ; call prim_cdr
  %empty237698 = call i64 @prim_null_63(i64 %rest237703)                             ; call prim_null_63
  %cmp250641 = icmp eq i64 %empty237698, 15                                          ; false?
  br i1 %cmp250641, label %else250643, label %then250642                             ; if

then250642:
  %_95t233730233910 = call i64 @prim_car(i64 %rvp237696)                             ; call prim_car
  %na237692 = call i64 @prim_cdr(i64 %rvp237696)                                     ; call prim_cdr
  %arg234939 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %retprim234165 = call i64 @prim_vector_45set_33(i64 %_37wind_45stack233694233874, i64 %arg234939, i64 %l233727233907); call prim_vector_45set_33
  %arg234942 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %sym237693 = add i64 0, 0                                                          ; quoted ()
  %x237694 = call i64 @prim_cons(i64 %retprim234165, i64 %sym237693)                 ; call prim_cons
  %x237695 = call i64 @prim_cons(i64 %arg234942, i64 %x237694)                       ; call prim_cons
  %cloptr250644 = inttoptr i64 %cont234162 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr250645 = getelementptr inbounds i64, i64* %cloptr250644, i64 0               ; &cloptr250644[0]
  %f250647 = load i64, i64* %i0ptr250645, align 8                                    ; load; *i0ptr250645
  %fptr250646 = inttoptr i64 %f250647 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr250646(i64 %cont234162, i64 %x237695)               ; tail call
  ret void

else250643:
  %many237702 = call i64 @const_init_string(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @str250648, i32 0, i32 0)); quoted string
  %fail237700 = call i64 @prim_halt(i64 %many237702)                                 ; call prim_halt
  %sym237705 = add i64 0, 0                                                          ; quoted ()
  %cloptr250649 = inttoptr i64 %fail237700 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr250650 = getelementptr inbounds i64, i64* %cloptr250649, i64 0               ; &cloptr250649[0]
  %f250652 = load i64, i64* %i0ptr250650, align 8                                    ; load; *i0ptr250650
  %fptr250651 = inttoptr i64 %f250652 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr250651(i64 %fail237700, i64 %sym237705)             ; tail call
  ret void
}


define void @lam242499(i64 %env242500, i64 %rvp237951) {
  %envptr250653 = inttoptr i64 %env242500 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr250654 = getelementptr inbounds i64, i64* %envptr250653, i64 3              ; &envptr250653[3]
  %f233724233904 = load i64, i64* %envptr250654, align 8                             ; load; *envptr250654
  %envptr250655 = inttoptr i64 %env242500 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr250656 = getelementptr inbounds i64, i64* %envptr250655, i64 2              ; &envptr250655[2]
  %cont234158 = load i64, i64* %envptr250656, align 8                                ; load; *envptr250656
  %envptr250657 = inttoptr i64 %env242500 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr250658 = getelementptr inbounds i64, i64* %envptr250657, i64 1              ; &envptr250657[1]
  %new233710233890 = load i64, i64* %envptr250658, align 8                           ; load; *envptr250658
  %check237952 = call i64 @prim_null_63(i64 %rvp237951)                              ; call prim_null_63
  %cmp250659 = icmp eq i64 %check237952, 15                                          ; false?
  br i1 %cmp250659, label %else250661, label %then250660                             ; if

then250660:
  %msg237956 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str250662, i32 0, i32 0)); quoted string
  %abort237954 = call i64 @prim_halt(i64 %msg237956)                                 ; call prim_halt
  %sym237959 = add i64 0, 0                                                          ; quoted ()
  %cloptr250663 = inttoptr i64 %abort237954 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr250664 = getelementptr inbounds i64, i64* %cloptr250663, i64 0               ; &cloptr250663[0]
  %f250666 = load i64, i64* %i0ptr250664, align 8                                    ; load; *i0ptr250664
  %fptr250665 = inttoptr i64 %f250666 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr250665(i64 %abort237954, i64 %sym237959)            ; tail call
  ret void

else250661:
  %_95234173 = call i64 @prim_car(i64 %rvp237951)                                    ; call prim_car
  %rvp237941 = call i64 @prim_cdr(i64 %rvp237951)                                    ; call prim_cdr
  %check237942 = call i64 @prim_null_63(i64 %rvp237941)                              ; call prim_null_63
  %cmp250667 = icmp eq i64 %check237942, 15                                          ; false?
  br i1 %cmp250667, label %else250669, label %then250668                             ; if

then250668:
  %msg237946 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str250670, i32 0, i32 0)); quoted string
  %abort237944 = call i64 @prim_halt(i64 %msg237946)                                 ; call prim_halt
  %sym237949 = add i64 0, 0                                                          ; quoted ()
  %cloptr250671 = inttoptr i64 %abort237944 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr250672 = getelementptr inbounds i64, i64* %cloptr250671, i64 0               ; &cloptr250671[0]
  %f250674 = load i64, i64* %i0ptr250672, align 8                                    ; load; *i0ptr250672
  %fptr250673 = inttoptr i64 %f250674 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr250673(i64 %abort237944, i64 %sym237949)            ; tail call
  ret void

else250669:
  %rest237948 = call i64 @prim_cdr(i64 %rvp237941)                                   ; call prim_cdr
  %empty237943 = call i64 @prim_null_63(i64 %rest237948)                             ; call prim_null_63
  %cmp250675 = icmp eq i64 %empty237943, 15                                          ; false?
  br i1 %cmp250675, label %else250677, label %then250676                             ; if

then250676:
  %check233574233733233913 = call i64 @prim_car(i64 %rvp237941)                      ; call prim_car
  %na237934 = call i64 @prim_cdr(i64 %rvp237941)                                     ; call prim_cdr
  %cmp250678 = icmp eq i64 %check233574233733233913, 15                              ; false?
  br i1 %cmp250678, label %else250680, label %then250679                             ; if

then250679:
  %arg234996 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %a234065 = call i64 @prim_vector_45ref(i64 %f233724233904, i64 %arg234996)         ; call prim_vector_45ref
  %sym237935 = add i64 0, 0                                                          ; quoted ()
  %x237936 = call i64 @prim_cons(i64 %new233710233890, i64 %sym237935)               ; call prim_cons
  %x237937 = call i64 @prim_cons(i64 %cont234158, i64 %x237936)                      ; call prim_cons
  %cloptr250681 = inttoptr i64 %a234065 to i64*                                      ; closure/env cast; i64 -> i64*
  %i0ptr250682 = getelementptr inbounds i64, i64* %cloptr250681, i64 0               ; &cloptr250681[0]
  %f250684 = load i64, i64* %i0ptr250682, align 8                                    ; load; *i0ptr250682
  %fptr250683 = inttoptr i64 %f250684 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr250683(i64 %a234065, i64 %x237937)                  ; tail call
  ret void

else250680:
  %arg235001 = call i64 @const_init_string(i8* getelementptr inbounds ([63 x i8], [63 x i8]* @str250685, i32 0, i32 0)); quoted string
  %retprim234174 = call i64 @prim_halt(i64 %arg235001)                               ; call prim_halt
  %arg235003 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %sym237938 = add i64 0, 0                                                          ; quoted ()
  %x237939 = call i64 @prim_cons(i64 %retprim234174, i64 %sym237938)                 ; call prim_cons
  %x237940 = call i64 @prim_cons(i64 %arg235003, i64 %x237939)                       ; call prim_cons
  %cloptr250686 = inttoptr i64 %cont234158 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr250687 = getelementptr inbounds i64, i64* %cloptr250686, i64 0               ; &cloptr250686[0]
  %f250689 = load i64, i64* %i0ptr250687, align 8                                    ; load; *i0ptr250687
  %fptr250688 = inttoptr i64 %f250689 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr250688(i64 %cont234158, i64 %x237940)               ; tail call
  ret void

else250677:
  %many237947 = call i64 @const_init_string(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @str250690, i32 0, i32 0)); quoted string
  %fail237945 = call i64 @prim_halt(i64 %many237947)                                 ; call prim_halt
  %sym237950 = add i64 0, 0                                                          ; quoted ()
  %cloptr250691 = inttoptr i64 %fail237945 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr250692 = getelementptr inbounds i64, i64* %cloptr250691, i64 0               ; &cloptr250691[0]
  %f250694 = load i64, i64* %i0ptr250692, align 8                                    ; load; *i0ptr250692
  %fptr250693 = inttoptr i64 %f250694 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr250693(i64 %fail237945, i64 %sym237950)             ; tail call
  ret void
}


define void @lam242442(i64 %env242443, i64 %rvp240004) {
  %envptr250695 = inttoptr i64 %env242443 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr250696 = getelementptr inbounds i64, i64* %envptr250695, i64 1              ; &envptr250695[1]
  %_37wind_45stack233694233874 = load i64, i64* %envptr250696, align 8               ; load; *envptr250696
  %check240005 = call i64 @prim_null_63(i64 %rvp240004)                              ; call prim_null_63
  %cmp250697 = icmp eq i64 %check240005, 15                                          ; false?
  br i1 %cmp250697, label %else250699, label %then250698                             ; if

then250698:
  %msg240009 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str250700, i32 0, i32 0)); quoted string
  %abort240007 = call i64 @prim_halt(i64 %msg240009)                                 ; call prim_halt
  %sym240012 = add i64 0, 0                                                          ; quoted ()
  %cloptr250701 = inttoptr i64 %abort240007 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr250702 = getelementptr inbounds i64, i64* %cloptr250701, i64 0               ; &cloptr250701[0]
  %f250704 = load i64, i64* %i0ptr250702, align 8                                    ; load; *i0ptr250702
  %fptr250703 = inttoptr i64 %f250704 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr250703(i64 %abort240007, i64 %sym240012)            ; tail call
  ret void

else250699:
  %cont234201 = call i64 @prim_car(i64 %rvp240004)                                   ; call prim_car
  %rvp239995 = call i64 @prim_cdr(i64 %rvp240004)                                    ; call prim_cdr
  %check239996 = call i64 @prim_null_63(i64 %rvp239995)                              ; call prim_null_63
  %cmp250705 = icmp eq i64 %check239996, 15                                          ; false?
  br i1 %cmp250705, label %else250707, label %then250706                             ; if

then250706:
  %msg240000 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str250708, i32 0, i32 0)); quoted string
  %abort239998 = call i64 @prim_halt(i64 %msg240000)                                 ; call prim_halt
  %sym240003 = add i64 0, 0                                                          ; quoted ()
  %cloptr250709 = inttoptr i64 %abort239998 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr250710 = getelementptr inbounds i64, i64* %cloptr250709, i64 0               ; &cloptr250709[0]
  %f250712 = load i64, i64* %i0ptr250710, align 8                                    ; load; *i0ptr250710
  %fptr250711 = inttoptr i64 %f250712 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr250711(i64 %abort239998, i64 %sym240003)            ; tail call
  ret void

else250707:
  %pre233735233915 = call i64 @prim_car(i64 %rvp239995)                              ; call prim_car
  %rvp239986 = call i64 @prim_cdr(i64 %rvp239995)                                    ; call prim_cdr
  %check239987 = call i64 @prim_null_63(i64 %rvp239986)                              ; call prim_null_63
  %cmp250713 = icmp eq i64 %check239987, 15                                          ; false?
  br i1 %cmp250713, label %else250715, label %then250714                             ; if

then250714:
  %msg239991 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str250716, i32 0, i32 0)); quoted string
  %abort239989 = call i64 @prim_halt(i64 %msg239991)                                 ; call prim_halt
  %sym239994 = add i64 0, 0                                                          ; quoted ()
  %cloptr250717 = inttoptr i64 %abort239989 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr250718 = getelementptr inbounds i64, i64* %cloptr250717, i64 0               ; &cloptr250717[0]
  %f250720 = load i64, i64* %i0ptr250718, align 8                                    ; load; *i0ptr250718
  %fptr250719 = inttoptr i64 %f250720 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr250719(i64 %abort239989, i64 %sym239994)            ; tail call
  ret void

else250715:
  %body233736233916 = call i64 @prim_car(i64 %rvp239986)                             ; call prim_car
  %rvp239976 = call i64 @prim_cdr(i64 %rvp239986)                                    ; call prim_cdr
  %check239977 = call i64 @prim_null_63(i64 %rvp239976)                              ; call prim_null_63
  %cmp250721 = icmp eq i64 %check239977, 15                                          ; false?
  br i1 %cmp250721, label %else250723, label %then250722                             ; if

then250722:
  %msg239981 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str250724, i32 0, i32 0)); quoted string
  %abort239979 = call i64 @prim_halt(i64 %msg239981)                                 ; call prim_halt
  %sym239984 = add i64 0, 0                                                          ; quoted ()
  %cloptr250725 = inttoptr i64 %abort239979 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr250726 = getelementptr inbounds i64, i64* %cloptr250725, i64 0               ; &cloptr250725[0]
  %f250728 = load i64, i64* %i0ptr250726, align 8                                    ; load; *i0ptr250726
  %fptr250727 = inttoptr i64 %f250728 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr250727(i64 %abort239979, i64 %sym239984)            ; tail call
  ret void

else250723:
  %rest239983 = call i64 @prim_cdr(i64 %rvp239976)                                   ; call prim_cdr
  %empty239978 = call i64 @prim_null_63(i64 %rest239983)                             ; call prim_null_63
  %cmp250729 = icmp eq i64 %empty239978, 15                                          ; false?
  br i1 %cmp250729, label %else250731, label %then250730                             ; if

then250730:
  %post233737233917 = call i64 @prim_car(i64 %rvp239976)                             ; call prim_car
  %na239478 = call i64 @prim_cdr(i64 %rvp239976)                                     ; call prim_cdr
  %check233575233739233919 = call i64 @prim_procedure_63(i64 %pre233735233915)       ; call prim_procedure_63
  %cmp250732 = icmp eq i64 %check233575233739233919, 15                              ; false?
  br i1 %cmp250732, label %else250734, label %then250733                             ; if

then250733:
  %cloptr250735 = call i64* @alloc(i64 48)                                           ; malloc
  %eptr250737 = getelementptr inbounds i64, i64* %cloptr250735, i64 1                ; &eptr250737[1]
  %eptr250738 = getelementptr inbounds i64, i64* %cloptr250735, i64 2                ; &eptr250738[2]
  %eptr250739 = getelementptr inbounds i64, i64* %cloptr250735, i64 3                ; &eptr250739[3]
  %eptr250740 = getelementptr inbounds i64, i64* %cloptr250735, i64 4                ; &eptr250740[4]
  %eptr250741 = getelementptr inbounds i64, i64* %cloptr250735, i64 5                ; &eptr250741[5]
  store i64 %body233736233916, i64* %eptr250737                                      ; *eptr250737 = %body233736233916
  store i64 %_37wind_45stack233694233874, i64* %eptr250738                           ; *eptr250738 = %_37wind_45stack233694233874
  store i64 %pre233735233915, i64* %eptr250739                                       ; *eptr250739 = %pre233735233915
  store i64 %cont234201, i64* %eptr250740                                            ; *eptr250740 = %cont234201
  store i64 %post233737233917, i64* %eptr250741                                      ; *eptr250741 = %post233737233917
  %eptr250736 = getelementptr inbounds i64, i64* %cloptr250735, i64 0                ; &cloptr250735[0]
  %f250742 = ptrtoint void(i64,i64)* @lam242323 to i64                               ; fptr cast; i64(...)* -> i64
  store i64 %f250742, i64* %eptr250736                                               ; store fptr
  %arg235420 = ptrtoint i64* %cloptr250735 to i64                                    ; closure cast; i64* -> i64
  %sym239725 = add i64 0, 0                                                          ; quoted ()
  %x239726 = call i64 @prim_cons(i64 %arg235420, i64 %sym239725)                     ; call prim_cons
  %cloptr250743 = inttoptr i64 %pre233735233915 to i64*                              ; closure/env cast; i64 -> i64*
  %i0ptr250744 = getelementptr inbounds i64, i64* %cloptr250743, i64 0               ; &cloptr250743[0]
  %f250746 = load i64, i64* %i0ptr250744, align 8                                    ; load; *i0ptr250744
  %fptr250745 = inttoptr i64 %f250746 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr250745(i64 %pre233735233915, i64 %x239726)          ; tail call
  ret void

else250734:
  %arg235485 = call i64 @const_init_string(i8* getelementptr inbounds ([61 x i8], [61 x i8]* @str250747, i32 0, i32 0)); quoted string
  %retprim234211 = call i64 @prim_halt(i64 %arg235485)                               ; call prim_halt
  %cloptr250748 = call i64* @alloc(i64 48)                                           ; malloc
  %eptr250750 = getelementptr inbounds i64, i64* %cloptr250748, i64 1                ; &eptr250750[1]
  %eptr250751 = getelementptr inbounds i64, i64* %cloptr250748, i64 2                ; &eptr250751[2]
  %eptr250752 = getelementptr inbounds i64, i64* %cloptr250748, i64 3                ; &eptr250752[3]
  %eptr250753 = getelementptr inbounds i64, i64* %cloptr250748, i64 4                ; &eptr250753[4]
  %eptr250754 = getelementptr inbounds i64, i64* %cloptr250748, i64 5                ; &eptr250754[5]
  store i64 %body233736233916, i64* %eptr250750                                      ; *eptr250750 = %body233736233916
  store i64 %_37wind_45stack233694233874, i64* %eptr250751                           ; *eptr250751 = %_37wind_45stack233694233874
  store i64 %pre233735233915, i64* %eptr250752                                       ; *eptr250752 = %pre233735233915
  store i64 %cont234201, i64* %eptr250753                                            ; *eptr250753 = %cont234201
  store i64 %post233737233917, i64* %eptr250754                                      ; *eptr250754 = %post233737233917
  %eptr250749 = getelementptr inbounds i64, i64* %cloptr250748, i64 0                ; &cloptr250748[0]
  %f250755 = ptrtoint void(i64,i64)* @lam242437 to i64                               ; fptr cast; i64(...)* -> i64
  store i64 %f250755, i64* %eptr250749                                               ; store fptr
  %arg235488 = ptrtoint i64* %cloptr250748 to i64                                    ; closure cast; i64* -> i64
  %arg235487 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %sym239973 = add i64 0, 0                                                          ; quoted ()
  %x239974 = call i64 @prim_cons(i64 %retprim234211, i64 %sym239973)                 ; call prim_cons
  %x239975 = call i64 @prim_cons(i64 %arg235487, i64 %x239974)                       ; call prim_cons
  %cloptr250756 = inttoptr i64 %arg235488 to i64*                                    ; closure/env cast; i64 -> i64*
  %i0ptr250757 = getelementptr inbounds i64, i64* %cloptr250756, i64 0               ; &cloptr250756[0]
  %f250759 = load i64, i64* %i0ptr250757, align 8                                    ; load; *i0ptr250757
  %fptr250758 = inttoptr i64 %f250759 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr250758(i64 %arg235488, i64 %x239975)                ; tail call
  ret void

else250731:
  %many239982 = call i64 @const_init_string(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @str250760, i32 0, i32 0)); quoted string
  %fail239980 = call i64 @prim_halt(i64 %many239982)                                 ; call prim_halt
  %sym239985 = add i64 0, 0                                                          ; quoted ()
  %cloptr250761 = inttoptr i64 %fail239980 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr250762 = getelementptr inbounds i64, i64* %cloptr250761, i64 0               ; &cloptr250761[0]
  %f250764 = load i64, i64* %i0ptr250762, align 8                                    ; load; *i0ptr250762
  %fptr250763 = inttoptr i64 %f250764 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr250763(i64 %fail239980, i64 %sym239985)             ; tail call
  ret void
}


define void @lam242437(i64 %env242438, i64 %rvp239964) {
  %envptr250765 = inttoptr i64 %env242438 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr250766 = getelementptr inbounds i64, i64* %envptr250765, i64 5              ; &envptr250765[5]
  %post233737233917 = load i64, i64* %envptr250766, align 8                          ; load; *envptr250766
  %envptr250767 = inttoptr i64 %env242438 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr250768 = getelementptr inbounds i64, i64* %envptr250767, i64 4              ; &envptr250767[4]
  %cont234201 = load i64, i64* %envptr250768, align 8                                ; load; *envptr250768
  %envptr250769 = inttoptr i64 %env242438 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr250770 = getelementptr inbounds i64, i64* %envptr250769, i64 3              ; &envptr250769[3]
  %pre233735233915 = load i64, i64* %envptr250770, align 8                           ; load; *envptr250770
  %envptr250771 = inttoptr i64 %env242438 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr250772 = getelementptr inbounds i64, i64* %envptr250771, i64 2              ; &envptr250771[2]
  %_37wind_45stack233694233874 = load i64, i64* %envptr250772, align 8               ; load; *envptr250772
  %envptr250773 = inttoptr i64 %env242438 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr250774 = getelementptr inbounds i64, i64* %envptr250773, i64 1              ; &envptr250773[1]
  %body233736233916 = load i64, i64* %envptr250774, align 8                          ; load; *envptr250774
  %check239965 = call i64 @prim_null_63(i64 %rvp239964)                              ; call prim_null_63
  %cmp250775 = icmp eq i64 %check239965, 15                                          ; false?
  br i1 %cmp250775, label %else250777, label %then250776                             ; if

then250776:
  %msg239969 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str250778, i32 0, i32 0)); quoted string
  %abort239967 = call i64 @prim_halt(i64 %msg239969)                                 ; call prim_halt
  %sym239972 = add i64 0, 0                                                          ; quoted ()
  %cloptr250779 = inttoptr i64 %abort239967 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr250780 = getelementptr inbounds i64, i64* %cloptr250779, i64 0               ; &cloptr250779[0]
  %f250782 = load i64, i64* %i0ptr250780, align 8                                    ; load; *i0ptr250780
  %fptr250781 = inttoptr i64 %f250782 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr250781(i64 %abort239967, i64 %sym239972)            ; tail call
  ret void

else250777:
  %_95234202 = call i64 @prim_car(i64 %rvp239964)                                    ; call prim_car
  %rvp239954 = call i64 @prim_cdr(i64 %rvp239964)                                    ; call prim_cdr
  %check239955 = call i64 @prim_null_63(i64 %rvp239954)                              ; call prim_null_63
  %cmp250783 = icmp eq i64 %check239955, 15                                          ; false?
  br i1 %cmp250783, label %else250785, label %then250784                             ; if

then250784:
  %msg239959 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str250786, i32 0, i32 0)); quoted string
  %abort239957 = call i64 @prim_halt(i64 %msg239959)                                 ; call prim_halt
  %sym239962 = add i64 0, 0                                                          ; quoted ()
  %cloptr250787 = inttoptr i64 %abort239957 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr250788 = getelementptr inbounds i64, i64* %cloptr250787, i64 0               ; &cloptr250787[0]
  %f250790 = load i64, i64* %i0ptr250788, align 8                                    ; load; *i0ptr250788
  %fptr250789 = inttoptr i64 %f250790 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr250789(i64 %abort239957, i64 %sym239962)            ; tail call
  ret void

else250785:
  %rest239961 = call i64 @prim_cdr(i64 %rvp239954)                                   ; call prim_cdr
  %empty239956 = call i64 @prim_null_63(i64 %rest239961)                             ; call prim_null_63
  %cmp250791 = icmp eq i64 %empty239956, 15                                          ; false?
  br i1 %cmp250791, label %else250793, label %then250792                             ; if

then250792:
  %_95t233738233918 = call i64 @prim_car(i64 %rvp239954)                             ; call prim_car
  %na239728 = call i64 @prim_cdr(i64 %rvp239954)                                     ; call prim_cdr
  %a234066 = call i64 @prim_cons(i64 %pre233735233915, i64 %post233737233917)        ; call prim_cons
  %arg235491 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %a234067 = call i64 @prim_vector_45ref(i64 %_37wind_45stack233694233874, i64 %arg235491); call prim_vector_45ref
  %a234068 = call i64 @prim_cons(i64 %a234066, i64 %a234067)                         ; call prim_cons
  %arg235496 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %retprim234210 = call i64 @prim_vector_45set_33(i64 %_37wind_45stack233694233874, i64 %arg235496, i64 %a234068); call prim_vector_45set_33
  %cloptr250794 = call i64* @alloc(i64 40)                                           ; malloc
  %eptr250796 = getelementptr inbounds i64, i64* %cloptr250794, i64 1                ; &eptr250796[1]
  %eptr250797 = getelementptr inbounds i64, i64* %cloptr250794, i64 2                ; &eptr250797[2]
  %eptr250798 = getelementptr inbounds i64, i64* %cloptr250794, i64 3                ; &eptr250798[3]
  %eptr250799 = getelementptr inbounds i64, i64* %cloptr250794, i64 4                ; &eptr250799[4]
  store i64 %body233736233916, i64* %eptr250796                                      ; *eptr250796 = %body233736233916
  store i64 %_37wind_45stack233694233874, i64* %eptr250797                           ; *eptr250797 = %_37wind_45stack233694233874
  store i64 %cont234201, i64* %eptr250798                                            ; *eptr250798 = %cont234201
  store i64 %post233737233917, i64* %eptr250799                                      ; *eptr250799 = %post233737233917
  %eptr250795 = getelementptr inbounds i64, i64* %cloptr250794, i64 0                ; &cloptr250794[0]
  %f250800 = ptrtoint void(i64,i64)* @lam242431 to i64                               ; fptr cast; i64(...)* -> i64
  store i64 %f250800, i64* %eptr250795                                               ; store fptr
  %arg235500 = ptrtoint i64* %cloptr250794 to i64                                    ; closure cast; i64* -> i64
  %arg235499 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %sym239951 = add i64 0, 0                                                          ; quoted ()
  %x239952 = call i64 @prim_cons(i64 %retprim234210, i64 %sym239951)                 ; call prim_cons
  %x239953 = call i64 @prim_cons(i64 %arg235499, i64 %x239952)                       ; call prim_cons
  %cloptr250801 = inttoptr i64 %arg235500 to i64*                                    ; closure/env cast; i64 -> i64*
  %i0ptr250802 = getelementptr inbounds i64, i64* %cloptr250801, i64 0               ; &cloptr250801[0]
  %f250804 = load i64, i64* %i0ptr250802, align 8                                    ; load; *i0ptr250802
  %fptr250803 = inttoptr i64 %f250804 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr250803(i64 %arg235500, i64 %x239953)                ; tail call
  ret void

else250793:
  %many239960 = call i64 @const_init_string(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @str250805, i32 0, i32 0)); quoted string
  %fail239958 = call i64 @prim_halt(i64 %many239960)                                 ; call prim_halt
  %sym239963 = add i64 0, 0                                                          ; quoted ()
  %cloptr250806 = inttoptr i64 %fail239958 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr250807 = getelementptr inbounds i64, i64* %cloptr250806, i64 0               ; &cloptr250806[0]
  %f250809 = load i64, i64* %i0ptr250807, align 8                                    ; load; *i0ptr250807
  %fptr250808 = inttoptr i64 %f250809 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr250808(i64 %fail239958, i64 %sym239963)             ; tail call
  ret void
}


define void @lam242431(i64 %env242432, i64 %rvp239942) {
  %envptr250810 = inttoptr i64 %env242432 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr250811 = getelementptr inbounds i64, i64* %envptr250810, i64 4              ; &envptr250810[4]
  %post233737233917 = load i64, i64* %envptr250811, align 8                          ; load; *envptr250811
  %envptr250812 = inttoptr i64 %env242432 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr250813 = getelementptr inbounds i64, i64* %envptr250812, i64 3              ; &envptr250812[3]
  %cont234201 = load i64, i64* %envptr250813, align 8                                ; load; *envptr250813
  %envptr250814 = inttoptr i64 %env242432 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr250815 = getelementptr inbounds i64, i64* %envptr250814, i64 2              ; &envptr250814[2]
  %_37wind_45stack233694233874 = load i64, i64* %envptr250815, align 8               ; load; *envptr250815
  %envptr250816 = inttoptr i64 %env242432 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr250817 = getelementptr inbounds i64, i64* %envptr250816, i64 1              ; &envptr250816[1]
  %body233736233916 = load i64, i64* %envptr250817, align 8                          ; load; *envptr250817
  %check239943 = call i64 @prim_null_63(i64 %rvp239942)                              ; call prim_null_63
  %cmp250818 = icmp eq i64 %check239943, 15                                          ; false?
  br i1 %cmp250818, label %else250820, label %then250819                             ; if

then250819:
  %msg239947 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str250821, i32 0, i32 0)); quoted string
  %abort239945 = call i64 @prim_halt(i64 %msg239947)                                 ; call prim_halt
  %sym239950 = add i64 0, 0                                                          ; quoted ()
  %cloptr250822 = inttoptr i64 %abort239945 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr250823 = getelementptr inbounds i64, i64* %cloptr250822, i64 0               ; &cloptr250822[0]
  %f250825 = load i64, i64* %i0ptr250823, align 8                                    ; load; *i0ptr250823
  %fptr250824 = inttoptr i64 %f250825 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr250824(i64 %abort239945, i64 %sym239950)            ; tail call
  ret void

else250820:
  %_95234203 = call i64 @prim_car(i64 %rvp239942)                                    ; call prim_car
  %rvp239932 = call i64 @prim_cdr(i64 %rvp239942)                                    ; call prim_cdr
  %check239933 = call i64 @prim_null_63(i64 %rvp239932)                              ; call prim_null_63
  %cmp250826 = icmp eq i64 %check239933, 15                                          ; false?
  br i1 %cmp250826, label %else250828, label %then250827                             ; if

then250827:
  %msg239937 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str250829, i32 0, i32 0)); quoted string
  %abort239935 = call i64 @prim_halt(i64 %msg239937)                                 ; call prim_halt
  %sym239940 = add i64 0, 0                                                          ; quoted ()
  %cloptr250830 = inttoptr i64 %abort239935 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr250831 = getelementptr inbounds i64, i64* %cloptr250830, i64 0               ; &cloptr250830[0]
  %f250833 = load i64, i64* %i0ptr250831, align 8                                    ; load; *i0ptr250831
  %fptr250832 = inttoptr i64 %f250833 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr250832(i64 %abort239935, i64 %sym239940)            ; tail call
  ret void

else250828:
  %rest239939 = call i64 @prim_cdr(i64 %rvp239932)                                   ; call prim_cdr
  %empty239934 = call i64 @prim_null_63(i64 %rest239939)                             ; call prim_null_63
  %cmp250834 = icmp eq i64 %empty239934, 15                                          ; false?
  br i1 %cmp250834, label %else250836, label %then250835                             ; if

then250835:
  %_95t233740233920 = call i64 @prim_car(i64 %rvp239932)                             ; call prim_car
  %na239730 = call i64 @prim_cdr(i64 %rvp239932)                                     ; call prim_cdr
  %check233576233742233922 = call i64 @prim_procedure_63(i64 %body233736233916)      ; call prim_procedure_63
  %cmp250837 = icmp eq i64 %check233576233742233922, 15                              ; false?
  br i1 %cmp250837, label %else250839, label %then250838                             ; if

then250838:
  %cloptr250840 = call i64* @alloc(i64 32)                                           ; malloc
  %eptr250842 = getelementptr inbounds i64, i64* %cloptr250840, i64 1                ; &eptr250842[1]
  %eptr250843 = getelementptr inbounds i64, i64* %cloptr250840, i64 2                ; &eptr250843[2]
  %eptr250844 = getelementptr inbounds i64, i64* %cloptr250840, i64 3                ; &eptr250844[3]
  store i64 %_37wind_45stack233694233874, i64* %eptr250842                           ; *eptr250842 = %_37wind_45stack233694233874
  store i64 %cont234201, i64* %eptr250843                                            ; *eptr250843 = %cont234201
  store i64 %post233737233917, i64* %eptr250844                                      ; *eptr250844 = %post233737233917
  %eptr250841 = getelementptr inbounds i64, i64* %cloptr250840, i64 0                ; &cloptr250840[0]
  %f250845 = ptrtoint void(i64,i64)* @lam242380 to i64                               ; fptr cast; i64(...)* -> i64
  store i64 %f250845, i64* %eptr250841                                               ; store fptr
  %arg235502 = ptrtoint i64* %cloptr250840 to i64                                    ; closure cast; i64* -> i64
  %sym239829 = add i64 0, 0                                                          ; quoted ()
  %x239830 = call i64 @prim_cons(i64 %arg235502, i64 %sym239829)                     ; call prim_cons
  %cloptr250846 = inttoptr i64 %body233736233916 to i64*                             ; closure/env cast; i64 -> i64*
  %i0ptr250847 = getelementptr inbounds i64, i64* %cloptr250846, i64 0               ; &cloptr250846[0]
  %f250849 = load i64, i64* %i0ptr250847, align 8                                    ; load; *i0ptr250847
  %fptr250848 = inttoptr i64 %f250849 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr250848(i64 %body233736233916, i64 %x239830)         ; tail call
  ret void

else250839:
  %arg235526 = call i64 @const_init_string(i8* getelementptr inbounds ([62 x i8], [62 x i8]* @str250850, i32 0, i32 0)); quoted string
  %retprim234209 = call i64 @prim_halt(i64 %arg235526)                               ; call prim_halt
  %cloptr250851 = call i64* @alloc(i64 32)                                           ; malloc
  %eptr250853 = getelementptr inbounds i64, i64* %cloptr250851, i64 1                ; &eptr250853[1]
  %eptr250854 = getelementptr inbounds i64, i64* %cloptr250851, i64 2                ; &eptr250854[2]
  %eptr250855 = getelementptr inbounds i64, i64* %cloptr250851, i64 3                ; &eptr250855[3]
  store i64 %_37wind_45stack233694233874, i64* %eptr250853                           ; *eptr250853 = %_37wind_45stack233694233874
  store i64 %cont234201, i64* %eptr250854                                            ; *eptr250854 = %cont234201
  store i64 %post233737233917, i64* %eptr250855                                      ; *eptr250855 = %post233737233917
  %eptr250852 = getelementptr inbounds i64, i64* %cloptr250851, i64 0                ; &cloptr250851[0]
  %f250856 = ptrtoint void(i64,i64)* @lam242426 to i64                               ; fptr cast; i64(...)* -> i64
  store i64 %f250856, i64* %eptr250852                                               ; store fptr
  %arg235529 = ptrtoint i64* %cloptr250851 to i64                                    ; closure cast; i64* -> i64
  %arg235528 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %sym239929 = add i64 0, 0                                                          ; quoted ()
  %x239930 = call i64 @prim_cons(i64 %retprim234209, i64 %sym239929)                 ; call prim_cons
  %x239931 = call i64 @prim_cons(i64 %arg235528, i64 %x239930)                       ; call prim_cons
  %cloptr250857 = inttoptr i64 %arg235529 to i64*                                    ; closure/env cast; i64 -> i64*
  %i0ptr250858 = getelementptr inbounds i64, i64* %cloptr250857, i64 0               ; &cloptr250857[0]
  %f250860 = load i64, i64* %i0ptr250858, align 8                                    ; load; *i0ptr250858
  %fptr250859 = inttoptr i64 %f250860 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr250859(i64 %arg235529, i64 %x239931)                ; tail call
  ret void

else250836:
  %many239938 = call i64 @const_init_string(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @str250861, i32 0, i32 0)); quoted string
  %fail239936 = call i64 @prim_halt(i64 %many239938)                                 ; call prim_halt
  %sym239941 = add i64 0, 0                                                          ; quoted ()
  %cloptr250862 = inttoptr i64 %fail239936 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr250863 = getelementptr inbounds i64, i64* %cloptr250862, i64 0               ; &cloptr250862[0]
  %f250865 = load i64, i64* %i0ptr250863, align 8                                    ; load; *i0ptr250863
  %fptr250864 = inttoptr i64 %f250865 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr250864(i64 %fail239936, i64 %sym239941)             ; tail call
  ret void
}


define void @lam242426(i64 %env242427, i64 %rvp239920) {
  %envptr250866 = inttoptr i64 %env242427 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr250867 = getelementptr inbounds i64, i64* %envptr250866, i64 3              ; &envptr250866[3]
  %post233737233917 = load i64, i64* %envptr250867, align 8                          ; load; *envptr250867
  %envptr250868 = inttoptr i64 %env242427 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr250869 = getelementptr inbounds i64, i64* %envptr250868, i64 2              ; &envptr250868[2]
  %cont234201 = load i64, i64* %envptr250869, align 8                                ; load; *envptr250869
  %envptr250870 = inttoptr i64 %env242427 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr250871 = getelementptr inbounds i64, i64* %envptr250870, i64 1              ; &envptr250870[1]
  %_37wind_45stack233694233874 = load i64, i64* %envptr250871, align 8               ; load; *envptr250871
  %check239921 = call i64 @prim_null_63(i64 %rvp239920)                              ; call prim_null_63
  %cmp250872 = icmp eq i64 %check239921, 15                                          ; false?
  br i1 %cmp250872, label %else250874, label %then250873                             ; if

then250873:
  %msg239925 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str250875, i32 0, i32 0)); quoted string
  %abort239923 = call i64 @prim_halt(i64 %msg239925)                                 ; call prim_halt
  %sym239928 = add i64 0, 0                                                          ; quoted ()
  %cloptr250876 = inttoptr i64 %abort239923 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr250877 = getelementptr inbounds i64, i64* %cloptr250876, i64 0               ; &cloptr250876[0]
  %f250879 = load i64, i64* %i0ptr250877, align 8                                    ; load; *i0ptr250877
  %fptr250878 = inttoptr i64 %f250879 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr250878(i64 %abort239923, i64 %sym239928)            ; tail call
  ret void

else250874:
  %_95234204 = call i64 @prim_car(i64 %rvp239920)                                    ; call prim_car
  %rvp239910 = call i64 @prim_cdr(i64 %rvp239920)                                    ; call prim_cdr
  %check239911 = call i64 @prim_null_63(i64 %rvp239910)                              ; call prim_null_63
  %cmp250880 = icmp eq i64 %check239911, 15                                          ; false?
  br i1 %cmp250880, label %else250882, label %then250881                             ; if

then250881:
  %msg239915 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str250883, i32 0, i32 0)); quoted string
  %abort239913 = call i64 @prim_halt(i64 %msg239915)                                 ; call prim_halt
  %sym239918 = add i64 0, 0                                                          ; quoted ()
  %cloptr250884 = inttoptr i64 %abort239913 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr250885 = getelementptr inbounds i64, i64* %cloptr250884, i64 0               ; &cloptr250884[0]
  %f250887 = load i64, i64* %i0ptr250885, align 8                                    ; load; *i0ptr250885
  %fptr250886 = inttoptr i64 %f250887 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr250886(i64 %abort239913, i64 %sym239918)            ; tail call
  ret void

else250882:
  %rest239917 = call i64 @prim_cdr(i64 %rvp239910)                                   ; call prim_cdr
  %empty239912 = call i64 @prim_null_63(i64 %rest239917)                             ; call prim_null_63
  %cmp250888 = icmp eq i64 %empty239912, 15                                          ; false?
  br i1 %cmp250888, label %else250890, label %then250889                             ; if

then250889:
  %v233741233921 = call i64 @prim_car(i64 %rvp239910)                                ; call prim_car
  %na239832 = call i64 @prim_cdr(i64 %rvp239910)                                     ; call prim_cdr
  %arg235530 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %a234069 = call i64 @prim_vector_45ref(i64 %_37wind_45stack233694233874, i64 %arg235530); call prim_vector_45ref
  %a234070 = call i64 @prim_cdr(i64 %a234069)                                        ; call prim_cdr
  %arg235534 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %retprim234208 = call i64 @prim_vector_45set_33(i64 %_37wind_45stack233694233874, i64 %arg235534, i64 %a234070); call prim_vector_45set_33
  %cloptr250891 = call i64* @alloc(i64 32)                                           ; malloc
  %eptr250893 = getelementptr inbounds i64, i64* %cloptr250891, i64 1                ; &eptr250893[1]
  %eptr250894 = getelementptr inbounds i64, i64* %cloptr250891, i64 2                ; &eptr250894[2]
  %eptr250895 = getelementptr inbounds i64, i64* %cloptr250891, i64 3                ; &eptr250895[3]
  store i64 %v233741233921, i64* %eptr250893                                         ; *eptr250893 = %v233741233921
  store i64 %cont234201, i64* %eptr250894                                            ; *eptr250894 = %cont234201
  store i64 %post233737233917, i64* %eptr250895                                      ; *eptr250895 = %post233737233917
  %eptr250892 = getelementptr inbounds i64, i64* %cloptr250891, i64 0                ; &cloptr250891[0]
  %f250896 = ptrtoint void(i64,i64)* @lam242420 to i64                               ; fptr cast; i64(...)* -> i64
  store i64 %f250896, i64* %eptr250892                                               ; store fptr
  %arg235538 = ptrtoint i64* %cloptr250891 to i64                                    ; closure cast; i64* -> i64
  %arg235537 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %sym239907 = add i64 0, 0                                                          ; quoted ()
  %x239908 = call i64 @prim_cons(i64 %retprim234208, i64 %sym239907)                 ; call prim_cons
  %x239909 = call i64 @prim_cons(i64 %arg235537, i64 %x239908)                       ; call prim_cons
  %cloptr250897 = inttoptr i64 %arg235538 to i64*                                    ; closure/env cast; i64 -> i64*
  %i0ptr250898 = getelementptr inbounds i64, i64* %cloptr250897, i64 0               ; &cloptr250897[0]
  %f250900 = load i64, i64* %i0ptr250898, align 8                                    ; load; *i0ptr250898
  %fptr250899 = inttoptr i64 %f250900 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr250899(i64 %arg235538, i64 %x239909)                ; tail call
  ret void

else250890:
  %many239916 = call i64 @const_init_string(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @str250901, i32 0, i32 0)); quoted string
  %fail239914 = call i64 @prim_halt(i64 %many239916)                                 ; call prim_halt
  %sym239919 = add i64 0, 0                                                          ; quoted ()
  %cloptr250902 = inttoptr i64 %fail239914 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr250903 = getelementptr inbounds i64, i64* %cloptr250902, i64 0               ; &cloptr250902[0]
  %f250905 = load i64, i64* %i0ptr250903, align 8                                    ; load; *i0ptr250903
  %fptr250904 = inttoptr i64 %f250905 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr250904(i64 %fail239914, i64 %sym239919)             ; tail call
  ret void
}


define void @lam242420(i64 %env242421, i64 %rvp239898) {
  %envptr250906 = inttoptr i64 %env242421 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr250907 = getelementptr inbounds i64, i64* %envptr250906, i64 3              ; &envptr250906[3]
  %post233737233917 = load i64, i64* %envptr250907, align 8                          ; load; *envptr250907
  %envptr250908 = inttoptr i64 %env242421 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr250909 = getelementptr inbounds i64, i64* %envptr250908, i64 2              ; &envptr250908[2]
  %cont234201 = load i64, i64* %envptr250909, align 8                                ; load; *envptr250909
  %envptr250910 = inttoptr i64 %env242421 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr250911 = getelementptr inbounds i64, i64* %envptr250910, i64 1              ; &envptr250910[1]
  %v233741233921 = load i64, i64* %envptr250911, align 8                             ; load; *envptr250911
  %check239899 = call i64 @prim_null_63(i64 %rvp239898)                              ; call prim_null_63
  %cmp250912 = icmp eq i64 %check239899, 15                                          ; false?
  br i1 %cmp250912, label %else250914, label %then250913                             ; if

then250913:
  %msg239903 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str250915, i32 0, i32 0)); quoted string
  %abort239901 = call i64 @prim_halt(i64 %msg239903)                                 ; call prim_halt
  %sym239906 = add i64 0, 0                                                          ; quoted ()
  %cloptr250916 = inttoptr i64 %abort239901 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr250917 = getelementptr inbounds i64, i64* %cloptr250916, i64 0               ; &cloptr250916[0]
  %f250919 = load i64, i64* %i0ptr250917, align 8                                    ; load; *i0ptr250917
  %fptr250918 = inttoptr i64 %f250919 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr250918(i64 %abort239901, i64 %sym239906)            ; tail call
  ret void

else250914:
  %_95234205 = call i64 @prim_car(i64 %rvp239898)                                    ; call prim_car
  %rvp239888 = call i64 @prim_cdr(i64 %rvp239898)                                    ; call prim_cdr
  %check239889 = call i64 @prim_null_63(i64 %rvp239888)                              ; call prim_null_63
  %cmp250920 = icmp eq i64 %check239889, 15                                          ; false?
  br i1 %cmp250920, label %else250922, label %then250921                             ; if

then250921:
  %msg239893 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str250923, i32 0, i32 0)); quoted string
  %abort239891 = call i64 @prim_halt(i64 %msg239893)                                 ; call prim_halt
  %sym239896 = add i64 0, 0                                                          ; quoted ()
  %cloptr250924 = inttoptr i64 %abort239891 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr250925 = getelementptr inbounds i64, i64* %cloptr250924, i64 0               ; &cloptr250924[0]
  %f250927 = load i64, i64* %i0ptr250925, align 8                                    ; load; *i0ptr250925
  %fptr250926 = inttoptr i64 %f250927 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr250926(i64 %abort239891, i64 %sym239896)            ; tail call
  ret void

else250922:
  %rest239895 = call i64 @prim_cdr(i64 %rvp239888)                                   ; call prim_cdr
  %empty239890 = call i64 @prim_null_63(i64 %rest239895)                             ; call prim_null_63
  %cmp250928 = icmp eq i64 %empty239890, 15                                          ; false?
  br i1 %cmp250928, label %else250930, label %then250929                             ; if

then250929:
  %_95t233743233923 = call i64 @prim_car(i64 %rvp239888)                             ; call prim_car
  %na239834 = call i64 @prim_cdr(i64 %rvp239888)                                     ; call prim_cdr
  %check233577233745233925 = call i64 @prim_procedure_63(i64 %post233737233917)      ; call prim_procedure_63
  %cmp250931 = icmp eq i64 %check233577233745233925, 15                              ; false?
  br i1 %cmp250931, label %else250933, label %then250932                             ; if

then250932:
  %cloptr250934 = call i64* @alloc(i64 24)                                           ; malloc
  %eptr250936 = getelementptr inbounds i64, i64* %cloptr250934, i64 1                ; &eptr250936[1]
  %eptr250937 = getelementptr inbounds i64, i64* %cloptr250934, i64 2                ; &eptr250937[2]
  store i64 %v233741233921, i64* %eptr250936                                         ; *eptr250936 = %v233741233921
  store i64 %cont234201, i64* %eptr250937                                            ; *eptr250937 = %cont234201
  %eptr250935 = getelementptr inbounds i64, i64* %cloptr250934, i64 0                ; &cloptr250934[0]
  %f250938 = ptrtoint void(i64,i64)* @lam242403 to i64                               ; fptr cast; i64(...)* -> i64
  store i64 %f250938, i64* %eptr250935                                               ; store fptr
  %arg235540 = ptrtoint i64* %cloptr250934 to i64                                    ; closure cast; i64* -> i64
  %sym239859 = add i64 0, 0                                                          ; quoted ()
  %x239860 = call i64 @prim_cons(i64 %arg235540, i64 %sym239859)                     ; call prim_cons
  %cloptr250939 = inttoptr i64 %post233737233917 to i64*                             ; closure/env cast; i64 -> i64*
  %i0ptr250940 = getelementptr inbounds i64, i64* %cloptr250939, i64 0               ; &cloptr250939[0]
  %f250942 = load i64, i64* %i0ptr250940, align 8                                    ; load; *i0ptr250940
  %fptr250941 = inttoptr i64 %f250942 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr250941(i64 %post233737233917, i64 %x239860)         ; tail call
  ret void

else250933:
  %arg235545 = call i64 @const_init_string(i8* getelementptr inbounds ([62 x i8], [62 x i8]* @str250943, i32 0, i32 0)); quoted string
  %retprim234207 = call i64 @prim_halt(i64 %arg235545)                               ; call prim_halt
  %cloptr250944 = call i64* @alloc(i64 24)                                           ; malloc
  %eptr250946 = getelementptr inbounds i64, i64* %cloptr250944, i64 1                ; &eptr250946[1]
  %eptr250947 = getelementptr inbounds i64, i64* %cloptr250944, i64 2                ; &eptr250947[2]
  store i64 %v233741233921, i64* %eptr250946                                         ; *eptr250946 = %v233741233921
  store i64 %cont234201, i64* %eptr250947                                            ; *eptr250947 = %cont234201
  %eptr250945 = getelementptr inbounds i64, i64* %cloptr250944, i64 0                ; &cloptr250944[0]
  %f250948 = ptrtoint void(i64,i64)* @lam242415 to i64                               ; fptr cast; i64(...)* -> i64
  store i64 %f250948, i64* %eptr250945                                               ; store fptr
  %arg235548 = ptrtoint i64* %cloptr250944 to i64                                    ; closure cast; i64* -> i64
  %arg235547 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %sym239885 = add i64 0, 0                                                          ; quoted ()
  %x239886 = call i64 @prim_cons(i64 %retprim234207, i64 %sym239885)                 ; call prim_cons
  %x239887 = call i64 @prim_cons(i64 %arg235547, i64 %x239886)                       ; call prim_cons
  %cloptr250949 = inttoptr i64 %arg235548 to i64*                                    ; closure/env cast; i64 -> i64*
  %i0ptr250950 = getelementptr inbounds i64, i64* %cloptr250949, i64 0               ; &cloptr250949[0]
  %f250952 = load i64, i64* %i0ptr250950, align 8                                    ; load; *i0ptr250950
  %fptr250951 = inttoptr i64 %f250952 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr250951(i64 %arg235548, i64 %x239887)                ; tail call
  ret void

else250930:
  %many239894 = call i64 @const_init_string(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @str250953, i32 0, i32 0)); quoted string
  %fail239892 = call i64 @prim_halt(i64 %many239894)                                 ; call prim_halt
  %sym239897 = add i64 0, 0                                                          ; quoted ()
  %cloptr250954 = inttoptr i64 %fail239892 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr250955 = getelementptr inbounds i64, i64* %cloptr250954, i64 0               ; &cloptr250954[0]
  %f250957 = load i64, i64* %i0ptr250955, align 8                                    ; load; *i0ptr250955
  %fptr250956 = inttoptr i64 %f250957 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr250956(i64 %fail239892, i64 %sym239897)             ; tail call
  ret void
}


define void @lam242415(i64 %env242416, i64 %rvp239876) {
  %envptr250958 = inttoptr i64 %env242416 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr250959 = getelementptr inbounds i64, i64* %envptr250958, i64 2              ; &envptr250958[2]
  %cont234201 = load i64, i64* %envptr250959, align 8                                ; load; *envptr250959
  %envptr250960 = inttoptr i64 %env242416 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr250961 = getelementptr inbounds i64, i64* %envptr250960, i64 1              ; &envptr250960[1]
  %v233741233921 = load i64, i64* %envptr250961, align 8                             ; load; *envptr250961
  %check239877 = call i64 @prim_null_63(i64 %rvp239876)                              ; call prim_null_63
  %cmp250962 = icmp eq i64 %check239877, 15                                          ; false?
  br i1 %cmp250962, label %else250964, label %then250963                             ; if

then250963:
  %msg239881 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str250965, i32 0, i32 0)); quoted string
  %abort239879 = call i64 @prim_halt(i64 %msg239881)                                 ; call prim_halt
  %sym239884 = add i64 0, 0                                                          ; quoted ()
  %cloptr250966 = inttoptr i64 %abort239879 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr250967 = getelementptr inbounds i64, i64* %cloptr250966, i64 0               ; &cloptr250966[0]
  %f250969 = load i64, i64* %i0ptr250967, align 8                                    ; load; *i0ptr250967
  %fptr250968 = inttoptr i64 %f250969 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr250968(i64 %abort239879, i64 %sym239884)            ; tail call
  ret void

else250964:
  %_95234206 = call i64 @prim_car(i64 %rvp239876)                                    ; call prim_car
  %rvp239866 = call i64 @prim_cdr(i64 %rvp239876)                                    ; call prim_cdr
  %check239867 = call i64 @prim_null_63(i64 %rvp239866)                              ; call prim_null_63
  %cmp250970 = icmp eq i64 %check239867, 15                                          ; false?
  br i1 %cmp250970, label %else250972, label %then250971                             ; if

then250971:
  %msg239871 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str250973, i32 0, i32 0)); quoted string
  %abort239869 = call i64 @prim_halt(i64 %msg239871)                                 ; call prim_halt
  %sym239874 = add i64 0, 0                                                          ; quoted ()
  %cloptr250974 = inttoptr i64 %abort239869 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr250975 = getelementptr inbounds i64, i64* %cloptr250974, i64 0               ; &cloptr250974[0]
  %f250977 = load i64, i64* %i0ptr250975, align 8                                    ; load; *i0ptr250975
  %fptr250976 = inttoptr i64 %f250977 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr250976(i64 %abort239869, i64 %sym239874)            ; tail call
  ret void

else250972:
  %rest239873 = call i64 @prim_cdr(i64 %rvp239866)                                   ; call prim_cdr
  %empty239868 = call i64 @prim_null_63(i64 %rest239873)                             ; call prim_null_63
  %cmp250978 = icmp eq i64 %empty239868, 15                                          ; false?
  br i1 %cmp250978, label %else250980, label %then250979                             ; if

then250979:
  %_95t233744233924 = call i64 @prim_car(i64 %rvp239866)                             ; call prim_car
  %na239862 = call i64 @prim_cdr(i64 %rvp239866)                                     ; call prim_cdr
  %arg235550 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %sym239863 = add i64 0, 0                                                          ; quoted ()
  %x239864 = call i64 @prim_cons(i64 %v233741233921, i64 %sym239863)                 ; call prim_cons
  %x239865 = call i64 @prim_cons(i64 %arg235550, i64 %x239864)                       ; call prim_cons
  %cloptr250981 = inttoptr i64 %cont234201 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr250982 = getelementptr inbounds i64, i64* %cloptr250981, i64 0               ; &cloptr250981[0]
  %f250984 = load i64, i64* %i0ptr250982, align 8                                    ; load; *i0ptr250982
  %fptr250983 = inttoptr i64 %f250984 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr250983(i64 %cont234201, i64 %x239865)               ; tail call
  ret void

else250980:
  %many239872 = call i64 @const_init_string(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @str250985, i32 0, i32 0)); quoted string
  %fail239870 = call i64 @prim_halt(i64 %many239872)                                 ; call prim_halt
  %sym239875 = add i64 0, 0                                                          ; quoted ()
  %cloptr250986 = inttoptr i64 %fail239870 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr250987 = getelementptr inbounds i64, i64* %cloptr250986, i64 0               ; &cloptr250986[0]
  %f250989 = load i64, i64* %i0ptr250987, align 8                                    ; load; *i0ptr250987
  %fptr250988 = inttoptr i64 %f250989 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr250988(i64 %fail239870, i64 %sym239875)             ; tail call
  ret void
}


define void @lam242403(i64 %env242404, i64 %rvp239850) {
  %envptr250990 = inttoptr i64 %env242404 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr250991 = getelementptr inbounds i64, i64* %envptr250990, i64 2              ; &envptr250990[2]
  %cont234201 = load i64, i64* %envptr250991, align 8                                ; load; *envptr250991
  %envptr250992 = inttoptr i64 %env242404 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr250993 = getelementptr inbounds i64, i64* %envptr250992, i64 1              ; &envptr250992[1]
  %v233741233921 = load i64, i64* %envptr250993, align 8                             ; load; *envptr250993
  %check239851 = call i64 @prim_null_63(i64 %rvp239850)                              ; call prim_null_63
  %cmp250994 = icmp eq i64 %check239851, 15                                          ; false?
  br i1 %cmp250994, label %else250996, label %then250995                             ; if

then250995:
  %msg239855 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str250997, i32 0, i32 0)); quoted string
  %abort239853 = call i64 @prim_halt(i64 %msg239855)                                 ; call prim_halt
  %sym239858 = add i64 0, 0                                                          ; quoted ()
  %cloptr250998 = inttoptr i64 %abort239853 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr250999 = getelementptr inbounds i64, i64* %cloptr250998, i64 0               ; &cloptr250998[0]
  %f251001 = load i64, i64* %i0ptr250999, align 8                                    ; load; *i0ptr250999
  %fptr251000 = inttoptr i64 %f251001 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr251000(i64 %abort239853, i64 %sym239858)            ; tail call
  ret void

else250996:
  %_95234206 = call i64 @prim_car(i64 %rvp239850)                                    ; call prim_car
  %rvp239840 = call i64 @prim_cdr(i64 %rvp239850)                                    ; call prim_cdr
  %check239841 = call i64 @prim_null_63(i64 %rvp239840)                              ; call prim_null_63
  %cmp251002 = icmp eq i64 %check239841, 15                                          ; false?
  br i1 %cmp251002, label %else251004, label %then251003                             ; if

then251003:
  %msg239845 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str251005, i32 0, i32 0)); quoted string
  %abort239843 = call i64 @prim_halt(i64 %msg239845)                                 ; call prim_halt
  %sym239848 = add i64 0, 0                                                          ; quoted ()
  %cloptr251006 = inttoptr i64 %abort239843 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr251007 = getelementptr inbounds i64, i64* %cloptr251006, i64 0               ; &cloptr251006[0]
  %f251009 = load i64, i64* %i0ptr251007, align 8                                    ; load; *i0ptr251007
  %fptr251008 = inttoptr i64 %f251009 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr251008(i64 %abort239843, i64 %sym239848)            ; tail call
  ret void

else251004:
  %rest239847 = call i64 @prim_cdr(i64 %rvp239840)                                   ; call prim_cdr
  %empty239842 = call i64 @prim_null_63(i64 %rest239847)                             ; call prim_null_63
  %cmp251010 = icmp eq i64 %empty239842, 15                                          ; false?
  br i1 %cmp251010, label %else251012, label %then251011                             ; if

then251011:
  %_95t233744233924 = call i64 @prim_car(i64 %rvp239840)                             ; call prim_car
  %na239836 = call i64 @prim_cdr(i64 %rvp239840)                                     ; call prim_cdr
  %arg235543 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %sym239837 = add i64 0, 0                                                          ; quoted ()
  %x239838 = call i64 @prim_cons(i64 %v233741233921, i64 %sym239837)                 ; call prim_cons
  %x239839 = call i64 @prim_cons(i64 %arg235543, i64 %x239838)                       ; call prim_cons
  %cloptr251013 = inttoptr i64 %cont234201 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr251014 = getelementptr inbounds i64, i64* %cloptr251013, i64 0               ; &cloptr251013[0]
  %f251016 = load i64, i64* %i0ptr251014, align 8                                    ; load; *i0ptr251014
  %fptr251015 = inttoptr i64 %f251016 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr251015(i64 %cont234201, i64 %x239839)               ; tail call
  ret void

else251012:
  %many239846 = call i64 @const_init_string(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @str251017, i32 0, i32 0)); quoted string
  %fail239844 = call i64 @prim_halt(i64 %many239846)                                 ; call prim_halt
  %sym239849 = add i64 0, 0                                                          ; quoted ()
  %cloptr251018 = inttoptr i64 %fail239844 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr251019 = getelementptr inbounds i64, i64* %cloptr251018, i64 0               ; &cloptr251018[0]
  %f251021 = load i64, i64* %i0ptr251019, align 8                                    ; load; *i0ptr251019
  %fptr251020 = inttoptr i64 %f251021 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr251020(i64 %fail239844, i64 %sym239849)             ; tail call
  ret void
}


define void @lam242380(i64 %env242381, i64 %rvp239820) {
  %envptr251022 = inttoptr i64 %env242381 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr251023 = getelementptr inbounds i64, i64* %envptr251022, i64 3              ; &envptr251022[3]
  %post233737233917 = load i64, i64* %envptr251023, align 8                          ; load; *envptr251023
  %envptr251024 = inttoptr i64 %env242381 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr251025 = getelementptr inbounds i64, i64* %envptr251024, i64 2              ; &envptr251024[2]
  %cont234201 = load i64, i64* %envptr251025, align 8                                ; load; *envptr251025
  %envptr251026 = inttoptr i64 %env242381 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr251027 = getelementptr inbounds i64, i64* %envptr251026, i64 1              ; &envptr251026[1]
  %_37wind_45stack233694233874 = load i64, i64* %envptr251027, align 8               ; load; *envptr251027
  %check239821 = call i64 @prim_null_63(i64 %rvp239820)                              ; call prim_null_63
  %cmp251028 = icmp eq i64 %check239821, 15                                          ; false?
  br i1 %cmp251028, label %else251030, label %then251029                             ; if

then251029:
  %msg239825 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str251031, i32 0, i32 0)); quoted string
  %abort239823 = call i64 @prim_halt(i64 %msg239825)                                 ; call prim_halt
  %sym239828 = add i64 0, 0                                                          ; quoted ()
  %cloptr251032 = inttoptr i64 %abort239823 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr251033 = getelementptr inbounds i64, i64* %cloptr251032, i64 0               ; &cloptr251032[0]
  %f251035 = load i64, i64* %i0ptr251033, align 8                                    ; load; *i0ptr251033
  %fptr251034 = inttoptr i64 %f251035 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr251034(i64 %abort239823, i64 %sym239828)            ; tail call
  ret void

else251030:
  %_95234204 = call i64 @prim_car(i64 %rvp239820)                                    ; call prim_car
  %rvp239810 = call i64 @prim_cdr(i64 %rvp239820)                                    ; call prim_cdr
  %check239811 = call i64 @prim_null_63(i64 %rvp239810)                              ; call prim_null_63
  %cmp251036 = icmp eq i64 %check239811, 15                                          ; false?
  br i1 %cmp251036, label %else251038, label %then251037                             ; if

then251037:
  %msg239815 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str251039, i32 0, i32 0)); quoted string
  %abort239813 = call i64 @prim_halt(i64 %msg239815)                                 ; call prim_halt
  %sym239818 = add i64 0, 0                                                          ; quoted ()
  %cloptr251040 = inttoptr i64 %abort239813 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr251041 = getelementptr inbounds i64, i64* %cloptr251040, i64 0               ; &cloptr251040[0]
  %f251043 = load i64, i64* %i0ptr251041, align 8                                    ; load; *i0ptr251041
  %fptr251042 = inttoptr i64 %f251043 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr251042(i64 %abort239813, i64 %sym239818)            ; tail call
  ret void

else251038:
  %rest239817 = call i64 @prim_cdr(i64 %rvp239810)                                   ; call prim_cdr
  %empty239812 = call i64 @prim_null_63(i64 %rest239817)                             ; call prim_null_63
  %cmp251044 = icmp eq i64 %empty239812, 15                                          ; false?
  br i1 %cmp251044, label %else251046, label %then251045                             ; if

then251045:
  %v233741233921 = call i64 @prim_car(i64 %rvp239810)                                ; call prim_car
  %na239732 = call i64 @prim_cdr(i64 %rvp239810)                                     ; call prim_cdr
  %arg235504 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %a234069 = call i64 @prim_vector_45ref(i64 %_37wind_45stack233694233874, i64 %arg235504); call prim_vector_45ref
  %a234070 = call i64 @prim_cdr(i64 %a234069)                                        ; call prim_cdr
  %arg235508 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %retprim234208 = call i64 @prim_vector_45set_33(i64 %_37wind_45stack233694233874, i64 %arg235508, i64 %a234070); call prim_vector_45set_33
  %cloptr251047 = call i64* @alloc(i64 32)                                           ; malloc
  %eptr251049 = getelementptr inbounds i64, i64* %cloptr251047, i64 1                ; &eptr251049[1]
  %eptr251050 = getelementptr inbounds i64, i64* %cloptr251047, i64 2                ; &eptr251050[2]
  %eptr251051 = getelementptr inbounds i64, i64* %cloptr251047, i64 3                ; &eptr251051[3]
  store i64 %v233741233921, i64* %eptr251049                                         ; *eptr251049 = %v233741233921
  store i64 %cont234201, i64* %eptr251050                                            ; *eptr251050 = %cont234201
  store i64 %post233737233917, i64* %eptr251051                                      ; *eptr251051 = %post233737233917
  %eptr251048 = getelementptr inbounds i64, i64* %cloptr251047, i64 0                ; &cloptr251047[0]
  %f251052 = ptrtoint void(i64,i64)* @lam242374 to i64                               ; fptr cast; i64(...)* -> i64
  store i64 %f251052, i64* %eptr251048                                               ; store fptr
  %arg235512 = ptrtoint i64* %cloptr251047 to i64                                    ; closure cast; i64* -> i64
  %arg235511 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %sym239807 = add i64 0, 0                                                          ; quoted ()
  %x239808 = call i64 @prim_cons(i64 %retprim234208, i64 %sym239807)                 ; call prim_cons
  %x239809 = call i64 @prim_cons(i64 %arg235511, i64 %x239808)                       ; call prim_cons
  %cloptr251053 = inttoptr i64 %arg235512 to i64*                                    ; closure/env cast; i64 -> i64*
  %i0ptr251054 = getelementptr inbounds i64, i64* %cloptr251053, i64 0               ; &cloptr251053[0]
  %f251056 = load i64, i64* %i0ptr251054, align 8                                    ; load; *i0ptr251054
  %fptr251055 = inttoptr i64 %f251056 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr251055(i64 %arg235512, i64 %x239809)                ; tail call
  ret void

else251046:
  %many239816 = call i64 @const_init_string(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @str251057, i32 0, i32 0)); quoted string
  %fail239814 = call i64 @prim_halt(i64 %many239816)                                 ; call prim_halt
  %sym239819 = add i64 0, 0                                                          ; quoted ()
  %cloptr251058 = inttoptr i64 %fail239814 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr251059 = getelementptr inbounds i64, i64* %cloptr251058, i64 0               ; &cloptr251058[0]
  %f251061 = load i64, i64* %i0ptr251059, align 8                                    ; load; *i0ptr251059
  %fptr251060 = inttoptr i64 %f251061 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr251060(i64 %fail239814, i64 %sym239819)             ; tail call
  ret void
}


define void @lam242374(i64 %env242375, i64 %rvp239798) {
  %envptr251062 = inttoptr i64 %env242375 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr251063 = getelementptr inbounds i64, i64* %envptr251062, i64 3              ; &envptr251062[3]
  %post233737233917 = load i64, i64* %envptr251063, align 8                          ; load; *envptr251063
  %envptr251064 = inttoptr i64 %env242375 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr251065 = getelementptr inbounds i64, i64* %envptr251064, i64 2              ; &envptr251064[2]
  %cont234201 = load i64, i64* %envptr251065, align 8                                ; load; *envptr251065
  %envptr251066 = inttoptr i64 %env242375 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr251067 = getelementptr inbounds i64, i64* %envptr251066, i64 1              ; &envptr251066[1]
  %v233741233921 = load i64, i64* %envptr251067, align 8                             ; load; *envptr251067
  %check239799 = call i64 @prim_null_63(i64 %rvp239798)                              ; call prim_null_63
  %cmp251068 = icmp eq i64 %check239799, 15                                          ; false?
  br i1 %cmp251068, label %else251070, label %then251069                             ; if

then251069:
  %msg239803 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str251071, i32 0, i32 0)); quoted string
  %abort239801 = call i64 @prim_halt(i64 %msg239803)                                 ; call prim_halt
  %sym239806 = add i64 0, 0                                                          ; quoted ()
  %cloptr251072 = inttoptr i64 %abort239801 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr251073 = getelementptr inbounds i64, i64* %cloptr251072, i64 0               ; &cloptr251072[0]
  %f251075 = load i64, i64* %i0ptr251073, align 8                                    ; load; *i0ptr251073
  %fptr251074 = inttoptr i64 %f251075 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr251074(i64 %abort239801, i64 %sym239806)            ; tail call
  ret void

else251070:
  %_95234205 = call i64 @prim_car(i64 %rvp239798)                                    ; call prim_car
  %rvp239788 = call i64 @prim_cdr(i64 %rvp239798)                                    ; call prim_cdr
  %check239789 = call i64 @prim_null_63(i64 %rvp239788)                              ; call prim_null_63
  %cmp251076 = icmp eq i64 %check239789, 15                                          ; false?
  br i1 %cmp251076, label %else251078, label %then251077                             ; if

then251077:
  %msg239793 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str251079, i32 0, i32 0)); quoted string
  %abort239791 = call i64 @prim_halt(i64 %msg239793)                                 ; call prim_halt
  %sym239796 = add i64 0, 0                                                          ; quoted ()
  %cloptr251080 = inttoptr i64 %abort239791 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr251081 = getelementptr inbounds i64, i64* %cloptr251080, i64 0               ; &cloptr251080[0]
  %f251083 = load i64, i64* %i0ptr251081, align 8                                    ; load; *i0ptr251081
  %fptr251082 = inttoptr i64 %f251083 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr251082(i64 %abort239791, i64 %sym239796)            ; tail call
  ret void

else251078:
  %rest239795 = call i64 @prim_cdr(i64 %rvp239788)                                   ; call prim_cdr
  %empty239790 = call i64 @prim_null_63(i64 %rest239795)                             ; call prim_null_63
  %cmp251084 = icmp eq i64 %empty239790, 15                                          ; false?
  br i1 %cmp251084, label %else251086, label %then251085                             ; if

then251085:
  %_95t233743233923 = call i64 @prim_car(i64 %rvp239788)                             ; call prim_car
  %na239734 = call i64 @prim_cdr(i64 %rvp239788)                                     ; call prim_cdr
  %check233577233745233925 = call i64 @prim_procedure_63(i64 %post233737233917)      ; call prim_procedure_63
  %cmp251087 = icmp eq i64 %check233577233745233925, 15                              ; false?
  br i1 %cmp251087, label %else251089, label %then251088                             ; if

then251088:
  %cloptr251090 = call i64* @alloc(i64 24)                                           ; malloc
  %eptr251092 = getelementptr inbounds i64, i64* %cloptr251090, i64 1                ; &eptr251092[1]
  %eptr251093 = getelementptr inbounds i64, i64* %cloptr251090, i64 2                ; &eptr251093[2]
  store i64 %v233741233921, i64* %eptr251092                                         ; *eptr251092 = %v233741233921
  store i64 %cont234201, i64* %eptr251093                                            ; *eptr251093 = %cont234201
  %eptr251091 = getelementptr inbounds i64, i64* %cloptr251090, i64 0                ; &cloptr251090[0]
  %f251094 = ptrtoint void(i64,i64)* @lam242357 to i64                               ; fptr cast; i64(...)* -> i64
  store i64 %f251094, i64* %eptr251091                                               ; store fptr
  %arg235514 = ptrtoint i64* %cloptr251090 to i64                                    ; closure cast; i64* -> i64
  %sym239759 = add i64 0, 0                                                          ; quoted ()
  %x239760 = call i64 @prim_cons(i64 %arg235514, i64 %sym239759)                     ; call prim_cons
  %cloptr251095 = inttoptr i64 %post233737233917 to i64*                             ; closure/env cast; i64 -> i64*
  %i0ptr251096 = getelementptr inbounds i64, i64* %cloptr251095, i64 0               ; &cloptr251095[0]
  %f251098 = load i64, i64* %i0ptr251096, align 8                                    ; load; *i0ptr251096
  %fptr251097 = inttoptr i64 %f251098 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr251097(i64 %post233737233917, i64 %x239760)         ; tail call
  ret void

else251089:
  %arg235519 = call i64 @const_init_string(i8* getelementptr inbounds ([62 x i8], [62 x i8]* @str251099, i32 0, i32 0)); quoted string
  %retprim234207 = call i64 @prim_halt(i64 %arg235519)                               ; call prim_halt
  %cloptr251100 = call i64* @alloc(i64 24)                                           ; malloc
  %eptr251102 = getelementptr inbounds i64, i64* %cloptr251100, i64 1                ; &eptr251102[1]
  %eptr251103 = getelementptr inbounds i64, i64* %cloptr251100, i64 2                ; &eptr251103[2]
  store i64 %v233741233921, i64* %eptr251102                                         ; *eptr251102 = %v233741233921
  store i64 %cont234201, i64* %eptr251103                                            ; *eptr251103 = %cont234201
  %eptr251101 = getelementptr inbounds i64, i64* %cloptr251100, i64 0                ; &cloptr251100[0]
  %f251104 = ptrtoint void(i64,i64)* @lam242369 to i64                               ; fptr cast; i64(...)* -> i64
  store i64 %f251104, i64* %eptr251101                                               ; store fptr
  %arg235522 = ptrtoint i64* %cloptr251100 to i64                                    ; closure cast; i64* -> i64
  %arg235521 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %sym239785 = add i64 0, 0                                                          ; quoted ()
  %x239786 = call i64 @prim_cons(i64 %retprim234207, i64 %sym239785)                 ; call prim_cons
  %x239787 = call i64 @prim_cons(i64 %arg235521, i64 %x239786)                       ; call prim_cons
  %cloptr251105 = inttoptr i64 %arg235522 to i64*                                    ; closure/env cast; i64 -> i64*
  %i0ptr251106 = getelementptr inbounds i64, i64* %cloptr251105, i64 0               ; &cloptr251105[0]
  %f251108 = load i64, i64* %i0ptr251106, align 8                                    ; load; *i0ptr251106
  %fptr251107 = inttoptr i64 %f251108 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr251107(i64 %arg235522, i64 %x239787)                ; tail call
  ret void

else251086:
  %many239794 = call i64 @const_init_string(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @str251109, i32 0, i32 0)); quoted string
  %fail239792 = call i64 @prim_halt(i64 %many239794)                                 ; call prim_halt
  %sym239797 = add i64 0, 0                                                          ; quoted ()
  %cloptr251110 = inttoptr i64 %fail239792 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr251111 = getelementptr inbounds i64, i64* %cloptr251110, i64 0               ; &cloptr251110[0]
  %f251113 = load i64, i64* %i0ptr251111, align 8                                    ; load; *i0ptr251111
  %fptr251112 = inttoptr i64 %f251113 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr251112(i64 %fail239792, i64 %sym239797)             ; tail call
  ret void
}


define void @lam242369(i64 %env242370, i64 %rvp239776) {
  %envptr251114 = inttoptr i64 %env242370 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr251115 = getelementptr inbounds i64, i64* %envptr251114, i64 2              ; &envptr251114[2]
  %cont234201 = load i64, i64* %envptr251115, align 8                                ; load; *envptr251115
  %envptr251116 = inttoptr i64 %env242370 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr251117 = getelementptr inbounds i64, i64* %envptr251116, i64 1              ; &envptr251116[1]
  %v233741233921 = load i64, i64* %envptr251117, align 8                             ; load; *envptr251117
  %check239777 = call i64 @prim_null_63(i64 %rvp239776)                              ; call prim_null_63
  %cmp251118 = icmp eq i64 %check239777, 15                                          ; false?
  br i1 %cmp251118, label %else251120, label %then251119                             ; if

then251119:
  %msg239781 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str251121, i32 0, i32 0)); quoted string
  %abort239779 = call i64 @prim_halt(i64 %msg239781)                                 ; call prim_halt
  %sym239784 = add i64 0, 0                                                          ; quoted ()
  %cloptr251122 = inttoptr i64 %abort239779 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr251123 = getelementptr inbounds i64, i64* %cloptr251122, i64 0               ; &cloptr251122[0]
  %f251125 = load i64, i64* %i0ptr251123, align 8                                    ; load; *i0ptr251123
  %fptr251124 = inttoptr i64 %f251125 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr251124(i64 %abort239779, i64 %sym239784)            ; tail call
  ret void

else251120:
  %_95234206 = call i64 @prim_car(i64 %rvp239776)                                    ; call prim_car
  %rvp239766 = call i64 @prim_cdr(i64 %rvp239776)                                    ; call prim_cdr
  %check239767 = call i64 @prim_null_63(i64 %rvp239766)                              ; call prim_null_63
  %cmp251126 = icmp eq i64 %check239767, 15                                          ; false?
  br i1 %cmp251126, label %else251128, label %then251127                             ; if

then251127:
  %msg239771 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str251129, i32 0, i32 0)); quoted string
  %abort239769 = call i64 @prim_halt(i64 %msg239771)                                 ; call prim_halt
  %sym239774 = add i64 0, 0                                                          ; quoted ()
  %cloptr251130 = inttoptr i64 %abort239769 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr251131 = getelementptr inbounds i64, i64* %cloptr251130, i64 0               ; &cloptr251130[0]
  %f251133 = load i64, i64* %i0ptr251131, align 8                                    ; load; *i0ptr251131
  %fptr251132 = inttoptr i64 %f251133 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr251132(i64 %abort239769, i64 %sym239774)            ; tail call
  ret void

else251128:
  %rest239773 = call i64 @prim_cdr(i64 %rvp239766)                                   ; call prim_cdr
  %empty239768 = call i64 @prim_null_63(i64 %rest239773)                             ; call prim_null_63
  %cmp251134 = icmp eq i64 %empty239768, 15                                          ; false?
  br i1 %cmp251134, label %else251136, label %then251135                             ; if

then251135:
  %_95t233744233924 = call i64 @prim_car(i64 %rvp239766)                             ; call prim_car
  %na239762 = call i64 @prim_cdr(i64 %rvp239766)                                     ; call prim_cdr
  %arg235524 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %sym239763 = add i64 0, 0                                                          ; quoted ()
  %x239764 = call i64 @prim_cons(i64 %v233741233921, i64 %sym239763)                 ; call prim_cons
  %x239765 = call i64 @prim_cons(i64 %arg235524, i64 %x239764)                       ; call prim_cons
  %cloptr251137 = inttoptr i64 %cont234201 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr251138 = getelementptr inbounds i64, i64* %cloptr251137, i64 0               ; &cloptr251137[0]
  %f251140 = load i64, i64* %i0ptr251138, align 8                                    ; load; *i0ptr251138
  %fptr251139 = inttoptr i64 %f251140 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr251139(i64 %cont234201, i64 %x239765)               ; tail call
  ret void

else251136:
  %many239772 = call i64 @const_init_string(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @str251141, i32 0, i32 0)); quoted string
  %fail239770 = call i64 @prim_halt(i64 %many239772)                                 ; call prim_halt
  %sym239775 = add i64 0, 0                                                          ; quoted ()
  %cloptr251142 = inttoptr i64 %fail239770 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr251143 = getelementptr inbounds i64, i64* %cloptr251142, i64 0               ; &cloptr251142[0]
  %f251145 = load i64, i64* %i0ptr251143, align 8                                    ; load; *i0ptr251143
  %fptr251144 = inttoptr i64 %f251145 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr251144(i64 %fail239770, i64 %sym239775)             ; tail call
  ret void
}


define void @lam242357(i64 %env242358, i64 %rvp239750) {
  %envptr251146 = inttoptr i64 %env242358 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr251147 = getelementptr inbounds i64, i64* %envptr251146, i64 2              ; &envptr251146[2]
  %cont234201 = load i64, i64* %envptr251147, align 8                                ; load; *envptr251147
  %envptr251148 = inttoptr i64 %env242358 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr251149 = getelementptr inbounds i64, i64* %envptr251148, i64 1              ; &envptr251148[1]
  %v233741233921 = load i64, i64* %envptr251149, align 8                             ; load; *envptr251149
  %check239751 = call i64 @prim_null_63(i64 %rvp239750)                              ; call prim_null_63
  %cmp251150 = icmp eq i64 %check239751, 15                                          ; false?
  br i1 %cmp251150, label %else251152, label %then251151                             ; if

then251151:
  %msg239755 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str251153, i32 0, i32 0)); quoted string
  %abort239753 = call i64 @prim_halt(i64 %msg239755)                                 ; call prim_halt
  %sym239758 = add i64 0, 0                                                          ; quoted ()
  %cloptr251154 = inttoptr i64 %abort239753 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr251155 = getelementptr inbounds i64, i64* %cloptr251154, i64 0               ; &cloptr251154[0]
  %f251157 = load i64, i64* %i0ptr251155, align 8                                    ; load; *i0ptr251155
  %fptr251156 = inttoptr i64 %f251157 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr251156(i64 %abort239753, i64 %sym239758)            ; tail call
  ret void

else251152:
  %_95234206 = call i64 @prim_car(i64 %rvp239750)                                    ; call prim_car
  %rvp239740 = call i64 @prim_cdr(i64 %rvp239750)                                    ; call prim_cdr
  %check239741 = call i64 @prim_null_63(i64 %rvp239740)                              ; call prim_null_63
  %cmp251158 = icmp eq i64 %check239741, 15                                          ; false?
  br i1 %cmp251158, label %else251160, label %then251159                             ; if

then251159:
  %msg239745 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str251161, i32 0, i32 0)); quoted string
  %abort239743 = call i64 @prim_halt(i64 %msg239745)                                 ; call prim_halt
  %sym239748 = add i64 0, 0                                                          ; quoted ()
  %cloptr251162 = inttoptr i64 %abort239743 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr251163 = getelementptr inbounds i64, i64* %cloptr251162, i64 0               ; &cloptr251162[0]
  %f251165 = load i64, i64* %i0ptr251163, align 8                                    ; load; *i0ptr251163
  %fptr251164 = inttoptr i64 %f251165 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr251164(i64 %abort239743, i64 %sym239748)            ; tail call
  ret void

else251160:
  %rest239747 = call i64 @prim_cdr(i64 %rvp239740)                                   ; call prim_cdr
  %empty239742 = call i64 @prim_null_63(i64 %rest239747)                             ; call prim_null_63
  %cmp251166 = icmp eq i64 %empty239742, 15                                          ; false?
  br i1 %cmp251166, label %else251168, label %then251167                             ; if

then251167:
  %_95t233744233924 = call i64 @prim_car(i64 %rvp239740)                             ; call prim_car
  %na239736 = call i64 @prim_cdr(i64 %rvp239740)                                     ; call prim_cdr
  %arg235517 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %sym239737 = add i64 0, 0                                                          ; quoted ()
  %x239738 = call i64 @prim_cons(i64 %v233741233921, i64 %sym239737)                 ; call prim_cons
  %x239739 = call i64 @prim_cons(i64 %arg235517, i64 %x239738)                       ; call prim_cons
  %cloptr251169 = inttoptr i64 %cont234201 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr251170 = getelementptr inbounds i64, i64* %cloptr251169, i64 0               ; &cloptr251169[0]
  %f251172 = load i64, i64* %i0ptr251170, align 8                                    ; load; *i0ptr251170
  %fptr251171 = inttoptr i64 %f251172 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr251171(i64 %cont234201, i64 %x239739)               ; tail call
  ret void

else251168:
  %many239746 = call i64 @const_init_string(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @str251173, i32 0, i32 0)); quoted string
  %fail239744 = call i64 @prim_halt(i64 %many239746)                                 ; call prim_halt
  %sym239749 = add i64 0, 0                                                          ; quoted ()
  %cloptr251174 = inttoptr i64 %fail239744 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr251175 = getelementptr inbounds i64, i64* %cloptr251174, i64 0               ; &cloptr251174[0]
  %f251177 = load i64, i64* %i0ptr251175, align 8                                    ; load; *i0ptr251175
  %fptr251176 = inttoptr i64 %f251177 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr251176(i64 %fail239744, i64 %sym239749)             ; tail call
  ret void
}


define void @lam242323(i64 %env242324, i64 %rvp239716) {
  %envptr251178 = inttoptr i64 %env242324 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr251179 = getelementptr inbounds i64, i64* %envptr251178, i64 5              ; &envptr251178[5]
  %post233737233917 = load i64, i64* %envptr251179, align 8                          ; load; *envptr251179
  %envptr251180 = inttoptr i64 %env242324 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr251181 = getelementptr inbounds i64, i64* %envptr251180, i64 4              ; &envptr251180[4]
  %cont234201 = load i64, i64* %envptr251181, align 8                                ; load; *envptr251181
  %envptr251182 = inttoptr i64 %env242324 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr251183 = getelementptr inbounds i64, i64* %envptr251182, i64 3              ; &envptr251182[3]
  %pre233735233915 = load i64, i64* %envptr251183, align 8                           ; load; *envptr251183
  %envptr251184 = inttoptr i64 %env242324 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr251185 = getelementptr inbounds i64, i64* %envptr251184, i64 2              ; &envptr251184[2]
  %_37wind_45stack233694233874 = load i64, i64* %envptr251185, align 8               ; load; *envptr251185
  %envptr251186 = inttoptr i64 %env242324 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr251187 = getelementptr inbounds i64, i64* %envptr251186, i64 1              ; &envptr251186[1]
  %body233736233916 = load i64, i64* %envptr251187, align 8                          ; load; *envptr251187
  %check239717 = call i64 @prim_null_63(i64 %rvp239716)                              ; call prim_null_63
  %cmp251188 = icmp eq i64 %check239717, 15                                          ; false?
  br i1 %cmp251188, label %else251190, label %then251189                             ; if

then251189:
  %msg239721 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str251191, i32 0, i32 0)); quoted string
  %abort239719 = call i64 @prim_halt(i64 %msg239721)                                 ; call prim_halt
  %sym239724 = add i64 0, 0                                                          ; quoted ()
  %cloptr251192 = inttoptr i64 %abort239719 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr251193 = getelementptr inbounds i64, i64* %cloptr251192, i64 0               ; &cloptr251192[0]
  %f251195 = load i64, i64* %i0ptr251193, align 8                                    ; load; *i0ptr251193
  %fptr251194 = inttoptr i64 %f251195 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr251194(i64 %abort239719, i64 %sym239724)            ; tail call
  ret void

else251190:
  %_95234202 = call i64 @prim_car(i64 %rvp239716)                                    ; call prim_car
  %rvp239706 = call i64 @prim_cdr(i64 %rvp239716)                                    ; call prim_cdr
  %check239707 = call i64 @prim_null_63(i64 %rvp239706)                              ; call prim_null_63
  %cmp251196 = icmp eq i64 %check239707, 15                                          ; false?
  br i1 %cmp251196, label %else251198, label %then251197                             ; if

then251197:
  %msg239711 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str251199, i32 0, i32 0)); quoted string
  %abort239709 = call i64 @prim_halt(i64 %msg239711)                                 ; call prim_halt
  %sym239714 = add i64 0, 0                                                          ; quoted ()
  %cloptr251200 = inttoptr i64 %abort239709 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr251201 = getelementptr inbounds i64, i64* %cloptr251200, i64 0               ; &cloptr251200[0]
  %f251203 = load i64, i64* %i0ptr251201, align 8                                    ; load; *i0ptr251201
  %fptr251202 = inttoptr i64 %f251203 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr251202(i64 %abort239709, i64 %sym239714)            ; tail call
  ret void

else251198:
  %rest239713 = call i64 @prim_cdr(i64 %rvp239706)                                   ; call prim_cdr
  %empty239708 = call i64 @prim_null_63(i64 %rest239713)                             ; call prim_null_63
  %cmp251204 = icmp eq i64 %empty239708, 15                                          ; false?
  br i1 %cmp251204, label %else251206, label %then251205                             ; if

then251205:
  %_95t233738233918 = call i64 @prim_car(i64 %rvp239706)                             ; call prim_car
  %na239480 = call i64 @prim_cdr(i64 %rvp239706)                                     ; call prim_cdr
  %a234066 = call i64 @prim_cons(i64 %pre233735233915, i64 %post233737233917)        ; call prim_cons
  %arg235424 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %a234067 = call i64 @prim_vector_45ref(i64 %_37wind_45stack233694233874, i64 %arg235424); call prim_vector_45ref
  %a234068 = call i64 @prim_cons(i64 %a234066, i64 %a234067)                         ; call prim_cons
  %arg235429 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %retprim234210 = call i64 @prim_vector_45set_33(i64 %_37wind_45stack233694233874, i64 %arg235429, i64 %a234068); call prim_vector_45set_33
  %cloptr251207 = call i64* @alloc(i64 40)                                           ; malloc
  %eptr251209 = getelementptr inbounds i64, i64* %cloptr251207, i64 1                ; &eptr251209[1]
  %eptr251210 = getelementptr inbounds i64, i64* %cloptr251207, i64 2                ; &eptr251210[2]
  %eptr251211 = getelementptr inbounds i64, i64* %cloptr251207, i64 3                ; &eptr251211[3]
  %eptr251212 = getelementptr inbounds i64, i64* %cloptr251207, i64 4                ; &eptr251212[4]
  store i64 %body233736233916, i64* %eptr251209                                      ; *eptr251209 = %body233736233916
  store i64 %_37wind_45stack233694233874, i64* %eptr251210                           ; *eptr251210 = %_37wind_45stack233694233874
  store i64 %cont234201, i64* %eptr251211                                            ; *eptr251211 = %cont234201
  store i64 %post233737233917, i64* %eptr251212                                      ; *eptr251212 = %post233737233917
  %eptr251208 = getelementptr inbounds i64, i64* %cloptr251207, i64 0                ; &cloptr251207[0]
  %f251213 = ptrtoint void(i64,i64)* @lam242317 to i64                               ; fptr cast; i64(...)* -> i64
  store i64 %f251213, i64* %eptr251208                                               ; store fptr
  %arg235433 = ptrtoint i64* %cloptr251207 to i64                                    ; closure cast; i64* -> i64
  %arg235432 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %sym239703 = add i64 0, 0                                                          ; quoted ()
  %x239704 = call i64 @prim_cons(i64 %retprim234210, i64 %sym239703)                 ; call prim_cons
  %x239705 = call i64 @prim_cons(i64 %arg235432, i64 %x239704)                       ; call prim_cons
  %cloptr251214 = inttoptr i64 %arg235433 to i64*                                    ; closure/env cast; i64 -> i64*
  %i0ptr251215 = getelementptr inbounds i64, i64* %cloptr251214, i64 0               ; &cloptr251214[0]
  %f251217 = load i64, i64* %i0ptr251215, align 8                                    ; load; *i0ptr251215
  %fptr251216 = inttoptr i64 %f251217 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr251216(i64 %arg235433, i64 %x239705)                ; tail call
  ret void

else251206:
  %many239712 = call i64 @const_init_string(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @str251218, i32 0, i32 0)); quoted string
  %fail239710 = call i64 @prim_halt(i64 %many239712)                                 ; call prim_halt
  %sym239715 = add i64 0, 0                                                          ; quoted ()
  %cloptr251219 = inttoptr i64 %fail239710 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr251220 = getelementptr inbounds i64, i64* %cloptr251219, i64 0               ; &cloptr251219[0]
  %f251222 = load i64, i64* %i0ptr251220, align 8                                    ; load; *i0ptr251220
  %fptr251221 = inttoptr i64 %f251222 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr251221(i64 %fail239710, i64 %sym239715)             ; tail call
  ret void
}


define void @lam242317(i64 %env242318, i64 %rvp239694) {
  %envptr251223 = inttoptr i64 %env242318 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr251224 = getelementptr inbounds i64, i64* %envptr251223, i64 4              ; &envptr251223[4]
  %post233737233917 = load i64, i64* %envptr251224, align 8                          ; load; *envptr251224
  %envptr251225 = inttoptr i64 %env242318 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr251226 = getelementptr inbounds i64, i64* %envptr251225, i64 3              ; &envptr251225[3]
  %cont234201 = load i64, i64* %envptr251226, align 8                                ; load; *envptr251226
  %envptr251227 = inttoptr i64 %env242318 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr251228 = getelementptr inbounds i64, i64* %envptr251227, i64 2              ; &envptr251227[2]
  %_37wind_45stack233694233874 = load i64, i64* %envptr251228, align 8               ; load; *envptr251228
  %envptr251229 = inttoptr i64 %env242318 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr251230 = getelementptr inbounds i64, i64* %envptr251229, i64 1              ; &envptr251229[1]
  %body233736233916 = load i64, i64* %envptr251230, align 8                          ; load; *envptr251230
  %check239695 = call i64 @prim_null_63(i64 %rvp239694)                              ; call prim_null_63
  %cmp251231 = icmp eq i64 %check239695, 15                                          ; false?
  br i1 %cmp251231, label %else251233, label %then251232                             ; if

then251232:
  %msg239699 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str251234, i32 0, i32 0)); quoted string
  %abort239697 = call i64 @prim_halt(i64 %msg239699)                                 ; call prim_halt
  %sym239702 = add i64 0, 0                                                          ; quoted ()
  %cloptr251235 = inttoptr i64 %abort239697 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr251236 = getelementptr inbounds i64, i64* %cloptr251235, i64 0               ; &cloptr251235[0]
  %f251238 = load i64, i64* %i0ptr251236, align 8                                    ; load; *i0ptr251236
  %fptr251237 = inttoptr i64 %f251238 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr251237(i64 %abort239697, i64 %sym239702)            ; tail call
  ret void

else251233:
  %_95234203 = call i64 @prim_car(i64 %rvp239694)                                    ; call prim_car
  %rvp239684 = call i64 @prim_cdr(i64 %rvp239694)                                    ; call prim_cdr
  %check239685 = call i64 @prim_null_63(i64 %rvp239684)                              ; call prim_null_63
  %cmp251239 = icmp eq i64 %check239685, 15                                          ; false?
  br i1 %cmp251239, label %else251241, label %then251240                             ; if

then251240:
  %msg239689 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str251242, i32 0, i32 0)); quoted string
  %abort239687 = call i64 @prim_halt(i64 %msg239689)                                 ; call prim_halt
  %sym239692 = add i64 0, 0                                                          ; quoted ()
  %cloptr251243 = inttoptr i64 %abort239687 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr251244 = getelementptr inbounds i64, i64* %cloptr251243, i64 0               ; &cloptr251243[0]
  %f251246 = load i64, i64* %i0ptr251244, align 8                                    ; load; *i0ptr251244
  %fptr251245 = inttoptr i64 %f251246 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr251245(i64 %abort239687, i64 %sym239692)            ; tail call
  ret void

else251241:
  %rest239691 = call i64 @prim_cdr(i64 %rvp239684)                                   ; call prim_cdr
  %empty239686 = call i64 @prim_null_63(i64 %rest239691)                             ; call prim_null_63
  %cmp251247 = icmp eq i64 %empty239686, 15                                          ; false?
  br i1 %cmp251247, label %else251249, label %then251248                             ; if

then251248:
  %_95t233740233920 = call i64 @prim_car(i64 %rvp239684)                             ; call prim_car
  %na239482 = call i64 @prim_cdr(i64 %rvp239684)                                     ; call prim_cdr
  %check233576233742233922 = call i64 @prim_procedure_63(i64 %body233736233916)      ; call prim_procedure_63
  %cmp251250 = icmp eq i64 %check233576233742233922, 15                              ; false?
  br i1 %cmp251250, label %else251252, label %then251251                             ; if

then251251:
  %cloptr251253 = call i64* @alloc(i64 32)                                           ; malloc
  %eptr251255 = getelementptr inbounds i64, i64* %cloptr251253, i64 1                ; &eptr251255[1]
  %eptr251256 = getelementptr inbounds i64, i64* %cloptr251253, i64 2                ; &eptr251256[2]
  %eptr251257 = getelementptr inbounds i64, i64* %cloptr251253, i64 3                ; &eptr251257[3]
  store i64 %_37wind_45stack233694233874, i64* %eptr251255                           ; *eptr251255 = %_37wind_45stack233694233874
  store i64 %cont234201, i64* %eptr251256                                            ; *eptr251256 = %cont234201
  store i64 %post233737233917, i64* %eptr251257                                      ; *eptr251257 = %post233737233917
  %eptr251254 = getelementptr inbounds i64, i64* %cloptr251253, i64 0                ; &cloptr251253[0]
  %f251258 = ptrtoint void(i64,i64)* @lam242266 to i64                               ; fptr cast; i64(...)* -> i64
  store i64 %f251258, i64* %eptr251254                                               ; store fptr
  %arg235435 = ptrtoint i64* %cloptr251253 to i64                                    ; closure cast; i64* -> i64
  %sym239581 = add i64 0, 0                                                          ; quoted ()
  %x239582 = call i64 @prim_cons(i64 %arg235435, i64 %sym239581)                     ; call prim_cons
  %cloptr251259 = inttoptr i64 %body233736233916 to i64*                             ; closure/env cast; i64 -> i64*
  %i0ptr251260 = getelementptr inbounds i64, i64* %cloptr251259, i64 0               ; &cloptr251259[0]
  %f251262 = load i64, i64* %i0ptr251260, align 8                                    ; load; *i0ptr251260
  %fptr251261 = inttoptr i64 %f251262 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr251261(i64 %body233736233916, i64 %x239582)         ; tail call
  ret void

else251252:
  %arg235459 = call i64 @const_init_string(i8* getelementptr inbounds ([62 x i8], [62 x i8]* @str251263, i32 0, i32 0)); quoted string
  %retprim234209 = call i64 @prim_halt(i64 %arg235459)                               ; call prim_halt
  %cloptr251264 = call i64* @alloc(i64 32)                                           ; malloc
  %eptr251266 = getelementptr inbounds i64, i64* %cloptr251264, i64 1                ; &eptr251266[1]
  %eptr251267 = getelementptr inbounds i64, i64* %cloptr251264, i64 2                ; &eptr251267[2]
  %eptr251268 = getelementptr inbounds i64, i64* %cloptr251264, i64 3                ; &eptr251268[3]
  store i64 %_37wind_45stack233694233874, i64* %eptr251266                           ; *eptr251266 = %_37wind_45stack233694233874
  store i64 %cont234201, i64* %eptr251267                                            ; *eptr251267 = %cont234201
  store i64 %post233737233917, i64* %eptr251268                                      ; *eptr251268 = %post233737233917
  %eptr251265 = getelementptr inbounds i64, i64* %cloptr251264, i64 0                ; &cloptr251264[0]
  %f251269 = ptrtoint void(i64,i64)* @lam242312 to i64                               ; fptr cast; i64(...)* -> i64
  store i64 %f251269, i64* %eptr251265                                               ; store fptr
  %arg235462 = ptrtoint i64* %cloptr251264 to i64                                    ; closure cast; i64* -> i64
  %arg235461 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %sym239681 = add i64 0, 0                                                          ; quoted ()
  %x239682 = call i64 @prim_cons(i64 %retprim234209, i64 %sym239681)                 ; call prim_cons
  %x239683 = call i64 @prim_cons(i64 %arg235461, i64 %x239682)                       ; call prim_cons
  %cloptr251270 = inttoptr i64 %arg235462 to i64*                                    ; closure/env cast; i64 -> i64*
  %i0ptr251271 = getelementptr inbounds i64, i64* %cloptr251270, i64 0               ; &cloptr251270[0]
  %f251273 = load i64, i64* %i0ptr251271, align 8                                    ; load; *i0ptr251271
  %fptr251272 = inttoptr i64 %f251273 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr251272(i64 %arg235462, i64 %x239683)                ; tail call
  ret void

else251249:
  %many239690 = call i64 @const_init_string(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @str251274, i32 0, i32 0)); quoted string
  %fail239688 = call i64 @prim_halt(i64 %many239690)                                 ; call prim_halt
  %sym239693 = add i64 0, 0                                                          ; quoted ()
  %cloptr251275 = inttoptr i64 %fail239688 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr251276 = getelementptr inbounds i64, i64* %cloptr251275, i64 0               ; &cloptr251275[0]
  %f251278 = load i64, i64* %i0ptr251276, align 8                                    ; load; *i0ptr251276
  %fptr251277 = inttoptr i64 %f251278 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr251277(i64 %fail239688, i64 %sym239693)             ; tail call
  ret void
}


define void @lam242312(i64 %env242313, i64 %rvp239672) {
  %envptr251279 = inttoptr i64 %env242313 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr251280 = getelementptr inbounds i64, i64* %envptr251279, i64 3              ; &envptr251279[3]
  %post233737233917 = load i64, i64* %envptr251280, align 8                          ; load; *envptr251280
  %envptr251281 = inttoptr i64 %env242313 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr251282 = getelementptr inbounds i64, i64* %envptr251281, i64 2              ; &envptr251281[2]
  %cont234201 = load i64, i64* %envptr251282, align 8                                ; load; *envptr251282
  %envptr251283 = inttoptr i64 %env242313 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr251284 = getelementptr inbounds i64, i64* %envptr251283, i64 1              ; &envptr251283[1]
  %_37wind_45stack233694233874 = load i64, i64* %envptr251284, align 8               ; load; *envptr251284
  %check239673 = call i64 @prim_null_63(i64 %rvp239672)                              ; call prim_null_63
  %cmp251285 = icmp eq i64 %check239673, 15                                          ; false?
  br i1 %cmp251285, label %else251287, label %then251286                             ; if

then251286:
  %msg239677 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str251288, i32 0, i32 0)); quoted string
  %abort239675 = call i64 @prim_halt(i64 %msg239677)                                 ; call prim_halt
  %sym239680 = add i64 0, 0                                                          ; quoted ()
  %cloptr251289 = inttoptr i64 %abort239675 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr251290 = getelementptr inbounds i64, i64* %cloptr251289, i64 0               ; &cloptr251289[0]
  %f251292 = load i64, i64* %i0ptr251290, align 8                                    ; load; *i0ptr251290
  %fptr251291 = inttoptr i64 %f251292 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr251291(i64 %abort239675, i64 %sym239680)            ; tail call
  ret void

else251287:
  %_95234204 = call i64 @prim_car(i64 %rvp239672)                                    ; call prim_car
  %rvp239662 = call i64 @prim_cdr(i64 %rvp239672)                                    ; call prim_cdr
  %check239663 = call i64 @prim_null_63(i64 %rvp239662)                              ; call prim_null_63
  %cmp251293 = icmp eq i64 %check239663, 15                                          ; false?
  br i1 %cmp251293, label %else251295, label %then251294                             ; if

then251294:
  %msg239667 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str251296, i32 0, i32 0)); quoted string
  %abort239665 = call i64 @prim_halt(i64 %msg239667)                                 ; call prim_halt
  %sym239670 = add i64 0, 0                                                          ; quoted ()
  %cloptr251297 = inttoptr i64 %abort239665 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr251298 = getelementptr inbounds i64, i64* %cloptr251297, i64 0               ; &cloptr251297[0]
  %f251300 = load i64, i64* %i0ptr251298, align 8                                    ; load; *i0ptr251298
  %fptr251299 = inttoptr i64 %f251300 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr251299(i64 %abort239665, i64 %sym239670)            ; tail call
  ret void

else251295:
  %rest239669 = call i64 @prim_cdr(i64 %rvp239662)                                   ; call prim_cdr
  %empty239664 = call i64 @prim_null_63(i64 %rest239669)                             ; call prim_null_63
  %cmp251301 = icmp eq i64 %empty239664, 15                                          ; false?
  br i1 %cmp251301, label %else251303, label %then251302                             ; if

then251302:
  %v233741233921 = call i64 @prim_car(i64 %rvp239662)                                ; call prim_car
  %na239584 = call i64 @prim_cdr(i64 %rvp239662)                                     ; call prim_cdr
  %arg235463 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %a234069 = call i64 @prim_vector_45ref(i64 %_37wind_45stack233694233874, i64 %arg235463); call prim_vector_45ref
  %a234070 = call i64 @prim_cdr(i64 %a234069)                                        ; call prim_cdr
  %arg235467 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %retprim234208 = call i64 @prim_vector_45set_33(i64 %_37wind_45stack233694233874, i64 %arg235467, i64 %a234070); call prim_vector_45set_33
  %cloptr251304 = call i64* @alloc(i64 32)                                           ; malloc
  %eptr251306 = getelementptr inbounds i64, i64* %cloptr251304, i64 1                ; &eptr251306[1]
  %eptr251307 = getelementptr inbounds i64, i64* %cloptr251304, i64 2                ; &eptr251307[2]
  %eptr251308 = getelementptr inbounds i64, i64* %cloptr251304, i64 3                ; &eptr251308[3]
  store i64 %v233741233921, i64* %eptr251306                                         ; *eptr251306 = %v233741233921
  store i64 %cont234201, i64* %eptr251307                                            ; *eptr251307 = %cont234201
  store i64 %post233737233917, i64* %eptr251308                                      ; *eptr251308 = %post233737233917
  %eptr251305 = getelementptr inbounds i64, i64* %cloptr251304, i64 0                ; &cloptr251304[0]
  %f251309 = ptrtoint void(i64,i64)* @lam242306 to i64                               ; fptr cast; i64(...)* -> i64
  store i64 %f251309, i64* %eptr251305                                               ; store fptr
  %arg235471 = ptrtoint i64* %cloptr251304 to i64                                    ; closure cast; i64* -> i64
  %arg235470 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %sym239659 = add i64 0, 0                                                          ; quoted ()
  %x239660 = call i64 @prim_cons(i64 %retprim234208, i64 %sym239659)                 ; call prim_cons
  %x239661 = call i64 @prim_cons(i64 %arg235470, i64 %x239660)                       ; call prim_cons
  %cloptr251310 = inttoptr i64 %arg235471 to i64*                                    ; closure/env cast; i64 -> i64*
  %i0ptr251311 = getelementptr inbounds i64, i64* %cloptr251310, i64 0               ; &cloptr251310[0]
  %f251313 = load i64, i64* %i0ptr251311, align 8                                    ; load; *i0ptr251311
  %fptr251312 = inttoptr i64 %f251313 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr251312(i64 %arg235471, i64 %x239661)                ; tail call
  ret void

else251303:
  %many239668 = call i64 @const_init_string(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @str251314, i32 0, i32 0)); quoted string
  %fail239666 = call i64 @prim_halt(i64 %many239668)                                 ; call prim_halt
  %sym239671 = add i64 0, 0                                                          ; quoted ()
  %cloptr251315 = inttoptr i64 %fail239666 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr251316 = getelementptr inbounds i64, i64* %cloptr251315, i64 0               ; &cloptr251315[0]
  %f251318 = load i64, i64* %i0ptr251316, align 8                                    ; load; *i0ptr251316
  %fptr251317 = inttoptr i64 %f251318 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr251317(i64 %fail239666, i64 %sym239671)             ; tail call
  ret void
}


define void @lam242306(i64 %env242307, i64 %rvp239650) {
  %envptr251319 = inttoptr i64 %env242307 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr251320 = getelementptr inbounds i64, i64* %envptr251319, i64 3              ; &envptr251319[3]
  %post233737233917 = load i64, i64* %envptr251320, align 8                          ; load; *envptr251320
  %envptr251321 = inttoptr i64 %env242307 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr251322 = getelementptr inbounds i64, i64* %envptr251321, i64 2              ; &envptr251321[2]
  %cont234201 = load i64, i64* %envptr251322, align 8                                ; load; *envptr251322
  %envptr251323 = inttoptr i64 %env242307 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr251324 = getelementptr inbounds i64, i64* %envptr251323, i64 1              ; &envptr251323[1]
  %v233741233921 = load i64, i64* %envptr251324, align 8                             ; load; *envptr251324
  %check239651 = call i64 @prim_null_63(i64 %rvp239650)                              ; call prim_null_63
  %cmp251325 = icmp eq i64 %check239651, 15                                          ; false?
  br i1 %cmp251325, label %else251327, label %then251326                             ; if

then251326:
  %msg239655 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str251328, i32 0, i32 0)); quoted string
  %abort239653 = call i64 @prim_halt(i64 %msg239655)                                 ; call prim_halt
  %sym239658 = add i64 0, 0                                                          ; quoted ()
  %cloptr251329 = inttoptr i64 %abort239653 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr251330 = getelementptr inbounds i64, i64* %cloptr251329, i64 0               ; &cloptr251329[0]
  %f251332 = load i64, i64* %i0ptr251330, align 8                                    ; load; *i0ptr251330
  %fptr251331 = inttoptr i64 %f251332 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr251331(i64 %abort239653, i64 %sym239658)            ; tail call
  ret void

else251327:
  %_95234205 = call i64 @prim_car(i64 %rvp239650)                                    ; call prim_car
  %rvp239640 = call i64 @prim_cdr(i64 %rvp239650)                                    ; call prim_cdr
  %check239641 = call i64 @prim_null_63(i64 %rvp239640)                              ; call prim_null_63
  %cmp251333 = icmp eq i64 %check239641, 15                                          ; false?
  br i1 %cmp251333, label %else251335, label %then251334                             ; if

then251334:
  %msg239645 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str251336, i32 0, i32 0)); quoted string
  %abort239643 = call i64 @prim_halt(i64 %msg239645)                                 ; call prim_halt
  %sym239648 = add i64 0, 0                                                          ; quoted ()
  %cloptr251337 = inttoptr i64 %abort239643 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr251338 = getelementptr inbounds i64, i64* %cloptr251337, i64 0               ; &cloptr251337[0]
  %f251340 = load i64, i64* %i0ptr251338, align 8                                    ; load; *i0ptr251338
  %fptr251339 = inttoptr i64 %f251340 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr251339(i64 %abort239643, i64 %sym239648)            ; tail call
  ret void

else251335:
  %rest239647 = call i64 @prim_cdr(i64 %rvp239640)                                   ; call prim_cdr
  %empty239642 = call i64 @prim_null_63(i64 %rest239647)                             ; call prim_null_63
  %cmp251341 = icmp eq i64 %empty239642, 15                                          ; false?
  br i1 %cmp251341, label %else251343, label %then251342                             ; if

then251342:
  %_95t233743233923 = call i64 @prim_car(i64 %rvp239640)                             ; call prim_car
  %na239586 = call i64 @prim_cdr(i64 %rvp239640)                                     ; call prim_cdr
  %check233577233745233925 = call i64 @prim_procedure_63(i64 %post233737233917)      ; call prim_procedure_63
  %cmp251344 = icmp eq i64 %check233577233745233925, 15                              ; false?
  br i1 %cmp251344, label %else251346, label %then251345                             ; if

then251345:
  %cloptr251347 = call i64* @alloc(i64 24)                                           ; malloc
  %eptr251349 = getelementptr inbounds i64, i64* %cloptr251347, i64 1                ; &eptr251349[1]
  %eptr251350 = getelementptr inbounds i64, i64* %cloptr251347, i64 2                ; &eptr251350[2]
  store i64 %v233741233921, i64* %eptr251349                                         ; *eptr251349 = %v233741233921
  store i64 %cont234201, i64* %eptr251350                                            ; *eptr251350 = %cont234201
  %eptr251348 = getelementptr inbounds i64, i64* %cloptr251347, i64 0                ; &cloptr251347[0]
  %f251351 = ptrtoint void(i64,i64)* @lam242289 to i64                               ; fptr cast; i64(...)* -> i64
  store i64 %f251351, i64* %eptr251348                                               ; store fptr
  %arg235473 = ptrtoint i64* %cloptr251347 to i64                                    ; closure cast; i64* -> i64
  %sym239611 = add i64 0, 0                                                          ; quoted ()
  %x239612 = call i64 @prim_cons(i64 %arg235473, i64 %sym239611)                     ; call prim_cons
  %cloptr251352 = inttoptr i64 %post233737233917 to i64*                             ; closure/env cast; i64 -> i64*
  %i0ptr251353 = getelementptr inbounds i64, i64* %cloptr251352, i64 0               ; &cloptr251352[0]
  %f251355 = load i64, i64* %i0ptr251353, align 8                                    ; load; *i0ptr251353
  %fptr251354 = inttoptr i64 %f251355 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr251354(i64 %post233737233917, i64 %x239612)         ; tail call
  ret void

else251346:
  %arg235478 = call i64 @const_init_string(i8* getelementptr inbounds ([62 x i8], [62 x i8]* @str251356, i32 0, i32 0)); quoted string
  %retprim234207 = call i64 @prim_halt(i64 %arg235478)                               ; call prim_halt
  %cloptr251357 = call i64* @alloc(i64 24)                                           ; malloc
  %eptr251359 = getelementptr inbounds i64, i64* %cloptr251357, i64 1                ; &eptr251359[1]
  %eptr251360 = getelementptr inbounds i64, i64* %cloptr251357, i64 2                ; &eptr251360[2]
  store i64 %v233741233921, i64* %eptr251359                                         ; *eptr251359 = %v233741233921
  store i64 %cont234201, i64* %eptr251360                                            ; *eptr251360 = %cont234201
  %eptr251358 = getelementptr inbounds i64, i64* %cloptr251357, i64 0                ; &cloptr251357[0]
  %f251361 = ptrtoint void(i64,i64)* @lam242301 to i64                               ; fptr cast; i64(...)* -> i64
  store i64 %f251361, i64* %eptr251358                                               ; store fptr
  %arg235481 = ptrtoint i64* %cloptr251357 to i64                                    ; closure cast; i64* -> i64
  %arg235480 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %sym239637 = add i64 0, 0                                                          ; quoted ()
  %x239638 = call i64 @prim_cons(i64 %retprim234207, i64 %sym239637)                 ; call prim_cons
  %x239639 = call i64 @prim_cons(i64 %arg235480, i64 %x239638)                       ; call prim_cons
  %cloptr251362 = inttoptr i64 %arg235481 to i64*                                    ; closure/env cast; i64 -> i64*
  %i0ptr251363 = getelementptr inbounds i64, i64* %cloptr251362, i64 0               ; &cloptr251362[0]
  %f251365 = load i64, i64* %i0ptr251363, align 8                                    ; load; *i0ptr251363
  %fptr251364 = inttoptr i64 %f251365 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr251364(i64 %arg235481, i64 %x239639)                ; tail call
  ret void

else251343:
  %many239646 = call i64 @const_init_string(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @str251366, i32 0, i32 0)); quoted string
  %fail239644 = call i64 @prim_halt(i64 %many239646)                                 ; call prim_halt
  %sym239649 = add i64 0, 0                                                          ; quoted ()
  %cloptr251367 = inttoptr i64 %fail239644 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr251368 = getelementptr inbounds i64, i64* %cloptr251367, i64 0               ; &cloptr251367[0]
  %f251370 = load i64, i64* %i0ptr251368, align 8                                    ; load; *i0ptr251368
  %fptr251369 = inttoptr i64 %f251370 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr251369(i64 %fail239644, i64 %sym239649)             ; tail call
  ret void
}


define void @lam242301(i64 %env242302, i64 %rvp239628) {
  %envptr251371 = inttoptr i64 %env242302 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr251372 = getelementptr inbounds i64, i64* %envptr251371, i64 2              ; &envptr251371[2]
  %cont234201 = load i64, i64* %envptr251372, align 8                                ; load; *envptr251372
  %envptr251373 = inttoptr i64 %env242302 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr251374 = getelementptr inbounds i64, i64* %envptr251373, i64 1              ; &envptr251373[1]
  %v233741233921 = load i64, i64* %envptr251374, align 8                             ; load; *envptr251374
  %check239629 = call i64 @prim_null_63(i64 %rvp239628)                              ; call prim_null_63
  %cmp251375 = icmp eq i64 %check239629, 15                                          ; false?
  br i1 %cmp251375, label %else251377, label %then251376                             ; if

then251376:
  %msg239633 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str251378, i32 0, i32 0)); quoted string
  %abort239631 = call i64 @prim_halt(i64 %msg239633)                                 ; call prim_halt
  %sym239636 = add i64 0, 0                                                          ; quoted ()
  %cloptr251379 = inttoptr i64 %abort239631 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr251380 = getelementptr inbounds i64, i64* %cloptr251379, i64 0               ; &cloptr251379[0]
  %f251382 = load i64, i64* %i0ptr251380, align 8                                    ; load; *i0ptr251380
  %fptr251381 = inttoptr i64 %f251382 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr251381(i64 %abort239631, i64 %sym239636)            ; tail call
  ret void

else251377:
  %_95234206 = call i64 @prim_car(i64 %rvp239628)                                    ; call prim_car
  %rvp239618 = call i64 @prim_cdr(i64 %rvp239628)                                    ; call prim_cdr
  %check239619 = call i64 @prim_null_63(i64 %rvp239618)                              ; call prim_null_63
  %cmp251383 = icmp eq i64 %check239619, 15                                          ; false?
  br i1 %cmp251383, label %else251385, label %then251384                             ; if

then251384:
  %msg239623 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str251386, i32 0, i32 0)); quoted string
  %abort239621 = call i64 @prim_halt(i64 %msg239623)                                 ; call prim_halt
  %sym239626 = add i64 0, 0                                                          ; quoted ()
  %cloptr251387 = inttoptr i64 %abort239621 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr251388 = getelementptr inbounds i64, i64* %cloptr251387, i64 0               ; &cloptr251387[0]
  %f251390 = load i64, i64* %i0ptr251388, align 8                                    ; load; *i0ptr251388
  %fptr251389 = inttoptr i64 %f251390 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr251389(i64 %abort239621, i64 %sym239626)            ; tail call
  ret void

else251385:
  %rest239625 = call i64 @prim_cdr(i64 %rvp239618)                                   ; call prim_cdr
  %empty239620 = call i64 @prim_null_63(i64 %rest239625)                             ; call prim_null_63
  %cmp251391 = icmp eq i64 %empty239620, 15                                          ; false?
  br i1 %cmp251391, label %else251393, label %then251392                             ; if

then251392:
  %_95t233744233924 = call i64 @prim_car(i64 %rvp239618)                             ; call prim_car
  %na239614 = call i64 @prim_cdr(i64 %rvp239618)                                     ; call prim_cdr
  %arg235483 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %sym239615 = add i64 0, 0                                                          ; quoted ()
  %x239616 = call i64 @prim_cons(i64 %v233741233921, i64 %sym239615)                 ; call prim_cons
  %x239617 = call i64 @prim_cons(i64 %arg235483, i64 %x239616)                       ; call prim_cons
  %cloptr251394 = inttoptr i64 %cont234201 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr251395 = getelementptr inbounds i64, i64* %cloptr251394, i64 0               ; &cloptr251394[0]
  %f251397 = load i64, i64* %i0ptr251395, align 8                                    ; load; *i0ptr251395
  %fptr251396 = inttoptr i64 %f251397 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr251396(i64 %cont234201, i64 %x239617)               ; tail call
  ret void

else251393:
  %many239624 = call i64 @const_init_string(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @str251398, i32 0, i32 0)); quoted string
  %fail239622 = call i64 @prim_halt(i64 %many239624)                                 ; call prim_halt
  %sym239627 = add i64 0, 0                                                          ; quoted ()
  %cloptr251399 = inttoptr i64 %fail239622 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr251400 = getelementptr inbounds i64, i64* %cloptr251399, i64 0               ; &cloptr251399[0]
  %f251402 = load i64, i64* %i0ptr251400, align 8                                    ; load; *i0ptr251400
  %fptr251401 = inttoptr i64 %f251402 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr251401(i64 %fail239622, i64 %sym239627)             ; tail call
  ret void
}


define void @lam242289(i64 %env242290, i64 %rvp239602) {
  %envptr251403 = inttoptr i64 %env242290 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr251404 = getelementptr inbounds i64, i64* %envptr251403, i64 2              ; &envptr251403[2]
  %cont234201 = load i64, i64* %envptr251404, align 8                                ; load; *envptr251404
  %envptr251405 = inttoptr i64 %env242290 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr251406 = getelementptr inbounds i64, i64* %envptr251405, i64 1              ; &envptr251405[1]
  %v233741233921 = load i64, i64* %envptr251406, align 8                             ; load; *envptr251406
  %check239603 = call i64 @prim_null_63(i64 %rvp239602)                              ; call prim_null_63
  %cmp251407 = icmp eq i64 %check239603, 15                                          ; false?
  br i1 %cmp251407, label %else251409, label %then251408                             ; if

then251408:
  %msg239607 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str251410, i32 0, i32 0)); quoted string
  %abort239605 = call i64 @prim_halt(i64 %msg239607)                                 ; call prim_halt
  %sym239610 = add i64 0, 0                                                          ; quoted ()
  %cloptr251411 = inttoptr i64 %abort239605 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr251412 = getelementptr inbounds i64, i64* %cloptr251411, i64 0               ; &cloptr251411[0]
  %f251414 = load i64, i64* %i0ptr251412, align 8                                    ; load; *i0ptr251412
  %fptr251413 = inttoptr i64 %f251414 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr251413(i64 %abort239605, i64 %sym239610)            ; tail call
  ret void

else251409:
  %_95234206 = call i64 @prim_car(i64 %rvp239602)                                    ; call prim_car
  %rvp239592 = call i64 @prim_cdr(i64 %rvp239602)                                    ; call prim_cdr
  %check239593 = call i64 @prim_null_63(i64 %rvp239592)                              ; call prim_null_63
  %cmp251415 = icmp eq i64 %check239593, 15                                          ; false?
  br i1 %cmp251415, label %else251417, label %then251416                             ; if

then251416:
  %msg239597 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str251418, i32 0, i32 0)); quoted string
  %abort239595 = call i64 @prim_halt(i64 %msg239597)                                 ; call prim_halt
  %sym239600 = add i64 0, 0                                                          ; quoted ()
  %cloptr251419 = inttoptr i64 %abort239595 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr251420 = getelementptr inbounds i64, i64* %cloptr251419, i64 0               ; &cloptr251419[0]
  %f251422 = load i64, i64* %i0ptr251420, align 8                                    ; load; *i0ptr251420
  %fptr251421 = inttoptr i64 %f251422 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr251421(i64 %abort239595, i64 %sym239600)            ; tail call
  ret void

else251417:
  %rest239599 = call i64 @prim_cdr(i64 %rvp239592)                                   ; call prim_cdr
  %empty239594 = call i64 @prim_null_63(i64 %rest239599)                             ; call prim_null_63
  %cmp251423 = icmp eq i64 %empty239594, 15                                          ; false?
  br i1 %cmp251423, label %else251425, label %then251424                             ; if

then251424:
  %_95t233744233924 = call i64 @prim_car(i64 %rvp239592)                             ; call prim_car
  %na239588 = call i64 @prim_cdr(i64 %rvp239592)                                     ; call prim_cdr
  %arg235476 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %sym239589 = add i64 0, 0                                                          ; quoted ()
  %x239590 = call i64 @prim_cons(i64 %v233741233921, i64 %sym239589)                 ; call prim_cons
  %x239591 = call i64 @prim_cons(i64 %arg235476, i64 %x239590)                       ; call prim_cons
  %cloptr251426 = inttoptr i64 %cont234201 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr251427 = getelementptr inbounds i64, i64* %cloptr251426, i64 0               ; &cloptr251426[0]
  %f251429 = load i64, i64* %i0ptr251427, align 8                                    ; load; *i0ptr251427
  %fptr251428 = inttoptr i64 %f251429 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr251428(i64 %cont234201, i64 %x239591)               ; tail call
  ret void

else251425:
  %many239598 = call i64 @const_init_string(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @str251430, i32 0, i32 0)); quoted string
  %fail239596 = call i64 @prim_halt(i64 %many239598)                                 ; call prim_halt
  %sym239601 = add i64 0, 0                                                          ; quoted ()
  %cloptr251431 = inttoptr i64 %fail239596 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr251432 = getelementptr inbounds i64, i64* %cloptr251431, i64 0               ; &cloptr251431[0]
  %f251434 = load i64, i64* %i0ptr251432, align 8                                    ; load; *i0ptr251432
  %fptr251433 = inttoptr i64 %f251434 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr251433(i64 %fail239596, i64 %sym239601)             ; tail call
  ret void
}


define void @lam242266(i64 %env242267, i64 %rvp239572) {
  %envptr251435 = inttoptr i64 %env242267 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr251436 = getelementptr inbounds i64, i64* %envptr251435, i64 3              ; &envptr251435[3]
  %post233737233917 = load i64, i64* %envptr251436, align 8                          ; load; *envptr251436
  %envptr251437 = inttoptr i64 %env242267 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr251438 = getelementptr inbounds i64, i64* %envptr251437, i64 2              ; &envptr251437[2]
  %cont234201 = load i64, i64* %envptr251438, align 8                                ; load; *envptr251438
  %envptr251439 = inttoptr i64 %env242267 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr251440 = getelementptr inbounds i64, i64* %envptr251439, i64 1              ; &envptr251439[1]
  %_37wind_45stack233694233874 = load i64, i64* %envptr251440, align 8               ; load; *envptr251440
  %check239573 = call i64 @prim_null_63(i64 %rvp239572)                              ; call prim_null_63
  %cmp251441 = icmp eq i64 %check239573, 15                                          ; false?
  br i1 %cmp251441, label %else251443, label %then251442                             ; if

then251442:
  %msg239577 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str251444, i32 0, i32 0)); quoted string
  %abort239575 = call i64 @prim_halt(i64 %msg239577)                                 ; call prim_halt
  %sym239580 = add i64 0, 0                                                          ; quoted ()
  %cloptr251445 = inttoptr i64 %abort239575 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr251446 = getelementptr inbounds i64, i64* %cloptr251445, i64 0               ; &cloptr251445[0]
  %f251448 = load i64, i64* %i0ptr251446, align 8                                    ; load; *i0ptr251446
  %fptr251447 = inttoptr i64 %f251448 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr251447(i64 %abort239575, i64 %sym239580)            ; tail call
  ret void

else251443:
  %_95234204 = call i64 @prim_car(i64 %rvp239572)                                    ; call prim_car
  %rvp239562 = call i64 @prim_cdr(i64 %rvp239572)                                    ; call prim_cdr
  %check239563 = call i64 @prim_null_63(i64 %rvp239562)                              ; call prim_null_63
  %cmp251449 = icmp eq i64 %check239563, 15                                          ; false?
  br i1 %cmp251449, label %else251451, label %then251450                             ; if

then251450:
  %msg239567 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str251452, i32 0, i32 0)); quoted string
  %abort239565 = call i64 @prim_halt(i64 %msg239567)                                 ; call prim_halt
  %sym239570 = add i64 0, 0                                                          ; quoted ()
  %cloptr251453 = inttoptr i64 %abort239565 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr251454 = getelementptr inbounds i64, i64* %cloptr251453, i64 0               ; &cloptr251453[0]
  %f251456 = load i64, i64* %i0ptr251454, align 8                                    ; load; *i0ptr251454
  %fptr251455 = inttoptr i64 %f251456 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr251455(i64 %abort239565, i64 %sym239570)            ; tail call
  ret void

else251451:
  %rest239569 = call i64 @prim_cdr(i64 %rvp239562)                                   ; call prim_cdr
  %empty239564 = call i64 @prim_null_63(i64 %rest239569)                             ; call prim_null_63
  %cmp251457 = icmp eq i64 %empty239564, 15                                          ; false?
  br i1 %cmp251457, label %else251459, label %then251458                             ; if

then251458:
  %v233741233921 = call i64 @prim_car(i64 %rvp239562)                                ; call prim_car
  %na239484 = call i64 @prim_cdr(i64 %rvp239562)                                     ; call prim_cdr
  %arg235437 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %a234069 = call i64 @prim_vector_45ref(i64 %_37wind_45stack233694233874, i64 %arg235437); call prim_vector_45ref
  %a234070 = call i64 @prim_cdr(i64 %a234069)                                        ; call prim_cdr
  %arg235441 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %retprim234208 = call i64 @prim_vector_45set_33(i64 %_37wind_45stack233694233874, i64 %arg235441, i64 %a234070); call prim_vector_45set_33
  %cloptr251460 = call i64* @alloc(i64 32)                                           ; malloc
  %eptr251462 = getelementptr inbounds i64, i64* %cloptr251460, i64 1                ; &eptr251462[1]
  %eptr251463 = getelementptr inbounds i64, i64* %cloptr251460, i64 2                ; &eptr251463[2]
  %eptr251464 = getelementptr inbounds i64, i64* %cloptr251460, i64 3                ; &eptr251464[3]
  store i64 %v233741233921, i64* %eptr251462                                         ; *eptr251462 = %v233741233921
  store i64 %cont234201, i64* %eptr251463                                            ; *eptr251463 = %cont234201
  store i64 %post233737233917, i64* %eptr251464                                      ; *eptr251464 = %post233737233917
  %eptr251461 = getelementptr inbounds i64, i64* %cloptr251460, i64 0                ; &cloptr251460[0]
  %f251465 = ptrtoint void(i64,i64)* @lam242260 to i64                               ; fptr cast; i64(...)* -> i64
  store i64 %f251465, i64* %eptr251461                                               ; store fptr
  %arg235445 = ptrtoint i64* %cloptr251460 to i64                                    ; closure cast; i64* -> i64
  %arg235444 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %sym239559 = add i64 0, 0                                                          ; quoted ()
  %x239560 = call i64 @prim_cons(i64 %retprim234208, i64 %sym239559)                 ; call prim_cons
  %x239561 = call i64 @prim_cons(i64 %arg235444, i64 %x239560)                       ; call prim_cons
  %cloptr251466 = inttoptr i64 %arg235445 to i64*                                    ; closure/env cast; i64 -> i64*
  %i0ptr251467 = getelementptr inbounds i64, i64* %cloptr251466, i64 0               ; &cloptr251466[0]
  %f251469 = load i64, i64* %i0ptr251467, align 8                                    ; load; *i0ptr251467
  %fptr251468 = inttoptr i64 %f251469 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr251468(i64 %arg235445, i64 %x239561)                ; tail call
  ret void

else251459:
  %many239568 = call i64 @const_init_string(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @str251470, i32 0, i32 0)); quoted string
  %fail239566 = call i64 @prim_halt(i64 %many239568)                                 ; call prim_halt
  %sym239571 = add i64 0, 0                                                          ; quoted ()
  %cloptr251471 = inttoptr i64 %fail239566 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr251472 = getelementptr inbounds i64, i64* %cloptr251471, i64 0               ; &cloptr251471[0]
  %f251474 = load i64, i64* %i0ptr251472, align 8                                    ; load; *i0ptr251472
  %fptr251473 = inttoptr i64 %f251474 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr251473(i64 %fail239566, i64 %sym239571)             ; tail call
  ret void
}


define void @lam242260(i64 %env242261, i64 %rvp239550) {
  %envptr251475 = inttoptr i64 %env242261 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr251476 = getelementptr inbounds i64, i64* %envptr251475, i64 3              ; &envptr251475[3]
  %post233737233917 = load i64, i64* %envptr251476, align 8                          ; load; *envptr251476
  %envptr251477 = inttoptr i64 %env242261 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr251478 = getelementptr inbounds i64, i64* %envptr251477, i64 2              ; &envptr251477[2]
  %cont234201 = load i64, i64* %envptr251478, align 8                                ; load; *envptr251478
  %envptr251479 = inttoptr i64 %env242261 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr251480 = getelementptr inbounds i64, i64* %envptr251479, i64 1              ; &envptr251479[1]
  %v233741233921 = load i64, i64* %envptr251480, align 8                             ; load; *envptr251480
  %check239551 = call i64 @prim_null_63(i64 %rvp239550)                              ; call prim_null_63
  %cmp251481 = icmp eq i64 %check239551, 15                                          ; false?
  br i1 %cmp251481, label %else251483, label %then251482                             ; if

then251482:
  %msg239555 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str251484, i32 0, i32 0)); quoted string
  %abort239553 = call i64 @prim_halt(i64 %msg239555)                                 ; call prim_halt
  %sym239558 = add i64 0, 0                                                          ; quoted ()
  %cloptr251485 = inttoptr i64 %abort239553 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr251486 = getelementptr inbounds i64, i64* %cloptr251485, i64 0               ; &cloptr251485[0]
  %f251488 = load i64, i64* %i0ptr251486, align 8                                    ; load; *i0ptr251486
  %fptr251487 = inttoptr i64 %f251488 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr251487(i64 %abort239553, i64 %sym239558)            ; tail call
  ret void

else251483:
  %_95234205 = call i64 @prim_car(i64 %rvp239550)                                    ; call prim_car
  %rvp239540 = call i64 @prim_cdr(i64 %rvp239550)                                    ; call prim_cdr
  %check239541 = call i64 @prim_null_63(i64 %rvp239540)                              ; call prim_null_63
  %cmp251489 = icmp eq i64 %check239541, 15                                          ; false?
  br i1 %cmp251489, label %else251491, label %then251490                             ; if

then251490:
  %msg239545 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str251492, i32 0, i32 0)); quoted string
  %abort239543 = call i64 @prim_halt(i64 %msg239545)                                 ; call prim_halt
  %sym239548 = add i64 0, 0                                                          ; quoted ()
  %cloptr251493 = inttoptr i64 %abort239543 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr251494 = getelementptr inbounds i64, i64* %cloptr251493, i64 0               ; &cloptr251493[0]
  %f251496 = load i64, i64* %i0ptr251494, align 8                                    ; load; *i0ptr251494
  %fptr251495 = inttoptr i64 %f251496 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr251495(i64 %abort239543, i64 %sym239548)            ; tail call
  ret void

else251491:
  %rest239547 = call i64 @prim_cdr(i64 %rvp239540)                                   ; call prim_cdr
  %empty239542 = call i64 @prim_null_63(i64 %rest239547)                             ; call prim_null_63
  %cmp251497 = icmp eq i64 %empty239542, 15                                          ; false?
  br i1 %cmp251497, label %else251499, label %then251498                             ; if

then251498:
  %_95t233743233923 = call i64 @prim_car(i64 %rvp239540)                             ; call prim_car
  %na239486 = call i64 @prim_cdr(i64 %rvp239540)                                     ; call prim_cdr
  %check233577233745233925 = call i64 @prim_procedure_63(i64 %post233737233917)      ; call prim_procedure_63
  %cmp251500 = icmp eq i64 %check233577233745233925, 15                              ; false?
  br i1 %cmp251500, label %else251502, label %then251501                             ; if

then251501:
  %cloptr251503 = call i64* @alloc(i64 24)                                           ; malloc
  %eptr251505 = getelementptr inbounds i64, i64* %cloptr251503, i64 1                ; &eptr251505[1]
  %eptr251506 = getelementptr inbounds i64, i64* %cloptr251503, i64 2                ; &eptr251506[2]
  store i64 %v233741233921, i64* %eptr251505                                         ; *eptr251505 = %v233741233921
  store i64 %cont234201, i64* %eptr251506                                            ; *eptr251506 = %cont234201
  %eptr251504 = getelementptr inbounds i64, i64* %cloptr251503, i64 0                ; &cloptr251503[0]
  %f251507 = ptrtoint void(i64,i64)* @lam242243 to i64                               ; fptr cast; i64(...)* -> i64
  store i64 %f251507, i64* %eptr251504                                               ; store fptr
  %arg235447 = ptrtoint i64* %cloptr251503 to i64                                    ; closure cast; i64* -> i64
  %sym239511 = add i64 0, 0                                                          ; quoted ()
  %x239512 = call i64 @prim_cons(i64 %arg235447, i64 %sym239511)                     ; call prim_cons
  %cloptr251508 = inttoptr i64 %post233737233917 to i64*                             ; closure/env cast; i64 -> i64*
  %i0ptr251509 = getelementptr inbounds i64, i64* %cloptr251508, i64 0               ; &cloptr251508[0]
  %f251511 = load i64, i64* %i0ptr251509, align 8                                    ; load; *i0ptr251509
  %fptr251510 = inttoptr i64 %f251511 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr251510(i64 %post233737233917, i64 %x239512)         ; tail call
  ret void

else251502:
  %arg235452 = call i64 @const_init_string(i8* getelementptr inbounds ([62 x i8], [62 x i8]* @str251512, i32 0, i32 0)); quoted string
  %retprim234207 = call i64 @prim_halt(i64 %arg235452)                               ; call prim_halt
  %cloptr251513 = call i64* @alloc(i64 24)                                           ; malloc
  %eptr251515 = getelementptr inbounds i64, i64* %cloptr251513, i64 1                ; &eptr251515[1]
  %eptr251516 = getelementptr inbounds i64, i64* %cloptr251513, i64 2                ; &eptr251516[2]
  store i64 %v233741233921, i64* %eptr251515                                         ; *eptr251515 = %v233741233921
  store i64 %cont234201, i64* %eptr251516                                            ; *eptr251516 = %cont234201
  %eptr251514 = getelementptr inbounds i64, i64* %cloptr251513, i64 0                ; &cloptr251513[0]
  %f251517 = ptrtoint void(i64,i64)* @lam242255 to i64                               ; fptr cast; i64(...)* -> i64
  store i64 %f251517, i64* %eptr251514                                               ; store fptr
  %arg235455 = ptrtoint i64* %cloptr251513 to i64                                    ; closure cast; i64* -> i64
  %arg235454 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %sym239537 = add i64 0, 0                                                          ; quoted ()
  %x239538 = call i64 @prim_cons(i64 %retprim234207, i64 %sym239537)                 ; call prim_cons
  %x239539 = call i64 @prim_cons(i64 %arg235454, i64 %x239538)                       ; call prim_cons
  %cloptr251518 = inttoptr i64 %arg235455 to i64*                                    ; closure/env cast; i64 -> i64*
  %i0ptr251519 = getelementptr inbounds i64, i64* %cloptr251518, i64 0               ; &cloptr251518[0]
  %f251521 = load i64, i64* %i0ptr251519, align 8                                    ; load; *i0ptr251519
  %fptr251520 = inttoptr i64 %f251521 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr251520(i64 %arg235455, i64 %x239539)                ; tail call
  ret void

else251499:
  %many239546 = call i64 @const_init_string(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @str251522, i32 0, i32 0)); quoted string
  %fail239544 = call i64 @prim_halt(i64 %many239546)                                 ; call prim_halt
  %sym239549 = add i64 0, 0                                                          ; quoted ()
  %cloptr251523 = inttoptr i64 %fail239544 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr251524 = getelementptr inbounds i64, i64* %cloptr251523, i64 0               ; &cloptr251523[0]
  %f251526 = load i64, i64* %i0ptr251524, align 8                                    ; load; *i0ptr251524
  %fptr251525 = inttoptr i64 %f251526 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr251525(i64 %fail239544, i64 %sym239549)             ; tail call
  ret void
}


define void @lam242255(i64 %env242256, i64 %rvp239528) {
  %envptr251527 = inttoptr i64 %env242256 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr251528 = getelementptr inbounds i64, i64* %envptr251527, i64 2              ; &envptr251527[2]
  %cont234201 = load i64, i64* %envptr251528, align 8                                ; load; *envptr251528
  %envptr251529 = inttoptr i64 %env242256 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr251530 = getelementptr inbounds i64, i64* %envptr251529, i64 1              ; &envptr251529[1]
  %v233741233921 = load i64, i64* %envptr251530, align 8                             ; load; *envptr251530
  %check239529 = call i64 @prim_null_63(i64 %rvp239528)                              ; call prim_null_63
  %cmp251531 = icmp eq i64 %check239529, 15                                          ; false?
  br i1 %cmp251531, label %else251533, label %then251532                             ; if

then251532:
  %msg239533 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str251534, i32 0, i32 0)); quoted string
  %abort239531 = call i64 @prim_halt(i64 %msg239533)                                 ; call prim_halt
  %sym239536 = add i64 0, 0                                                          ; quoted ()
  %cloptr251535 = inttoptr i64 %abort239531 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr251536 = getelementptr inbounds i64, i64* %cloptr251535, i64 0               ; &cloptr251535[0]
  %f251538 = load i64, i64* %i0ptr251536, align 8                                    ; load; *i0ptr251536
  %fptr251537 = inttoptr i64 %f251538 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr251537(i64 %abort239531, i64 %sym239536)            ; tail call
  ret void

else251533:
  %_95234206 = call i64 @prim_car(i64 %rvp239528)                                    ; call prim_car
  %rvp239518 = call i64 @prim_cdr(i64 %rvp239528)                                    ; call prim_cdr
  %check239519 = call i64 @prim_null_63(i64 %rvp239518)                              ; call prim_null_63
  %cmp251539 = icmp eq i64 %check239519, 15                                          ; false?
  br i1 %cmp251539, label %else251541, label %then251540                             ; if

then251540:
  %msg239523 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str251542, i32 0, i32 0)); quoted string
  %abort239521 = call i64 @prim_halt(i64 %msg239523)                                 ; call prim_halt
  %sym239526 = add i64 0, 0                                                          ; quoted ()
  %cloptr251543 = inttoptr i64 %abort239521 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr251544 = getelementptr inbounds i64, i64* %cloptr251543, i64 0               ; &cloptr251543[0]
  %f251546 = load i64, i64* %i0ptr251544, align 8                                    ; load; *i0ptr251544
  %fptr251545 = inttoptr i64 %f251546 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr251545(i64 %abort239521, i64 %sym239526)            ; tail call
  ret void

else251541:
  %rest239525 = call i64 @prim_cdr(i64 %rvp239518)                                   ; call prim_cdr
  %empty239520 = call i64 @prim_null_63(i64 %rest239525)                             ; call prim_null_63
  %cmp251547 = icmp eq i64 %empty239520, 15                                          ; false?
  br i1 %cmp251547, label %else251549, label %then251548                             ; if

then251548:
  %_95t233744233924 = call i64 @prim_car(i64 %rvp239518)                             ; call prim_car
  %na239514 = call i64 @prim_cdr(i64 %rvp239518)                                     ; call prim_cdr
  %arg235457 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %sym239515 = add i64 0, 0                                                          ; quoted ()
  %x239516 = call i64 @prim_cons(i64 %v233741233921, i64 %sym239515)                 ; call prim_cons
  %x239517 = call i64 @prim_cons(i64 %arg235457, i64 %x239516)                       ; call prim_cons
  %cloptr251550 = inttoptr i64 %cont234201 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr251551 = getelementptr inbounds i64, i64* %cloptr251550, i64 0               ; &cloptr251550[0]
  %f251553 = load i64, i64* %i0ptr251551, align 8                                    ; load; *i0ptr251551
  %fptr251552 = inttoptr i64 %f251553 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr251552(i64 %cont234201, i64 %x239517)               ; tail call
  ret void

else251549:
  %many239524 = call i64 @const_init_string(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @str251554, i32 0, i32 0)); quoted string
  %fail239522 = call i64 @prim_halt(i64 %many239524)                                 ; call prim_halt
  %sym239527 = add i64 0, 0                                                          ; quoted ()
  %cloptr251555 = inttoptr i64 %fail239522 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr251556 = getelementptr inbounds i64, i64* %cloptr251555, i64 0               ; &cloptr251555[0]
  %f251558 = load i64, i64* %i0ptr251556, align 8                                    ; load; *i0ptr251556
  %fptr251557 = inttoptr i64 %f251558 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr251557(i64 %fail239522, i64 %sym239527)             ; tail call
  ret void
}


define void @lam242243(i64 %env242244, i64 %rvp239502) {
  %envptr251559 = inttoptr i64 %env242244 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr251560 = getelementptr inbounds i64, i64* %envptr251559, i64 2              ; &envptr251559[2]
  %cont234201 = load i64, i64* %envptr251560, align 8                                ; load; *envptr251560
  %envptr251561 = inttoptr i64 %env242244 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr251562 = getelementptr inbounds i64, i64* %envptr251561, i64 1              ; &envptr251561[1]
  %v233741233921 = load i64, i64* %envptr251562, align 8                             ; load; *envptr251562
  %check239503 = call i64 @prim_null_63(i64 %rvp239502)                              ; call prim_null_63
  %cmp251563 = icmp eq i64 %check239503, 15                                          ; false?
  br i1 %cmp251563, label %else251565, label %then251564                             ; if

then251564:
  %msg239507 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str251566, i32 0, i32 0)); quoted string
  %abort239505 = call i64 @prim_halt(i64 %msg239507)                                 ; call prim_halt
  %sym239510 = add i64 0, 0                                                          ; quoted ()
  %cloptr251567 = inttoptr i64 %abort239505 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr251568 = getelementptr inbounds i64, i64* %cloptr251567, i64 0               ; &cloptr251567[0]
  %f251570 = load i64, i64* %i0ptr251568, align 8                                    ; load; *i0ptr251568
  %fptr251569 = inttoptr i64 %f251570 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr251569(i64 %abort239505, i64 %sym239510)            ; tail call
  ret void

else251565:
  %_95234206 = call i64 @prim_car(i64 %rvp239502)                                    ; call prim_car
  %rvp239492 = call i64 @prim_cdr(i64 %rvp239502)                                    ; call prim_cdr
  %check239493 = call i64 @prim_null_63(i64 %rvp239492)                              ; call prim_null_63
  %cmp251571 = icmp eq i64 %check239493, 15                                          ; false?
  br i1 %cmp251571, label %else251573, label %then251572                             ; if

then251572:
  %msg239497 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str251574, i32 0, i32 0)); quoted string
  %abort239495 = call i64 @prim_halt(i64 %msg239497)                                 ; call prim_halt
  %sym239500 = add i64 0, 0                                                          ; quoted ()
  %cloptr251575 = inttoptr i64 %abort239495 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr251576 = getelementptr inbounds i64, i64* %cloptr251575, i64 0               ; &cloptr251575[0]
  %f251578 = load i64, i64* %i0ptr251576, align 8                                    ; load; *i0ptr251576
  %fptr251577 = inttoptr i64 %f251578 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr251577(i64 %abort239495, i64 %sym239500)            ; tail call
  ret void

else251573:
  %rest239499 = call i64 @prim_cdr(i64 %rvp239492)                                   ; call prim_cdr
  %empty239494 = call i64 @prim_null_63(i64 %rest239499)                             ; call prim_null_63
  %cmp251579 = icmp eq i64 %empty239494, 15                                          ; false?
  br i1 %cmp251579, label %else251581, label %then251580                             ; if

then251580:
  %_95t233744233924 = call i64 @prim_car(i64 %rvp239492)                             ; call prim_car
  %na239488 = call i64 @prim_cdr(i64 %rvp239492)                                     ; call prim_cdr
  %arg235450 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %sym239489 = add i64 0, 0                                                          ; quoted ()
  %x239490 = call i64 @prim_cons(i64 %v233741233921, i64 %sym239489)                 ; call prim_cons
  %x239491 = call i64 @prim_cons(i64 %arg235450, i64 %x239490)                       ; call prim_cons
  %cloptr251582 = inttoptr i64 %cont234201 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr251583 = getelementptr inbounds i64, i64* %cloptr251582, i64 0               ; &cloptr251582[0]
  %f251585 = load i64, i64* %i0ptr251583, align 8                                    ; load; *i0ptr251583
  %fptr251584 = inttoptr i64 %f251585 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr251584(i64 %cont234201, i64 %x239491)               ; tail call
  ret void

else251581:
  %many239498 = call i64 @const_init_string(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @str251586, i32 0, i32 0)); quoted string
  %fail239496 = call i64 @prim_halt(i64 %many239498)                                 ; call prim_halt
  %sym239501 = add i64 0, 0                                                          ; quoted ()
  %cloptr251587 = inttoptr i64 %fail239496 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr251588 = getelementptr inbounds i64, i64* %cloptr251587, i64 0               ; &cloptr251587[0]
  %f251590 = load i64, i64* %i0ptr251588, align 8                                    ; load; *i0ptr251588
  %fptr251589 = inttoptr i64 %f251590 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr251589(i64 %fail239496, i64 %sym239501)             ; tail call
  ret void
}


define void @lam242202(i64 %env242203, i64 %lst233747233927234225) {
  %cont234224 = call i64 @prim_car(i64 %lst233747233927234225)                       ; call prim_car
  %lst233747233927 = call i64 @prim_cdr(i64 %lst233747233927234225)                  ; call prim_cdr
  %arg235557 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %sym240013 = add i64 0, 0                                                          ; quoted ()
  %x240014 = call i64 @prim_cons(i64 %lst233747233927, i64 %sym240013)               ; call prim_cons
  %x240015 = call i64 @prim_cons(i64 %arg235557, i64 %x240014)                       ; call prim_cons
  %cloptr251591 = inttoptr i64 %cont234224 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr251592 = getelementptr inbounds i64, i64* %cloptr251591, i64 0               ; &cloptr251591[0]
  %f251594 = load i64, i64* %i0ptr251592, align 8                                    ; load; *i0ptr251592
  %fptr251593 = inttoptr i64 %f251594 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr251593(i64 %cont234224, i64 %x240015)               ; tail call
  ret void
}


define void @lam242198(i64 %env242199, i64 %rvp240154) {
  %check240155 = call i64 @prim_null_63(i64 %rvp240154)                              ; call prim_null_63
  %cmp251595 = icmp eq i64 %check240155, 15                                          ; false?
  br i1 %cmp251595, label %else251597, label %then251596                             ; if

then251596:
  %msg240159 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str251598, i32 0, i32 0)); quoted string
  %abort240157 = call i64 @prim_halt(i64 %msg240159)                                 ; call prim_halt
  %sym240162 = add i64 0, 0                                                          ; quoted ()
  %cloptr251599 = inttoptr i64 %abort240157 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr251600 = getelementptr inbounds i64, i64* %cloptr251599, i64 0               ; &cloptr251599[0]
  %f251602 = load i64, i64* %i0ptr251600, align 8                                    ; load; *i0ptr251600
  %fptr251601 = inttoptr i64 %f251602 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr251601(i64 %abort240157, i64 %sym240162)            ; tail call
  ret void

else251597:
  %_95234212 = call i64 @prim_car(i64 %rvp240154)                                    ; call prim_car
  %rvp240144 = call i64 @prim_cdr(i64 %rvp240154)                                    ; call prim_cdr
  %check240145 = call i64 @prim_null_63(i64 %rvp240144)                              ; call prim_null_63
  %cmp251603 = icmp eq i64 %check240145, 15                                          ; false?
  br i1 %cmp251603, label %else251605, label %then251604                             ; if

then251604:
  %msg240149 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str251606, i32 0, i32 0)); quoted string
  %abort240147 = call i64 @prim_halt(i64 %msg240149)                                 ; call prim_halt
  %sym240152 = add i64 0, 0                                                          ; quoted ()
  %cloptr251607 = inttoptr i64 %abort240147 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr251608 = getelementptr inbounds i64, i64* %cloptr251607, i64 0               ; &cloptr251607[0]
  %f251610 = load i64, i64* %i0ptr251608, align 8                                    ; load; *i0ptr251608
  %fptr251609 = inttoptr i64 %f251610 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr251609(i64 %abort240147, i64 %sym240152)            ; tail call
  ret void

else251605:
  %rest240151 = call i64 @prim_cdr(i64 %rvp240144)                                   ; call prim_cdr
  %empty240146 = call i64 @prim_null_63(i64 %rest240151)                             ; call prim_null_63
  %cmp251611 = icmp eq i64 %empty240146, 15                                          ; false?
  br i1 %cmp251611, label %else251613, label %then251612                             ; if

then251612:
  %_37raise_45handler233746233926 = call i64 @prim_car(i64 %rvp240144)               ; call prim_car
  %na240017 = call i64 @prim_cdr(i64 %rvp240144)                                     ; call prim_cdr
  %cloptr251614 = call i64* @alloc(i64 8)                                            ; malloc
  %eptr251615 = getelementptr inbounds i64, i64* %cloptr251614, i64 0                ; &cloptr251614[0]
  %f251616 = ptrtoint void(i64,i64)* @lam242194 to i64                               ; fptr cast; i64(...)* -> i64
  store i64 %f251616, i64* %eptr251615                                               ; store fptr
  %arg235560 = ptrtoint i64* %cloptr251614 to i64                                    ; closure cast; i64* -> i64
  %cloptr251617 = call i64* @alloc(i64 8)                                            ; malloc
  %eptr251618 = getelementptr inbounds i64, i64* %cloptr251617, i64 0                ; &cloptr251617[0]
  %f251619 = ptrtoint void(i64,i64)* @lam242190 to i64                               ; fptr cast; i64(...)* -> i64
  store i64 %f251619, i64* %eptr251618                                               ; store fptr
  %arg235559 = ptrtoint i64* %cloptr251617 to i64                                    ; closure cast; i64* -> i64
  %sym240142 = add i64 0, 0                                                          ; quoted ()
  %x240143 = call i64 @prim_cons(i64 %arg235559, i64 %sym240142)                     ; call prim_cons
  %cloptr251620 = inttoptr i64 %arg235560 to i64*                                    ; closure/env cast; i64 -> i64*
  %i0ptr251621 = getelementptr inbounds i64, i64* %cloptr251620, i64 0               ; &cloptr251620[0]
  %f251623 = load i64, i64* %i0ptr251621, align 8                                    ; load; *i0ptr251621
  %fptr251622 = inttoptr i64 %f251623 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr251622(i64 %arg235560, i64 %x240143)                ; tail call
  ret void

else251613:
  %many240150 = call i64 @const_init_string(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @str251624, i32 0, i32 0)); quoted string
  %fail240148 = call i64 @prim_halt(i64 %many240150)                                 ; call prim_halt
  %sym240153 = add i64 0, 0                                                          ; quoted ()
  %cloptr251625 = inttoptr i64 %fail240148 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr251626 = getelementptr inbounds i64, i64* %cloptr251625, i64 0               ; &cloptr251625[0]
  %f251628 = load i64, i64* %i0ptr251626, align 8                                    ; load; *i0ptr251626
  %fptr251627 = inttoptr i64 %f251628 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr251627(i64 %fail240148, i64 %sym240153)             ; tail call
  ret void
}


define void @lam242194(i64 %env242195, i64 %lst233750233930234223) {
  %cont234222 = call i64 @prim_car(i64 %lst233750233930234223)                       ; call prim_car
  %lst233750233930 = call i64 @prim_cdr(i64 %lst233750233930234223)                  ; call prim_cdr
  %arg235564 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %sym240018 = add i64 0, 0                                                          ; quoted ()
  %x240019 = call i64 @prim_cons(i64 %lst233750233930, i64 %sym240018)               ; call prim_cons
  %x240020 = call i64 @prim_cons(i64 %arg235564, i64 %x240019)                       ; call prim_cons
  %cloptr251629 = inttoptr i64 %cont234222 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr251630 = getelementptr inbounds i64, i64* %cloptr251629, i64 0               ; &cloptr251629[0]
  %f251632 = load i64, i64* %i0ptr251630, align 8                                    ; load; *i0ptr251630
  %fptr251631 = inttoptr i64 %f251632 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr251631(i64 %cont234222, i64 %x240020)               ; tail call
  ret void
}


define void @lam242190(i64 %env242191, i64 %rvp240133) {
  %check240134 = call i64 @prim_null_63(i64 %rvp240133)                              ; call prim_null_63
  %cmp251633 = icmp eq i64 %check240134, 15                                          ; false?
  br i1 %cmp251633, label %else251635, label %then251634                             ; if

then251634:
  %msg240138 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str251636, i32 0, i32 0)); quoted string
  %abort240136 = call i64 @prim_halt(i64 %msg240138)                                 ; call prim_halt
  %sym240141 = add i64 0, 0                                                          ; quoted ()
  %cloptr251637 = inttoptr i64 %abort240136 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr251638 = getelementptr inbounds i64, i64* %cloptr251637, i64 0               ; &cloptr251637[0]
  %f251640 = load i64, i64* %i0ptr251638, align 8                                    ; load; *i0ptr251638
  %fptr251639 = inttoptr i64 %f251640 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr251639(i64 %abort240136, i64 %sym240141)            ; tail call
  ret void

else251635:
  %_95234220 = call i64 @prim_car(i64 %rvp240133)                                    ; call prim_car
  %rvp240123 = call i64 @prim_cdr(i64 %rvp240133)                                    ; call prim_cdr
  %check240124 = call i64 @prim_null_63(i64 %rvp240123)                              ; call prim_null_63
  %cmp251641 = icmp eq i64 %check240124, 15                                          ; false?
  br i1 %cmp251641, label %else251643, label %then251642                             ; if

then251642:
  %msg240128 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str251644, i32 0, i32 0)); quoted string
  %abort240126 = call i64 @prim_halt(i64 %msg240128)                                 ; call prim_halt
  %sym240131 = add i64 0, 0                                                          ; quoted ()
  %cloptr251645 = inttoptr i64 %abort240126 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr251646 = getelementptr inbounds i64, i64* %cloptr251645, i64 0               ; &cloptr251645[0]
  %f251648 = load i64, i64* %i0ptr251646, align 8                                    ; load; *i0ptr251646
  %fptr251647 = inttoptr i64 %f251648 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr251647(i64 %abort240126, i64 %sym240131)            ; tail call
  ret void

else251643:
  %rest240130 = call i64 @prim_cdr(i64 %rvp240123)                                   ; call prim_cdr
  %empty240125 = call i64 @prim_null_63(i64 %rest240130)                             ; call prim_null_63
  %cmp251649 = icmp eq i64 %empty240125, 15                                          ; false?
  br i1 %cmp251649, label %else251651, label %then251650                             ; if

then251650:
  %a234071 = call i64 @prim_car(i64 %rvp240123)                                      ; call prim_car
  %na240022 = call i64 @prim_cdr(i64 %rvp240123)                                     ; call prim_cdr
  %arg235567 = call i64 @const_init_int(i64 1)                                       ; quoted int
  %retprim234221 = call i64 @prim_make_45vector(i64 %arg235567, i64 %a234071)        ; call prim_make_45vector
  %cloptr251652 = call i64* @alloc(i64 8)                                            ; malloc
  %eptr251653 = getelementptr inbounds i64, i64* %cloptr251652, i64 0                ; &cloptr251652[0]
  %f251654 = ptrtoint void(i64,i64)* @lam242185 to i64                               ; fptr cast; i64(...)* -> i64
  store i64 %f251654, i64* %eptr251653                                               ; store fptr
  %arg235570 = ptrtoint i64* %cloptr251652 to i64                                    ; closure cast; i64* -> i64
  %arg235569 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %sym240120 = add i64 0, 0                                                          ; quoted ()
  %x240121 = call i64 @prim_cons(i64 %retprim234221, i64 %sym240120)                 ; call prim_cons
  %x240122 = call i64 @prim_cons(i64 %arg235569, i64 %x240121)                       ; call prim_cons
  %cloptr251655 = inttoptr i64 %arg235570 to i64*                                    ; closure/env cast; i64 -> i64*
  %i0ptr251656 = getelementptr inbounds i64, i64* %cloptr251655, i64 0               ; &cloptr251655[0]
  %f251658 = load i64, i64* %i0ptr251656, align 8                                    ; load; *i0ptr251656
  %fptr251657 = inttoptr i64 %f251658 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr251657(i64 %arg235570, i64 %x240122)                ; tail call
  ret void

else251651:
  %many240129 = call i64 @const_init_string(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @str251659, i32 0, i32 0)); quoted string
  %fail240127 = call i64 @prim_halt(i64 %many240129)                                 ; call prim_halt
  %sym240132 = add i64 0, 0                                                          ; quoted ()
  %cloptr251660 = inttoptr i64 %fail240127 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr251661 = getelementptr inbounds i64, i64* %cloptr251660, i64 0               ; &cloptr251660[0]
  %f251663 = load i64, i64* %i0ptr251661, align 8                                    ; load; *i0ptr251661
  %fptr251662 = inttoptr i64 %f251663 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr251662(i64 %fail240127, i64 %sym240132)             ; tail call
  ret void
}


define void @lam242185(i64 %env242186, i64 %rvp240111) {
  %check240112 = call i64 @prim_null_63(i64 %rvp240111)                              ; call prim_null_63
  %cmp251664 = icmp eq i64 %check240112, 15                                          ; false?
  br i1 %cmp251664, label %else251666, label %then251665                             ; if

then251665:
  %msg240116 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str251667, i32 0, i32 0)); quoted string
  %abort240114 = call i64 @prim_halt(i64 %msg240116)                                 ; call prim_halt
  %sym240119 = add i64 0, 0                                                          ; quoted ()
  %cloptr251668 = inttoptr i64 %abort240114 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr251669 = getelementptr inbounds i64, i64* %cloptr251668, i64 0               ; &cloptr251668[0]
  %f251671 = load i64, i64* %i0ptr251669, align 8                                    ; load; *i0ptr251669
  %fptr251670 = inttoptr i64 %f251671 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr251670(i64 %abort240114, i64 %sym240119)            ; tail call
  ret void

else251666:
  %_95234213 = call i64 @prim_car(i64 %rvp240111)                                    ; call prim_car
  %rvp240101 = call i64 @prim_cdr(i64 %rvp240111)                                    ; call prim_cdr
  %check240102 = call i64 @prim_null_63(i64 %rvp240101)                              ; call prim_null_63
  %cmp251672 = icmp eq i64 %check240102, 15                                          ; false?
  br i1 %cmp251672, label %else251674, label %then251673                             ; if

then251673:
  %msg240106 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str251675, i32 0, i32 0)); quoted string
  %abort240104 = call i64 @prim_halt(i64 %msg240106)                                 ; call prim_halt
  %sym240109 = add i64 0, 0                                                          ; quoted ()
  %cloptr251676 = inttoptr i64 %abort240104 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr251677 = getelementptr inbounds i64, i64* %cloptr251676, i64 0               ; &cloptr251676[0]
  %f251679 = load i64, i64* %i0ptr251677, align 8                                    ; load; *i0ptr251677
  %fptr251678 = inttoptr i64 %f251679 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr251678(i64 %abort240104, i64 %sym240109)            ; tail call
  ret void

else251674:
  %rest240108 = call i64 @prim_cdr(i64 %rvp240101)                                   ; call prim_cdr
  %empty240103 = call i64 @prim_null_63(i64 %rest240108)                             ; call prim_null_63
  %cmp251680 = icmp eq i64 %empty240103, 15                                          ; false?
  br i1 %cmp251680, label %else251682, label %then251681                             ; if

then251681:
  %a233748233928 = call i64 @prim_car(i64 %rvp240101)                                ; call prim_car
  %na240024 = call i64 @prim_cdr(i64 %rvp240101)                                     ; call prim_cdr
  %cloptr251683 = call i64* @alloc(i64 8)                                            ; malloc
  %eptr251684 = getelementptr inbounds i64, i64* %cloptr251683, i64 0                ; &cloptr251683[0]
  %f251685 = ptrtoint void(i64,i64)* @lam242181 to i64                               ; fptr cast; i64(...)* -> i64
  store i64 %f251685, i64* %eptr251684                                               ; store fptr
  %arg235572 = ptrtoint i64* %cloptr251683 to i64                                    ; closure cast; i64* -> i64
  %cloptr251686 = call i64* @alloc(i64 16)                                           ; malloc
  %eptr251688 = getelementptr inbounds i64, i64* %cloptr251686, i64 1                ; &eptr251688[1]
  store i64 %a233748233928, i64* %eptr251688                                         ; *eptr251688 = %a233748233928
  %eptr251687 = getelementptr inbounds i64, i64* %cloptr251686, i64 0                ; &cloptr251686[0]
  %f251689 = ptrtoint void(i64,i64)* @lam242177 to i64                               ; fptr cast; i64(...)* -> i64
  store i64 %f251689, i64* %eptr251687                                               ; store fptr
  %arg235571 = ptrtoint i64* %cloptr251686 to i64                                    ; closure cast; i64* -> i64
  %sym240099 = add i64 0, 0                                                          ; quoted ()
  %x240100 = call i64 @prim_cons(i64 %arg235571, i64 %sym240099)                     ; call prim_cons
  %cloptr251690 = inttoptr i64 %arg235572 to i64*                                    ; closure/env cast; i64 -> i64*
  %i0ptr251691 = getelementptr inbounds i64, i64* %cloptr251690, i64 0               ; &cloptr251690[0]
  %f251693 = load i64, i64* %i0ptr251691, align 8                                    ; load; *i0ptr251691
  %fptr251692 = inttoptr i64 %f251693 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr251692(i64 %arg235572, i64 %x240100)                ; tail call
  ret void

else251682:
  %many240107 = call i64 @const_init_string(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @str251694, i32 0, i32 0)); quoted string
  %fail240105 = call i64 @prim_halt(i64 %many240107)                                 ; call prim_halt
  %sym240110 = add i64 0, 0                                                          ; quoted ()
  %cloptr251695 = inttoptr i64 %fail240105 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr251696 = getelementptr inbounds i64, i64* %cloptr251695, i64 0               ; &cloptr251695[0]
  %f251698 = load i64, i64* %i0ptr251696, align 8                                    ; load; *i0ptr251696
  %fptr251697 = inttoptr i64 %f251698 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr251697(i64 %fail240105, i64 %sym240110)             ; tail call
  ret void
}


define void @lam242181(i64 %env242182, i64 %lst233751233931234219) {
  %cont234218 = call i64 @prim_car(i64 %lst233751233931234219)                       ; call prim_car
  %lst233751233931 = call i64 @prim_cdr(i64 %lst233751233931234219)                  ; call prim_cdr
  %arg235576 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %sym240025 = add i64 0, 0                                                          ; quoted ()
  %x240026 = call i64 @prim_cons(i64 %lst233751233931, i64 %sym240025)               ; call prim_cons
  %x240027 = call i64 @prim_cons(i64 %arg235576, i64 %x240026)                       ; call prim_cons
  %cloptr251699 = inttoptr i64 %cont234218 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr251700 = getelementptr inbounds i64, i64* %cloptr251699, i64 0               ; &cloptr251699[0]
  %f251702 = load i64, i64* %i0ptr251700, align 8                                    ; load; *i0ptr251700
  %fptr251701 = inttoptr i64 %f251702 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr251701(i64 %cont234218, i64 %x240027)               ; tail call
  ret void
}


define void @lam242177(i64 %env242178, i64 %rvp240090) {
  %envptr251703 = inttoptr i64 %env242178 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr251704 = getelementptr inbounds i64, i64* %envptr251703, i64 1              ; &envptr251703[1]
  %a233748233928 = load i64, i64* %envptr251704, align 8                             ; load; *envptr251704
  %check240091 = call i64 @prim_null_63(i64 %rvp240090)                              ; call prim_null_63
  %cmp251705 = icmp eq i64 %check240091, 15                                          ; false?
  br i1 %cmp251705, label %else251707, label %then251706                             ; if

then251706:
  %msg240095 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str251708, i32 0, i32 0)); quoted string
  %abort240093 = call i64 @prim_halt(i64 %msg240095)                                 ; call prim_halt
  %sym240098 = add i64 0, 0                                                          ; quoted ()
  %cloptr251709 = inttoptr i64 %abort240093 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr251710 = getelementptr inbounds i64, i64* %cloptr251709, i64 0               ; &cloptr251709[0]
  %f251712 = load i64, i64* %i0ptr251710, align 8                                    ; load; *i0ptr251710
  %fptr251711 = inttoptr i64 %f251712 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr251711(i64 %abort240093, i64 %sym240098)            ; tail call
  ret void

else251707:
  %_95234216 = call i64 @prim_car(i64 %rvp240090)                                    ; call prim_car
  %rvp240080 = call i64 @prim_cdr(i64 %rvp240090)                                    ; call prim_cdr
  %check240081 = call i64 @prim_null_63(i64 %rvp240080)                              ; call prim_null_63
  %cmp251713 = icmp eq i64 %check240081, 15                                          ; false?
  br i1 %cmp251713, label %else251715, label %then251714                             ; if

then251714:
  %msg240085 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str251716, i32 0, i32 0)); quoted string
  %abort240083 = call i64 @prim_halt(i64 %msg240085)                                 ; call prim_halt
  %sym240088 = add i64 0, 0                                                          ; quoted ()
  %cloptr251717 = inttoptr i64 %abort240083 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr251718 = getelementptr inbounds i64, i64* %cloptr251717, i64 0               ; &cloptr251717[0]
  %f251720 = load i64, i64* %i0ptr251718, align 8                                    ; load; *i0ptr251718
  %fptr251719 = inttoptr i64 %f251720 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr251719(i64 %abort240083, i64 %sym240088)            ; tail call
  ret void

else251715:
  %rest240087 = call i64 @prim_cdr(i64 %rvp240080)                                   ; call prim_cdr
  %empty240082 = call i64 @prim_null_63(i64 %rest240087)                             ; call prim_null_63
  %cmp251721 = icmp eq i64 %empty240082, 15                                          ; false?
  br i1 %cmp251721, label %else251723, label %then251722                             ; if

then251722:
  %a234072 = call i64 @prim_car(i64 %rvp240080)                                      ; call prim_car
  %na240029 = call i64 @prim_cdr(i64 %rvp240080)                                     ; call prim_cdr
  %arg235579 = call i64 @const_init_int(i64 1)                                       ; quoted int
  %retprim234217 = call i64 @prim_make_45vector(i64 %arg235579, i64 %a234072)        ; call prim_make_45vector
  %cloptr251724 = call i64* @alloc(i64 16)                                           ; malloc
  %eptr251726 = getelementptr inbounds i64, i64* %cloptr251724, i64 1                ; &eptr251726[1]
  store i64 %a233748233928, i64* %eptr251726                                         ; *eptr251726 = %a233748233928
  %eptr251725 = getelementptr inbounds i64, i64* %cloptr251724, i64 0                ; &cloptr251724[0]
  %f251727 = ptrtoint void(i64,i64)* @lam242172 to i64                               ; fptr cast; i64(...)* -> i64
  store i64 %f251727, i64* %eptr251725                                               ; store fptr
  %arg235582 = ptrtoint i64* %cloptr251724 to i64                                    ; closure cast; i64* -> i64
  %arg235581 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %sym240077 = add i64 0, 0                                                          ; quoted ()
  %x240078 = call i64 @prim_cons(i64 %retprim234217, i64 %sym240077)                 ; call prim_cons
  %x240079 = call i64 @prim_cons(i64 %arg235581, i64 %x240078)                       ; call prim_cons
  %cloptr251728 = inttoptr i64 %arg235582 to i64*                                    ; closure/env cast; i64 -> i64*
  %i0ptr251729 = getelementptr inbounds i64, i64* %cloptr251728, i64 0               ; &cloptr251728[0]
  %f251731 = load i64, i64* %i0ptr251729, align 8                                    ; load; *i0ptr251729
  %fptr251730 = inttoptr i64 %f251731 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr251730(i64 %arg235582, i64 %x240079)                ; tail call
  ret void

else251723:
  %many240086 = call i64 @const_init_string(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @str251732, i32 0, i32 0)); quoted string
  %fail240084 = call i64 @prim_halt(i64 %many240086)                                 ; call prim_halt
  %sym240089 = add i64 0, 0                                                          ; quoted ()
  %cloptr251733 = inttoptr i64 %fail240084 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr251734 = getelementptr inbounds i64, i64* %cloptr251733, i64 0               ; &cloptr251733[0]
  %f251736 = load i64, i64* %i0ptr251734, align 8                                    ; load; *i0ptr251734
  %fptr251735 = inttoptr i64 %f251736 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr251735(i64 %fail240084, i64 %sym240089)             ; tail call
  ret void
}


define void @lam242172(i64 %env242173, i64 %rvp240068) {
  %envptr251737 = inttoptr i64 %env242173 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr251738 = getelementptr inbounds i64, i64* %envptr251737, i64 1              ; &envptr251737[1]
  %a233748233928 = load i64, i64* %envptr251738, align 8                             ; load; *envptr251738
  %check240069 = call i64 @prim_null_63(i64 %rvp240068)                              ; call prim_null_63
  %cmp251739 = icmp eq i64 %check240069, 15                                          ; false?
  br i1 %cmp251739, label %else251741, label %then251740                             ; if

then251740:
  %msg240073 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str251742, i32 0, i32 0)); quoted string
  %abort240071 = call i64 @prim_halt(i64 %msg240073)                                 ; call prim_halt
  %sym240076 = add i64 0, 0                                                          ; quoted ()
  %cloptr251743 = inttoptr i64 %abort240071 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr251744 = getelementptr inbounds i64, i64* %cloptr251743, i64 0               ; &cloptr251743[0]
  %f251746 = load i64, i64* %i0ptr251744, align 8                                    ; load; *i0ptr251744
  %fptr251745 = inttoptr i64 %f251746 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr251745(i64 %abort240071, i64 %sym240076)            ; tail call
  ret void

else251741:
  %_95234214 = call i64 @prim_car(i64 %rvp240068)                                    ; call prim_car
  %rvp240058 = call i64 @prim_cdr(i64 %rvp240068)                                    ; call prim_cdr
  %check240059 = call i64 @prim_null_63(i64 %rvp240058)                              ; call prim_null_63
  %cmp251747 = icmp eq i64 %check240059, 15                                          ; false?
  br i1 %cmp251747, label %else251749, label %then251748                             ; if

then251748:
  %msg240063 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str251750, i32 0, i32 0)); quoted string
  %abort240061 = call i64 @prim_halt(i64 %msg240063)                                 ; call prim_halt
  %sym240066 = add i64 0, 0                                                          ; quoted ()
  %cloptr251751 = inttoptr i64 %abort240061 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr251752 = getelementptr inbounds i64, i64* %cloptr251751, i64 0               ; &cloptr251751[0]
  %f251754 = load i64, i64* %i0ptr251752, align 8                                    ; load; *i0ptr251752
  %fptr251753 = inttoptr i64 %f251754 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr251753(i64 %abort240061, i64 %sym240066)            ; tail call
  ret void

else251749:
  %rest240065 = call i64 @prim_cdr(i64 %rvp240058)                                   ; call prim_cdr
  %empty240060 = call i64 @prim_null_63(i64 %rest240065)                             ; call prim_null_63
  %cmp251755 = icmp eq i64 %empty240060, 15                                          ; false?
  br i1 %cmp251755, label %else251757, label %then251756                             ; if

then251756:
  %b233749233929 = call i64 @prim_car(i64 %rvp240058)                                ; call prim_car
  %na240031 = call i64 @prim_cdr(i64 %rvp240058)                                     ; call prim_cdr
  %a233578233752233932 = call i64 @const_init_int(i64 4)                             ; quoted int
  %arg235583 = call i64 @const_init_string(i8* getelementptr inbounds ([110 x i8], [110 x i8]* @str251758, i32 0, i32 0)); quoted string
  %b233579233753233933 = call i64 @prim_halt(i64 %arg235583)                         ; call prim_halt
  %arg235585 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %_95t233754233934 = call i64 @prim_vector_45set_33(i64 %a233748233928, i64 %arg235585, i64 %a233578233752233932); call prim_vector_45set_33
  %arg235588 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %_95t233755233935 = call i64 @prim_vector_45set_33(i64 %b233749233929, i64 %arg235588, i64 %b233579233753233933); call prim_vector_45set_33
  %arg235590 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %retprim234215 = call i64 @prim_vector_45ref(i64 %b233749233929, i64 %arg235590)   ; call prim_vector_45ref
  %cloptr251759 = call i64* @alloc(i64 8)                                            ; malloc
  %eptr251760 = getelementptr inbounds i64, i64* %cloptr251759, i64 0                ; &cloptr251759[0]
  %f251761 = ptrtoint void(i64,i64)* @lam242163 to i64                               ; fptr cast; i64(...)* -> i64
  store i64 %f251761, i64* %eptr251760                                               ; store fptr
  %arg235594 = ptrtoint i64* %cloptr251759 to i64                                    ; closure cast; i64* -> i64
  %arg235593 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %sym240055 = add i64 0, 0                                                          ; quoted ()
  %x240056 = call i64 @prim_cons(i64 %retprim234215, i64 %sym240055)                 ; call prim_cons
  %x240057 = call i64 @prim_cons(i64 %arg235593, i64 %x240056)                       ; call prim_cons
  %cloptr251762 = inttoptr i64 %arg235594 to i64*                                    ; closure/env cast; i64 -> i64*
  %i0ptr251763 = getelementptr inbounds i64, i64* %cloptr251762, i64 0               ; &cloptr251762[0]
  %f251765 = load i64, i64* %i0ptr251763, align 8                                    ; load; *i0ptr251763
  %fptr251764 = inttoptr i64 %f251765 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr251764(i64 %arg235594, i64 %x240057)                ; tail call
  ret void

else251757:
  %many240064 = call i64 @const_init_string(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @str251766, i32 0, i32 0)); quoted string
  %fail240062 = call i64 @prim_halt(i64 %many240064)                                 ; call prim_halt
  %sym240067 = add i64 0, 0                                                          ; quoted ()
  %cloptr251767 = inttoptr i64 %fail240062 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr251768 = getelementptr inbounds i64, i64* %cloptr251767, i64 0               ; &cloptr251767[0]
  %f251770 = load i64, i64* %i0ptr251768, align 8                                    ; load; *i0ptr251768
  %fptr251769 = inttoptr i64 %f251770 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr251769(i64 %fail240062, i64 %sym240067)             ; tail call
  ret void
}


define void @lam242163(i64 %env242164, i64 %rvp240046) {
  %check240047 = call i64 @prim_null_63(i64 %rvp240046)                              ; call prim_null_63
  %cmp251771 = icmp eq i64 %check240047, 15                                          ; false?
  br i1 %cmp251771, label %else251773, label %then251772                             ; if

then251772:
  %msg240051 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str251774, i32 0, i32 0)); quoted string
  %abort240049 = call i64 @prim_halt(i64 %msg240051)                                 ; call prim_halt
  %sym240054 = add i64 0, 0                                                          ; quoted ()
  %cloptr251775 = inttoptr i64 %abort240049 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr251776 = getelementptr inbounds i64, i64* %cloptr251775, i64 0               ; &cloptr251775[0]
  %f251778 = load i64, i64* %i0ptr251776, align 8                                    ; load; *i0ptr251776
  %fptr251777 = inttoptr i64 %f251778 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr251777(i64 %abort240049, i64 %sym240054)            ; tail call
  ret void

else251773:
  %_950 = call i64 @prim_car(i64 %rvp240046)                                         ; call prim_car
  %rvp240036 = call i64 @prim_cdr(i64 %rvp240046)                                    ; call prim_cdr
  %check240037 = call i64 @prim_null_63(i64 %rvp240036)                              ; call prim_null_63
  %cmp251779 = icmp eq i64 %check240037, 15                                          ; false?
  br i1 %cmp251779, label %else251781, label %then251780                             ; if

then251780:
  %msg240041 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str251782, i32 0, i32 0)); quoted string
  %abort240039 = call i64 @prim_halt(i64 %msg240041)                                 ; call prim_halt
  %sym240044 = add i64 0, 0                                                          ; quoted ()
  %cloptr251783 = inttoptr i64 %abort240039 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr251784 = getelementptr inbounds i64, i64* %cloptr251783, i64 0               ; &cloptr251783[0]
  %f251786 = load i64, i64* %i0ptr251784, align 8                                    ; load; *i0ptr251784
  %fptr251785 = inttoptr i64 %f251786 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr251785(i64 %abort240039, i64 %sym240044)            ; tail call
  ret void

else251781:
  %rest240043 = call i64 @prim_cdr(i64 %rvp240036)                                   ; call prim_cdr
  %empty240038 = call i64 @prim_null_63(i64 %rest240043)                             ; call prim_null_63
  %cmp251787 = icmp eq i64 %empty240038, 15                                          ; false?
  br i1 %cmp251787, label %else251789, label %then251788                             ; if

then251788:
  %x = call i64 @prim_car(i64 %rvp240036)                                            ; call prim_car
  %na240033 = call i64 @prim_cdr(i64 %rvp240036)                                     ; call prim_cdr
  %_951 = call i64 @prim_halt(i64 %x)                                                ; call prim_halt
  %sym240034 = add i64 0, 0                                                          ; quoted ()
  %x240035 = call i64 @prim_cons(i64 %_951, i64 %sym240034)                          ; call prim_cons
  %cloptr251790 = inttoptr i64 %_951 to i64*                                         ; closure/env cast; i64 -> i64*
  %i0ptr251791 = getelementptr inbounds i64, i64* %cloptr251790, i64 0               ; &cloptr251790[0]
  %f251793 = load i64, i64* %i0ptr251791, align 8                                    ; load; *i0ptr251791
  %fptr251792 = inttoptr i64 %f251793 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr251792(i64 %_951, i64 %x240035)                     ; tail call
  ret void

else251789:
  %many240042 = call i64 @const_init_string(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @str251794, i32 0, i32 0)); quoted string
  %fail240040 = call i64 @prim_halt(i64 %many240042)                                 ; call prim_halt
  %sym240045 = add i64 0, 0                                                          ; quoted ()
  %cloptr251795 = inttoptr i64 %fail240040 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr251796 = getelementptr inbounds i64, i64* %cloptr251795, i64 0               ; &cloptr251795[0]
  %f251798 = load i64, i64* %i0ptr251796, align 8                                    ; load; *i0ptr251796
  %fptr251797 = inttoptr i64 %f251798 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr251797(i64 %fail240040, i64 %sym240045)             ; tail call
  ret void
}


define void @lam242104(i64 %env242105, i64 %rvp240555) {
  %envptr251799 = inttoptr i64 %env242105 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr251800 = getelementptr inbounds i64, i64* %envptr251799, i64 3              ; &envptr251799[3]
  %_37map1233627233803 = load i64, i64* %envptr251800, align 8                       ; load; *envptr251800
  %envptr251801 = inttoptr i64 %env242105 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr251802 = getelementptr inbounds i64, i64* %envptr251801, i64 2              ; &envptr251801[2]
  %_37foldr233608233784 = load i64, i64* %envptr251802, align 8                      ; load; *envptr251802
  %envptr251803 = inttoptr i64 %env242105 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr251804 = getelementptr inbounds i64, i64* %envptr251803, i64 1              ; &envptr251803[1]
  %_37foldr1233585233761 = load i64, i64* %envptr251804, align 8                     ; load; *envptr251804
  %check240556 = call i64 @prim_null_63(i64 %rvp240555)                              ; call prim_null_63
  %cmp251805 = icmp eq i64 %check240556, 15                                          ; false?
  br i1 %cmp251805, label %else251807, label %then251806                             ; if

then251806:
  %msg240560 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str251808, i32 0, i32 0)); quoted string
  %abort240558 = call i64 @prim_halt(i64 %msg240560)                                 ; call prim_halt
  %sym240563 = add i64 0, 0                                                          ; quoted ()
  %cloptr251809 = inttoptr i64 %abort240558 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr251810 = getelementptr inbounds i64, i64* %cloptr251809, i64 0               ; &cloptr251809[0]
  %f251812 = load i64, i64* %i0ptr251810, align 8                                    ; load; *i0ptr251810
  %fptr251811 = inttoptr i64 %f251812 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr251811(i64 %abort240558, i64 %sym240563)            ; tail call
  ret void

else251807:
  %cont234234 = call i64 @prim_car(i64 %rvp240555)                                   ; call prim_car
  %rvp240545 = call i64 @prim_cdr(i64 %rvp240555)                                    ; call prim_cdr
  %check240546 = call i64 @prim_null_63(i64 %rvp240545)                              ; call prim_null_63
  %cmp251813 = icmp eq i64 %check240546, 15                                          ; false?
  br i1 %cmp251813, label %else251815, label %then251814                             ; if

then251814:
  %msg240550 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str251816, i32 0, i32 0)); quoted string
  %abort240548 = call i64 @prim_halt(i64 %msg240550)                                 ; call prim_halt
  %sym240553 = add i64 0, 0                                                          ; quoted ()
  %cloptr251817 = inttoptr i64 %abort240548 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr251818 = getelementptr inbounds i64, i64* %cloptr251817, i64 0               ; &cloptr251817[0]
  %f251820 = load i64, i64* %i0ptr251818, align 8                                    ; load; *i0ptr251818
  %fptr251819 = inttoptr i64 %f251820 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr251819(i64 %abort240548, i64 %sym240553)            ; tail call
  ret void

else251815:
  %rest240552 = call i64 @prim_cdr(i64 %rvp240545)                                   ; call prim_cdr
  %empty240547 = call i64 @prim_null_63(i64 %rest240552)                             ; call prim_null_63
  %cmp251821 = icmp eq i64 %empty240547, 15                                          ; false?
  br i1 %cmp251821, label %else251823, label %then251822                             ; if

then251822:
  %_37foldl233649233825 = call i64 @prim_car(i64 %rvp240545)                         ; call prim_car
  %na240250 = call i64 @prim_cdr(i64 %rvp240545)                                     ; call prim_cdr
  %arg235599 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %cloptr251824 = call i64* @alloc(i64 40)                                           ; malloc
  %eptr251826 = getelementptr inbounds i64, i64* %cloptr251824, i64 1                ; &eptr251826[1]
  %eptr251827 = getelementptr inbounds i64, i64* %cloptr251824, i64 2                ; &eptr251827[2]
  %eptr251828 = getelementptr inbounds i64, i64* %cloptr251824, i64 3                ; &eptr251828[3]
  %eptr251829 = getelementptr inbounds i64, i64* %cloptr251824, i64 4                ; &eptr251829[4]
  store i64 %_37foldr1233585233761, i64* %eptr251826                                 ; *eptr251826 = %_37foldr1233585233761
  store i64 %_37foldr233608233784, i64* %eptr251827                                  ; *eptr251827 = %_37foldr233608233784
  store i64 %_37foldl233649233825, i64* %eptr251828                                  ; *eptr251828 = %_37foldl233649233825
  store i64 %_37map1233627233803, i64* %eptr251829                                   ; *eptr251829 = %_37map1233627233803
  %eptr251825 = getelementptr inbounds i64, i64* %cloptr251824, i64 0                ; &cloptr251824[0]
  %f251830 = ptrtoint void(i64,i64)* @lam242099 to i64                               ; fptr cast; i64(...)* -> i64
  store i64 %f251830, i64* %eptr251825                                               ; store fptr
  %arg235598 = ptrtoint i64* %cloptr251824 to i64                                    ; closure cast; i64* -> i64
  %sym240542 = add i64 0, 0                                                          ; quoted ()
  %x240543 = call i64 @prim_cons(i64 %arg235598, i64 %sym240542)                     ; call prim_cons
  %x240544 = call i64 @prim_cons(i64 %arg235599, i64 %x240543)                       ; call prim_cons
  %cloptr251831 = inttoptr i64 %cont234234 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr251832 = getelementptr inbounds i64, i64* %cloptr251831, i64 0               ; &cloptr251831[0]
  %f251834 = load i64, i64* %i0ptr251832, align 8                                    ; load; *i0ptr251832
  %fptr251833 = inttoptr i64 %f251834 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr251833(i64 %cont234234, i64 %x240544)               ; tail call
  ret void

else251823:
  %many240551 = call i64 @const_init_string(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @str251835, i32 0, i32 0)); quoted string
  %fail240549 = call i64 @prim_halt(i64 %many240551)                                 ; call prim_halt
  %sym240554 = add i64 0, 0                                                          ; quoted ()
  %cloptr251836 = inttoptr i64 %fail240549 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr251837 = getelementptr inbounds i64, i64* %cloptr251836, i64 0               ; &cloptr251836[0]
  %f251839 = load i64, i64* %i0ptr251837, align 8                                    ; load; *i0ptr251837
  %fptr251838 = inttoptr i64 %f251839 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr251838(i64 %fail240549, i64 %sym240554)             ; tail call
  ret void
}


define void @lam242099(i64 %env242100, i64 %args233650233826234236) {
  %envptr251840 = inttoptr i64 %env242100 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr251841 = getelementptr inbounds i64, i64* %envptr251840, i64 4              ; &envptr251840[4]
  %_37map1233627233803 = load i64, i64* %envptr251841, align 8                       ; load; *envptr251841
  %envptr251842 = inttoptr i64 %env242100 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr251843 = getelementptr inbounds i64, i64* %envptr251842, i64 3              ; &envptr251842[3]
  %_37foldl233649233825 = load i64, i64* %envptr251843, align 8                      ; load; *envptr251843
  %envptr251844 = inttoptr i64 %env242100 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr251845 = getelementptr inbounds i64, i64* %envptr251844, i64 2              ; &envptr251844[2]
  %_37foldr233608233784 = load i64, i64* %envptr251845, align 8                      ; load; *envptr251845
  %envptr251846 = inttoptr i64 %env242100 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr251847 = getelementptr inbounds i64, i64* %envptr251846, i64 1              ; &envptr251846[1]
  %_37foldr1233585233761 = load i64, i64* %envptr251847, align 8                     ; load; *envptr251847
  %cont234235 = call i64 @prim_car(i64 %args233650233826234236)                      ; call prim_car
  %args233650233826 = call i64 @prim_cdr(i64 %args233650233826234236)                ; call prim_cdr
  %f233651233827 = call i64 @prim_car(i64 %args233650233826)                         ; call prim_car
  %a233976 = call i64 @prim_cdr(i64 %args233650233826)                               ; call prim_cdr
  %retprim234255 = call i64 @prim_car(i64 %a233976)                                  ; call prim_car
  %cloptr251848 = call i64* @alloc(i64 64)                                           ; malloc
  %eptr251850 = getelementptr inbounds i64, i64* %cloptr251848, i64 1                ; &eptr251850[1]
  %eptr251851 = getelementptr inbounds i64, i64* %cloptr251848, i64 2                ; &eptr251851[2]
  %eptr251852 = getelementptr inbounds i64, i64* %cloptr251848, i64 3                ; &eptr251852[3]
  %eptr251853 = getelementptr inbounds i64, i64* %cloptr251848, i64 4                ; &eptr251853[4]
  %eptr251854 = getelementptr inbounds i64, i64* %cloptr251848, i64 5                ; &eptr251854[5]
  %eptr251855 = getelementptr inbounds i64, i64* %cloptr251848, i64 6                ; &eptr251855[6]
  %eptr251856 = getelementptr inbounds i64, i64* %cloptr251848, i64 7                ; &eptr251856[7]
  store i64 %f233651233827, i64* %eptr251850                                         ; *eptr251850 = %f233651233827
  store i64 %args233650233826, i64* %eptr251851                                      ; *eptr251851 = %args233650233826
  store i64 %_37foldr1233585233761, i64* %eptr251852                                 ; *eptr251852 = %_37foldr1233585233761
  store i64 %_37foldr233608233784, i64* %eptr251853                                  ; *eptr251853 = %_37foldr233608233784
  store i64 %cont234235, i64* %eptr251854                                            ; *eptr251854 = %cont234235
  store i64 %_37foldl233649233825, i64* %eptr251855                                  ; *eptr251855 = %_37foldl233649233825
  store i64 %_37map1233627233803, i64* %eptr251856                                   ; *eptr251856 = %_37map1233627233803
  %eptr251849 = getelementptr inbounds i64, i64* %cloptr251848, i64 0                ; &cloptr251848[0]
  %f251857 = ptrtoint void(i64,i64)* @lam242097 to i64                               ; fptr cast; i64(...)* -> i64
  store i64 %f251857, i64* %eptr251849                                               ; store fptr
  %arg235608 = ptrtoint i64* %cloptr251848 to i64                                    ; closure cast; i64* -> i64
  %arg235607 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %sym240539 = add i64 0, 0                                                          ; quoted ()
  %x240540 = call i64 @prim_cons(i64 %retprim234255, i64 %sym240539)                 ; call prim_cons
  %x240541 = call i64 @prim_cons(i64 %arg235607, i64 %x240540)                       ; call prim_cons
  %cloptr251858 = inttoptr i64 %arg235608 to i64*                                    ; closure/env cast; i64 -> i64*
  %i0ptr251859 = getelementptr inbounds i64, i64* %cloptr251858, i64 0               ; &cloptr251858[0]
  %f251861 = load i64, i64* %i0ptr251859, align 8                                    ; load; *i0ptr251859
  %fptr251860 = inttoptr i64 %f251861 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr251860(i64 %arg235608, i64 %x240541)                ; tail call
  ret void
}


define void @lam242097(i64 %env242098, i64 %rvp240530) {
  %envptr251862 = inttoptr i64 %env242098 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr251863 = getelementptr inbounds i64, i64* %envptr251862, i64 7              ; &envptr251862[7]
  %_37map1233627233803 = load i64, i64* %envptr251863, align 8                       ; load; *envptr251863
  %envptr251864 = inttoptr i64 %env242098 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr251865 = getelementptr inbounds i64, i64* %envptr251864, i64 6              ; &envptr251864[6]
  %_37foldl233649233825 = load i64, i64* %envptr251865, align 8                      ; load; *envptr251865
  %envptr251866 = inttoptr i64 %env242098 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr251867 = getelementptr inbounds i64, i64* %envptr251866, i64 5              ; &envptr251866[5]
  %cont234235 = load i64, i64* %envptr251867, align 8                                ; load; *envptr251867
  %envptr251868 = inttoptr i64 %env242098 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr251869 = getelementptr inbounds i64, i64* %envptr251868, i64 4              ; &envptr251868[4]
  %_37foldr233608233784 = load i64, i64* %envptr251869, align 8                      ; load; *envptr251869
  %envptr251870 = inttoptr i64 %env242098 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr251871 = getelementptr inbounds i64, i64* %envptr251870, i64 3              ; &envptr251870[3]
  %_37foldr1233585233761 = load i64, i64* %envptr251871, align 8                     ; load; *envptr251871
  %envptr251872 = inttoptr i64 %env242098 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr251873 = getelementptr inbounds i64, i64* %envptr251872, i64 2              ; &envptr251872[2]
  %args233650233826 = load i64, i64* %envptr251873, align 8                          ; load; *envptr251873
  %envptr251874 = inttoptr i64 %env242098 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr251875 = getelementptr inbounds i64, i64* %envptr251874, i64 1              ; &envptr251874[1]
  %f233651233827 = load i64, i64* %envptr251875, align 8                             ; load; *envptr251875
  %check240531 = call i64 @prim_null_63(i64 %rvp240530)                              ; call prim_null_63
  %cmp251876 = icmp eq i64 %check240531, 15                                          ; false?
  br i1 %cmp251876, label %else251878, label %then251877                             ; if

then251877:
  %msg240535 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str251879, i32 0, i32 0)); quoted string
  %abort240533 = call i64 @prim_halt(i64 %msg240535)                                 ; call prim_halt
  %sym240538 = add i64 0, 0                                                          ; quoted ()
  %cloptr251880 = inttoptr i64 %abort240533 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr251881 = getelementptr inbounds i64, i64* %cloptr251880, i64 0               ; &cloptr251880[0]
  %f251883 = load i64, i64* %i0ptr251881, align 8                                    ; load; *i0ptr251881
  %fptr251882 = inttoptr i64 %f251883 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr251882(i64 %abort240533, i64 %sym240538)            ; tail call
  ret void

else251878:
  %_95234237 = call i64 @prim_car(i64 %rvp240530)                                    ; call prim_car
  %rvp240520 = call i64 @prim_cdr(i64 %rvp240530)                                    ; call prim_cdr
  %check240521 = call i64 @prim_null_63(i64 %rvp240520)                              ; call prim_null_63
  %cmp251884 = icmp eq i64 %check240521, 15                                          ; false?
  br i1 %cmp251884, label %else251886, label %then251885                             ; if

then251885:
  %msg240525 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str251887, i32 0, i32 0)); quoted string
  %abort240523 = call i64 @prim_halt(i64 %msg240525)                                 ; call prim_halt
  %sym240528 = add i64 0, 0                                                          ; quoted ()
  %cloptr251888 = inttoptr i64 %abort240523 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr251889 = getelementptr inbounds i64, i64* %cloptr251888, i64 0               ; &cloptr251888[0]
  %f251891 = load i64, i64* %i0ptr251889, align 8                                    ; load; *i0ptr251889
  %fptr251890 = inttoptr i64 %f251891 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr251890(i64 %abort240523, i64 %sym240528)            ; tail call
  ret void

else251886:
  %rest240527 = call i64 @prim_cdr(i64 %rvp240520)                                   ; call prim_cdr
  %empty240522 = call i64 @prim_null_63(i64 %rest240527)                             ; call prim_null_63
  %cmp251892 = icmp eq i64 %empty240522, 15                                          ; false?
  br i1 %cmp251892, label %else251894, label %then251893                             ; if

then251893:
  %acc233652233828 = call i64 @prim_car(i64 %rvp240520)                              ; call prim_car
  %na240252 = call i64 @prim_cdr(i64 %rvp240520)                                     ; call prim_cdr
  %a233977 = call i64 @prim_cdr(i64 %args233650233826)                               ; call prim_cdr
  %retprim234254 = call i64 @prim_cdr(i64 %a233977)                                  ; call prim_cdr
  %cloptr251895 = call i64* @alloc(i64 64)                                           ; malloc
  %eptr251897 = getelementptr inbounds i64, i64* %cloptr251895, i64 1                ; &eptr251897[1]
  %eptr251898 = getelementptr inbounds i64, i64* %cloptr251895, i64 2                ; &eptr251898[2]
  %eptr251899 = getelementptr inbounds i64, i64* %cloptr251895, i64 3                ; &eptr251899[3]
  %eptr251900 = getelementptr inbounds i64, i64* %cloptr251895, i64 4                ; &eptr251900[4]
  %eptr251901 = getelementptr inbounds i64, i64* %cloptr251895, i64 5                ; &eptr251901[5]
  %eptr251902 = getelementptr inbounds i64, i64* %cloptr251895, i64 6                ; &eptr251902[6]
  %eptr251903 = getelementptr inbounds i64, i64* %cloptr251895, i64 7                ; &eptr251903[7]
  store i64 %acc233652233828, i64* %eptr251897                                       ; *eptr251897 = %acc233652233828
  store i64 %f233651233827, i64* %eptr251898                                         ; *eptr251898 = %f233651233827
  store i64 %_37foldr1233585233761, i64* %eptr251899                                 ; *eptr251899 = %_37foldr1233585233761
  store i64 %_37foldr233608233784, i64* %eptr251900                                  ; *eptr251900 = %_37foldr233608233784
  store i64 %cont234235, i64* %eptr251901                                            ; *eptr251901 = %cont234235
  store i64 %_37foldl233649233825, i64* %eptr251902                                  ; *eptr251902 = %_37foldl233649233825
  store i64 %_37map1233627233803, i64* %eptr251903                                   ; *eptr251903 = %_37map1233627233803
  %eptr251896 = getelementptr inbounds i64, i64* %cloptr251895, i64 0                ; &cloptr251895[0]
  %f251904 = ptrtoint void(i64,i64)* @lam242093 to i64                               ; fptr cast; i64(...)* -> i64
  store i64 %f251904, i64* %eptr251896                                               ; store fptr
  %arg235613 = ptrtoint i64* %cloptr251895 to i64                                    ; closure cast; i64* -> i64
  %arg235612 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %sym240517 = add i64 0, 0                                                          ; quoted ()
  %x240518 = call i64 @prim_cons(i64 %retprim234254, i64 %sym240517)                 ; call prim_cons
  %x240519 = call i64 @prim_cons(i64 %arg235612, i64 %x240518)                       ; call prim_cons
  %cloptr251905 = inttoptr i64 %arg235613 to i64*                                    ; closure/env cast; i64 -> i64*
  %i0ptr251906 = getelementptr inbounds i64, i64* %cloptr251905, i64 0               ; &cloptr251905[0]
  %f251908 = load i64, i64* %i0ptr251906, align 8                                    ; load; *i0ptr251906
  %fptr251907 = inttoptr i64 %f251908 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr251907(i64 %arg235613, i64 %x240519)                ; tail call
  ret void

else251894:
  %many240526 = call i64 @const_init_string(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @str251909, i32 0, i32 0)); quoted string
  %fail240524 = call i64 @prim_halt(i64 %many240526)                                 ; call prim_halt
  %sym240529 = add i64 0, 0                                                          ; quoted ()
  %cloptr251910 = inttoptr i64 %fail240524 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr251911 = getelementptr inbounds i64, i64* %cloptr251910, i64 0               ; &cloptr251910[0]
  %f251913 = load i64, i64* %i0ptr251911, align 8                                    ; load; *i0ptr251911
  %fptr251912 = inttoptr i64 %f251913 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr251912(i64 %fail240524, i64 %sym240529)             ; tail call
  ret void
}


define void @lam242093(i64 %env242094, i64 %rvp240508) {
  %envptr251914 = inttoptr i64 %env242094 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr251915 = getelementptr inbounds i64, i64* %envptr251914, i64 7              ; &envptr251914[7]
  %_37map1233627233803 = load i64, i64* %envptr251915, align 8                       ; load; *envptr251915
  %envptr251916 = inttoptr i64 %env242094 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr251917 = getelementptr inbounds i64, i64* %envptr251916, i64 6              ; &envptr251916[6]
  %_37foldl233649233825 = load i64, i64* %envptr251917, align 8                      ; load; *envptr251917
  %envptr251918 = inttoptr i64 %env242094 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr251919 = getelementptr inbounds i64, i64* %envptr251918, i64 5              ; &envptr251918[5]
  %cont234235 = load i64, i64* %envptr251919, align 8                                ; load; *envptr251919
  %envptr251920 = inttoptr i64 %env242094 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr251921 = getelementptr inbounds i64, i64* %envptr251920, i64 4              ; &envptr251920[4]
  %_37foldr233608233784 = load i64, i64* %envptr251921, align 8                      ; load; *envptr251921
  %envptr251922 = inttoptr i64 %env242094 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr251923 = getelementptr inbounds i64, i64* %envptr251922, i64 3              ; &envptr251922[3]
  %_37foldr1233585233761 = load i64, i64* %envptr251923, align 8                     ; load; *envptr251923
  %envptr251924 = inttoptr i64 %env242094 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr251925 = getelementptr inbounds i64, i64* %envptr251924, i64 2              ; &envptr251924[2]
  %f233651233827 = load i64, i64* %envptr251925, align 8                             ; load; *envptr251925
  %envptr251926 = inttoptr i64 %env242094 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr251927 = getelementptr inbounds i64, i64* %envptr251926, i64 1              ; &envptr251926[1]
  %acc233652233828 = load i64, i64* %envptr251927, align 8                           ; load; *envptr251927
  %check240509 = call i64 @prim_null_63(i64 %rvp240508)                              ; call prim_null_63
  %cmp251928 = icmp eq i64 %check240509, 15                                          ; false?
  br i1 %cmp251928, label %else251930, label %then251929                             ; if

then251929:
  %msg240513 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str251931, i32 0, i32 0)); quoted string
  %abort240511 = call i64 @prim_halt(i64 %msg240513)                                 ; call prim_halt
  %sym240516 = add i64 0, 0                                                          ; quoted ()
  %cloptr251932 = inttoptr i64 %abort240511 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr251933 = getelementptr inbounds i64, i64* %cloptr251932, i64 0               ; &cloptr251932[0]
  %f251935 = load i64, i64* %i0ptr251933, align 8                                    ; load; *i0ptr251933
  %fptr251934 = inttoptr i64 %f251935 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr251934(i64 %abort240511, i64 %sym240516)            ; tail call
  ret void

else251930:
  %_95234238 = call i64 @prim_car(i64 %rvp240508)                                    ; call prim_car
  %rvp240498 = call i64 @prim_cdr(i64 %rvp240508)                                    ; call prim_cdr
  %check240499 = call i64 @prim_null_63(i64 %rvp240498)                              ; call prim_null_63
  %cmp251936 = icmp eq i64 %check240499, 15                                          ; false?
  br i1 %cmp251936, label %else251938, label %then251937                             ; if

then251937:
  %msg240503 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str251939, i32 0, i32 0)); quoted string
  %abort240501 = call i64 @prim_halt(i64 %msg240503)                                 ; call prim_halt
  %sym240506 = add i64 0, 0                                                          ; quoted ()
  %cloptr251940 = inttoptr i64 %abort240501 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr251941 = getelementptr inbounds i64, i64* %cloptr251940, i64 0               ; &cloptr251940[0]
  %f251943 = load i64, i64* %i0ptr251941, align 8                                    ; load; *i0ptr251941
  %fptr251942 = inttoptr i64 %f251943 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr251942(i64 %abort240501, i64 %sym240506)            ; tail call
  ret void

else251938:
  %rest240505 = call i64 @prim_cdr(i64 %rvp240498)                                   ; call prim_cdr
  %empty240500 = call i64 @prim_null_63(i64 %rest240505)                             ; call prim_null_63
  %cmp251944 = icmp eq i64 %empty240500, 15                                          ; false?
  br i1 %cmp251944, label %else251946, label %then251945                             ; if

then251945:
  %lsts233653233829 = call i64 @prim_car(i64 %rvp240498)                             ; call prim_car
  %na240254 = call i64 @prim_cdr(i64 %rvp240498)                                     ; call prim_cdr
  %cloptr251947 = call i64* @alloc(i64 64)                                           ; malloc
  %eptr251949 = getelementptr inbounds i64, i64* %cloptr251947, i64 1                ; &eptr251949[1]
  %eptr251950 = getelementptr inbounds i64, i64* %cloptr251947, i64 2                ; &eptr251950[2]
  %eptr251951 = getelementptr inbounds i64, i64* %cloptr251947, i64 3                ; &eptr251951[3]
  %eptr251952 = getelementptr inbounds i64, i64* %cloptr251947, i64 4                ; &eptr251952[4]
  %eptr251953 = getelementptr inbounds i64, i64* %cloptr251947, i64 5                ; &eptr251953[5]
  %eptr251954 = getelementptr inbounds i64, i64* %cloptr251947, i64 6                ; &eptr251954[6]
  %eptr251955 = getelementptr inbounds i64, i64* %cloptr251947, i64 7                ; &eptr251955[7]
  store i64 %lsts233653233829, i64* %eptr251949                                      ; *eptr251949 = %lsts233653233829
  store i64 %acc233652233828, i64* %eptr251950                                       ; *eptr251950 = %acc233652233828
  store i64 %f233651233827, i64* %eptr251951                                         ; *eptr251951 = %f233651233827
  store i64 %_37foldr233608233784, i64* %eptr251952                                  ; *eptr251952 = %_37foldr233608233784
  store i64 %cont234235, i64* %eptr251953                                            ; *eptr251953 = %cont234235
  store i64 %_37foldl233649233825, i64* %eptr251954                                  ; *eptr251954 = %_37foldl233649233825
  store i64 %_37map1233627233803, i64* %eptr251955                                   ; *eptr251955 = %_37map1233627233803
  %eptr251948 = getelementptr inbounds i64, i64* %cloptr251947, i64 0                ; &cloptr251947[0]
  %f251956 = ptrtoint void(i64,i64)* @lam242089 to i64                               ; fptr cast; i64(...)* -> i64
  store i64 %f251956, i64* %eptr251948                                               ; store fptr
  %arg235617 = ptrtoint i64* %cloptr251947 to i64                                    ; closure cast; i64* -> i64
  %cloptr251957 = call i64* @alloc(i64 8)                                            ; malloc
  %eptr251958 = getelementptr inbounds i64, i64* %cloptr251957, i64 0                ; &cloptr251957[0]
  %f251959 = ptrtoint void(i64,i64)* @lam242011 to i64                               ; fptr cast; i64(...)* -> i64
  store i64 %f251959, i64* %eptr251958                                               ; store fptr
  %arg235616 = ptrtoint i64* %cloptr251957 to i64                                    ; closure cast; i64* -> i64
  %arg235615 = call i64 @const_init_false()                                          ; quoted #f
  %sym240493 = add i64 0, 0                                                          ; quoted ()
  %x240494 = call i64 @prim_cons(i64 %lsts233653233829, i64 %sym240493)              ; call prim_cons
  %x240495 = call i64 @prim_cons(i64 %arg235615, i64 %x240494)                       ; call prim_cons
  %x240496 = call i64 @prim_cons(i64 %arg235616, i64 %x240495)                       ; call prim_cons
  %x240497 = call i64 @prim_cons(i64 %arg235617, i64 %x240496)                       ; call prim_cons
  %cloptr251960 = inttoptr i64 %_37foldr1233585233761 to i64*                        ; closure/env cast; i64 -> i64*
  %i0ptr251961 = getelementptr inbounds i64, i64* %cloptr251960, i64 0               ; &cloptr251960[0]
  %f251963 = load i64, i64* %i0ptr251961, align 8                                    ; load; *i0ptr251961
  %fptr251962 = inttoptr i64 %f251963 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr251962(i64 %_37foldr1233585233761, i64 %x240497)    ; tail call
  ret void

else251946:
  %many240504 = call i64 @const_init_string(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @str251964, i32 0, i32 0)); quoted string
  %fail240502 = call i64 @prim_halt(i64 %many240504)                                 ; call prim_halt
  %sym240507 = add i64 0, 0                                                          ; quoted ()
  %cloptr251965 = inttoptr i64 %fail240502 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr251966 = getelementptr inbounds i64, i64* %cloptr251965, i64 0               ; &cloptr251965[0]
  %f251968 = load i64, i64* %i0ptr251966, align 8                                    ; load; *i0ptr251966
  %fptr251967 = inttoptr i64 %f251968 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr251967(i64 %fail240502, i64 %sym240507)             ; tail call
  ret void
}


define void @lam242089(i64 %env242090, i64 %rvp240448) {
  %envptr251969 = inttoptr i64 %env242090 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr251970 = getelementptr inbounds i64, i64* %envptr251969, i64 7              ; &envptr251969[7]
  %_37map1233627233803 = load i64, i64* %envptr251970, align 8                       ; load; *envptr251970
  %envptr251971 = inttoptr i64 %env242090 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr251972 = getelementptr inbounds i64, i64* %envptr251971, i64 6              ; &envptr251971[6]
  %_37foldl233649233825 = load i64, i64* %envptr251972, align 8                      ; load; *envptr251972
  %envptr251973 = inttoptr i64 %env242090 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr251974 = getelementptr inbounds i64, i64* %envptr251973, i64 5              ; &envptr251973[5]
  %cont234235 = load i64, i64* %envptr251974, align 8                                ; load; *envptr251974
  %envptr251975 = inttoptr i64 %env242090 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr251976 = getelementptr inbounds i64, i64* %envptr251975, i64 4              ; &envptr251975[4]
  %_37foldr233608233784 = load i64, i64* %envptr251976, align 8                      ; load; *envptr251976
  %envptr251977 = inttoptr i64 %env242090 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr251978 = getelementptr inbounds i64, i64* %envptr251977, i64 3              ; &envptr251977[3]
  %f233651233827 = load i64, i64* %envptr251978, align 8                             ; load; *envptr251978
  %envptr251979 = inttoptr i64 %env242090 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr251980 = getelementptr inbounds i64, i64* %envptr251979, i64 2              ; &envptr251979[2]
  %acc233652233828 = load i64, i64* %envptr251980, align 8                           ; load; *envptr251980
  %envptr251981 = inttoptr i64 %env242090 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr251982 = getelementptr inbounds i64, i64* %envptr251981, i64 1              ; &envptr251981[1]
  %lsts233653233829 = load i64, i64* %envptr251982, align 8                          ; load; *envptr251982
  %check240449 = call i64 @prim_null_63(i64 %rvp240448)                              ; call prim_null_63
  %cmp251983 = icmp eq i64 %check240449, 15                                          ; false?
  br i1 %cmp251983, label %else251985, label %then251984                             ; if

then251984:
  %msg240453 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str251986, i32 0, i32 0)); quoted string
  %abort240451 = call i64 @prim_halt(i64 %msg240453)                                 ; call prim_halt
  %sym240456 = add i64 0, 0                                                          ; quoted ()
  %cloptr251987 = inttoptr i64 %abort240451 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr251988 = getelementptr inbounds i64, i64* %cloptr251987, i64 0               ; &cloptr251987[0]
  %f251990 = load i64, i64* %i0ptr251988, align 8                                    ; load; *i0ptr251988
  %fptr251989 = inttoptr i64 %f251990 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr251989(i64 %abort240451, i64 %sym240456)            ; tail call
  ret void

else251985:
  %_95234239 = call i64 @prim_car(i64 %rvp240448)                                    ; call prim_car
  %rvp240438 = call i64 @prim_cdr(i64 %rvp240448)                                    ; call prim_cdr
  %check240439 = call i64 @prim_null_63(i64 %rvp240438)                              ; call prim_null_63
  %cmp251991 = icmp eq i64 %check240439, 15                                          ; false?
  br i1 %cmp251991, label %else251993, label %then251992                             ; if

then251992:
  %msg240443 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str251994, i32 0, i32 0)); quoted string
  %abort240441 = call i64 @prim_halt(i64 %msg240443)                                 ; call prim_halt
  %sym240446 = add i64 0, 0                                                          ; quoted ()
  %cloptr251995 = inttoptr i64 %abort240441 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr251996 = getelementptr inbounds i64, i64* %cloptr251995, i64 0               ; &cloptr251995[0]
  %f251998 = load i64, i64* %i0ptr251996, align 8                                    ; load; *i0ptr251996
  %fptr251997 = inttoptr i64 %f251998 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr251997(i64 %abort240441, i64 %sym240446)            ; tail call
  ret void

else251993:
  %rest240445 = call i64 @prim_cdr(i64 %rvp240438)                                   ; call prim_cdr
  %empty240440 = call i64 @prim_null_63(i64 %rest240445)                             ; call prim_null_63
  %cmp251999 = icmp eq i64 %empty240440, 15                                          ; false?
  br i1 %cmp251999, label %else252001, label %then252000                             ; if

then252000:
  %a233978 = call i64 @prim_car(i64 %rvp240438)                                      ; call prim_car
  %na240256 = call i64 @prim_cdr(i64 %rvp240438)                                     ; call prim_cdr
  %cmp252002 = icmp eq i64 %a233978, 15                                              ; false?
  br i1 %cmp252002, label %else252004, label %then252003                             ; if

then252003:
  %arg235620 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %sym240257 = add i64 0, 0                                                          ; quoted ()
  %x240258 = call i64 @prim_cons(i64 %acc233652233828, i64 %sym240257)               ; call prim_cons
  %x240259 = call i64 @prim_cons(i64 %arg235620, i64 %x240258)                       ; call prim_cons
  %cloptr252005 = inttoptr i64 %cont234235 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr252006 = getelementptr inbounds i64, i64* %cloptr252005, i64 0               ; &cloptr252005[0]
  %f252008 = load i64, i64* %i0ptr252006, align 8                                    ; load; *i0ptr252006
  %fptr252007 = inttoptr i64 %f252008 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr252007(i64 %cont234235, i64 %x240259)               ; tail call
  ret void

else252004:
  %cloptr252009 = call i64* @alloc(i64 64)                                           ; malloc
  %eptr252011 = getelementptr inbounds i64, i64* %cloptr252009, i64 1                ; &eptr252011[1]
  %eptr252012 = getelementptr inbounds i64, i64* %cloptr252009, i64 2                ; &eptr252012[2]
  %eptr252013 = getelementptr inbounds i64, i64* %cloptr252009, i64 3                ; &eptr252013[3]
  %eptr252014 = getelementptr inbounds i64, i64* %cloptr252009, i64 4                ; &eptr252014[4]
  %eptr252015 = getelementptr inbounds i64, i64* %cloptr252009, i64 5                ; &eptr252015[5]
  %eptr252016 = getelementptr inbounds i64, i64* %cloptr252009, i64 6                ; &eptr252016[6]
  %eptr252017 = getelementptr inbounds i64, i64* %cloptr252009, i64 7                ; &eptr252017[7]
  store i64 %lsts233653233829, i64* %eptr252011                                      ; *eptr252011 = %lsts233653233829
  store i64 %acc233652233828, i64* %eptr252012                                       ; *eptr252012 = %acc233652233828
  store i64 %f233651233827, i64* %eptr252013                                         ; *eptr252013 = %f233651233827
  store i64 %_37foldr233608233784, i64* %eptr252014                                  ; *eptr252014 = %_37foldr233608233784
  store i64 %cont234235, i64* %eptr252015                                            ; *eptr252015 = %cont234235
  store i64 %_37foldl233649233825, i64* %eptr252016                                  ; *eptr252016 = %_37foldl233649233825
  store i64 %_37map1233627233803, i64* %eptr252017                                   ; *eptr252017 = %_37map1233627233803
  %eptr252010 = getelementptr inbounds i64, i64* %cloptr252009, i64 0                ; &cloptr252009[0]
  %f252018 = ptrtoint void(i64,i64)* @lam242085 to i64                               ; fptr cast; i64(...)* -> i64
  store i64 %f252018, i64* %eptr252010                                               ; store fptr
  %arg235624 = ptrtoint i64* %cloptr252009 to i64                                    ; closure cast; i64* -> i64
  %cloptr252019 = call i64* @alloc(i64 8)                                            ; malloc
  %eptr252020 = getelementptr inbounds i64, i64* %cloptr252019, i64 0                ; &cloptr252019[0]
  %f252021 = ptrtoint void(i64,i64)* @lam242028 to i64                               ; fptr cast; i64(...)* -> i64
  store i64 %f252021, i64* %eptr252020                                               ; store fptr
  %arg235623 = ptrtoint i64* %cloptr252019 to i64                                    ; closure cast; i64* -> i64
  %sym240434 = add i64 0, 0                                                          ; quoted ()
  %x240435 = call i64 @prim_cons(i64 %lsts233653233829, i64 %sym240434)              ; call prim_cons
  %x240436 = call i64 @prim_cons(i64 %arg235623, i64 %x240435)                       ; call prim_cons
  %x240437 = call i64 @prim_cons(i64 %arg235624, i64 %x240436)                       ; call prim_cons
  %cloptr252022 = inttoptr i64 %_37map1233627233803 to i64*                          ; closure/env cast; i64 -> i64*
  %i0ptr252023 = getelementptr inbounds i64, i64* %cloptr252022, i64 0               ; &cloptr252022[0]
  %f252025 = load i64, i64* %i0ptr252023, align 8                                    ; load; *i0ptr252023
  %fptr252024 = inttoptr i64 %f252025 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr252024(i64 %_37map1233627233803, i64 %x240437)      ; tail call
  ret void

else252001:
  %many240444 = call i64 @const_init_string(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @str252026, i32 0, i32 0)); quoted string
  %fail240442 = call i64 @prim_halt(i64 %many240444)                                 ; call prim_halt
  %sym240447 = add i64 0, 0                                                          ; quoted ()
  %cloptr252027 = inttoptr i64 %fail240442 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr252028 = getelementptr inbounds i64, i64* %cloptr252027, i64 0               ; &cloptr252027[0]
  %f252030 = load i64, i64* %i0ptr252028, align 8                                    ; load; *i0ptr252028
  %fptr252029 = inttoptr i64 %f252030 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr252029(i64 %fail240442, i64 %sym240447)             ; tail call
  ret void
}


define void @lam242085(i64 %env242086, i64 %rvp240401) {
  %envptr252031 = inttoptr i64 %env242086 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr252032 = getelementptr inbounds i64, i64* %envptr252031, i64 7              ; &envptr252031[7]
  %_37map1233627233803 = load i64, i64* %envptr252032, align 8                       ; load; *envptr252032
  %envptr252033 = inttoptr i64 %env242086 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr252034 = getelementptr inbounds i64, i64* %envptr252033, i64 6              ; &envptr252033[6]
  %_37foldl233649233825 = load i64, i64* %envptr252034, align 8                      ; load; *envptr252034
  %envptr252035 = inttoptr i64 %env242086 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr252036 = getelementptr inbounds i64, i64* %envptr252035, i64 5              ; &envptr252035[5]
  %cont234235 = load i64, i64* %envptr252036, align 8                                ; load; *envptr252036
  %envptr252037 = inttoptr i64 %env242086 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr252038 = getelementptr inbounds i64, i64* %envptr252037, i64 4              ; &envptr252037[4]
  %_37foldr233608233784 = load i64, i64* %envptr252038, align 8                      ; load; *envptr252038
  %envptr252039 = inttoptr i64 %env242086 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr252040 = getelementptr inbounds i64, i64* %envptr252039, i64 3              ; &envptr252039[3]
  %f233651233827 = load i64, i64* %envptr252040, align 8                             ; load; *envptr252040
  %envptr252041 = inttoptr i64 %env242086 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr252042 = getelementptr inbounds i64, i64* %envptr252041, i64 2              ; &envptr252041[2]
  %acc233652233828 = load i64, i64* %envptr252042, align 8                           ; load; *envptr252042
  %envptr252043 = inttoptr i64 %env242086 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr252044 = getelementptr inbounds i64, i64* %envptr252043, i64 1              ; &envptr252043[1]
  %lsts233653233829 = load i64, i64* %envptr252044, align 8                          ; load; *envptr252044
  %check240402 = call i64 @prim_null_63(i64 %rvp240401)                              ; call prim_null_63
  %cmp252045 = icmp eq i64 %check240402, 15                                          ; false?
  br i1 %cmp252045, label %else252047, label %then252046                             ; if

then252046:
  %msg240406 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str252048, i32 0, i32 0)); quoted string
  %abort240404 = call i64 @prim_halt(i64 %msg240406)                                 ; call prim_halt
  %sym240409 = add i64 0, 0                                                          ; quoted ()
  %cloptr252049 = inttoptr i64 %abort240404 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr252050 = getelementptr inbounds i64, i64* %cloptr252049, i64 0               ; &cloptr252049[0]
  %f252052 = load i64, i64* %i0ptr252050, align 8                                    ; load; *i0ptr252050
  %fptr252051 = inttoptr i64 %f252052 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr252051(i64 %abort240404, i64 %sym240409)            ; tail call
  ret void

else252047:
  %_95234240 = call i64 @prim_car(i64 %rvp240401)                                    ; call prim_car
  %rvp240391 = call i64 @prim_cdr(i64 %rvp240401)                                    ; call prim_cdr
  %check240392 = call i64 @prim_null_63(i64 %rvp240391)                              ; call prim_null_63
  %cmp252053 = icmp eq i64 %check240392, 15                                          ; false?
  br i1 %cmp252053, label %else252055, label %then252054                             ; if

then252054:
  %msg240396 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str252056, i32 0, i32 0)); quoted string
  %abort240394 = call i64 @prim_halt(i64 %msg240396)                                 ; call prim_halt
  %sym240399 = add i64 0, 0                                                          ; quoted ()
  %cloptr252057 = inttoptr i64 %abort240394 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr252058 = getelementptr inbounds i64, i64* %cloptr252057, i64 0               ; &cloptr252057[0]
  %f252060 = load i64, i64* %i0ptr252058, align 8                                    ; load; *i0ptr252058
  %fptr252059 = inttoptr i64 %f252060 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr252059(i64 %abort240394, i64 %sym240399)            ; tail call
  ret void

else252055:
  %rest240398 = call i64 @prim_cdr(i64 %rvp240391)                                   ; call prim_cdr
  %empty240393 = call i64 @prim_null_63(i64 %rest240398)                             ; call prim_null_63
  %cmp252061 = icmp eq i64 %empty240393, 15                                          ; false?
  br i1 %cmp252061, label %else252063, label %then252062                             ; if

then252062:
  %lsts_43233656233832 = call i64 @prim_car(i64 %rvp240391)                          ; call prim_car
  %na240261 = call i64 @prim_cdr(i64 %rvp240391)                                     ; call prim_cdr
  %cloptr252064 = call i64* @alloc(i64 56)                                           ; malloc
  %eptr252066 = getelementptr inbounds i64, i64* %cloptr252064, i64 1                ; &eptr252066[1]
  %eptr252067 = getelementptr inbounds i64, i64* %cloptr252064, i64 2                ; &eptr252067[2]
  %eptr252068 = getelementptr inbounds i64, i64* %cloptr252064, i64 3                ; &eptr252068[3]
  %eptr252069 = getelementptr inbounds i64, i64* %cloptr252064, i64 4                ; &eptr252069[4]
  %eptr252070 = getelementptr inbounds i64, i64* %cloptr252064, i64 5                ; &eptr252070[5]
  %eptr252071 = getelementptr inbounds i64, i64* %cloptr252064, i64 6                ; &eptr252071[6]
  store i64 %acc233652233828, i64* %eptr252066                                       ; *eptr252066 = %acc233652233828
  store i64 %f233651233827, i64* %eptr252067                                         ; *eptr252067 = %f233651233827
  store i64 %_37foldr233608233784, i64* %eptr252068                                  ; *eptr252068 = %_37foldr233608233784
  store i64 %cont234235, i64* %eptr252069                                            ; *eptr252069 = %cont234235
  store i64 %_37foldl233649233825, i64* %eptr252070                                  ; *eptr252070 = %_37foldl233649233825
  store i64 %lsts_43233656233832, i64* %eptr252071                                   ; *eptr252071 = %lsts_43233656233832
  %eptr252065 = getelementptr inbounds i64, i64* %cloptr252064, i64 0                ; &cloptr252064[0]
  %f252072 = ptrtoint void(i64,i64)* @lam242081 to i64                               ; fptr cast; i64(...)* -> i64
  store i64 %f252072, i64* %eptr252065                                               ; store fptr
  %arg235628 = ptrtoint i64* %cloptr252064 to i64                                    ; closure cast; i64* -> i64
  %cloptr252073 = call i64* @alloc(i64 8)                                            ; malloc
  %eptr252074 = getelementptr inbounds i64, i64* %cloptr252073, i64 0                ; &cloptr252073[0]
  %f252075 = ptrtoint void(i64,i64)* @lam242043 to i64                               ; fptr cast; i64(...)* -> i64
  store i64 %f252075, i64* %eptr252074                                               ; store fptr
  %arg235627 = ptrtoint i64* %cloptr252073 to i64                                    ; closure cast; i64* -> i64
  %sym240387 = add i64 0, 0                                                          ; quoted ()
  %x240388 = call i64 @prim_cons(i64 %lsts233653233829, i64 %sym240387)              ; call prim_cons
  %x240389 = call i64 @prim_cons(i64 %arg235627, i64 %x240388)                       ; call prim_cons
  %x240390 = call i64 @prim_cons(i64 %arg235628, i64 %x240389)                       ; call prim_cons
  %cloptr252076 = inttoptr i64 %_37map1233627233803 to i64*                          ; closure/env cast; i64 -> i64*
  %i0ptr252077 = getelementptr inbounds i64, i64* %cloptr252076, i64 0               ; &cloptr252076[0]
  %f252079 = load i64, i64* %i0ptr252077, align 8                                    ; load; *i0ptr252077
  %fptr252078 = inttoptr i64 %f252079 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr252078(i64 %_37map1233627233803, i64 %x240390)      ; tail call
  ret void

else252063:
  %many240397 = call i64 @const_init_string(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @str252080, i32 0, i32 0)); quoted string
  %fail240395 = call i64 @prim_halt(i64 %many240397)                                 ; call prim_halt
  %sym240400 = add i64 0, 0                                                          ; quoted ()
  %cloptr252081 = inttoptr i64 %fail240395 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr252082 = getelementptr inbounds i64, i64* %cloptr252081, i64 0               ; &cloptr252081[0]
  %f252084 = load i64, i64* %i0ptr252082, align 8                                    ; load; *i0ptr252082
  %fptr252083 = inttoptr i64 %f252084 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr252083(i64 %fail240395, i64 %sym240400)             ; tail call
  ret void
}


define void @lam242081(i64 %env242082, i64 %rvp240354) {
  %envptr252085 = inttoptr i64 %env242082 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr252086 = getelementptr inbounds i64, i64* %envptr252085, i64 6              ; &envptr252085[6]
  %lsts_43233656233832 = load i64, i64* %envptr252086, align 8                       ; load; *envptr252086
  %envptr252087 = inttoptr i64 %env242082 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr252088 = getelementptr inbounds i64, i64* %envptr252087, i64 5              ; &envptr252087[5]
  %_37foldl233649233825 = load i64, i64* %envptr252088, align 8                      ; load; *envptr252088
  %envptr252089 = inttoptr i64 %env242082 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr252090 = getelementptr inbounds i64, i64* %envptr252089, i64 4              ; &envptr252089[4]
  %cont234235 = load i64, i64* %envptr252090, align 8                                ; load; *envptr252090
  %envptr252091 = inttoptr i64 %env242082 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr252092 = getelementptr inbounds i64, i64* %envptr252091, i64 3              ; &envptr252091[3]
  %_37foldr233608233784 = load i64, i64* %envptr252092, align 8                      ; load; *envptr252092
  %envptr252093 = inttoptr i64 %env242082 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr252094 = getelementptr inbounds i64, i64* %envptr252093, i64 2              ; &envptr252093[2]
  %f233651233827 = load i64, i64* %envptr252094, align 8                             ; load; *envptr252094
  %envptr252095 = inttoptr i64 %env242082 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr252096 = getelementptr inbounds i64, i64* %envptr252095, i64 1              ; &envptr252095[1]
  %acc233652233828 = load i64, i64* %envptr252096, align 8                           ; load; *envptr252096
  %check240355 = call i64 @prim_null_63(i64 %rvp240354)                              ; call prim_null_63
  %cmp252097 = icmp eq i64 %check240355, 15                                          ; false?
  br i1 %cmp252097, label %else252099, label %then252098                             ; if

then252098:
  %msg240359 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str252100, i32 0, i32 0)); quoted string
  %abort240357 = call i64 @prim_halt(i64 %msg240359)                                 ; call prim_halt
  %sym240362 = add i64 0, 0                                                          ; quoted ()
  %cloptr252101 = inttoptr i64 %abort240357 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr252102 = getelementptr inbounds i64, i64* %cloptr252101, i64 0               ; &cloptr252101[0]
  %f252104 = load i64, i64* %i0ptr252102, align 8                                    ; load; *i0ptr252102
  %fptr252103 = inttoptr i64 %f252104 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr252103(i64 %abort240357, i64 %sym240362)            ; tail call
  ret void

else252099:
  %_95234241 = call i64 @prim_car(i64 %rvp240354)                                    ; call prim_car
  %rvp240344 = call i64 @prim_cdr(i64 %rvp240354)                                    ; call prim_cdr
  %check240345 = call i64 @prim_null_63(i64 %rvp240344)                              ; call prim_null_63
  %cmp252105 = icmp eq i64 %check240345, 15                                          ; false?
  br i1 %cmp252105, label %else252107, label %then252106                             ; if

then252106:
  %msg240349 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str252108, i32 0, i32 0)); quoted string
  %abort240347 = call i64 @prim_halt(i64 %msg240349)                                 ; call prim_halt
  %sym240352 = add i64 0, 0                                                          ; quoted ()
  %cloptr252109 = inttoptr i64 %abort240347 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr252110 = getelementptr inbounds i64, i64* %cloptr252109, i64 0               ; &cloptr252109[0]
  %f252112 = load i64, i64* %i0ptr252110, align 8                                    ; load; *i0ptr252110
  %fptr252111 = inttoptr i64 %f252112 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr252111(i64 %abort240347, i64 %sym240352)            ; tail call
  ret void

else252107:
  %rest240351 = call i64 @prim_cdr(i64 %rvp240344)                                   ; call prim_cdr
  %empty240346 = call i64 @prim_null_63(i64 %rest240351)                             ; call prim_null_63
  %cmp252113 = icmp eq i64 %empty240346, 15                                          ; false?
  br i1 %cmp252113, label %else252115, label %then252114                             ; if

then252114:
  %vs233657233833 = call i64 @prim_car(i64 %rvp240344)                               ; call prim_car
  %na240263 = call i64 @prim_cdr(i64 %rvp240344)                                     ; call prim_cdr
  %arg235630 = add i64 0, 0                                                          ; quoted ()
  %a233979 = call i64 @prim_cons(i64 %acc233652233828, i64 %arg235630)               ; call prim_cons
  %cloptr252116 = call i64* @alloc(i64 40)                                           ; malloc
  %eptr252118 = getelementptr inbounds i64, i64* %cloptr252116, i64 1                ; &eptr252118[1]
  %eptr252119 = getelementptr inbounds i64, i64* %cloptr252116, i64 2                ; &eptr252119[2]
  %eptr252120 = getelementptr inbounds i64, i64* %cloptr252116, i64 3                ; &eptr252120[3]
  %eptr252121 = getelementptr inbounds i64, i64* %cloptr252116, i64 4                ; &eptr252121[4]
  store i64 %f233651233827, i64* %eptr252118                                         ; *eptr252118 = %f233651233827
  store i64 %cont234235, i64* %eptr252119                                            ; *eptr252119 = %cont234235
  store i64 %_37foldl233649233825, i64* %eptr252120                                  ; *eptr252120 = %_37foldl233649233825
  store i64 %lsts_43233656233832, i64* %eptr252121                                   ; *eptr252121 = %lsts_43233656233832
  %eptr252117 = getelementptr inbounds i64, i64* %cloptr252116, i64 0                ; &cloptr252116[0]
  %f252122 = ptrtoint void(i64,i64)* @lam242076 to i64                               ; fptr cast; i64(...)* -> i64
  store i64 %f252122, i64* %eptr252117                                               ; store fptr
  %arg235635 = ptrtoint i64* %cloptr252116 to i64                                    ; closure cast; i64* -> i64
  %cloptr252123 = call i64* @alloc(i64 8)                                            ; malloc
  %eptr252124 = getelementptr inbounds i64, i64* %cloptr252123, i64 0                ; &cloptr252123[0]
  %f252125 = ptrtoint void(i64,i64)* @lam242060 to i64                               ; fptr cast; i64(...)* -> i64
  store i64 %f252125, i64* %eptr252124                                               ; store fptr
  %arg235634 = ptrtoint i64* %cloptr252123 to i64                                    ; closure cast; i64* -> i64
  %sym240339 = add i64 0, 0                                                          ; quoted ()
  %x240340 = call i64 @prim_cons(i64 %vs233657233833, i64 %sym240339)                ; call prim_cons
  %x240341 = call i64 @prim_cons(i64 %a233979, i64 %x240340)                         ; call prim_cons
  %x240342 = call i64 @prim_cons(i64 %arg235634, i64 %x240341)                       ; call prim_cons
  %x240343 = call i64 @prim_cons(i64 %arg235635, i64 %x240342)                       ; call prim_cons
  %cloptr252126 = inttoptr i64 %_37foldr233608233784 to i64*                         ; closure/env cast; i64 -> i64*
  %i0ptr252127 = getelementptr inbounds i64, i64* %cloptr252126, i64 0               ; &cloptr252126[0]
  %f252129 = load i64, i64* %i0ptr252127, align 8                                    ; load; *i0ptr252127
  %fptr252128 = inttoptr i64 %f252129 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr252128(i64 %_37foldr233608233784, i64 %x240343)     ; tail call
  ret void

else252115:
  %many240350 = call i64 @const_init_string(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @str252130, i32 0, i32 0)); quoted string
  %fail240348 = call i64 @prim_halt(i64 %many240350)                                 ; call prim_halt
  %sym240353 = add i64 0, 0                                                          ; quoted ()
  %cloptr252131 = inttoptr i64 %fail240348 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr252132 = getelementptr inbounds i64, i64* %cloptr252131, i64 0               ; &cloptr252131[0]
  %f252134 = load i64, i64* %i0ptr252132, align 8                                    ; load; *i0ptr252132
  %fptr252133 = inttoptr i64 %f252134 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr252133(i64 %fail240348, i64 %sym240353)             ; tail call
  ret void
}


define void @lam242076(i64 %env242077, i64 %rvp240297) {
  %envptr252135 = inttoptr i64 %env242077 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr252136 = getelementptr inbounds i64, i64* %envptr252135, i64 4              ; &envptr252135[4]
  %lsts_43233656233832 = load i64, i64* %envptr252136, align 8                       ; load; *envptr252136
  %envptr252137 = inttoptr i64 %env242077 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr252138 = getelementptr inbounds i64, i64* %envptr252137, i64 3              ; &envptr252137[3]
  %_37foldl233649233825 = load i64, i64* %envptr252138, align 8                      ; load; *envptr252138
  %envptr252139 = inttoptr i64 %env242077 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr252140 = getelementptr inbounds i64, i64* %envptr252139, i64 2              ; &envptr252139[2]
  %cont234235 = load i64, i64* %envptr252140, align 8                                ; load; *envptr252140
  %envptr252141 = inttoptr i64 %env242077 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr252142 = getelementptr inbounds i64, i64* %envptr252141, i64 1              ; &envptr252141[1]
  %f233651233827 = load i64, i64* %envptr252142, align 8                             ; load; *envptr252142
  %check240298 = call i64 @prim_null_63(i64 %rvp240297)                              ; call prim_null_63
  %cmp252143 = icmp eq i64 %check240298, 15                                          ; false?
  br i1 %cmp252143, label %else252145, label %then252144                             ; if

then252144:
  %msg240302 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str252146, i32 0, i32 0)); quoted string
  %abort240300 = call i64 @prim_halt(i64 %msg240302)                                 ; call prim_halt
  %sym240305 = add i64 0, 0                                                          ; quoted ()
  %cloptr252147 = inttoptr i64 %abort240300 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr252148 = getelementptr inbounds i64, i64* %cloptr252147, i64 0               ; &cloptr252147[0]
  %f252150 = load i64, i64* %i0ptr252148, align 8                                    ; load; *i0ptr252148
  %fptr252149 = inttoptr i64 %f252150 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr252149(i64 %abort240300, i64 %sym240305)            ; tail call
  ret void

else252145:
  %_95234244 = call i64 @prim_car(i64 %rvp240297)                                    ; call prim_car
  %rvp240287 = call i64 @prim_cdr(i64 %rvp240297)                                    ; call prim_cdr
  %check240288 = call i64 @prim_null_63(i64 %rvp240287)                              ; call prim_null_63
  %cmp252151 = icmp eq i64 %check240288, 15                                          ; false?
  br i1 %cmp252151, label %else252153, label %then252152                             ; if

then252152:
  %msg240292 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str252154, i32 0, i32 0)); quoted string
  %abort240290 = call i64 @prim_halt(i64 %msg240292)                                 ; call prim_halt
  %sym240295 = add i64 0, 0                                                          ; quoted ()
  %cloptr252155 = inttoptr i64 %abort240290 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr252156 = getelementptr inbounds i64, i64* %cloptr252155, i64 0               ; &cloptr252155[0]
  %f252158 = load i64, i64* %i0ptr252156, align 8                                    ; load; *i0ptr252156
  %fptr252157 = inttoptr i64 %f252158 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr252157(i64 %abort240290, i64 %sym240295)            ; tail call
  ret void

else252153:
  %rest240294 = call i64 @prim_cdr(i64 %rvp240287)                                   ; call prim_cdr
  %empty240289 = call i64 @prim_null_63(i64 %rest240294)                             ; call prim_null_63
  %cmp252159 = icmp eq i64 %empty240289, 15                                          ; false?
  br i1 %cmp252159, label %else252161, label %then252160                             ; if

then252160:
  %a233980 = call i64 @prim_car(i64 %rvp240287)                                      ; call prim_car
  %na240265 = call i64 @prim_cdr(i64 %rvp240287)                                     ; call prim_cdr
  %cloptr252162 = call i64* @alloc(i64 40)                                           ; malloc
  %eptr252164 = getelementptr inbounds i64, i64* %cloptr252162, i64 1                ; &eptr252164[1]
  %eptr252165 = getelementptr inbounds i64, i64* %cloptr252162, i64 2                ; &eptr252165[2]
  %eptr252166 = getelementptr inbounds i64, i64* %cloptr252162, i64 3                ; &eptr252166[3]
  %eptr252167 = getelementptr inbounds i64, i64* %cloptr252162, i64 4                ; &eptr252167[4]
  store i64 %f233651233827, i64* %eptr252164                                         ; *eptr252164 = %f233651233827
  store i64 %cont234235, i64* %eptr252165                                            ; *eptr252165 = %cont234235
  store i64 %_37foldl233649233825, i64* %eptr252166                                  ; *eptr252166 = %_37foldl233649233825
  store i64 %lsts_43233656233832, i64* %eptr252167                                   ; *eptr252167 = %lsts_43233656233832
  %eptr252163 = getelementptr inbounds i64, i64* %cloptr252162, i64 0                ; &cloptr252162[0]
  %f252168 = ptrtoint void(i64,i64)* @lam242072 to i64                               ; fptr cast; i64(...)* -> i64
  store i64 %f252168, i64* %eptr252163                                               ; store fptr
  %arg235638 = ptrtoint i64* %cloptr252162 to i64                                    ; closure cast; i64* -> i64
  %cps_45lst234245 = call i64 @prim_cons(i64 %arg235638, i64 %a233980)               ; call prim_cons
  %cloptr252169 = inttoptr i64 %f233651233827 to i64*                                ; closure/env cast; i64 -> i64*
  %i0ptr252170 = getelementptr inbounds i64, i64* %cloptr252169, i64 0               ; &cloptr252169[0]
  %f252172 = load i64, i64* %i0ptr252170, align 8                                    ; load; *i0ptr252170
  %fptr252171 = inttoptr i64 %f252172 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr252171(i64 %f233651233827, i64 %cps_45lst234245)    ; tail call
  ret void

else252161:
  %many240293 = call i64 @const_init_string(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @str252173, i32 0, i32 0)); quoted string
  %fail240291 = call i64 @prim_halt(i64 %many240293)                                 ; call prim_halt
  %sym240296 = add i64 0, 0                                                          ; quoted ()
  %cloptr252174 = inttoptr i64 %fail240291 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr252175 = getelementptr inbounds i64, i64* %cloptr252174, i64 0               ; &cloptr252174[0]
  %f252177 = load i64, i64* %i0ptr252175, align 8                                    ; load; *i0ptr252175
  %fptr252176 = inttoptr i64 %f252177 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr252176(i64 %fail240291, i64 %sym240296)             ; tail call
  ret void
}


define void @lam242072(i64 %env242073, i64 %rvp240278) {
  %envptr252178 = inttoptr i64 %env242073 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr252179 = getelementptr inbounds i64, i64* %envptr252178, i64 4              ; &envptr252178[4]
  %lsts_43233656233832 = load i64, i64* %envptr252179, align 8                       ; load; *envptr252179
  %envptr252180 = inttoptr i64 %env242073 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr252181 = getelementptr inbounds i64, i64* %envptr252180, i64 3              ; &envptr252180[3]
  %_37foldl233649233825 = load i64, i64* %envptr252181, align 8                      ; load; *envptr252181
  %envptr252182 = inttoptr i64 %env242073 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr252183 = getelementptr inbounds i64, i64* %envptr252182, i64 2              ; &envptr252182[2]
  %cont234235 = load i64, i64* %envptr252183, align 8                                ; load; *envptr252183
  %envptr252184 = inttoptr i64 %env242073 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr252185 = getelementptr inbounds i64, i64* %envptr252184, i64 1              ; &envptr252184[1]
  %f233651233827 = load i64, i64* %envptr252185, align 8                             ; load; *envptr252185
  %check240279 = call i64 @prim_null_63(i64 %rvp240278)                              ; call prim_null_63
  %cmp252186 = icmp eq i64 %check240279, 15                                          ; false?
  br i1 %cmp252186, label %else252188, label %then252187                             ; if

then252187:
  %msg240283 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str252189, i32 0, i32 0)); quoted string
  %abort240281 = call i64 @prim_halt(i64 %msg240283)                                 ; call prim_halt
  %sym240286 = add i64 0, 0                                                          ; quoted ()
  %cloptr252190 = inttoptr i64 %abort240281 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr252191 = getelementptr inbounds i64, i64* %cloptr252190, i64 0               ; &cloptr252190[0]
  %f252193 = load i64, i64* %i0ptr252191, align 8                                    ; load; *i0ptr252191
  %fptr252192 = inttoptr i64 %f252193 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr252192(i64 %abort240281, i64 %sym240286)            ; tail call
  ret void

else252188:
  %_95234242 = call i64 @prim_car(i64 %rvp240278)                                    ; call prim_car
  %rvp240268 = call i64 @prim_cdr(i64 %rvp240278)                                    ; call prim_cdr
  %check240269 = call i64 @prim_null_63(i64 %rvp240268)                              ; call prim_null_63
  %cmp252194 = icmp eq i64 %check240269, 15                                          ; false?
  br i1 %cmp252194, label %else252196, label %then252195                             ; if

then252195:
  %msg240273 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str252197, i32 0, i32 0)); quoted string
  %abort240271 = call i64 @prim_halt(i64 %msg240273)                                 ; call prim_halt
  %sym240276 = add i64 0, 0                                                          ; quoted ()
  %cloptr252198 = inttoptr i64 %abort240271 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr252199 = getelementptr inbounds i64, i64* %cloptr252198, i64 0               ; &cloptr252198[0]
  %f252201 = load i64, i64* %i0ptr252199, align 8                                    ; load; *i0ptr252199
  %fptr252200 = inttoptr i64 %f252201 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr252200(i64 %abort240271, i64 %sym240276)            ; tail call
  ret void

else252196:
  %rest240275 = call i64 @prim_cdr(i64 %rvp240268)                                   ; call prim_cdr
  %empty240270 = call i64 @prim_null_63(i64 %rest240275)                             ; call prim_null_63
  %cmp252202 = icmp eq i64 %empty240270, 15                                          ; false?
  br i1 %cmp252202, label %else252204, label %then252203                             ; if

then252203:
  %acc_43233660233836 = call i64 @prim_car(i64 %rvp240268)                           ; call prim_car
  %na240267 = call i64 @prim_cdr(i64 %rvp240268)                                     ; call prim_cdr
  %a233981 = call i64 @prim_cons(i64 %acc_43233660233836, i64 %lsts_43233656233832)  ; call prim_cons
  %a233982 = call i64 @prim_cons(i64 %f233651233827, i64 %a233981)                   ; call prim_cons
  %cps_45lst234243 = call i64 @prim_cons(i64 %cont234235, i64 %a233982)              ; call prim_cons
  %cloptr252205 = inttoptr i64 %_37foldl233649233825 to i64*                         ; closure/env cast; i64 -> i64*
  %i0ptr252206 = getelementptr inbounds i64, i64* %cloptr252205, i64 0               ; &cloptr252205[0]
  %f252208 = load i64, i64* %i0ptr252206, align 8                                    ; load; *i0ptr252206
  %fptr252207 = inttoptr i64 %f252208 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr252207(i64 %_37foldl233649233825, i64 %cps_45lst234243); tail call
  ret void

else252204:
  %many240274 = call i64 @const_init_string(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @str252209, i32 0, i32 0)); quoted string
  %fail240272 = call i64 @prim_halt(i64 %many240274)                                 ; call prim_halt
  %sym240277 = add i64 0, 0                                                          ; quoted ()
  %cloptr252210 = inttoptr i64 %fail240272 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr252211 = getelementptr inbounds i64, i64* %cloptr252210, i64 0               ; &cloptr252210[0]
  %f252213 = load i64, i64* %i0ptr252211, align 8                                    ; load; *i0ptr252211
  %fptr252212 = inttoptr i64 %f252213 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr252212(i64 %fail240272, i64 %sym240277)             ; tail call
  ret void
}


define void @lam242060(i64 %env242061, i64 %rvp240330) {
  %check240331 = call i64 @prim_null_63(i64 %rvp240330)                              ; call prim_null_63
  %cmp252214 = icmp eq i64 %check240331, 15                                          ; false?
  br i1 %cmp252214, label %else252216, label %then252215                             ; if

then252215:
  %msg240335 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str252217, i32 0, i32 0)); quoted string
  %abort240333 = call i64 @prim_halt(i64 %msg240335)                                 ; call prim_halt
  %sym240338 = add i64 0, 0                                                          ; quoted ()
  %cloptr252218 = inttoptr i64 %abort240333 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr252219 = getelementptr inbounds i64, i64* %cloptr252218, i64 0               ; &cloptr252218[0]
  %f252221 = load i64, i64* %i0ptr252219, align 8                                    ; load; *i0ptr252219
  %fptr252220 = inttoptr i64 %f252221 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr252220(i64 %abort240333, i64 %sym240338)            ; tail call
  ret void

else252216:
  %cont234246 = call i64 @prim_car(i64 %rvp240330)                                   ; call prim_car
  %rvp240321 = call i64 @prim_cdr(i64 %rvp240330)                                    ; call prim_cdr
  %check240322 = call i64 @prim_null_63(i64 %rvp240321)                              ; call prim_null_63
  %cmp252222 = icmp eq i64 %check240322, 15                                          ; false?
  br i1 %cmp252222, label %else252224, label %then252223                             ; if

then252223:
  %msg240326 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str252225, i32 0, i32 0)); quoted string
  %abort240324 = call i64 @prim_halt(i64 %msg240326)                                 ; call prim_halt
  %sym240329 = add i64 0, 0                                                          ; quoted ()
  %cloptr252226 = inttoptr i64 %abort240324 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr252227 = getelementptr inbounds i64, i64* %cloptr252226, i64 0               ; &cloptr252226[0]
  %f252229 = load i64, i64* %i0ptr252227, align 8                                    ; load; *i0ptr252227
  %fptr252228 = inttoptr i64 %f252229 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr252228(i64 %abort240324, i64 %sym240329)            ; tail call
  ret void

else252224:
  %a233661233837 = call i64 @prim_car(i64 %rvp240321)                                ; call prim_car
  %rvp240311 = call i64 @prim_cdr(i64 %rvp240321)                                    ; call prim_cdr
  %check240312 = call i64 @prim_null_63(i64 %rvp240311)                              ; call prim_null_63
  %cmp252230 = icmp eq i64 %check240312, 15                                          ; false?
  br i1 %cmp252230, label %else252232, label %then252231                             ; if

then252231:
  %msg240316 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str252233, i32 0, i32 0)); quoted string
  %abort240314 = call i64 @prim_halt(i64 %msg240316)                                 ; call prim_halt
  %sym240319 = add i64 0, 0                                                          ; quoted ()
  %cloptr252234 = inttoptr i64 %abort240314 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr252235 = getelementptr inbounds i64, i64* %cloptr252234, i64 0               ; &cloptr252234[0]
  %f252237 = load i64, i64* %i0ptr252235, align 8                                    ; load; *i0ptr252235
  %fptr252236 = inttoptr i64 %f252237 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr252236(i64 %abort240314, i64 %sym240319)            ; tail call
  ret void

else252232:
  %rest240318 = call i64 @prim_cdr(i64 %rvp240311)                                   ; call prim_cdr
  %empty240313 = call i64 @prim_null_63(i64 %rest240318)                             ; call prim_null_63
  %cmp252238 = icmp eq i64 %empty240313, 15                                          ; false?
  br i1 %cmp252238, label %else252240, label %then252239                             ; if

then252239:
  %b233662233838 = call i64 @prim_car(i64 %rvp240311)                                ; call prim_car
  %na240307 = call i64 @prim_cdr(i64 %rvp240311)                                     ; call prim_cdr
  %retprim234247 = call i64 @prim_cons(i64 %a233661233837, i64 %b233662233838)       ; call prim_cons
  %arg235650 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %sym240308 = add i64 0, 0                                                          ; quoted ()
  %x240309 = call i64 @prim_cons(i64 %retprim234247, i64 %sym240308)                 ; call prim_cons
  %x240310 = call i64 @prim_cons(i64 %arg235650, i64 %x240309)                       ; call prim_cons
  %cloptr252241 = inttoptr i64 %cont234246 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr252242 = getelementptr inbounds i64, i64* %cloptr252241, i64 0               ; &cloptr252241[0]
  %f252244 = load i64, i64* %i0ptr252242, align 8                                    ; load; *i0ptr252242
  %fptr252243 = inttoptr i64 %f252244 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr252243(i64 %cont234246, i64 %x240310)               ; tail call
  ret void

else252240:
  %many240317 = call i64 @const_init_string(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @str252245, i32 0, i32 0)); quoted string
  %fail240315 = call i64 @prim_halt(i64 %many240317)                                 ; call prim_halt
  %sym240320 = add i64 0, 0                                                          ; quoted ()
  %cloptr252246 = inttoptr i64 %fail240315 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr252247 = getelementptr inbounds i64, i64* %cloptr252246, i64 0               ; &cloptr252246[0]
  %f252249 = load i64, i64* %i0ptr252247, align 8                                    ; load; *i0ptr252247
  %fptr252248 = inttoptr i64 %f252249 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr252248(i64 %fail240315, i64 %sym240320)             ; tail call
  ret void
}


define void @lam242043(i64 %env242044, i64 %rvp240378) {
  %check240379 = call i64 @prim_null_63(i64 %rvp240378)                              ; call prim_null_63
  %cmp252250 = icmp eq i64 %check240379, 15                                          ; false?
  br i1 %cmp252250, label %else252252, label %then252251                             ; if

then252251:
  %msg240383 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str252253, i32 0, i32 0)); quoted string
  %abort240381 = call i64 @prim_halt(i64 %msg240383)                                 ; call prim_halt
  %sym240386 = add i64 0, 0                                                          ; quoted ()
  %cloptr252254 = inttoptr i64 %abort240381 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr252255 = getelementptr inbounds i64, i64* %cloptr252254, i64 0               ; &cloptr252254[0]
  %f252257 = load i64, i64* %i0ptr252255, align 8                                    ; load; *i0ptr252255
  %fptr252256 = inttoptr i64 %f252257 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr252256(i64 %abort240381, i64 %sym240386)            ; tail call
  ret void

else252252:
  %cont234248 = call i64 @prim_car(i64 %rvp240378)                                   ; call prim_car
  %rvp240368 = call i64 @prim_cdr(i64 %rvp240378)                                    ; call prim_cdr
  %check240369 = call i64 @prim_null_63(i64 %rvp240368)                              ; call prim_null_63
  %cmp252258 = icmp eq i64 %check240369, 15                                          ; false?
  br i1 %cmp252258, label %else252260, label %then252259                             ; if

then252259:
  %msg240373 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str252261, i32 0, i32 0)); quoted string
  %abort240371 = call i64 @prim_halt(i64 %msg240373)                                 ; call prim_halt
  %sym240376 = add i64 0, 0                                                          ; quoted ()
  %cloptr252262 = inttoptr i64 %abort240371 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr252263 = getelementptr inbounds i64, i64* %cloptr252262, i64 0               ; &cloptr252262[0]
  %f252265 = load i64, i64* %i0ptr252263, align 8                                    ; load; *i0ptr252263
  %fptr252264 = inttoptr i64 %f252265 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr252264(i64 %abort240371, i64 %sym240376)            ; tail call
  ret void

else252260:
  %rest240375 = call i64 @prim_cdr(i64 %rvp240368)                                   ; call prim_cdr
  %empty240370 = call i64 @prim_null_63(i64 %rest240375)                             ; call prim_null_63
  %cmp252266 = icmp eq i64 %empty240370, 15                                          ; false?
  br i1 %cmp252266, label %else252268, label %then252267                             ; if

then252267:
  %x233659233835 = call i64 @prim_car(i64 %rvp240368)                                ; call prim_car
  %na240364 = call i64 @prim_cdr(i64 %rvp240368)                                     ; call prim_cdr
  %retprim234249 = call i64 @prim_car(i64 %x233659233835)                            ; call prim_car
  %arg235654 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %sym240365 = add i64 0, 0                                                          ; quoted ()
  %x240366 = call i64 @prim_cons(i64 %retprim234249, i64 %sym240365)                 ; call prim_cons
  %x240367 = call i64 @prim_cons(i64 %arg235654, i64 %x240366)                       ; call prim_cons
  %cloptr252269 = inttoptr i64 %cont234248 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr252270 = getelementptr inbounds i64, i64* %cloptr252269, i64 0               ; &cloptr252269[0]
  %f252272 = load i64, i64* %i0ptr252270, align 8                                    ; load; *i0ptr252270
  %fptr252271 = inttoptr i64 %f252272 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr252271(i64 %cont234248, i64 %x240367)               ; tail call
  ret void

else252268:
  %many240374 = call i64 @const_init_string(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @str252273, i32 0, i32 0)); quoted string
  %fail240372 = call i64 @prim_halt(i64 %many240374)                                 ; call prim_halt
  %sym240377 = add i64 0, 0                                                          ; quoted ()
  %cloptr252274 = inttoptr i64 %fail240372 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr252275 = getelementptr inbounds i64, i64* %cloptr252274, i64 0               ; &cloptr252274[0]
  %f252277 = load i64, i64* %i0ptr252275, align 8                                    ; load; *i0ptr252275
  %fptr252276 = inttoptr i64 %f252277 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr252276(i64 %fail240372, i64 %sym240377)             ; tail call
  ret void
}


define void @lam242028(i64 %env242029, i64 %rvp240425) {
  %check240426 = call i64 @prim_null_63(i64 %rvp240425)                              ; call prim_null_63
  %cmp252278 = icmp eq i64 %check240426, 15                                          ; false?
  br i1 %cmp252278, label %else252280, label %then252279                             ; if

then252279:
  %msg240430 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str252281, i32 0, i32 0)); quoted string
  %abort240428 = call i64 @prim_halt(i64 %msg240430)                                 ; call prim_halt
  %sym240433 = add i64 0, 0                                                          ; quoted ()
  %cloptr252282 = inttoptr i64 %abort240428 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr252283 = getelementptr inbounds i64, i64* %cloptr252282, i64 0               ; &cloptr252282[0]
  %f252285 = load i64, i64* %i0ptr252283, align 8                                    ; load; *i0ptr252283
  %fptr252284 = inttoptr i64 %f252285 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr252284(i64 %abort240428, i64 %sym240433)            ; tail call
  ret void

else252280:
  %cont234250 = call i64 @prim_car(i64 %rvp240425)                                   ; call prim_car
  %rvp240415 = call i64 @prim_cdr(i64 %rvp240425)                                    ; call prim_cdr
  %check240416 = call i64 @prim_null_63(i64 %rvp240415)                              ; call prim_null_63
  %cmp252286 = icmp eq i64 %check240416, 15                                          ; false?
  br i1 %cmp252286, label %else252288, label %then252287                             ; if

then252287:
  %msg240420 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str252289, i32 0, i32 0)); quoted string
  %abort240418 = call i64 @prim_halt(i64 %msg240420)                                 ; call prim_halt
  %sym240423 = add i64 0, 0                                                          ; quoted ()
  %cloptr252290 = inttoptr i64 %abort240418 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr252291 = getelementptr inbounds i64, i64* %cloptr252290, i64 0               ; &cloptr252290[0]
  %f252293 = load i64, i64* %i0ptr252291, align 8                                    ; load; *i0ptr252291
  %fptr252292 = inttoptr i64 %f252293 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr252292(i64 %abort240418, i64 %sym240423)            ; tail call
  ret void

else252288:
  %rest240422 = call i64 @prim_cdr(i64 %rvp240415)                                   ; call prim_cdr
  %empty240417 = call i64 @prim_null_63(i64 %rest240422)                             ; call prim_null_63
  %cmp252294 = icmp eq i64 %empty240417, 15                                          ; false?
  br i1 %cmp252294, label %else252296, label %then252295                             ; if

then252295:
  %x233658233834 = call i64 @prim_car(i64 %rvp240415)                                ; call prim_car
  %na240411 = call i64 @prim_cdr(i64 %rvp240415)                                     ; call prim_cdr
  %retprim234251 = call i64 @prim_cdr(i64 %x233658233834)                            ; call prim_cdr
  %arg235658 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %sym240412 = add i64 0, 0                                                          ; quoted ()
  %x240413 = call i64 @prim_cons(i64 %retprim234251, i64 %sym240412)                 ; call prim_cons
  %x240414 = call i64 @prim_cons(i64 %arg235658, i64 %x240413)                       ; call prim_cons
  %cloptr252297 = inttoptr i64 %cont234250 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr252298 = getelementptr inbounds i64, i64* %cloptr252297, i64 0               ; &cloptr252297[0]
  %f252300 = load i64, i64* %i0ptr252298, align 8                                    ; load; *i0ptr252298
  %fptr252299 = inttoptr i64 %f252300 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr252299(i64 %cont234250, i64 %x240414)               ; tail call
  ret void

else252296:
  %many240421 = call i64 @const_init_string(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @str252301, i32 0, i32 0)); quoted string
  %fail240419 = call i64 @prim_halt(i64 %many240421)                                 ; call prim_halt
  %sym240424 = add i64 0, 0                                                          ; quoted ()
  %cloptr252302 = inttoptr i64 %fail240419 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr252303 = getelementptr inbounds i64, i64* %cloptr252302, i64 0               ; &cloptr252302[0]
  %f252305 = load i64, i64* %i0ptr252303, align 8                                    ; load; *i0ptr252303
  %fptr252304 = inttoptr i64 %f252305 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr252304(i64 %fail240419, i64 %sym240424)             ; tail call
  ret void
}


define void @lam242011(i64 %env242012, i64 %rvp240484) {
  %check240485 = call i64 @prim_null_63(i64 %rvp240484)                              ; call prim_null_63
  %cmp252306 = icmp eq i64 %check240485, 15                                          ; false?
  br i1 %cmp252306, label %else252308, label %then252307                             ; if

then252307:
  %msg240489 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str252309, i32 0, i32 0)); quoted string
  %abort240487 = call i64 @prim_halt(i64 %msg240489)                                 ; call prim_halt
  %sym240492 = add i64 0, 0                                                          ; quoted ()
  %cloptr252310 = inttoptr i64 %abort240487 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr252311 = getelementptr inbounds i64, i64* %cloptr252310, i64 0               ; &cloptr252310[0]
  %f252313 = load i64, i64* %i0ptr252311, align 8                                    ; load; *i0ptr252311
  %fptr252312 = inttoptr i64 %f252313 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr252312(i64 %abort240487, i64 %sym240492)            ; tail call
  ret void

else252308:
  %cont234252 = call i64 @prim_car(i64 %rvp240484)                                   ; call prim_car
  %rvp240475 = call i64 @prim_cdr(i64 %rvp240484)                                    ; call prim_cdr
  %check240476 = call i64 @prim_null_63(i64 %rvp240475)                              ; call prim_null_63
  %cmp252314 = icmp eq i64 %check240476, 15                                          ; false?
  br i1 %cmp252314, label %else252316, label %then252315                             ; if

then252315:
  %msg240480 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str252317, i32 0, i32 0)); quoted string
  %abort240478 = call i64 @prim_halt(i64 %msg240480)                                 ; call prim_halt
  %sym240483 = add i64 0, 0                                                          ; quoted ()
  %cloptr252318 = inttoptr i64 %abort240478 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr252319 = getelementptr inbounds i64, i64* %cloptr252318, i64 0               ; &cloptr252318[0]
  %f252321 = load i64, i64* %i0ptr252319, align 8                                    ; load; *i0ptr252319
  %fptr252320 = inttoptr i64 %f252321 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr252320(i64 %abort240478, i64 %sym240483)            ; tail call
  ret void

else252316:
  %lst233654233830 = call i64 @prim_car(i64 %rvp240475)                              ; call prim_car
  %rvp240465 = call i64 @prim_cdr(i64 %rvp240475)                                    ; call prim_cdr
  %check240466 = call i64 @prim_null_63(i64 %rvp240465)                              ; call prim_null_63
  %cmp252322 = icmp eq i64 %check240466, 15                                          ; false?
  br i1 %cmp252322, label %else252324, label %then252323                             ; if

then252323:
  %msg240470 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str252325, i32 0, i32 0)); quoted string
  %abort240468 = call i64 @prim_halt(i64 %msg240470)                                 ; call prim_halt
  %sym240473 = add i64 0, 0                                                          ; quoted ()
  %cloptr252326 = inttoptr i64 %abort240468 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr252327 = getelementptr inbounds i64, i64* %cloptr252326, i64 0               ; &cloptr252326[0]
  %f252329 = load i64, i64* %i0ptr252327, align 8                                    ; load; *i0ptr252327
  %fptr252328 = inttoptr i64 %f252329 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr252328(i64 %abort240468, i64 %sym240473)            ; tail call
  ret void

else252324:
  %rest240472 = call i64 @prim_cdr(i64 %rvp240465)                                   ; call prim_cdr
  %empty240467 = call i64 @prim_null_63(i64 %rest240472)                             ; call prim_null_63
  %cmp252330 = icmp eq i64 %empty240467, 15                                          ; false?
  br i1 %cmp252330, label %else252332, label %then252331                             ; if

then252331:
  %b233655233831 = call i64 @prim_car(i64 %rvp240465)                                ; call prim_car
  %na240458 = call i64 @prim_cdr(i64 %rvp240465)                                     ; call prim_cdr
  %cmp252333 = icmp eq i64 %b233655233831, 15                                        ; false?
  br i1 %cmp252333, label %else252335, label %then252334                             ; if

then252334:
  %arg235661 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %sym240459 = add i64 0, 0                                                          ; quoted ()
  %x240460 = call i64 @prim_cons(i64 %b233655233831, i64 %sym240459)                 ; call prim_cons
  %x240461 = call i64 @prim_cons(i64 %arg235661, i64 %x240460)                       ; call prim_cons
  %cloptr252336 = inttoptr i64 %cont234252 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr252337 = getelementptr inbounds i64, i64* %cloptr252336, i64 0               ; &cloptr252336[0]
  %f252339 = load i64, i64* %i0ptr252337, align 8                                    ; load; *i0ptr252337
  %fptr252338 = inttoptr i64 %f252339 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr252338(i64 %cont234252, i64 %x240461)               ; tail call
  ret void

else252335:
  %retprim234253 = call i64 @prim_null_63(i64 %lst233654233830)                      ; call prim_null_63
  %arg235665 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %sym240462 = add i64 0, 0                                                          ; quoted ()
  %x240463 = call i64 @prim_cons(i64 %retprim234253, i64 %sym240462)                 ; call prim_cons
  %x240464 = call i64 @prim_cons(i64 %arg235665, i64 %x240463)                       ; call prim_cons
  %cloptr252340 = inttoptr i64 %cont234252 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr252341 = getelementptr inbounds i64, i64* %cloptr252340, i64 0               ; &cloptr252340[0]
  %f252343 = load i64, i64* %i0ptr252341, align 8                                    ; load; *i0ptr252341
  %fptr252342 = inttoptr i64 %f252343 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr252342(i64 %cont234252, i64 %x240464)               ; tail call
  ret void

else252332:
  %many240471 = call i64 @const_init_string(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @str252344, i32 0, i32 0)); quoted string
  %fail240469 = call i64 @prim_halt(i64 %many240471)                                 ; call prim_halt
  %sym240474 = add i64 0, 0                                                          ; quoted ()
  %cloptr252345 = inttoptr i64 %fail240469 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr252346 = getelementptr inbounds i64, i64* %cloptr252345, i64 0               ; &cloptr252345[0]
  %f252348 = load i64, i64* %i0ptr252346, align 8                                    ; load; *i0ptr252346
  %fptr252347 = inttoptr i64 %f252348 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr252347(i64 %fail240469, i64 %sym240474)             ; tail call
  ret void
}


define void @lam241973(i64 %env241974, i64 %rvp240892) {
  %envptr252349 = inttoptr i64 %env241974 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr252350 = getelementptr inbounds i64, i64* %envptr252349, i64 2              ; &envptr252349[2]
  %_37map1233586233762 = load i64, i64* %envptr252350, align 8                       ; load; *envptr252350
  %envptr252351 = inttoptr i64 %env241974 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr252352 = getelementptr inbounds i64, i64* %envptr252351, i64 1              ; &envptr252351[1]
  %_37foldr1233585233761 = load i64, i64* %envptr252352, align 8                     ; load; *envptr252352
  %check240893 = call i64 @prim_null_63(i64 %rvp240892)                              ; call prim_null_63
  %cmp252353 = icmp eq i64 %check240893, 15                                          ; false?
  br i1 %cmp252353, label %else252355, label %then252354                             ; if

then252354:
  %msg240897 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str252356, i32 0, i32 0)); quoted string
  %abort240895 = call i64 @prim_halt(i64 %msg240897)                                 ; call prim_halt
  %sym240900 = add i64 0, 0                                                          ; quoted ()
  %cloptr252357 = inttoptr i64 %abort240895 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr252358 = getelementptr inbounds i64, i64* %cloptr252357, i64 0               ; &cloptr252357[0]
  %f252360 = load i64, i64* %i0ptr252358, align 8                                    ; load; *i0ptr252358
  %fptr252359 = inttoptr i64 %f252360 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr252359(i64 %abort240895, i64 %sym240900)            ; tail call
  ret void

else252355:
  %cont234256 = call i64 @prim_car(i64 %rvp240892)                                   ; call prim_car
  %rvp240882 = call i64 @prim_cdr(i64 %rvp240892)                                    ; call prim_cdr
  %check240883 = call i64 @prim_null_63(i64 %rvp240882)                              ; call prim_null_63
  %cmp252361 = icmp eq i64 %check240883, 15                                          ; false?
  br i1 %cmp252361, label %else252363, label %then252362                             ; if

then252362:
  %msg240887 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str252364, i32 0, i32 0)); quoted string
  %abort240885 = call i64 @prim_halt(i64 %msg240887)                                 ; call prim_halt
  %sym240890 = add i64 0, 0                                                          ; quoted ()
  %cloptr252365 = inttoptr i64 %abort240885 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr252366 = getelementptr inbounds i64, i64* %cloptr252365, i64 0               ; &cloptr252365[0]
  %f252368 = load i64, i64* %i0ptr252366, align 8                                    ; load; *i0ptr252366
  %fptr252367 = inttoptr i64 %f252368 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr252367(i64 %abort240885, i64 %sym240890)            ; tail call
  ret void

else252363:
  %rest240889 = call i64 @prim_cdr(i64 %rvp240882)                                   ; call prim_cdr
  %empty240884 = call i64 @prim_null_63(i64 %rest240889)                             ; call prim_null_63
  %cmp252369 = icmp eq i64 %empty240884, 15                                          ; false?
  br i1 %cmp252369, label %else252371, label %then252370                             ; if

then252370:
  %_37foldr233614233790 = call i64 @prim_car(i64 %rvp240882)                         ; call prim_car
  %na240587 = call i64 @prim_cdr(i64 %rvp240882)                                     ; call prim_cdr
  %arg235668 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %cloptr252372 = call i64* @alloc(i64 32)                                           ; malloc
  %eptr252374 = getelementptr inbounds i64, i64* %cloptr252372, i64 1                ; &eptr252374[1]
  %eptr252375 = getelementptr inbounds i64, i64* %cloptr252372, i64 2                ; &eptr252375[2]
  %eptr252376 = getelementptr inbounds i64, i64* %cloptr252372, i64 3                ; &eptr252376[3]
  store i64 %_37foldr1233585233761, i64* %eptr252374                                 ; *eptr252374 = %_37foldr1233585233761
  store i64 %_37map1233586233762, i64* %eptr252375                                   ; *eptr252375 = %_37map1233586233762
  store i64 %_37foldr233614233790, i64* %eptr252376                                  ; *eptr252376 = %_37foldr233614233790
  %eptr252373 = getelementptr inbounds i64, i64* %cloptr252372, i64 0                ; &cloptr252372[0]
  %f252377 = ptrtoint void(i64,i64)* @lam241968 to i64                               ; fptr cast; i64(...)* -> i64
  store i64 %f252377, i64* %eptr252373                                               ; store fptr
  %arg235667 = ptrtoint i64* %cloptr252372 to i64                                    ; closure cast; i64* -> i64
  %sym240879 = add i64 0, 0                                                          ; quoted ()
  %x240880 = call i64 @prim_cons(i64 %arg235667, i64 %sym240879)                     ; call prim_cons
  %x240881 = call i64 @prim_cons(i64 %arg235668, i64 %x240880)                       ; call prim_cons
  %cloptr252378 = inttoptr i64 %cont234256 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr252379 = getelementptr inbounds i64, i64* %cloptr252378, i64 0               ; &cloptr252378[0]
  %f252381 = load i64, i64* %i0ptr252379, align 8                                    ; load; *i0ptr252379
  %fptr252380 = inttoptr i64 %f252381 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr252380(i64 %cont234256, i64 %x240881)               ; tail call
  ret void

else252371:
  %many240888 = call i64 @const_init_string(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @str252382, i32 0, i32 0)); quoted string
  %fail240886 = call i64 @prim_halt(i64 %many240888)                                 ; call prim_halt
  %sym240891 = add i64 0, 0                                                          ; quoted ()
  %cloptr252383 = inttoptr i64 %fail240886 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr252384 = getelementptr inbounds i64, i64* %cloptr252383, i64 0               ; &cloptr252383[0]
  %f252386 = load i64, i64* %i0ptr252384, align 8                                    ; load; *i0ptr252384
  %fptr252385 = inttoptr i64 %f252386 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr252385(i64 %fail240886, i64 %sym240891)             ; tail call
  ret void
}


define void @lam241968(i64 %env241969, i64 %args233615233791234258) {
  %envptr252387 = inttoptr i64 %env241969 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr252388 = getelementptr inbounds i64, i64* %envptr252387, i64 3              ; &envptr252387[3]
  %_37foldr233614233790 = load i64, i64* %envptr252388, align 8                      ; load; *envptr252388
  %envptr252389 = inttoptr i64 %env241969 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr252390 = getelementptr inbounds i64, i64* %envptr252389, i64 2              ; &envptr252389[2]
  %_37map1233586233762 = load i64, i64* %envptr252390, align 8                       ; load; *envptr252390
  %envptr252391 = inttoptr i64 %env241969 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr252392 = getelementptr inbounds i64, i64* %envptr252391, i64 1              ; &envptr252391[1]
  %_37foldr1233585233761 = load i64, i64* %envptr252392, align 8                     ; load; *envptr252392
  %cont234257 = call i64 @prim_car(i64 %args233615233791234258)                      ; call prim_car
  %args233615233791 = call i64 @prim_cdr(i64 %args233615233791234258)                ; call prim_cdr
  %f233616233792 = call i64 @prim_car(i64 %args233615233791)                         ; call prim_car
  %a233962 = call i64 @prim_cdr(i64 %args233615233791)                               ; call prim_cdr
  %retprim234277 = call i64 @prim_car(i64 %a233962)                                  ; call prim_car
  %cloptr252393 = call i64* @alloc(i64 56)                                           ; malloc
  %eptr252395 = getelementptr inbounds i64, i64* %cloptr252393, i64 1                ; &eptr252395[1]
  %eptr252396 = getelementptr inbounds i64, i64* %cloptr252393, i64 2                ; &eptr252396[2]
  %eptr252397 = getelementptr inbounds i64, i64* %cloptr252393, i64 3                ; &eptr252397[3]
  %eptr252398 = getelementptr inbounds i64, i64* %cloptr252393, i64 4                ; &eptr252398[4]
  %eptr252399 = getelementptr inbounds i64, i64* %cloptr252393, i64 5                ; &eptr252399[5]
  %eptr252400 = getelementptr inbounds i64, i64* %cloptr252393, i64 6                ; &eptr252400[6]
  store i64 %args233615233791, i64* %eptr252395                                      ; *eptr252395 = %args233615233791
  store i64 %cont234257, i64* %eptr252396                                            ; *eptr252396 = %cont234257
  store i64 %f233616233792, i64* %eptr252397                                         ; *eptr252397 = %f233616233792
  store i64 %_37foldr1233585233761, i64* %eptr252398                                 ; *eptr252398 = %_37foldr1233585233761
  store i64 %_37map1233586233762, i64* %eptr252399                                   ; *eptr252399 = %_37map1233586233762
  store i64 %_37foldr233614233790, i64* %eptr252400                                  ; *eptr252400 = %_37foldr233614233790
  %eptr252394 = getelementptr inbounds i64, i64* %cloptr252393, i64 0                ; &cloptr252393[0]
  %f252401 = ptrtoint void(i64,i64)* @lam241966 to i64                               ; fptr cast; i64(...)* -> i64
  store i64 %f252401, i64* %eptr252394                                               ; store fptr
  %arg235677 = ptrtoint i64* %cloptr252393 to i64                                    ; closure cast; i64* -> i64
  %arg235676 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %sym240876 = add i64 0, 0                                                          ; quoted ()
  %x240877 = call i64 @prim_cons(i64 %retprim234277, i64 %sym240876)                 ; call prim_cons
  %x240878 = call i64 @prim_cons(i64 %arg235676, i64 %x240877)                       ; call prim_cons
  %cloptr252402 = inttoptr i64 %arg235677 to i64*                                    ; closure/env cast; i64 -> i64*
  %i0ptr252403 = getelementptr inbounds i64, i64* %cloptr252402, i64 0               ; &cloptr252402[0]
  %f252405 = load i64, i64* %i0ptr252403, align 8                                    ; load; *i0ptr252403
  %fptr252404 = inttoptr i64 %f252405 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr252404(i64 %arg235677, i64 %x240878)                ; tail call
  ret void
}


define void @lam241966(i64 %env241967, i64 %rvp240867) {
  %envptr252406 = inttoptr i64 %env241967 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr252407 = getelementptr inbounds i64, i64* %envptr252406, i64 6              ; &envptr252406[6]
  %_37foldr233614233790 = load i64, i64* %envptr252407, align 8                      ; load; *envptr252407
  %envptr252408 = inttoptr i64 %env241967 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr252409 = getelementptr inbounds i64, i64* %envptr252408, i64 5              ; &envptr252408[5]
  %_37map1233586233762 = load i64, i64* %envptr252409, align 8                       ; load; *envptr252409
  %envptr252410 = inttoptr i64 %env241967 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr252411 = getelementptr inbounds i64, i64* %envptr252410, i64 4              ; &envptr252410[4]
  %_37foldr1233585233761 = load i64, i64* %envptr252411, align 8                     ; load; *envptr252411
  %envptr252412 = inttoptr i64 %env241967 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr252413 = getelementptr inbounds i64, i64* %envptr252412, i64 3              ; &envptr252412[3]
  %f233616233792 = load i64, i64* %envptr252413, align 8                             ; load; *envptr252413
  %envptr252414 = inttoptr i64 %env241967 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr252415 = getelementptr inbounds i64, i64* %envptr252414, i64 2              ; &envptr252414[2]
  %cont234257 = load i64, i64* %envptr252415, align 8                                ; load; *envptr252415
  %envptr252416 = inttoptr i64 %env241967 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr252417 = getelementptr inbounds i64, i64* %envptr252416, i64 1              ; &envptr252416[1]
  %args233615233791 = load i64, i64* %envptr252417, align 8                          ; load; *envptr252417
  %check240868 = call i64 @prim_null_63(i64 %rvp240867)                              ; call prim_null_63
  %cmp252418 = icmp eq i64 %check240868, 15                                          ; false?
  br i1 %cmp252418, label %else252420, label %then252419                             ; if

then252419:
  %msg240872 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str252421, i32 0, i32 0)); quoted string
  %abort240870 = call i64 @prim_halt(i64 %msg240872)                                 ; call prim_halt
  %sym240875 = add i64 0, 0                                                          ; quoted ()
  %cloptr252422 = inttoptr i64 %abort240870 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr252423 = getelementptr inbounds i64, i64* %cloptr252422, i64 0               ; &cloptr252422[0]
  %f252425 = load i64, i64* %i0ptr252423, align 8                                    ; load; *i0ptr252423
  %fptr252424 = inttoptr i64 %f252425 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr252424(i64 %abort240870, i64 %sym240875)            ; tail call
  ret void

else252420:
  %_95234259 = call i64 @prim_car(i64 %rvp240867)                                    ; call prim_car
  %rvp240857 = call i64 @prim_cdr(i64 %rvp240867)                                    ; call prim_cdr
  %check240858 = call i64 @prim_null_63(i64 %rvp240857)                              ; call prim_null_63
  %cmp252426 = icmp eq i64 %check240858, 15                                          ; false?
  br i1 %cmp252426, label %else252428, label %then252427                             ; if

then252427:
  %msg240862 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str252429, i32 0, i32 0)); quoted string
  %abort240860 = call i64 @prim_halt(i64 %msg240862)                                 ; call prim_halt
  %sym240865 = add i64 0, 0                                                          ; quoted ()
  %cloptr252430 = inttoptr i64 %abort240860 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr252431 = getelementptr inbounds i64, i64* %cloptr252430, i64 0               ; &cloptr252430[0]
  %f252433 = load i64, i64* %i0ptr252431, align 8                                    ; load; *i0ptr252431
  %fptr252432 = inttoptr i64 %f252433 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr252432(i64 %abort240860, i64 %sym240865)            ; tail call
  ret void

else252428:
  %rest240864 = call i64 @prim_cdr(i64 %rvp240857)                                   ; call prim_cdr
  %empty240859 = call i64 @prim_null_63(i64 %rest240864)                             ; call prim_null_63
  %cmp252434 = icmp eq i64 %empty240859, 15                                          ; false?
  br i1 %cmp252434, label %else252436, label %then252435                             ; if

then252435:
  %acc233617233793 = call i64 @prim_car(i64 %rvp240857)                              ; call prim_car
  %na240589 = call i64 @prim_cdr(i64 %rvp240857)                                     ; call prim_cdr
  %a233963 = call i64 @prim_cdr(i64 %args233615233791)                               ; call prim_cdr
  %retprim234276 = call i64 @prim_cdr(i64 %a233963)                                  ; call prim_cdr
  %cloptr252437 = call i64* @alloc(i64 56)                                           ; malloc
  %eptr252439 = getelementptr inbounds i64, i64* %cloptr252437, i64 1                ; &eptr252439[1]
  %eptr252440 = getelementptr inbounds i64, i64* %cloptr252437, i64 2                ; &eptr252440[2]
  %eptr252441 = getelementptr inbounds i64, i64* %cloptr252437, i64 3                ; &eptr252441[3]
  %eptr252442 = getelementptr inbounds i64, i64* %cloptr252437, i64 4                ; &eptr252442[4]
  %eptr252443 = getelementptr inbounds i64, i64* %cloptr252437, i64 5                ; &eptr252443[5]
  %eptr252444 = getelementptr inbounds i64, i64* %cloptr252437, i64 6                ; &eptr252444[6]
  store i64 %cont234257, i64* %eptr252439                                            ; *eptr252439 = %cont234257
  store i64 %acc233617233793, i64* %eptr252440                                       ; *eptr252440 = %acc233617233793
  store i64 %f233616233792, i64* %eptr252441                                         ; *eptr252441 = %f233616233792
  store i64 %_37foldr1233585233761, i64* %eptr252442                                 ; *eptr252442 = %_37foldr1233585233761
  store i64 %_37map1233586233762, i64* %eptr252443                                   ; *eptr252443 = %_37map1233586233762
  store i64 %_37foldr233614233790, i64* %eptr252444                                  ; *eptr252444 = %_37foldr233614233790
  %eptr252438 = getelementptr inbounds i64, i64* %cloptr252437, i64 0                ; &cloptr252437[0]
  %f252445 = ptrtoint void(i64,i64)* @lam241962 to i64                               ; fptr cast; i64(...)* -> i64
  store i64 %f252445, i64* %eptr252438                                               ; store fptr
  %arg235682 = ptrtoint i64* %cloptr252437 to i64                                    ; closure cast; i64* -> i64
  %arg235681 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %sym240854 = add i64 0, 0                                                          ; quoted ()
  %x240855 = call i64 @prim_cons(i64 %retprim234276, i64 %sym240854)                 ; call prim_cons
  %x240856 = call i64 @prim_cons(i64 %arg235681, i64 %x240855)                       ; call prim_cons
  %cloptr252446 = inttoptr i64 %arg235682 to i64*                                    ; closure/env cast; i64 -> i64*
  %i0ptr252447 = getelementptr inbounds i64, i64* %cloptr252446, i64 0               ; &cloptr252446[0]
  %f252449 = load i64, i64* %i0ptr252447, align 8                                    ; load; *i0ptr252447
  %fptr252448 = inttoptr i64 %f252449 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr252448(i64 %arg235682, i64 %x240856)                ; tail call
  ret void

else252436:
  %many240863 = call i64 @const_init_string(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @str252450, i32 0, i32 0)); quoted string
  %fail240861 = call i64 @prim_halt(i64 %many240863)                                 ; call prim_halt
  %sym240866 = add i64 0, 0                                                          ; quoted ()
  %cloptr252451 = inttoptr i64 %fail240861 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr252452 = getelementptr inbounds i64, i64* %cloptr252451, i64 0               ; &cloptr252451[0]
  %f252454 = load i64, i64* %i0ptr252452, align 8                                    ; load; *i0ptr252452
  %fptr252453 = inttoptr i64 %f252454 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr252453(i64 %fail240861, i64 %sym240866)             ; tail call
  ret void
}


define void @lam241962(i64 %env241963, i64 %rvp240845) {
  %envptr252455 = inttoptr i64 %env241963 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr252456 = getelementptr inbounds i64, i64* %envptr252455, i64 6              ; &envptr252455[6]
  %_37foldr233614233790 = load i64, i64* %envptr252456, align 8                      ; load; *envptr252456
  %envptr252457 = inttoptr i64 %env241963 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr252458 = getelementptr inbounds i64, i64* %envptr252457, i64 5              ; &envptr252457[5]
  %_37map1233586233762 = load i64, i64* %envptr252458, align 8                       ; load; *envptr252458
  %envptr252459 = inttoptr i64 %env241963 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr252460 = getelementptr inbounds i64, i64* %envptr252459, i64 4              ; &envptr252459[4]
  %_37foldr1233585233761 = load i64, i64* %envptr252460, align 8                     ; load; *envptr252460
  %envptr252461 = inttoptr i64 %env241963 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr252462 = getelementptr inbounds i64, i64* %envptr252461, i64 3              ; &envptr252461[3]
  %f233616233792 = load i64, i64* %envptr252462, align 8                             ; load; *envptr252462
  %envptr252463 = inttoptr i64 %env241963 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr252464 = getelementptr inbounds i64, i64* %envptr252463, i64 2              ; &envptr252463[2]
  %acc233617233793 = load i64, i64* %envptr252464, align 8                           ; load; *envptr252464
  %envptr252465 = inttoptr i64 %env241963 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr252466 = getelementptr inbounds i64, i64* %envptr252465, i64 1              ; &envptr252465[1]
  %cont234257 = load i64, i64* %envptr252466, align 8                                ; load; *envptr252466
  %check240846 = call i64 @prim_null_63(i64 %rvp240845)                              ; call prim_null_63
  %cmp252467 = icmp eq i64 %check240846, 15                                          ; false?
  br i1 %cmp252467, label %else252469, label %then252468                             ; if

then252468:
  %msg240850 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str252470, i32 0, i32 0)); quoted string
  %abort240848 = call i64 @prim_halt(i64 %msg240850)                                 ; call prim_halt
  %sym240853 = add i64 0, 0                                                          ; quoted ()
  %cloptr252471 = inttoptr i64 %abort240848 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr252472 = getelementptr inbounds i64, i64* %cloptr252471, i64 0               ; &cloptr252471[0]
  %f252474 = load i64, i64* %i0ptr252472, align 8                                    ; load; *i0ptr252472
  %fptr252473 = inttoptr i64 %f252474 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr252473(i64 %abort240848, i64 %sym240853)            ; tail call
  ret void

else252469:
  %_95234260 = call i64 @prim_car(i64 %rvp240845)                                    ; call prim_car
  %rvp240835 = call i64 @prim_cdr(i64 %rvp240845)                                    ; call prim_cdr
  %check240836 = call i64 @prim_null_63(i64 %rvp240835)                              ; call prim_null_63
  %cmp252475 = icmp eq i64 %check240836, 15                                          ; false?
  br i1 %cmp252475, label %else252477, label %then252476                             ; if

then252476:
  %msg240840 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str252478, i32 0, i32 0)); quoted string
  %abort240838 = call i64 @prim_halt(i64 %msg240840)                                 ; call prim_halt
  %sym240843 = add i64 0, 0                                                          ; quoted ()
  %cloptr252479 = inttoptr i64 %abort240838 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr252480 = getelementptr inbounds i64, i64* %cloptr252479, i64 0               ; &cloptr252479[0]
  %f252482 = load i64, i64* %i0ptr252480, align 8                                    ; load; *i0ptr252480
  %fptr252481 = inttoptr i64 %f252482 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr252481(i64 %abort240838, i64 %sym240843)            ; tail call
  ret void

else252477:
  %rest240842 = call i64 @prim_cdr(i64 %rvp240835)                                   ; call prim_cdr
  %empty240837 = call i64 @prim_null_63(i64 %rest240842)                             ; call prim_null_63
  %cmp252483 = icmp eq i64 %empty240837, 15                                          ; false?
  br i1 %cmp252483, label %else252485, label %then252484                             ; if

then252484:
  %lsts233618233794 = call i64 @prim_car(i64 %rvp240835)                             ; call prim_car
  %na240591 = call i64 @prim_cdr(i64 %rvp240835)                                     ; call prim_cdr
  %cloptr252486 = call i64* @alloc(i64 64)                                           ; malloc
  %eptr252488 = getelementptr inbounds i64, i64* %cloptr252486, i64 1                ; &eptr252488[1]
  %eptr252489 = getelementptr inbounds i64, i64* %cloptr252486, i64 2                ; &eptr252489[2]
  %eptr252490 = getelementptr inbounds i64, i64* %cloptr252486, i64 3                ; &eptr252490[3]
  %eptr252491 = getelementptr inbounds i64, i64* %cloptr252486, i64 4                ; &eptr252491[4]
  %eptr252492 = getelementptr inbounds i64, i64* %cloptr252486, i64 5                ; &eptr252492[5]
  %eptr252493 = getelementptr inbounds i64, i64* %cloptr252486, i64 6                ; &eptr252493[6]
  %eptr252494 = getelementptr inbounds i64, i64* %cloptr252486, i64 7                ; &eptr252494[7]
  store i64 %lsts233618233794, i64* %eptr252488                                      ; *eptr252488 = %lsts233618233794
  store i64 %cont234257, i64* %eptr252489                                            ; *eptr252489 = %cont234257
  store i64 %acc233617233793, i64* %eptr252490                                       ; *eptr252490 = %acc233617233793
  store i64 %f233616233792, i64* %eptr252491                                         ; *eptr252491 = %f233616233792
  store i64 %_37foldr1233585233761, i64* %eptr252492                                 ; *eptr252492 = %_37foldr1233585233761
  store i64 %_37map1233586233762, i64* %eptr252493                                   ; *eptr252493 = %_37map1233586233762
  store i64 %_37foldr233614233790, i64* %eptr252494                                  ; *eptr252494 = %_37foldr233614233790
  %eptr252487 = getelementptr inbounds i64, i64* %cloptr252486, i64 0                ; &cloptr252486[0]
  %f252495 = ptrtoint void(i64,i64)* @lam241958 to i64                               ; fptr cast; i64(...)* -> i64
  store i64 %f252495, i64* %eptr252487                                               ; store fptr
  %arg235686 = ptrtoint i64* %cloptr252486 to i64                                    ; closure cast; i64* -> i64
  %cloptr252496 = call i64* @alloc(i64 8)                                            ; malloc
  %eptr252497 = getelementptr inbounds i64, i64* %cloptr252496, i64 0                ; &cloptr252496[0]
  %f252498 = ptrtoint void(i64,i64)* @lam241880 to i64                               ; fptr cast; i64(...)* -> i64
  store i64 %f252498, i64* %eptr252497                                               ; store fptr
  %arg235685 = ptrtoint i64* %cloptr252496 to i64                                    ; closure cast; i64* -> i64
  %arg235684 = call i64 @const_init_false()                                          ; quoted #f
  %sym240830 = add i64 0, 0                                                          ; quoted ()
  %x240831 = call i64 @prim_cons(i64 %lsts233618233794, i64 %sym240830)              ; call prim_cons
  %x240832 = call i64 @prim_cons(i64 %arg235684, i64 %x240831)                       ; call prim_cons
  %x240833 = call i64 @prim_cons(i64 %arg235685, i64 %x240832)                       ; call prim_cons
  %x240834 = call i64 @prim_cons(i64 %arg235686, i64 %x240833)                       ; call prim_cons
  %cloptr252499 = inttoptr i64 %_37foldr1233585233761 to i64*                        ; closure/env cast; i64 -> i64*
  %i0ptr252500 = getelementptr inbounds i64, i64* %cloptr252499, i64 0               ; &cloptr252499[0]
  %f252502 = load i64, i64* %i0ptr252500, align 8                                    ; load; *i0ptr252500
  %fptr252501 = inttoptr i64 %f252502 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr252501(i64 %_37foldr1233585233761, i64 %x240834)    ; tail call
  ret void

else252485:
  %many240841 = call i64 @const_init_string(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @str252503, i32 0, i32 0)); quoted string
  %fail240839 = call i64 @prim_halt(i64 %many240841)                                 ; call prim_halt
  %sym240844 = add i64 0, 0                                                          ; quoted ()
  %cloptr252504 = inttoptr i64 %fail240839 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr252505 = getelementptr inbounds i64, i64* %cloptr252504, i64 0               ; &cloptr252504[0]
  %f252507 = load i64, i64* %i0ptr252505, align 8                                    ; load; *i0ptr252505
  %fptr252506 = inttoptr i64 %f252507 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr252506(i64 %fail240839, i64 %sym240844)             ; tail call
  ret void
}


define void @lam241958(i64 %env241959, i64 %rvp240785) {
  %envptr252508 = inttoptr i64 %env241959 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr252509 = getelementptr inbounds i64, i64* %envptr252508, i64 7              ; &envptr252508[7]
  %_37foldr233614233790 = load i64, i64* %envptr252509, align 8                      ; load; *envptr252509
  %envptr252510 = inttoptr i64 %env241959 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr252511 = getelementptr inbounds i64, i64* %envptr252510, i64 6              ; &envptr252510[6]
  %_37map1233586233762 = load i64, i64* %envptr252511, align 8                       ; load; *envptr252511
  %envptr252512 = inttoptr i64 %env241959 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr252513 = getelementptr inbounds i64, i64* %envptr252512, i64 5              ; &envptr252512[5]
  %_37foldr1233585233761 = load i64, i64* %envptr252513, align 8                     ; load; *envptr252513
  %envptr252514 = inttoptr i64 %env241959 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr252515 = getelementptr inbounds i64, i64* %envptr252514, i64 4              ; &envptr252514[4]
  %f233616233792 = load i64, i64* %envptr252515, align 8                             ; load; *envptr252515
  %envptr252516 = inttoptr i64 %env241959 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr252517 = getelementptr inbounds i64, i64* %envptr252516, i64 3              ; &envptr252516[3]
  %acc233617233793 = load i64, i64* %envptr252517, align 8                           ; load; *envptr252517
  %envptr252518 = inttoptr i64 %env241959 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr252519 = getelementptr inbounds i64, i64* %envptr252518, i64 2              ; &envptr252518[2]
  %cont234257 = load i64, i64* %envptr252519, align 8                                ; load; *envptr252519
  %envptr252520 = inttoptr i64 %env241959 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr252521 = getelementptr inbounds i64, i64* %envptr252520, i64 1              ; &envptr252520[1]
  %lsts233618233794 = load i64, i64* %envptr252521, align 8                          ; load; *envptr252521
  %check240786 = call i64 @prim_null_63(i64 %rvp240785)                              ; call prim_null_63
  %cmp252522 = icmp eq i64 %check240786, 15                                          ; false?
  br i1 %cmp252522, label %else252524, label %then252523                             ; if

then252523:
  %msg240790 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str252525, i32 0, i32 0)); quoted string
  %abort240788 = call i64 @prim_halt(i64 %msg240790)                                 ; call prim_halt
  %sym240793 = add i64 0, 0                                                          ; quoted ()
  %cloptr252526 = inttoptr i64 %abort240788 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr252527 = getelementptr inbounds i64, i64* %cloptr252526, i64 0               ; &cloptr252526[0]
  %f252529 = load i64, i64* %i0ptr252527, align 8                                    ; load; *i0ptr252527
  %fptr252528 = inttoptr i64 %f252529 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr252528(i64 %abort240788, i64 %sym240793)            ; tail call
  ret void

else252524:
  %_95234261 = call i64 @prim_car(i64 %rvp240785)                                    ; call prim_car
  %rvp240775 = call i64 @prim_cdr(i64 %rvp240785)                                    ; call prim_cdr
  %check240776 = call i64 @prim_null_63(i64 %rvp240775)                              ; call prim_null_63
  %cmp252530 = icmp eq i64 %check240776, 15                                          ; false?
  br i1 %cmp252530, label %else252532, label %then252531                             ; if

then252531:
  %msg240780 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str252533, i32 0, i32 0)); quoted string
  %abort240778 = call i64 @prim_halt(i64 %msg240780)                                 ; call prim_halt
  %sym240783 = add i64 0, 0                                                          ; quoted ()
  %cloptr252534 = inttoptr i64 %abort240778 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr252535 = getelementptr inbounds i64, i64* %cloptr252534, i64 0               ; &cloptr252534[0]
  %f252537 = load i64, i64* %i0ptr252535, align 8                                    ; load; *i0ptr252535
  %fptr252536 = inttoptr i64 %f252537 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr252536(i64 %abort240778, i64 %sym240783)            ; tail call
  ret void

else252532:
  %rest240782 = call i64 @prim_cdr(i64 %rvp240775)                                   ; call prim_cdr
  %empty240777 = call i64 @prim_null_63(i64 %rest240782)                             ; call prim_null_63
  %cmp252538 = icmp eq i64 %empty240777, 15                                          ; false?
  br i1 %cmp252538, label %else252540, label %then252539                             ; if

then252539:
  %a233964 = call i64 @prim_car(i64 %rvp240775)                                      ; call prim_car
  %na240593 = call i64 @prim_cdr(i64 %rvp240775)                                     ; call prim_cdr
  %cmp252541 = icmp eq i64 %a233964, 15                                              ; false?
  br i1 %cmp252541, label %else252543, label %then252542                             ; if

then252542:
  %arg235689 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %sym240594 = add i64 0, 0                                                          ; quoted ()
  %x240595 = call i64 @prim_cons(i64 %acc233617233793, i64 %sym240594)               ; call prim_cons
  %x240596 = call i64 @prim_cons(i64 %arg235689, i64 %x240595)                       ; call prim_cons
  %cloptr252544 = inttoptr i64 %cont234257 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr252545 = getelementptr inbounds i64, i64* %cloptr252544, i64 0               ; &cloptr252544[0]
  %f252547 = load i64, i64* %i0ptr252545, align 8                                    ; load; *i0ptr252545
  %fptr252546 = inttoptr i64 %f252547 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr252546(i64 %cont234257, i64 %x240596)               ; tail call
  ret void

else252543:
  %cloptr252548 = call i64* @alloc(i64 64)                                           ; malloc
  %eptr252550 = getelementptr inbounds i64, i64* %cloptr252548, i64 1                ; &eptr252550[1]
  %eptr252551 = getelementptr inbounds i64, i64* %cloptr252548, i64 2                ; &eptr252551[2]
  %eptr252552 = getelementptr inbounds i64, i64* %cloptr252548, i64 3                ; &eptr252552[3]
  %eptr252553 = getelementptr inbounds i64, i64* %cloptr252548, i64 4                ; &eptr252553[4]
  %eptr252554 = getelementptr inbounds i64, i64* %cloptr252548, i64 5                ; &eptr252554[5]
  %eptr252555 = getelementptr inbounds i64, i64* %cloptr252548, i64 6                ; &eptr252555[6]
  %eptr252556 = getelementptr inbounds i64, i64* %cloptr252548, i64 7                ; &eptr252556[7]
  store i64 %lsts233618233794, i64* %eptr252550                                      ; *eptr252550 = %lsts233618233794
  store i64 %cont234257, i64* %eptr252551                                            ; *eptr252551 = %cont234257
  store i64 %acc233617233793, i64* %eptr252552                                       ; *eptr252552 = %acc233617233793
  store i64 %f233616233792, i64* %eptr252553                                         ; *eptr252553 = %f233616233792
  store i64 %_37foldr1233585233761, i64* %eptr252554                                 ; *eptr252554 = %_37foldr1233585233761
  store i64 %_37map1233586233762, i64* %eptr252555                                   ; *eptr252555 = %_37map1233586233762
  store i64 %_37foldr233614233790, i64* %eptr252556                                  ; *eptr252556 = %_37foldr233614233790
  %eptr252549 = getelementptr inbounds i64, i64* %cloptr252548, i64 0                ; &cloptr252548[0]
  %f252557 = ptrtoint void(i64,i64)* @lam241954 to i64                               ; fptr cast; i64(...)* -> i64
  store i64 %f252557, i64* %eptr252549                                               ; store fptr
  %arg235693 = ptrtoint i64* %cloptr252548 to i64                                    ; closure cast; i64* -> i64
  %cloptr252558 = call i64* @alloc(i64 8)                                            ; malloc
  %eptr252559 = getelementptr inbounds i64, i64* %cloptr252558, i64 0                ; &cloptr252558[0]
  %f252560 = ptrtoint void(i64,i64)* @lam241897 to i64                               ; fptr cast; i64(...)* -> i64
  store i64 %f252560, i64* %eptr252559                                               ; store fptr
  %arg235692 = ptrtoint i64* %cloptr252558 to i64                                    ; closure cast; i64* -> i64
  %sym240771 = add i64 0, 0                                                          ; quoted ()
  %x240772 = call i64 @prim_cons(i64 %lsts233618233794, i64 %sym240771)              ; call prim_cons
  %x240773 = call i64 @prim_cons(i64 %arg235692, i64 %x240772)                       ; call prim_cons
  %x240774 = call i64 @prim_cons(i64 %arg235693, i64 %x240773)                       ; call prim_cons
  %cloptr252561 = inttoptr i64 %_37map1233586233762 to i64*                          ; closure/env cast; i64 -> i64*
  %i0ptr252562 = getelementptr inbounds i64, i64* %cloptr252561, i64 0               ; &cloptr252561[0]
  %f252564 = load i64, i64* %i0ptr252562, align 8                                    ; load; *i0ptr252562
  %fptr252563 = inttoptr i64 %f252564 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr252563(i64 %_37map1233586233762, i64 %x240774)      ; tail call
  ret void

else252540:
  %many240781 = call i64 @const_init_string(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @str252565, i32 0, i32 0)); quoted string
  %fail240779 = call i64 @prim_halt(i64 %many240781)                                 ; call prim_halt
  %sym240784 = add i64 0, 0                                                          ; quoted ()
  %cloptr252566 = inttoptr i64 %fail240779 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr252567 = getelementptr inbounds i64, i64* %cloptr252566, i64 0               ; &cloptr252566[0]
  %f252569 = load i64, i64* %i0ptr252567, align 8                                    ; load; *i0ptr252567
  %fptr252568 = inttoptr i64 %f252569 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr252568(i64 %fail240779, i64 %sym240784)             ; tail call
  ret void
}


define void @lam241954(i64 %env241955, i64 %rvp240738) {
  %envptr252570 = inttoptr i64 %env241955 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr252571 = getelementptr inbounds i64, i64* %envptr252570, i64 7              ; &envptr252570[7]
  %_37foldr233614233790 = load i64, i64* %envptr252571, align 8                      ; load; *envptr252571
  %envptr252572 = inttoptr i64 %env241955 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr252573 = getelementptr inbounds i64, i64* %envptr252572, i64 6              ; &envptr252572[6]
  %_37map1233586233762 = load i64, i64* %envptr252573, align 8                       ; load; *envptr252573
  %envptr252574 = inttoptr i64 %env241955 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr252575 = getelementptr inbounds i64, i64* %envptr252574, i64 5              ; &envptr252574[5]
  %_37foldr1233585233761 = load i64, i64* %envptr252575, align 8                     ; load; *envptr252575
  %envptr252576 = inttoptr i64 %env241955 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr252577 = getelementptr inbounds i64, i64* %envptr252576, i64 4              ; &envptr252576[4]
  %f233616233792 = load i64, i64* %envptr252577, align 8                             ; load; *envptr252577
  %envptr252578 = inttoptr i64 %env241955 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr252579 = getelementptr inbounds i64, i64* %envptr252578, i64 3              ; &envptr252578[3]
  %acc233617233793 = load i64, i64* %envptr252579, align 8                           ; load; *envptr252579
  %envptr252580 = inttoptr i64 %env241955 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr252581 = getelementptr inbounds i64, i64* %envptr252580, i64 2              ; &envptr252580[2]
  %cont234257 = load i64, i64* %envptr252581, align 8                                ; load; *envptr252581
  %envptr252582 = inttoptr i64 %env241955 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr252583 = getelementptr inbounds i64, i64* %envptr252582, i64 1              ; &envptr252582[1]
  %lsts233618233794 = load i64, i64* %envptr252583, align 8                          ; load; *envptr252583
  %check240739 = call i64 @prim_null_63(i64 %rvp240738)                              ; call prim_null_63
  %cmp252584 = icmp eq i64 %check240739, 15                                          ; false?
  br i1 %cmp252584, label %else252586, label %then252585                             ; if

then252585:
  %msg240743 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str252587, i32 0, i32 0)); quoted string
  %abort240741 = call i64 @prim_halt(i64 %msg240743)                                 ; call prim_halt
  %sym240746 = add i64 0, 0                                                          ; quoted ()
  %cloptr252588 = inttoptr i64 %abort240741 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr252589 = getelementptr inbounds i64, i64* %cloptr252588, i64 0               ; &cloptr252588[0]
  %f252591 = load i64, i64* %i0ptr252589, align 8                                    ; load; *i0ptr252589
  %fptr252590 = inttoptr i64 %f252591 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr252590(i64 %abort240741, i64 %sym240746)            ; tail call
  ret void

else252586:
  %_95234262 = call i64 @prim_car(i64 %rvp240738)                                    ; call prim_car
  %rvp240728 = call i64 @prim_cdr(i64 %rvp240738)                                    ; call prim_cdr
  %check240729 = call i64 @prim_null_63(i64 %rvp240728)                              ; call prim_null_63
  %cmp252592 = icmp eq i64 %check240729, 15                                          ; false?
  br i1 %cmp252592, label %else252594, label %then252593                             ; if

then252593:
  %msg240733 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str252595, i32 0, i32 0)); quoted string
  %abort240731 = call i64 @prim_halt(i64 %msg240733)                                 ; call prim_halt
  %sym240736 = add i64 0, 0                                                          ; quoted ()
  %cloptr252596 = inttoptr i64 %abort240731 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr252597 = getelementptr inbounds i64, i64* %cloptr252596, i64 0               ; &cloptr252596[0]
  %f252599 = load i64, i64* %i0ptr252597, align 8                                    ; load; *i0ptr252597
  %fptr252598 = inttoptr i64 %f252599 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr252598(i64 %abort240731, i64 %sym240736)            ; tail call
  ret void

else252594:
  %rest240735 = call i64 @prim_cdr(i64 %rvp240728)                                   ; call prim_cdr
  %empty240730 = call i64 @prim_null_63(i64 %rest240735)                             ; call prim_null_63
  %cmp252600 = icmp eq i64 %empty240730, 15                                          ; false?
  br i1 %cmp252600, label %else252602, label %then252601                             ; if

then252601:
  %lsts_43233621233797 = call i64 @prim_car(i64 %rvp240728)                          ; call prim_car
  %na240598 = call i64 @prim_cdr(i64 %rvp240728)                                     ; call prim_cdr
  %cloptr252603 = call i64* @alloc(i64 56)                                           ; malloc
  %eptr252605 = getelementptr inbounds i64, i64* %cloptr252603, i64 1                ; &eptr252605[1]
  %eptr252606 = getelementptr inbounds i64, i64* %cloptr252603, i64 2                ; &eptr252606[2]
  %eptr252607 = getelementptr inbounds i64, i64* %cloptr252603, i64 3                ; &eptr252607[3]
  %eptr252608 = getelementptr inbounds i64, i64* %cloptr252603, i64 4                ; &eptr252608[4]
  %eptr252609 = getelementptr inbounds i64, i64* %cloptr252603, i64 5                ; &eptr252609[5]
  %eptr252610 = getelementptr inbounds i64, i64* %cloptr252603, i64 6                ; &eptr252610[6]
  store i64 %cont234257, i64* %eptr252605                                            ; *eptr252605 = %cont234257
  store i64 %acc233617233793, i64* %eptr252606                                       ; *eptr252606 = %acc233617233793
  store i64 %f233616233792, i64* %eptr252607                                         ; *eptr252607 = %f233616233792
  store i64 %_37foldr1233585233761, i64* %eptr252608                                 ; *eptr252608 = %_37foldr1233585233761
  store i64 %_37foldr233614233790, i64* %eptr252609                                  ; *eptr252609 = %_37foldr233614233790
  store i64 %lsts_43233621233797, i64* %eptr252610                                   ; *eptr252610 = %lsts_43233621233797
  %eptr252604 = getelementptr inbounds i64, i64* %cloptr252603, i64 0                ; &cloptr252603[0]
  %f252611 = ptrtoint void(i64,i64)* @lam241950 to i64                               ; fptr cast; i64(...)* -> i64
  store i64 %f252611, i64* %eptr252604                                               ; store fptr
  %arg235697 = ptrtoint i64* %cloptr252603 to i64                                    ; closure cast; i64* -> i64
  %cloptr252612 = call i64* @alloc(i64 8)                                            ; malloc
  %eptr252613 = getelementptr inbounds i64, i64* %cloptr252612, i64 0                ; &cloptr252612[0]
  %f252614 = ptrtoint void(i64,i64)* @lam241912 to i64                               ; fptr cast; i64(...)* -> i64
  store i64 %f252614, i64* %eptr252613                                               ; store fptr
  %arg235696 = ptrtoint i64* %cloptr252612 to i64                                    ; closure cast; i64* -> i64
  %sym240724 = add i64 0, 0                                                          ; quoted ()
  %x240725 = call i64 @prim_cons(i64 %lsts233618233794, i64 %sym240724)              ; call prim_cons
  %x240726 = call i64 @prim_cons(i64 %arg235696, i64 %x240725)                       ; call prim_cons
  %x240727 = call i64 @prim_cons(i64 %arg235697, i64 %x240726)                       ; call prim_cons
  %cloptr252615 = inttoptr i64 %_37map1233586233762 to i64*                          ; closure/env cast; i64 -> i64*
  %i0ptr252616 = getelementptr inbounds i64, i64* %cloptr252615, i64 0               ; &cloptr252615[0]
  %f252618 = load i64, i64* %i0ptr252616, align 8                                    ; load; *i0ptr252616
  %fptr252617 = inttoptr i64 %f252618 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr252617(i64 %_37map1233586233762, i64 %x240727)      ; tail call
  ret void

else252602:
  %many240734 = call i64 @const_init_string(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @str252619, i32 0, i32 0)); quoted string
  %fail240732 = call i64 @prim_halt(i64 %many240734)                                 ; call prim_halt
  %sym240737 = add i64 0, 0                                                          ; quoted ()
  %cloptr252620 = inttoptr i64 %fail240732 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr252621 = getelementptr inbounds i64, i64* %cloptr252620, i64 0               ; &cloptr252620[0]
  %f252623 = load i64, i64* %i0ptr252621, align 8                                    ; load; *i0ptr252621
  %fptr252622 = inttoptr i64 %f252623 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr252622(i64 %fail240732, i64 %sym240737)             ; tail call
  ret void
}


define void @lam241950(i64 %env241951, i64 %rvp240691) {
  %envptr252624 = inttoptr i64 %env241951 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr252625 = getelementptr inbounds i64, i64* %envptr252624, i64 6              ; &envptr252624[6]
  %lsts_43233621233797 = load i64, i64* %envptr252625, align 8                       ; load; *envptr252625
  %envptr252626 = inttoptr i64 %env241951 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr252627 = getelementptr inbounds i64, i64* %envptr252626, i64 5              ; &envptr252626[5]
  %_37foldr233614233790 = load i64, i64* %envptr252627, align 8                      ; load; *envptr252627
  %envptr252628 = inttoptr i64 %env241951 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr252629 = getelementptr inbounds i64, i64* %envptr252628, i64 4              ; &envptr252628[4]
  %_37foldr1233585233761 = load i64, i64* %envptr252629, align 8                     ; load; *envptr252629
  %envptr252630 = inttoptr i64 %env241951 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr252631 = getelementptr inbounds i64, i64* %envptr252630, i64 3              ; &envptr252630[3]
  %f233616233792 = load i64, i64* %envptr252631, align 8                             ; load; *envptr252631
  %envptr252632 = inttoptr i64 %env241951 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr252633 = getelementptr inbounds i64, i64* %envptr252632, i64 2              ; &envptr252632[2]
  %acc233617233793 = load i64, i64* %envptr252633, align 8                           ; load; *envptr252633
  %envptr252634 = inttoptr i64 %env241951 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr252635 = getelementptr inbounds i64, i64* %envptr252634, i64 1              ; &envptr252634[1]
  %cont234257 = load i64, i64* %envptr252635, align 8                                ; load; *envptr252635
  %check240692 = call i64 @prim_null_63(i64 %rvp240691)                              ; call prim_null_63
  %cmp252636 = icmp eq i64 %check240692, 15                                          ; false?
  br i1 %cmp252636, label %else252638, label %then252637                             ; if

then252637:
  %msg240696 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str252639, i32 0, i32 0)); quoted string
  %abort240694 = call i64 @prim_halt(i64 %msg240696)                                 ; call prim_halt
  %sym240699 = add i64 0, 0                                                          ; quoted ()
  %cloptr252640 = inttoptr i64 %abort240694 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr252641 = getelementptr inbounds i64, i64* %cloptr252640, i64 0               ; &cloptr252640[0]
  %f252643 = load i64, i64* %i0ptr252641, align 8                                    ; load; *i0ptr252641
  %fptr252642 = inttoptr i64 %f252643 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr252642(i64 %abort240694, i64 %sym240699)            ; tail call
  ret void

else252638:
  %_95234263 = call i64 @prim_car(i64 %rvp240691)                                    ; call prim_car
  %rvp240681 = call i64 @prim_cdr(i64 %rvp240691)                                    ; call prim_cdr
  %check240682 = call i64 @prim_null_63(i64 %rvp240681)                              ; call prim_null_63
  %cmp252644 = icmp eq i64 %check240682, 15                                          ; false?
  br i1 %cmp252644, label %else252646, label %then252645                             ; if

then252645:
  %msg240686 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str252647, i32 0, i32 0)); quoted string
  %abort240684 = call i64 @prim_halt(i64 %msg240686)                                 ; call prim_halt
  %sym240689 = add i64 0, 0                                                          ; quoted ()
  %cloptr252648 = inttoptr i64 %abort240684 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr252649 = getelementptr inbounds i64, i64* %cloptr252648, i64 0               ; &cloptr252648[0]
  %f252651 = load i64, i64* %i0ptr252649, align 8                                    ; load; *i0ptr252649
  %fptr252650 = inttoptr i64 %f252651 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr252650(i64 %abort240684, i64 %sym240689)            ; tail call
  ret void

else252646:
  %rest240688 = call i64 @prim_cdr(i64 %rvp240681)                                   ; call prim_cdr
  %empty240683 = call i64 @prim_null_63(i64 %rest240688)                             ; call prim_null_63
  %cmp252652 = icmp eq i64 %empty240683, 15                                          ; false?
  br i1 %cmp252652, label %else252654, label %then252653                             ; if

then252653:
  %vs233622233798 = call i64 @prim_car(i64 %rvp240681)                               ; call prim_car
  %na240600 = call i64 @prim_cdr(i64 %rvp240681)                                     ; call prim_cdr
  %a233965 = call i64 @prim_cons(i64 %acc233617233793, i64 %lsts_43233621233797)     ; call prim_cons
  %a233966 = call i64 @prim_cons(i64 %f233616233792, i64 %a233965)                   ; call prim_cons
  %cloptr252655 = call i64* @alloc(i64 40)                                           ; malloc
  %eptr252657 = getelementptr inbounds i64, i64* %cloptr252655, i64 1                ; &eptr252657[1]
  %eptr252658 = getelementptr inbounds i64, i64* %cloptr252655, i64 2                ; &eptr252658[2]
  %eptr252659 = getelementptr inbounds i64, i64* %cloptr252655, i64 3                ; &eptr252659[3]
  %eptr252660 = getelementptr inbounds i64, i64* %cloptr252655, i64 4                ; &eptr252660[4]
  store i64 %cont234257, i64* %eptr252657                                            ; *eptr252657 = %cont234257
  store i64 %f233616233792, i64* %eptr252658                                         ; *eptr252658 = %f233616233792
  store i64 %_37foldr1233585233761, i64* %eptr252659                                 ; *eptr252659 = %_37foldr1233585233761
  store i64 %vs233622233798, i64* %eptr252660                                        ; *eptr252660 = %vs233622233798
  %eptr252656 = getelementptr inbounds i64, i64* %cloptr252655, i64 0                ; &cloptr252655[0]
  %f252661 = ptrtoint void(i64,i64)* @lam241946 to i64                               ; fptr cast; i64(...)* -> i64
  store i64 %f252661, i64* %eptr252656                                               ; store fptr
  %arg235704 = ptrtoint i64* %cloptr252655 to i64                                    ; closure cast; i64* -> i64
  %cps_45lst234269 = call i64 @prim_cons(i64 %arg235704, i64 %a233966)               ; call prim_cons
  %cloptr252662 = inttoptr i64 %_37foldr233614233790 to i64*                         ; closure/env cast; i64 -> i64*
  %i0ptr252663 = getelementptr inbounds i64, i64* %cloptr252662, i64 0               ; &cloptr252662[0]
  %f252665 = load i64, i64* %i0ptr252663, align 8                                    ; load; *i0ptr252663
  %fptr252664 = inttoptr i64 %f252665 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr252664(i64 %_37foldr233614233790, i64 %cps_45lst234269); tail call
  ret void

else252654:
  %many240687 = call i64 @const_init_string(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @str252666, i32 0, i32 0)); quoted string
  %fail240685 = call i64 @prim_halt(i64 %many240687)                                 ; call prim_halt
  %sym240690 = add i64 0, 0                                                          ; quoted ()
  %cloptr252667 = inttoptr i64 %fail240685 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr252668 = getelementptr inbounds i64, i64* %cloptr252667, i64 0               ; &cloptr252667[0]
  %f252670 = load i64, i64* %i0ptr252668, align 8                                    ; load; *i0ptr252668
  %fptr252669 = inttoptr i64 %f252670 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr252669(i64 %fail240685, i64 %sym240690)             ; tail call
  ret void
}


define void @lam241946(i64 %env241947, i64 %rvp240672) {
  %envptr252671 = inttoptr i64 %env241947 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr252672 = getelementptr inbounds i64, i64* %envptr252671, i64 4              ; &envptr252671[4]
  %vs233622233798 = load i64, i64* %envptr252672, align 8                            ; load; *envptr252672
  %envptr252673 = inttoptr i64 %env241947 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr252674 = getelementptr inbounds i64, i64* %envptr252673, i64 3              ; &envptr252673[3]
  %_37foldr1233585233761 = load i64, i64* %envptr252674, align 8                     ; load; *envptr252674
  %envptr252675 = inttoptr i64 %env241947 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr252676 = getelementptr inbounds i64, i64* %envptr252675, i64 2              ; &envptr252675[2]
  %f233616233792 = load i64, i64* %envptr252676, align 8                             ; load; *envptr252676
  %envptr252677 = inttoptr i64 %env241947 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr252678 = getelementptr inbounds i64, i64* %envptr252677, i64 1              ; &envptr252677[1]
  %cont234257 = load i64, i64* %envptr252678, align 8                                ; load; *envptr252678
  %check240673 = call i64 @prim_null_63(i64 %rvp240672)                              ; call prim_null_63
  %cmp252679 = icmp eq i64 %check240673, 15                                          ; false?
  br i1 %cmp252679, label %else252681, label %then252680                             ; if

then252680:
  %msg240677 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str252682, i32 0, i32 0)); quoted string
  %abort240675 = call i64 @prim_halt(i64 %msg240677)                                 ; call prim_halt
  %sym240680 = add i64 0, 0                                                          ; quoted ()
  %cloptr252683 = inttoptr i64 %abort240675 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr252684 = getelementptr inbounds i64, i64* %cloptr252683, i64 0               ; &cloptr252683[0]
  %f252686 = load i64, i64* %i0ptr252684, align 8                                    ; load; *i0ptr252684
  %fptr252685 = inttoptr i64 %f252686 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr252685(i64 %abort240675, i64 %sym240680)            ; tail call
  ret void

else252681:
  %_95234264 = call i64 @prim_car(i64 %rvp240672)                                    ; call prim_car
  %rvp240662 = call i64 @prim_cdr(i64 %rvp240672)                                    ; call prim_cdr
  %check240663 = call i64 @prim_null_63(i64 %rvp240662)                              ; call prim_null_63
  %cmp252687 = icmp eq i64 %check240663, 15                                          ; false?
  br i1 %cmp252687, label %else252689, label %then252688                             ; if

then252688:
  %msg240667 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str252690, i32 0, i32 0)); quoted string
  %abort240665 = call i64 @prim_halt(i64 %msg240667)                                 ; call prim_halt
  %sym240670 = add i64 0, 0                                                          ; quoted ()
  %cloptr252691 = inttoptr i64 %abort240665 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr252692 = getelementptr inbounds i64, i64* %cloptr252691, i64 0               ; &cloptr252691[0]
  %f252694 = load i64, i64* %i0ptr252692, align 8                                    ; load; *i0ptr252692
  %fptr252693 = inttoptr i64 %f252694 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr252693(i64 %abort240665, i64 %sym240670)            ; tail call
  ret void

else252689:
  %rest240669 = call i64 @prim_cdr(i64 %rvp240662)                                   ; call prim_cdr
  %empty240664 = call i64 @prim_null_63(i64 %rest240669)                             ; call prim_null_63
  %cmp252695 = icmp eq i64 %empty240664, 15                                          ; false?
  br i1 %cmp252695, label %else252697, label %then252696                             ; if

then252696:
  %a233967 = call i64 @prim_car(i64 %rvp240662)                                      ; call prim_car
  %na240602 = call i64 @prim_cdr(i64 %rvp240662)                                     ; call prim_cdr
  %arg235705 = add i64 0, 0                                                          ; quoted ()
  %a233968 = call i64 @prim_cons(i64 %a233967, i64 %arg235705)                       ; call prim_cons
  %cloptr252698 = call i64* @alloc(i64 24)                                           ; malloc
  %eptr252700 = getelementptr inbounds i64, i64* %cloptr252698, i64 1                ; &eptr252700[1]
  %eptr252701 = getelementptr inbounds i64, i64* %cloptr252698, i64 2                ; &eptr252701[2]
  store i64 %cont234257, i64* %eptr252700                                            ; *eptr252700 = %cont234257
  store i64 %f233616233792, i64* %eptr252701                                         ; *eptr252701 = %f233616233792
  %eptr252699 = getelementptr inbounds i64, i64* %cloptr252698, i64 0                ; &cloptr252698[0]
  %f252702 = ptrtoint void(i64,i64)* @lam241941 to i64                               ; fptr cast; i64(...)* -> i64
  store i64 %f252702, i64* %eptr252699                                               ; store fptr
  %arg235710 = ptrtoint i64* %cloptr252698 to i64                                    ; closure cast; i64* -> i64
  %cloptr252703 = call i64* @alloc(i64 8)                                            ; malloc
  %eptr252704 = getelementptr inbounds i64, i64* %cloptr252703, i64 0                ; &cloptr252703[0]
  %f252705 = ptrtoint void(i64,i64)* @lam241933 to i64                               ; fptr cast; i64(...)* -> i64
  store i64 %f252705, i64* %eptr252704                                               ; store fptr
  %arg235709 = ptrtoint i64* %cloptr252703 to i64                                    ; closure cast; i64* -> i64
  %sym240657 = add i64 0, 0                                                          ; quoted ()
  %x240658 = call i64 @prim_cons(i64 %vs233622233798, i64 %sym240657)                ; call prim_cons
  %x240659 = call i64 @prim_cons(i64 %a233968, i64 %x240658)                         ; call prim_cons
  %x240660 = call i64 @prim_cons(i64 %arg235709, i64 %x240659)                       ; call prim_cons
  %x240661 = call i64 @prim_cons(i64 %arg235710, i64 %x240660)                       ; call prim_cons
  %cloptr252706 = inttoptr i64 %_37foldr1233585233761 to i64*                        ; closure/env cast; i64 -> i64*
  %i0ptr252707 = getelementptr inbounds i64, i64* %cloptr252706, i64 0               ; &cloptr252706[0]
  %f252709 = load i64, i64* %i0ptr252707, align 8                                    ; load; *i0ptr252707
  %fptr252708 = inttoptr i64 %f252709 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr252708(i64 %_37foldr1233585233761, i64 %x240661)    ; tail call
  ret void

else252697:
  %many240668 = call i64 @const_init_string(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @str252710, i32 0, i32 0)); quoted string
  %fail240666 = call i64 @prim_halt(i64 %many240668)                                 ; call prim_halt
  %sym240671 = add i64 0, 0                                                          ; quoted ()
  %cloptr252711 = inttoptr i64 %fail240666 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr252712 = getelementptr inbounds i64, i64* %cloptr252711, i64 0               ; &cloptr252711[0]
  %f252714 = load i64, i64* %i0ptr252712, align 8                                    ; load; *i0ptr252712
  %fptr252713 = inttoptr i64 %f252714 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr252713(i64 %fail240666, i64 %sym240671)             ; tail call
  ret void
}


define void @lam241941(i64 %env241942, i64 %rvp240615) {
  %envptr252715 = inttoptr i64 %env241942 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr252716 = getelementptr inbounds i64, i64* %envptr252715, i64 2              ; &envptr252715[2]
  %f233616233792 = load i64, i64* %envptr252716, align 8                             ; load; *envptr252716
  %envptr252717 = inttoptr i64 %env241942 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr252718 = getelementptr inbounds i64, i64* %envptr252717, i64 1              ; &envptr252717[1]
  %cont234257 = load i64, i64* %envptr252718, align 8                                ; load; *envptr252718
  %check240616 = call i64 @prim_null_63(i64 %rvp240615)                              ; call prim_null_63
  %cmp252719 = icmp eq i64 %check240616, 15                                          ; false?
  br i1 %cmp252719, label %else252721, label %then252720                             ; if

then252720:
  %msg240620 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str252722, i32 0, i32 0)); quoted string
  %abort240618 = call i64 @prim_halt(i64 %msg240620)                                 ; call prim_halt
  %sym240623 = add i64 0, 0                                                          ; quoted ()
  %cloptr252723 = inttoptr i64 %abort240618 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr252724 = getelementptr inbounds i64, i64* %cloptr252723, i64 0               ; &cloptr252723[0]
  %f252726 = load i64, i64* %i0ptr252724, align 8                                    ; load; *i0ptr252724
  %fptr252725 = inttoptr i64 %f252726 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr252725(i64 %abort240618, i64 %sym240623)            ; tail call
  ret void

else252721:
  %_95234265 = call i64 @prim_car(i64 %rvp240615)                                    ; call prim_car
  %rvp240605 = call i64 @prim_cdr(i64 %rvp240615)                                    ; call prim_cdr
  %check240606 = call i64 @prim_null_63(i64 %rvp240605)                              ; call prim_null_63
  %cmp252727 = icmp eq i64 %check240606, 15                                          ; false?
  br i1 %cmp252727, label %else252729, label %then252728                             ; if

then252728:
  %msg240610 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str252730, i32 0, i32 0)); quoted string
  %abort240608 = call i64 @prim_halt(i64 %msg240610)                                 ; call prim_halt
  %sym240613 = add i64 0, 0                                                          ; quoted ()
  %cloptr252731 = inttoptr i64 %abort240608 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr252732 = getelementptr inbounds i64, i64* %cloptr252731, i64 0               ; &cloptr252731[0]
  %f252734 = load i64, i64* %i0ptr252732, align 8                                    ; load; *i0ptr252732
  %fptr252733 = inttoptr i64 %f252734 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr252733(i64 %abort240608, i64 %sym240613)            ; tail call
  ret void

else252729:
  %rest240612 = call i64 @prim_cdr(i64 %rvp240605)                                   ; call prim_cdr
  %empty240607 = call i64 @prim_null_63(i64 %rest240612)                             ; call prim_null_63
  %cmp252735 = icmp eq i64 %empty240607, 15                                          ; false?
  br i1 %cmp252735, label %else252737, label %then252736                             ; if

then252736:
  %a233969 = call i64 @prim_car(i64 %rvp240605)                                      ; call prim_car
  %na240604 = call i64 @prim_cdr(i64 %rvp240605)                                     ; call prim_cdr
  %cps_45lst234266 = call i64 @prim_cons(i64 %cont234257, i64 %a233969)              ; call prim_cons
  %cloptr252738 = inttoptr i64 %f233616233792 to i64*                                ; closure/env cast; i64 -> i64*
  %i0ptr252739 = getelementptr inbounds i64, i64* %cloptr252738, i64 0               ; &cloptr252738[0]
  %f252741 = load i64, i64* %i0ptr252739, align 8                                    ; load; *i0ptr252739
  %fptr252740 = inttoptr i64 %f252741 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr252740(i64 %f233616233792, i64 %cps_45lst234266)    ; tail call
  ret void

else252737:
  %many240611 = call i64 @const_init_string(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @str252742, i32 0, i32 0)); quoted string
  %fail240609 = call i64 @prim_halt(i64 %many240611)                                 ; call prim_halt
  %sym240614 = add i64 0, 0                                                          ; quoted ()
  %cloptr252743 = inttoptr i64 %fail240609 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr252744 = getelementptr inbounds i64, i64* %cloptr252743, i64 0               ; &cloptr252743[0]
  %f252746 = load i64, i64* %i0ptr252744, align 8                                    ; load; *i0ptr252744
  %fptr252745 = inttoptr i64 %f252746 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr252745(i64 %fail240609, i64 %sym240614)             ; tail call
  ret void
}


define void @lam241933(i64 %env241934, i64 %rvp240648) {
  %check240649 = call i64 @prim_null_63(i64 %rvp240648)                              ; call prim_null_63
  %cmp252747 = icmp eq i64 %check240649, 15                                          ; false?
  br i1 %cmp252747, label %else252749, label %then252748                             ; if

then252748:
  %msg240653 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str252750, i32 0, i32 0)); quoted string
  %abort240651 = call i64 @prim_halt(i64 %msg240653)                                 ; call prim_halt
  %sym240656 = add i64 0, 0                                                          ; quoted ()
  %cloptr252751 = inttoptr i64 %abort240651 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr252752 = getelementptr inbounds i64, i64* %cloptr252751, i64 0               ; &cloptr252751[0]
  %f252754 = load i64, i64* %i0ptr252752, align 8                                    ; load; *i0ptr252752
  %fptr252753 = inttoptr i64 %f252754 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr252753(i64 %abort240651, i64 %sym240656)            ; tail call
  ret void

else252749:
  %cont234267 = call i64 @prim_car(i64 %rvp240648)                                   ; call prim_car
  %rvp240639 = call i64 @prim_cdr(i64 %rvp240648)                                    ; call prim_cdr
  %check240640 = call i64 @prim_null_63(i64 %rvp240639)                              ; call prim_null_63
  %cmp252755 = icmp eq i64 %check240640, 15                                          ; false?
  br i1 %cmp252755, label %else252757, label %then252756                             ; if

then252756:
  %msg240644 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str252758, i32 0, i32 0)); quoted string
  %abort240642 = call i64 @prim_halt(i64 %msg240644)                                 ; call prim_halt
  %sym240647 = add i64 0, 0                                                          ; quoted ()
  %cloptr252759 = inttoptr i64 %abort240642 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr252760 = getelementptr inbounds i64, i64* %cloptr252759, i64 0               ; &cloptr252759[0]
  %f252762 = load i64, i64* %i0ptr252760, align 8                                    ; load; *i0ptr252760
  %fptr252761 = inttoptr i64 %f252762 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr252761(i64 %abort240642, i64 %sym240647)            ; tail call
  ret void

else252757:
  %a233625233801 = call i64 @prim_car(i64 %rvp240639)                                ; call prim_car
  %rvp240629 = call i64 @prim_cdr(i64 %rvp240639)                                    ; call prim_cdr
  %check240630 = call i64 @prim_null_63(i64 %rvp240629)                              ; call prim_null_63
  %cmp252763 = icmp eq i64 %check240630, 15                                          ; false?
  br i1 %cmp252763, label %else252765, label %then252764                             ; if

then252764:
  %msg240634 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str252766, i32 0, i32 0)); quoted string
  %abort240632 = call i64 @prim_halt(i64 %msg240634)                                 ; call prim_halt
  %sym240637 = add i64 0, 0                                                          ; quoted ()
  %cloptr252767 = inttoptr i64 %abort240632 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr252768 = getelementptr inbounds i64, i64* %cloptr252767, i64 0               ; &cloptr252767[0]
  %f252770 = load i64, i64* %i0ptr252768, align 8                                    ; load; *i0ptr252768
  %fptr252769 = inttoptr i64 %f252770 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr252769(i64 %abort240632, i64 %sym240637)            ; tail call
  ret void

else252765:
  %rest240636 = call i64 @prim_cdr(i64 %rvp240629)                                   ; call prim_cdr
  %empty240631 = call i64 @prim_null_63(i64 %rest240636)                             ; call prim_null_63
  %cmp252771 = icmp eq i64 %empty240631, 15                                          ; false?
  br i1 %cmp252771, label %else252773, label %then252772                             ; if

then252772:
  %b233626233802 = call i64 @prim_car(i64 %rvp240629)                                ; call prim_car
  %na240625 = call i64 @prim_cdr(i64 %rvp240629)                                     ; call prim_cdr
  %retprim234268 = call i64 @prim_cons(i64 %a233625233801, i64 %b233626233802)       ; call prim_cons
  %arg235718 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %sym240626 = add i64 0, 0                                                          ; quoted ()
  %x240627 = call i64 @prim_cons(i64 %retprim234268, i64 %sym240626)                 ; call prim_cons
  %x240628 = call i64 @prim_cons(i64 %arg235718, i64 %x240627)                       ; call prim_cons
  %cloptr252774 = inttoptr i64 %cont234267 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr252775 = getelementptr inbounds i64, i64* %cloptr252774, i64 0               ; &cloptr252774[0]
  %f252777 = load i64, i64* %i0ptr252775, align 8                                    ; load; *i0ptr252775
  %fptr252776 = inttoptr i64 %f252777 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr252776(i64 %cont234267, i64 %x240628)               ; tail call
  ret void

else252773:
  %many240635 = call i64 @const_init_string(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @str252778, i32 0, i32 0)); quoted string
  %fail240633 = call i64 @prim_halt(i64 %many240635)                                 ; call prim_halt
  %sym240638 = add i64 0, 0                                                          ; quoted ()
  %cloptr252779 = inttoptr i64 %fail240633 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr252780 = getelementptr inbounds i64, i64* %cloptr252779, i64 0               ; &cloptr252779[0]
  %f252782 = load i64, i64* %i0ptr252780, align 8                                    ; load; *i0ptr252780
  %fptr252781 = inttoptr i64 %f252782 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr252781(i64 %fail240633, i64 %sym240638)             ; tail call
  ret void
}


define void @lam241912(i64 %env241913, i64 %rvp240715) {
  %check240716 = call i64 @prim_null_63(i64 %rvp240715)                              ; call prim_null_63
  %cmp252783 = icmp eq i64 %check240716, 15                                          ; false?
  br i1 %cmp252783, label %else252785, label %then252784                             ; if

then252784:
  %msg240720 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str252786, i32 0, i32 0)); quoted string
  %abort240718 = call i64 @prim_halt(i64 %msg240720)                                 ; call prim_halt
  %sym240723 = add i64 0, 0                                                          ; quoted ()
  %cloptr252787 = inttoptr i64 %abort240718 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr252788 = getelementptr inbounds i64, i64* %cloptr252787, i64 0               ; &cloptr252787[0]
  %f252790 = load i64, i64* %i0ptr252788, align 8                                    ; load; *i0ptr252788
  %fptr252789 = inttoptr i64 %f252790 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr252789(i64 %abort240718, i64 %sym240723)            ; tail call
  ret void

else252785:
  %cont234270 = call i64 @prim_car(i64 %rvp240715)                                   ; call prim_car
  %rvp240705 = call i64 @prim_cdr(i64 %rvp240715)                                    ; call prim_cdr
  %check240706 = call i64 @prim_null_63(i64 %rvp240705)                              ; call prim_null_63
  %cmp252791 = icmp eq i64 %check240706, 15                                          ; false?
  br i1 %cmp252791, label %else252793, label %then252792                             ; if

then252792:
  %msg240710 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str252794, i32 0, i32 0)); quoted string
  %abort240708 = call i64 @prim_halt(i64 %msg240710)                                 ; call prim_halt
  %sym240713 = add i64 0, 0                                                          ; quoted ()
  %cloptr252795 = inttoptr i64 %abort240708 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr252796 = getelementptr inbounds i64, i64* %cloptr252795, i64 0               ; &cloptr252795[0]
  %f252798 = load i64, i64* %i0ptr252796, align 8                                    ; load; *i0ptr252796
  %fptr252797 = inttoptr i64 %f252798 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr252797(i64 %abort240708, i64 %sym240713)            ; tail call
  ret void

else252793:
  %rest240712 = call i64 @prim_cdr(i64 %rvp240705)                                   ; call prim_cdr
  %empty240707 = call i64 @prim_null_63(i64 %rest240712)                             ; call prim_null_63
  %cmp252799 = icmp eq i64 %empty240707, 15                                          ; false?
  br i1 %cmp252799, label %else252801, label %then252800                             ; if

then252800:
  %x233624233800 = call i64 @prim_car(i64 %rvp240705)                                ; call prim_car
  %na240701 = call i64 @prim_cdr(i64 %rvp240705)                                     ; call prim_cdr
  %retprim234271 = call i64 @prim_car(i64 %x233624233800)                            ; call prim_car
  %arg235723 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %sym240702 = add i64 0, 0                                                          ; quoted ()
  %x240703 = call i64 @prim_cons(i64 %retprim234271, i64 %sym240702)                 ; call prim_cons
  %x240704 = call i64 @prim_cons(i64 %arg235723, i64 %x240703)                       ; call prim_cons
  %cloptr252802 = inttoptr i64 %cont234270 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr252803 = getelementptr inbounds i64, i64* %cloptr252802, i64 0               ; &cloptr252802[0]
  %f252805 = load i64, i64* %i0ptr252803, align 8                                    ; load; *i0ptr252803
  %fptr252804 = inttoptr i64 %f252805 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr252804(i64 %cont234270, i64 %x240704)               ; tail call
  ret void

else252801:
  %many240711 = call i64 @const_init_string(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @str252806, i32 0, i32 0)); quoted string
  %fail240709 = call i64 @prim_halt(i64 %many240711)                                 ; call prim_halt
  %sym240714 = add i64 0, 0                                                          ; quoted ()
  %cloptr252807 = inttoptr i64 %fail240709 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr252808 = getelementptr inbounds i64, i64* %cloptr252807, i64 0               ; &cloptr252807[0]
  %f252810 = load i64, i64* %i0ptr252808, align 8                                    ; load; *i0ptr252808
  %fptr252809 = inttoptr i64 %f252810 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr252809(i64 %fail240709, i64 %sym240714)             ; tail call
  ret void
}


define void @lam241897(i64 %env241898, i64 %rvp240762) {
  %check240763 = call i64 @prim_null_63(i64 %rvp240762)                              ; call prim_null_63
  %cmp252811 = icmp eq i64 %check240763, 15                                          ; false?
  br i1 %cmp252811, label %else252813, label %then252812                             ; if

then252812:
  %msg240767 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str252814, i32 0, i32 0)); quoted string
  %abort240765 = call i64 @prim_halt(i64 %msg240767)                                 ; call prim_halt
  %sym240770 = add i64 0, 0                                                          ; quoted ()
  %cloptr252815 = inttoptr i64 %abort240765 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr252816 = getelementptr inbounds i64, i64* %cloptr252815, i64 0               ; &cloptr252815[0]
  %f252818 = load i64, i64* %i0ptr252816, align 8                                    ; load; *i0ptr252816
  %fptr252817 = inttoptr i64 %f252818 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr252817(i64 %abort240765, i64 %sym240770)            ; tail call
  ret void

else252813:
  %cont234272 = call i64 @prim_car(i64 %rvp240762)                                   ; call prim_car
  %rvp240752 = call i64 @prim_cdr(i64 %rvp240762)                                    ; call prim_cdr
  %check240753 = call i64 @prim_null_63(i64 %rvp240752)                              ; call prim_null_63
  %cmp252819 = icmp eq i64 %check240753, 15                                          ; false?
  br i1 %cmp252819, label %else252821, label %then252820                             ; if

then252820:
  %msg240757 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str252822, i32 0, i32 0)); quoted string
  %abort240755 = call i64 @prim_halt(i64 %msg240757)                                 ; call prim_halt
  %sym240760 = add i64 0, 0                                                          ; quoted ()
  %cloptr252823 = inttoptr i64 %abort240755 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr252824 = getelementptr inbounds i64, i64* %cloptr252823, i64 0               ; &cloptr252823[0]
  %f252826 = load i64, i64* %i0ptr252824, align 8                                    ; load; *i0ptr252824
  %fptr252825 = inttoptr i64 %f252826 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr252825(i64 %abort240755, i64 %sym240760)            ; tail call
  ret void

else252821:
  %rest240759 = call i64 @prim_cdr(i64 %rvp240752)                                   ; call prim_cdr
  %empty240754 = call i64 @prim_null_63(i64 %rest240759)                             ; call prim_null_63
  %cmp252827 = icmp eq i64 %empty240754, 15                                          ; false?
  br i1 %cmp252827, label %else252829, label %then252828                             ; if

then252828:
  %x233623233799 = call i64 @prim_car(i64 %rvp240752)                                ; call prim_car
  %na240748 = call i64 @prim_cdr(i64 %rvp240752)                                     ; call prim_cdr
  %retprim234273 = call i64 @prim_cdr(i64 %x233623233799)                            ; call prim_cdr
  %arg235727 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %sym240749 = add i64 0, 0                                                          ; quoted ()
  %x240750 = call i64 @prim_cons(i64 %retprim234273, i64 %sym240749)                 ; call prim_cons
  %x240751 = call i64 @prim_cons(i64 %arg235727, i64 %x240750)                       ; call prim_cons
  %cloptr252830 = inttoptr i64 %cont234272 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr252831 = getelementptr inbounds i64, i64* %cloptr252830, i64 0               ; &cloptr252830[0]
  %f252833 = load i64, i64* %i0ptr252831, align 8                                    ; load; *i0ptr252831
  %fptr252832 = inttoptr i64 %f252833 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr252832(i64 %cont234272, i64 %x240751)               ; tail call
  ret void

else252829:
  %many240758 = call i64 @const_init_string(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @str252834, i32 0, i32 0)); quoted string
  %fail240756 = call i64 @prim_halt(i64 %many240758)                                 ; call prim_halt
  %sym240761 = add i64 0, 0                                                          ; quoted ()
  %cloptr252835 = inttoptr i64 %fail240756 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr252836 = getelementptr inbounds i64, i64* %cloptr252835, i64 0               ; &cloptr252835[0]
  %f252838 = load i64, i64* %i0ptr252836, align 8                                    ; load; *i0ptr252836
  %fptr252837 = inttoptr i64 %f252838 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr252837(i64 %fail240756, i64 %sym240761)             ; tail call
  ret void
}


define void @lam241880(i64 %env241881, i64 %rvp240821) {
  %check240822 = call i64 @prim_null_63(i64 %rvp240821)                              ; call prim_null_63
  %cmp252839 = icmp eq i64 %check240822, 15                                          ; false?
  br i1 %cmp252839, label %else252841, label %then252840                             ; if

then252840:
  %msg240826 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str252842, i32 0, i32 0)); quoted string
  %abort240824 = call i64 @prim_halt(i64 %msg240826)                                 ; call prim_halt
  %sym240829 = add i64 0, 0                                                          ; quoted ()
  %cloptr252843 = inttoptr i64 %abort240824 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr252844 = getelementptr inbounds i64, i64* %cloptr252843, i64 0               ; &cloptr252843[0]
  %f252846 = load i64, i64* %i0ptr252844, align 8                                    ; load; *i0ptr252844
  %fptr252845 = inttoptr i64 %f252846 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr252845(i64 %abort240824, i64 %sym240829)            ; tail call
  ret void

else252841:
  %cont234274 = call i64 @prim_car(i64 %rvp240821)                                   ; call prim_car
  %rvp240812 = call i64 @prim_cdr(i64 %rvp240821)                                    ; call prim_cdr
  %check240813 = call i64 @prim_null_63(i64 %rvp240812)                              ; call prim_null_63
  %cmp252847 = icmp eq i64 %check240813, 15                                          ; false?
  br i1 %cmp252847, label %else252849, label %then252848                             ; if

then252848:
  %msg240817 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str252850, i32 0, i32 0)); quoted string
  %abort240815 = call i64 @prim_halt(i64 %msg240817)                                 ; call prim_halt
  %sym240820 = add i64 0, 0                                                          ; quoted ()
  %cloptr252851 = inttoptr i64 %abort240815 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr252852 = getelementptr inbounds i64, i64* %cloptr252851, i64 0               ; &cloptr252851[0]
  %f252854 = load i64, i64* %i0ptr252852, align 8                                    ; load; *i0ptr252852
  %fptr252853 = inttoptr i64 %f252854 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr252853(i64 %abort240815, i64 %sym240820)            ; tail call
  ret void

else252849:
  %lst233619233795 = call i64 @prim_car(i64 %rvp240812)                              ; call prim_car
  %rvp240802 = call i64 @prim_cdr(i64 %rvp240812)                                    ; call prim_cdr
  %check240803 = call i64 @prim_null_63(i64 %rvp240802)                              ; call prim_null_63
  %cmp252855 = icmp eq i64 %check240803, 15                                          ; false?
  br i1 %cmp252855, label %else252857, label %then252856                             ; if

then252856:
  %msg240807 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str252858, i32 0, i32 0)); quoted string
  %abort240805 = call i64 @prim_halt(i64 %msg240807)                                 ; call prim_halt
  %sym240810 = add i64 0, 0                                                          ; quoted ()
  %cloptr252859 = inttoptr i64 %abort240805 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr252860 = getelementptr inbounds i64, i64* %cloptr252859, i64 0               ; &cloptr252859[0]
  %f252862 = load i64, i64* %i0ptr252860, align 8                                    ; load; *i0ptr252860
  %fptr252861 = inttoptr i64 %f252862 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr252861(i64 %abort240805, i64 %sym240810)            ; tail call
  ret void

else252857:
  %rest240809 = call i64 @prim_cdr(i64 %rvp240802)                                   ; call prim_cdr
  %empty240804 = call i64 @prim_null_63(i64 %rest240809)                             ; call prim_null_63
  %cmp252863 = icmp eq i64 %empty240804, 15                                          ; false?
  br i1 %cmp252863, label %else252865, label %then252864                             ; if

then252864:
  %b233620233796 = call i64 @prim_car(i64 %rvp240802)                                ; call prim_car
  %na240795 = call i64 @prim_cdr(i64 %rvp240802)                                     ; call prim_cdr
  %cmp252866 = icmp eq i64 %b233620233796, 15                                        ; false?
  br i1 %cmp252866, label %else252868, label %then252867                             ; if

then252867:
  %arg235730 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %sym240796 = add i64 0, 0                                                          ; quoted ()
  %x240797 = call i64 @prim_cons(i64 %b233620233796, i64 %sym240796)                 ; call prim_cons
  %x240798 = call i64 @prim_cons(i64 %arg235730, i64 %x240797)                       ; call prim_cons
  %cloptr252869 = inttoptr i64 %cont234274 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr252870 = getelementptr inbounds i64, i64* %cloptr252869, i64 0               ; &cloptr252869[0]
  %f252872 = load i64, i64* %i0ptr252870, align 8                                    ; load; *i0ptr252870
  %fptr252871 = inttoptr i64 %f252872 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr252871(i64 %cont234274, i64 %x240798)               ; tail call
  ret void

else252868:
  %retprim234275 = call i64 @prim_null_63(i64 %lst233619233795)                      ; call prim_null_63
  %arg235734 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %sym240799 = add i64 0, 0                                                          ; quoted ()
  %x240800 = call i64 @prim_cons(i64 %retprim234275, i64 %sym240799)                 ; call prim_cons
  %x240801 = call i64 @prim_cons(i64 %arg235734, i64 %x240800)                       ; call prim_cons
  %cloptr252873 = inttoptr i64 %cont234274 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr252874 = getelementptr inbounds i64, i64* %cloptr252873, i64 0               ; &cloptr252873[0]
  %f252876 = load i64, i64* %i0ptr252874, align 8                                    ; load; *i0ptr252874
  %fptr252875 = inttoptr i64 %f252876 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr252875(i64 %cont234274, i64 %x240801)               ; tail call
  ret void

else252865:
  %many240808 = call i64 @const_init_string(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @str252877, i32 0, i32 0)); quoted string
  %fail240806 = call i64 @prim_halt(i64 %many240808)                                 ; call prim_halt
  %sym240811 = add i64 0, 0                                                          ; quoted ()
  %cloptr252878 = inttoptr i64 %fail240806 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr252879 = getelementptr inbounds i64, i64* %cloptr252878, i64 0               ; &cloptr252878[0]
  %f252881 = load i64, i64* %i0ptr252879, align 8                                    ; load; *i0ptr252879
  %fptr252880 = inttoptr i64 %f252881 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr252880(i64 %fail240806, i64 %sym240811)             ; tail call
  ret void
}


define void @lam241842(i64 %env241843, i64 %rvp241010) {
  %check241011 = call i64 @prim_null_63(i64 %rvp241010)                              ; call prim_null_63
  %cmp252882 = icmp eq i64 %check241011, 15                                          ; false?
  br i1 %cmp252882, label %else252884, label %then252883                             ; if

then252883:
  %msg241015 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str252885, i32 0, i32 0)); quoted string
  %abort241013 = call i64 @prim_halt(i64 %msg241015)                                 ; call prim_halt
  %sym241018 = add i64 0, 0                                                          ; quoted ()
  %cloptr252886 = inttoptr i64 %abort241013 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr252887 = getelementptr inbounds i64, i64* %cloptr252886, i64 0               ; &cloptr252886[0]
  %f252889 = load i64, i64* %i0ptr252887, align 8                                    ; load; *i0ptr252887
  %fptr252888 = inttoptr i64 %f252889 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr252888(i64 %abort241013, i64 %sym241018)            ; tail call
  ret void

else252884:
  %cont234278 = call i64 @prim_car(i64 %rvp241010)                                   ; call prim_car
  %rvp241000 = call i64 @prim_cdr(i64 %rvp241010)                                    ; call prim_cdr
  %check241001 = call i64 @prim_null_63(i64 %rvp241000)                              ; call prim_null_63
  %cmp252890 = icmp eq i64 %check241001, 15                                          ; false?
  br i1 %cmp252890, label %else252892, label %then252891                             ; if

then252891:
  %msg241005 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str252893, i32 0, i32 0)); quoted string
  %abort241003 = call i64 @prim_halt(i64 %msg241005)                                 ; call prim_halt
  %sym241008 = add i64 0, 0                                                          ; quoted ()
  %cloptr252894 = inttoptr i64 %abort241003 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr252895 = getelementptr inbounds i64, i64* %cloptr252894, i64 0               ; &cloptr252894[0]
  %f252897 = load i64, i64* %i0ptr252895, align 8                                    ; load; *i0ptr252895
  %fptr252896 = inttoptr i64 %f252897 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr252896(i64 %abort241003, i64 %sym241008)            ; tail call
  ret void

else252892:
  %rest241007 = call i64 @prim_cdr(i64 %rvp241000)                                   ; call prim_cdr
  %empty241002 = call i64 @prim_null_63(i64 %rest241007)                             ; call prim_null_63
  %cmp252898 = icmp eq i64 %empty241002, 15                                          ; false?
  br i1 %cmp252898, label %else252900, label %then252899                             ; if

then252899:
  %_37foldl1233602233778 = call i64 @prim_car(i64 %rvp241000)                        ; call prim_car
  %na240924 = call i64 @prim_cdr(i64 %rvp241000)                                     ; call prim_cdr
  %arg235737 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %cloptr252901 = call i64* @alloc(i64 16)                                           ; malloc
  %eptr252903 = getelementptr inbounds i64, i64* %cloptr252901, i64 1                ; &eptr252903[1]
  store i64 %_37foldl1233602233778, i64* %eptr252903                                 ; *eptr252903 = %_37foldl1233602233778
  %eptr252902 = getelementptr inbounds i64, i64* %cloptr252901, i64 0                ; &cloptr252901[0]
  %f252904 = ptrtoint void(i64,i64)* @lam241837 to i64                               ; fptr cast; i64(...)* -> i64
  store i64 %f252904, i64* %eptr252902                                               ; store fptr
  %arg235736 = ptrtoint i64* %cloptr252901 to i64                                    ; closure cast; i64* -> i64
  %sym240997 = add i64 0, 0                                                          ; quoted ()
  %x240998 = call i64 @prim_cons(i64 %arg235736, i64 %sym240997)                     ; call prim_cons
  %x240999 = call i64 @prim_cons(i64 %arg235737, i64 %x240998)                       ; call prim_cons
  %cloptr252905 = inttoptr i64 %cont234278 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr252906 = getelementptr inbounds i64, i64* %cloptr252905, i64 0               ; &cloptr252905[0]
  %f252908 = load i64, i64* %i0ptr252906, align 8                                    ; load; *i0ptr252906
  %fptr252907 = inttoptr i64 %f252908 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr252907(i64 %cont234278, i64 %x240999)               ; tail call
  ret void

else252900:
  %many241006 = call i64 @const_init_string(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @str252909, i32 0, i32 0)); quoted string
  %fail241004 = call i64 @prim_halt(i64 %many241006)                                 ; call prim_halt
  %sym241009 = add i64 0, 0                                                          ; quoted ()
  %cloptr252910 = inttoptr i64 %fail241004 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr252911 = getelementptr inbounds i64, i64* %cloptr252910, i64 0               ; &cloptr252910[0]
  %f252913 = load i64, i64* %i0ptr252911, align 8                                    ; load; *i0ptr252911
  %fptr252912 = inttoptr i64 %f252913 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr252912(i64 %fail241004, i64 %sym241009)             ; tail call
  ret void
}


define void @lam241837(i64 %env241838, i64 %rvp240988) {
  %envptr252914 = inttoptr i64 %env241838 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr252915 = getelementptr inbounds i64, i64* %envptr252914, i64 1              ; &envptr252914[1]
  %_37foldl1233602233778 = load i64, i64* %envptr252915, align 8                     ; load; *envptr252915
  %check240989 = call i64 @prim_null_63(i64 %rvp240988)                              ; call prim_null_63
  %cmp252916 = icmp eq i64 %check240989, 15                                          ; false?
  br i1 %cmp252916, label %else252918, label %then252917                             ; if

then252917:
  %msg240993 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str252919, i32 0, i32 0)); quoted string
  %abort240991 = call i64 @prim_halt(i64 %msg240993)                                 ; call prim_halt
  %sym240996 = add i64 0, 0                                                          ; quoted ()
  %cloptr252920 = inttoptr i64 %abort240991 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr252921 = getelementptr inbounds i64, i64* %cloptr252920, i64 0               ; &cloptr252920[0]
  %f252923 = load i64, i64* %i0ptr252921, align 8                                    ; load; *i0ptr252921
  %fptr252922 = inttoptr i64 %f252923 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr252922(i64 %abort240991, i64 %sym240996)            ; tail call
  ret void

else252918:
  %cont234279 = call i64 @prim_car(i64 %rvp240988)                                   ; call prim_car
  %rvp240979 = call i64 @prim_cdr(i64 %rvp240988)                                    ; call prim_cdr
  %check240980 = call i64 @prim_null_63(i64 %rvp240979)                              ; call prim_null_63
  %cmp252924 = icmp eq i64 %check240980, 15                                          ; false?
  br i1 %cmp252924, label %else252926, label %then252925                             ; if

then252925:
  %msg240984 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str252927, i32 0, i32 0)); quoted string
  %abort240982 = call i64 @prim_halt(i64 %msg240984)                                 ; call prim_halt
  %sym240987 = add i64 0, 0                                                          ; quoted ()
  %cloptr252928 = inttoptr i64 %abort240982 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr252929 = getelementptr inbounds i64, i64* %cloptr252928, i64 0               ; &cloptr252928[0]
  %f252931 = load i64, i64* %i0ptr252929, align 8                                    ; load; *i0ptr252929
  %fptr252930 = inttoptr i64 %f252931 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr252930(i64 %abort240982, i64 %sym240987)            ; tail call
  ret void

else252926:
  %f233603233779 = call i64 @prim_car(i64 %rvp240979)                                ; call prim_car
  %rvp240970 = call i64 @prim_cdr(i64 %rvp240979)                                    ; call prim_cdr
  %check240971 = call i64 @prim_null_63(i64 %rvp240970)                              ; call prim_null_63
  %cmp252932 = icmp eq i64 %check240971, 15                                          ; false?
  br i1 %cmp252932, label %else252934, label %then252933                             ; if

then252933:
  %msg240975 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str252935, i32 0, i32 0)); quoted string
  %abort240973 = call i64 @prim_halt(i64 %msg240975)                                 ; call prim_halt
  %sym240978 = add i64 0, 0                                                          ; quoted ()
  %cloptr252936 = inttoptr i64 %abort240973 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr252937 = getelementptr inbounds i64, i64* %cloptr252936, i64 0               ; &cloptr252936[0]
  %f252939 = load i64, i64* %i0ptr252937, align 8                                    ; load; *i0ptr252937
  %fptr252938 = inttoptr i64 %f252939 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr252938(i64 %abort240973, i64 %sym240978)            ; tail call
  ret void

else252934:
  %acc233604233780 = call i64 @prim_car(i64 %rvp240970)                              ; call prim_car
  %rvp240960 = call i64 @prim_cdr(i64 %rvp240970)                                    ; call prim_cdr
  %check240961 = call i64 @prim_null_63(i64 %rvp240960)                              ; call prim_null_63
  %cmp252940 = icmp eq i64 %check240961, 15                                          ; false?
  br i1 %cmp252940, label %else252942, label %then252941                             ; if

then252941:
  %msg240965 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str252943, i32 0, i32 0)); quoted string
  %abort240963 = call i64 @prim_halt(i64 %msg240965)                                 ; call prim_halt
  %sym240968 = add i64 0, 0                                                          ; quoted ()
  %cloptr252944 = inttoptr i64 %abort240963 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr252945 = getelementptr inbounds i64, i64* %cloptr252944, i64 0               ; &cloptr252944[0]
  %f252947 = load i64, i64* %i0ptr252945, align 8                                    ; load; *i0ptr252945
  %fptr252946 = inttoptr i64 %f252947 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr252946(i64 %abort240963, i64 %sym240968)            ; tail call
  ret void

else252942:
  %rest240967 = call i64 @prim_cdr(i64 %rvp240960)                                   ; call prim_cdr
  %empty240962 = call i64 @prim_null_63(i64 %rest240967)                             ; call prim_null_63
  %cmp252948 = icmp eq i64 %empty240962, 15                                          ; false?
  br i1 %cmp252948, label %else252950, label %then252949                             ; if

then252949:
  %lst233605233781 = call i64 @prim_car(i64 %rvp240960)                              ; call prim_car
  %na240926 = call i64 @prim_cdr(i64 %rvp240960)                                     ; call prim_cdr
  %a233956 = call i64 @prim_null_63(i64 %lst233605233781)                            ; call prim_null_63
  %cmp252951 = icmp eq i64 %a233956, 15                                              ; false?
  br i1 %cmp252951, label %else252953, label %then252952                             ; if

then252952:
  %arg235741 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %sym240927 = add i64 0, 0                                                          ; quoted ()
  %x240928 = call i64 @prim_cons(i64 %acc233604233780, i64 %sym240927)               ; call prim_cons
  %x240929 = call i64 @prim_cons(i64 %arg235741, i64 %x240928)                       ; call prim_cons
  %cloptr252954 = inttoptr i64 %cont234279 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr252955 = getelementptr inbounds i64, i64* %cloptr252954, i64 0               ; &cloptr252954[0]
  %f252957 = load i64, i64* %i0ptr252955, align 8                                    ; load; *i0ptr252955
  %fptr252956 = inttoptr i64 %f252957 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr252956(i64 %cont234279, i64 %x240929)               ; tail call
  ret void

else252953:
  %a233957 = call i64 @prim_car(i64 %lst233605233781)                                ; call prim_car
  %cloptr252958 = call i64* @alloc(i64 40)                                           ; malloc
  %eptr252960 = getelementptr inbounds i64, i64* %cloptr252958, i64 1                ; &eptr252960[1]
  %eptr252961 = getelementptr inbounds i64, i64* %cloptr252958, i64 2                ; &eptr252961[2]
  %eptr252962 = getelementptr inbounds i64, i64* %cloptr252958, i64 3                ; &eptr252962[3]
  %eptr252963 = getelementptr inbounds i64, i64* %cloptr252958, i64 4                ; &eptr252963[4]
  store i64 %lst233605233781, i64* %eptr252960                                       ; *eptr252960 = %lst233605233781
  store i64 %f233603233779, i64* %eptr252961                                         ; *eptr252961 = %f233603233779
  store i64 %_37foldl1233602233778, i64* %eptr252962                                 ; *eptr252962 = %_37foldl1233602233778
  store i64 %cont234279, i64* %eptr252963                                            ; *eptr252963 = %cont234279
  %eptr252959 = getelementptr inbounds i64, i64* %cloptr252958, i64 0                ; &cloptr252958[0]
  %f252964 = ptrtoint void(i64,i64)* @lam241833 to i64                               ; fptr cast; i64(...)* -> i64
  store i64 %f252964, i64* %eptr252959                                               ; store fptr
  %arg235746 = ptrtoint i64* %cloptr252958 to i64                                    ; closure cast; i64* -> i64
  %sym240956 = add i64 0, 0                                                          ; quoted ()
  %x240957 = call i64 @prim_cons(i64 %acc233604233780, i64 %sym240956)               ; call prim_cons
  %x240958 = call i64 @prim_cons(i64 %a233957, i64 %x240957)                         ; call prim_cons
  %x240959 = call i64 @prim_cons(i64 %arg235746, i64 %x240958)                       ; call prim_cons
  %cloptr252965 = inttoptr i64 %f233603233779 to i64*                                ; closure/env cast; i64 -> i64*
  %i0ptr252966 = getelementptr inbounds i64, i64* %cloptr252965, i64 0               ; &cloptr252965[0]
  %f252968 = load i64, i64* %i0ptr252966, align 8                                    ; load; *i0ptr252966
  %fptr252967 = inttoptr i64 %f252968 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr252967(i64 %f233603233779, i64 %x240959)            ; tail call
  ret void

else252950:
  %many240966 = call i64 @const_init_string(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @str252969, i32 0, i32 0)); quoted string
  %fail240964 = call i64 @prim_halt(i64 %many240966)                                 ; call prim_halt
  %sym240969 = add i64 0, 0                                                          ; quoted ()
  %cloptr252970 = inttoptr i64 %fail240964 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr252971 = getelementptr inbounds i64, i64* %cloptr252970, i64 0               ; &cloptr252970[0]
  %f252973 = load i64, i64* %i0ptr252971, align 8                                    ; load; *i0ptr252971
  %fptr252972 = inttoptr i64 %f252973 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr252972(i64 %fail240964, i64 %sym240969)             ; tail call
  ret void
}


define void @lam241833(i64 %env241834, i64 %rvp240947) {
  %envptr252974 = inttoptr i64 %env241834 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr252975 = getelementptr inbounds i64, i64* %envptr252974, i64 4              ; &envptr252974[4]
  %cont234279 = load i64, i64* %envptr252975, align 8                                ; load; *envptr252975
  %envptr252976 = inttoptr i64 %env241834 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr252977 = getelementptr inbounds i64, i64* %envptr252976, i64 3              ; &envptr252976[3]
  %_37foldl1233602233778 = load i64, i64* %envptr252977, align 8                     ; load; *envptr252977
  %envptr252978 = inttoptr i64 %env241834 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr252979 = getelementptr inbounds i64, i64* %envptr252978, i64 2              ; &envptr252978[2]
  %f233603233779 = load i64, i64* %envptr252979, align 8                             ; load; *envptr252979
  %envptr252980 = inttoptr i64 %env241834 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr252981 = getelementptr inbounds i64, i64* %envptr252980, i64 1              ; &envptr252980[1]
  %lst233605233781 = load i64, i64* %envptr252981, align 8                           ; load; *envptr252981
  %check240948 = call i64 @prim_null_63(i64 %rvp240947)                              ; call prim_null_63
  %cmp252982 = icmp eq i64 %check240948, 15                                          ; false?
  br i1 %cmp252982, label %else252984, label %then252983                             ; if

then252983:
  %msg240952 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str252985, i32 0, i32 0)); quoted string
  %abort240950 = call i64 @prim_halt(i64 %msg240952)                                 ; call prim_halt
  %sym240955 = add i64 0, 0                                                          ; quoted ()
  %cloptr252986 = inttoptr i64 %abort240950 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr252987 = getelementptr inbounds i64, i64* %cloptr252986, i64 0               ; &cloptr252986[0]
  %f252989 = load i64, i64* %i0ptr252987, align 8                                    ; load; *i0ptr252987
  %fptr252988 = inttoptr i64 %f252989 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr252988(i64 %abort240950, i64 %sym240955)            ; tail call
  ret void

else252984:
  %_95234280 = call i64 @prim_car(i64 %rvp240947)                                    ; call prim_car
  %rvp240937 = call i64 @prim_cdr(i64 %rvp240947)                                    ; call prim_cdr
  %check240938 = call i64 @prim_null_63(i64 %rvp240937)                              ; call prim_null_63
  %cmp252990 = icmp eq i64 %check240938, 15                                          ; false?
  br i1 %cmp252990, label %else252992, label %then252991                             ; if

then252991:
  %msg240942 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str252993, i32 0, i32 0)); quoted string
  %abort240940 = call i64 @prim_halt(i64 %msg240942)                                 ; call prim_halt
  %sym240945 = add i64 0, 0                                                          ; quoted ()
  %cloptr252994 = inttoptr i64 %abort240940 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr252995 = getelementptr inbounds i64, i64* %cloptr252994, i64 0               ; &cloptr252994[0]
  %f252997 = load i64, i64* %i0ptr252995, align 8                                    ; load; *i0ptr252995
  %fptr252996 = inttoptr i64 %f252997 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr252996(i64 %abort240940, i64 %sym240945)            ; tail call
  ret void

else252992:
  %rest240944 = call i64 @prim_cdr(i64 %rvp240937)                                   ; call prim_cdr
  %empty240939 = call i64 @prim_null_63(i64 %rest240944)                             ; call prim_null_63
  %cmp252998 = icmp eq i64 %empty240939, 15                                          ; false?
  br i1 %cmp252998, label %else253000, label %then252999                             ; if

then252999:
  %a233958 = call i64 @prim_car(i64 %rvp240937)                                      ; call prim_car
  %na240931 = call i64 @prim_cdr(i64 %rvp240937)                                     ; call prim_cdr
  %a233959 = call i64 @prim_cdr(i64 %lst233605233781)                                ; call prim_cdr
  %sym240932 = add i64 0, 0                                                          ; quoted ()
  %x240933 = call i64 @prim_cons(i64 %a233959, i64 %sym240932)                       ; call prim_cons
  %x240934 = call i64 @prim_cons(i64 %a233958, i64 %x240933)                         ; call prim_cons
  %x240935 = call i64 @prim_cons(i64 %f233603233779, i64 %x240934)                   ; call prim_cons
  %x240936 = call i64 @prim_cons(i64 %cont234279, i64 %x240935)                      ; call prim_cons
  %cloptr253001 = inttoptr i64 %_37foldl1233602233778 to i64*                        ; closure/env cast; i64 -> i64*
  %i0ptr253002 = getelementptr inbounds i64, i64* %cloptr253001, i64 0               ; &cloptr253001[0]
  %f253004 = load i64, i64* %i0ptr253002, align 8                                    ; load; *i0ptr253002
  %fptr253003 = inttoptr i64 %f253004 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr253003(i64 %_37foldl1233602233778, i64 %x240936)    ; tail call
  ret void

else253000:
  %many240943 = call i64 @const_init_string(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @str253005, i32 0, i32 0)); quoted string
  %fail240941 = call i64 @prim_halt(i64 %many240943)                                 ; call prim_halt
  %sym240946 = add i64 0, 0                                                          ; quoted ()
  %cloptr253006 = inttoptr i64 %fail240941 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr253007 = getelementptr inbounds i64, i64* %cloptr253006, i64 0               ; &cloptr253006[0]
  %f253009 = load i64, i64* %i0ptr253007, align 8                                    ; load; *i0ptr253007
  %fptr253008 = inttoptr i64 %f253009 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr253008(i64 %fail240941, i64 %sym240946)             ; tail call
  ret void
}


define void @lam241803(i64 %env241804, i64 %rvp241107) {
  %check241108 = call i64 @prim_null_63(i64 %rvp241107)                              ; call prim_null_63
  %cmp253010 = icmp eq i64 %check241108, 15                                          ; false?
  br i1 %cmp253010, label %else253012, label %then253011                             ; if

then253011:
  %msg241112 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str253013, i32 0, i32 0)); quoted string
  %abort241110 = call i64 @prim_halt(i64 %msg241112)                                 ; call prim_halt
  %sym241115 = add i64 0, 0                                                          ; quoted ()
  %cloptr253014 = inttoptr i64 %abort241110 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr253015 = getelementptr inbounds i64, i64* %cloptr253014, i64 0               ; &cloptr253014[0]
  %f253017 = load i64, i64* %i0ptr253015, align 8                                    ; load; *i0ptr253015
  %fptr253016 = inttoptr i64 %f253017 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr253016(i64 %abort241110, i64 %sym241115)            ; tail call
  ret void

else253012:
  %cont234281 = call i64 @prim_car(i64 %rvp241107)                                   ; call prim_car
  %rvp241097 = call i64 @prim_cdr(i64 %rvp241107)                                    ; call prim_cdr
  %check241098 = call i64 @prim_null_63(i64 %rvp241097)                              ; call prim_null_63
  %cmp253018 = icmp eq i64 %check241098, 15                                          ; false?
  br i1 %cmp253018, label %else253020, label %then253019                             ; if

then253019:
  %msg241102 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str253021, i32 0, i32 0)); quoted string
  %abort241100 = call i64 @prim_halt(i64 %msg241102)                                 ; call prim_halt
  %sym241105 = add i64 0, 0                                                          ; quoted ()
  %cloptr253022 = inttoptr i64 %abort241100 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr253023 = getelementptr inbounds i64, i64* %cloptr253022, i64 0               ; &cloptr253022[0]
  %f253025 = load i64, i64* %i0ptr253023, align 8                                    ; load; *i0ptr253023
  %fptr253024 = inttoptr i64 %f253025 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr253024(i64 %abort241100, i64 %sym241105)            ; tail call
  ret void

else253020:
  %rest241104 = call i64 @prim_cdr(i64 %rvp241097)                                   ; call prim_cdr
  %empty241099 = call i64 @prim_null_63(i64 %rest241104)                             ; call prim_null_63
  %cmp253026 = icmp eq i64 %empty241099, 15                                          ; false?
  br i1 %cmp253026, label %else253028, label %then253027                             ; if

then253027:
  %_37length233600233776 = call i64 @prim_car(i64 %rvp241097)                        ; call prim_car
  %na241042 = call i64 @prim_cdr(i64 %rvp241097)                                     ; call prim_cdr
  %arg235755 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %cloptr253029 = call i64* @alloc(i64 16)                                           ; malloc
  %eptr253031 = getelementptr inbounds i64, i64* %cloptr253029, i64 1                ; &eptr253031[1]
  store i64 %_37length233600233776, i64* %eptr253031                                 ; *eptr253031 = %_37length233600233776
  %eptr253030 = getelementptr inbounds i64, i64* %cloptr253029, i64 0                ; &cloptr253029[0]
  %f253032 = ptrtoint void(i64,i64)* @lam241798 to i64                               ; fptr cast; i64(...)* -> i64
  store i64 %f253032, i64* %eptr253030                                               ; store fptr
  %arg235754 = ptrtoint i64* %cloptr253029 to i64                                    ; closure cast; i64* -> i64
  %sym241094 = add i64 0, 0                                                          ; quoted ()
  %x241095 = call i64 @prim_cons(i64 %arg235754, i64 %sym241094)                     ; call prim_cons
  %x241096 = call i64 @prim_cons(i64 %arg235755, i64 %x241095)                       ; call prim_cons
  %cloptr253033 = inttoptr i64 %cont234281 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr253034 = getelementptr inbounds i64, i64* %cloptr253033, i64 0               ; &cloptr253033[0]
  %f253036 = load i64, i64* %i0ptr253034, align 8                                    ; load; *i0ptr253034
  %fptr253035 = inttoptr i64 %f253036 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr253035(i64 %cont234281, i64 %x241096)               ; tail call
  ret void

else253028:
  %many241103 = call i64 @const_init_string(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @str253037, i32 0, i32 0)); quoted string
  %fail241101 = call i64 @prim_halt(i64 %many241103)                                 ; call prim_halt
  %sym241106 = add i64 0, 0                                                          ; quoted ()
  %cloptr253038 = inttoptr i64 %fail241101 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr253039 = getelementptr inbounds i64, i64* %cloptr253038, i64 0               ; &cloptr253038[0]
  %f253041 = load i64, i64* %i0ptr253039, align 8                                    ; load; *i0ptr253039
  %fptr253040 = inttoptr i64 %f253041 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr253040(i64 %fail241101, i64 %sym241106)             ; tail call
  ret void
}


define void @lam241798(i64 %env241799, i64 %rvp241085) {
  %envptr253042 = inttoptr i64 %env241799 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr253043 = getelementptr inbounds i64, i64* %envptr253042, i64 1              ; &envptr253042[1]
  %_37length233600233776 = load i64, i64* %envptr253043, align 8                     ; load; *envptr253043
  %check241086 = call i64 @prim_null_63(i64 %rvp241085)                              ; call prim_null_63
  %cmp253044 = icmp eq i64 %check241086, 15                                          ; false?
  br i1 %cmp253044, label %else253046, label %then253045                             ; if

then253045:
  %msg241090 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str253047, i32 0, i32 0)); quoted string
  %abort241088 = call i64 @prim_halt(i64 %msg241090)                                 ; call prim_halt
  %sym241093 = add i64 0, 0                                                          ; quoted ()
  %cloptr253048 = inttoptr i64 %abort241088 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr253049 = getelementptr inbounds i64, i64* %cloptr253048, i64 0               ; &cloptr253048[0]
  %f253051 = load i64, i64* %i0ptr253049, align 8                                    ; load; *i0ptr253049
  %fptr253050 = inttoptr i64 %f253051 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr253050(i64 %abort241088, i64 %sym241093)            ; tail call
  ret void

else253046:
  %cont234282 = call i64 @prim_car(i64 %rvp241085)                                   ; call prim_car
  %rvp241075 = call i64 @prim_cdr(i64 %rvp241085)                                    ; call prim_cdr
  %check241076 = call i64 @prim_null_63(i64 %rvp241075)                              ; call prim_null_63
  %cmp253052 = icmp eq i64 %check241076, 15                                          ; false?
  br i1 %cmp253052, label %else253054, label %then253053                             ; if

then253053:
  %msg241080 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str253055, i32 0, i32 0)); quoted string
  %abort241078 = call i64 @prim_halt(i64 %msg241080)                                 ; call prim_halt
  %sym241083 = add i64 0, 0                                                          ; quoted ()
  %cloptr253056 = inttoptr i64 %abort241078 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr253057 = getelementptr inbounds i64, i64* %cloptr253056, i64 0               ; &cloptr253056[0]
  %f253059 = load i64, i64* %i0ptr253057, align 8                                    ; load; *i0ptr253057
  %fptr253058 = inttoptr i64 %f253059 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr253058(i64 %abort241078, i64 %sym241083)            ; tail call
  ret void

else253054:
  %rest241082 = call i64 @prim_cdr(i64 %rvp241075)                                   ; call prim_cdr
  %empty241077 = call i64 @prim_null_63(i64 %rest241082)                             ; call prim_null_63
  %cmp253060 = icmp eq i64 %empty241077, 15                                          ; false?
  br i1 %cmp253060, label %else253062, label %then253061                             ; if

then253061:
  %lst233601233777 = call i64 @prim_car(i64 %rvp241075)                              ; call prim_car
  %na241044 = call i64 @prim_cdr(i64 %rvp241075)                                     ; call prim_cdr
  %a233953 = call i64 @prim_null_63(i64 %lst233601233777)                            ; call prim_null_63
  %cmp253063 = icmp eq i64 %a233953, 15                                              ; false?
  br i1 %cmp253063, label %else253065, label %then253064                             ; if

then253064:
  %arg235759 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %arg235758 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %sym241045 = add i64 0, 0                                                          ; quoted ()
  %x241046 = call i64 @prim_cons(i64 %arg235758, i64 %sym241045)                     ; call prim_cons
  %x241047 = call i64 @prim_cons(i64 %arg235759, i64 %x241046)                       ; call prim_cons
  %cloptr253066 = inttoptr i64 %cont234282 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr253067 = getelementptr inbounds i64, i64* %cloptr253066, i64 0               ; &cloptr253066[0]
  %f253069 = load i64, i64* %i0ptr253067, align 8                                    ; load; *i0ptr253067
  %fptr253068 = inttoptr i64 %f253069 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr253068(i64 %cont234282, i64 %x241047)               ; tail call
  ret void

else253065:
  %a233954 = call i64 @prim_cdr(i64 %lst233601233777)                                ; call prim_cdr
  %cloptr253070 = call i64* @alloc(i64 16)                                           ; malloc
  %eptr253072 = getelementptr inbounds i64, i64* %cloptr253070, i64 1                ; &eptr253072[1]
  store i64 %cont234282, i64* %eptr253072                                            ; *eptr253072 = %cont234282
  %eptr253071 = getelementptr inbounds i64, i64* %cloptr253070, i64 0                ; &cloptr253070[0]
  %f253073 = ptrtoint void(i64,i64)* @lam241794 to i64                               ; fptr cast; i64(...)* -> i64
  store i64 %f253073, i64* %eptr253071                                               ; store fptr
  %arg235763 = ptrtoint i64* %cloptr253070 to i64                                    ; closure cast; i64* -> i64
  %sym241072 = add i64 0, 0                                                          ; quoted ()
  %x241073 = call i64 @prim_cons(i64 %a233954, i64 %sym241072)                       ; call prim_cons
  %x241074 = call i64 @prim_cons(i64 %arg235763, i64 %x241073)                       ; call prim_cons
  %cloptr253074 = inttoptr i64 %_37length233600233776 to i64*                        ; closure/env cast; i64 -> i64*
  %i0ptr253075 = getelementptr inbounds i64, i64* %cloptr253074, i64 0               ; &cloptr253074[0]
  %f253077 = load i64, i64* %i0ptr253075, align 8                                    ; load; *i0ptr253075
  %fptr253076 = inttoptr i64 %f253077 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr253076(i64 %_37length233600233776, i64 %x241074)    ; tail call
  ret void

else253062:
  %many241081 = call i64 @const_init_string(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @str253078, i32 0, i32 0)); quoted string
  %fail241079 = call i64 @prim_halt(i64 %many241081)                                 ; call prim_halt
  %sym241084 = add i64 0, 0                                                          ; quoted ()
  %cloptr253079 = inttoptr i64 %fail241079 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr253080 = getelementptr inbounds i64, i64* %cloptr253079, i64 0               ; &cloptr253079[0]
  %f253082 = load i64, i64* %i0ptr253080, align 8                                    ; load; *i0ptr253080
  %fptr253081 = inttoptr i64 %f253082 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr253081(i64 %fail241079, i64 %sym241084)             ; tail call
  ret void
}


define void @lam241794(i64 %env241795, i64 %rvp241063) {
  %envptr253083 = inttoptr i64 %env241795 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr253084 = getelementptr inbounds i64, i64* %envptr253083, i64 1              ; &envptr253083[1]
  %cont234282 = load i64, i64* %envptr253084, align 8                                ; load; *envptr253084
  %check241064 = call i64 @prim_null_63(i64 %rvp241063)                              ; call prim_null_63
  %cmp253085 = icmp eq i64 %check241064, 15                                          ; false?
  br i1 %cmp253085, label %else253087, label %then253086                             ; if

then253086:
  %msg241068 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str253088, i32 0, i32 0)); quoted string
  %abort241066 = call i64 @prim_halt(i64 %msg241068)                                 ; call prim_halt
  %sym241071 = add i64 0, 0                                                          ; quoted ()
  %cloptr253089 = inttoptr i64 %abort241066 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr253090 = getelementptr inbounds i64, i64* %cloptr253089, i64 0               ; &cloptr253089[0]
  %f253092 = load i64, i64* %i0ptr253090, align 8                                    ; load; *i0ptr253090
  %fptr253091 = inttoptr i64 %f253092 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr253091(i64 %abort241066, i64 %sym241071)            ; tail call
  ret void

else253087:
  %_95234283 = call i64 @prim_car(i64 %rvp241063)                                    ; call prim_car
  %rvp241053 = call i64 @prim_cdr(i64 %rvp241063)                                    ; call prim_cdr
  %check241054 = call i64 @prim_null_63(i64 %rvp241053)                              ; call prim_null_63
  %cmp253093 = icmp eq i64 %check241054, 15                                          ; false?
  br i1 %cmp253093, label %else253095, label %then253094                             ; if

then253094:
  %msg241058 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str253096, i32 0, i32 0)); quoted string
  %abort241056 = call i64 @prim_halt(i64 %msg241058)                                 ; call prim_halt
  %sym241061 = add i64 0, 0                                                          ; quoted ()
  %cloptr253097 = inttoptr i64 %abort241056 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr253098 = getelementptr inbounds i64, i64* %cloptr253097, i64 0               ; &cloptr253097[0]
  %f253100 = load i64, i64* %i0ptr253098, align 8                                    ; load; *i0ptr253098
  %fptr253099 = inttoptr i64 %f253100 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr253099(i64 %abort241056, i64 %sym241061)            ; tail call
  ret void

else253095:
  %rest241060 = call i64 @prim_cdr(i64 %rvp241053)                                   ; call prim_cdr
  %empty241055 = call i64 @prim_null_63(i64 %rest241060)                             ; call prim_null_63
  %cmp253101 = icmp eq i64 %empty241055, 15                                          ; false?
  br i1 %cmp253101, label %else253103, label %then253102                             ; if

then253102:
  %a233955 = call i64 @prim_car(i64 %rvp241053)                                      ; call prim_car
  %na241049 = call i64 @prim_cdr(i64 %rvp241053)                                     ; call prim_cdr
  %arg235766 = call i64 @const_init_int(i64 1)                                       ; quoted int
  %retprim234284 = call i64 @prim__43(i64 %arg235766, i64 %a233955)                  ; call prim__43
  %arg235768 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %sym241050 = add i64 0, 0                                                          ; quoted ()
  %x241051 = call i64 @prim_cons(i64 %retprim234284, i64 %sym241050)                 ; call prim_cons
  %x241052 = call i64 @prim_cons(i64 %arg235768, i64 %x241051)                       ; call prim_cons
  %cloptr253104 = inttoptr i64 %cont234282 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr253105 = getelementptr inbounds i64, i64* %cloptr253104, i64 0               ; &cloptr253104[0]
  %f253107 = load i64, i64* %i0ptr253105, align 8                                    ; load; *i0ptr253105
  %fptr253106 = inttoptr i64 %f253107 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr253106(i64 %cont234282, i64 %x241052)               ; tail call
  ret void

else253103:
  %many241059 = call i64 @const_init_string(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @str253108, i32 0, i32 0)); quoted string
  %fail241057 = call i64 @prim_halt(i64 %many241059)                                 ; call prim_halt
  %sym241062 = add i64 0, 0                                                          ; quoted ()
  %cloptr253109 = inttoptr i64 %fail241057 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr253110 = getelementptr inbounds i64, i64* %cloptr253109, i64 0               ; &cloptr253109[0]
  %f253112 = load i64, i64* %i0ptr253110, align 8                                    ; load; *i0ptr253110
  %fptr253111 = inttoptr i64 %f253112 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr253111(i64 %fail241057, i64 %sym241062)             ; tail call
  ret void
}


define void @lam241765(i64 %env241766, i64 %rvp241217) {
  %check241218 = call i64 @prim_null_63(i64 %rvp241217)                              ; call prim_null_63
  %cmp253113 = icmp eq i64 %check241218, 15                                          ; false?
  br i1 %cmp253113, label %else253115, label %then253114                             ; if

then253114:
  %msg241222 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str253116, i32 0, i32 0)); quoted string
  %abort241220 = call i64 @prim_halt(i64 %msg241222)                                 ; call prim_halt
  %sym241225 = add i64 0, 0                                                          ; quoted ()
  %cloptr253117 = inttoptr i64 %abort241220 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr253118 = getelementptr inbounds i64, i64* %cloptr253117, i64 0               ; &cloptr253117[0]
  %f253120 = load i64, i64* %i0ptr253118, align 8                                    ; load; *i0ptr253118
  %fptr253119 = inttoptr i64 %f253120 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr253119(i64 %abort241220, i64 %sym241225)            ; tail call
  ret void

else253115:
  %cont234285 = call i64 @prim_car(i64 %rvp241217)                                   ; call prim_car
  %rvp241207 = call i64 @prim_cdr(i64 %rvp241217)                                    ; call prim_cdr
  %check241208 = call i64 @prim_null_63(i64 %rvp241207)                              ; call prim_null_63
  %cmp253121 = icmp eq i64 %check241208, 15                                          ; false?
  br i1 %cmp253121, label %else253123, label %then253122                             ; if

then253122:
  %msg241212 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str253124, i32 0, i32 0)); quoted string
  %abort241210 = call i64 @prim_halt(i64 %msg241212)                                 ; call prim_halt
  %sym241215 = add i64 0, 0                                                          ; quoted ()
  %cloptr253125 = inttoptr i64 %abort241210 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr253126 = getelementptr inbounds i64, i64* %cloptr253125, i64 0               ; &cloptr253125[0]
  %f253128 = load i64, i64* %i0ptr253126, align 8                                    ; load; *i0ptr253126
  %fptr253127 = inttoptr i64 %f253128 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr253127(i64 %abort241210, i64 %sym241215)            ; tail call
  ret void

else253123:
  %rest241214 = call i64 @prim_cdr(i64 %rvp241207)                                   ; call prim_cdr
  %empty241209 = call i64 @prim_null_63(i64 %rest241214)                             ; call prim_null_63
  %cmp253129 = icmp eq i64 %empty241209, 15                                          ; false?
  br i1 %cmp253129, label %else253131, label %then253130                             ; if

then253130:
  %_37take233597233773 = call i64 @prim_car(i64 %rvp241207)                          ; call prim_car
  %na241139 = call i64 @prim_cdr(i64 %rvp241207)                                     ; call prim_cdr
  %arg235771 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %cloptr253132 = call i64* @alloc(i64 16)                                           ; malloc
  %eptr253134 = getelementptr inbounds i64, i64* %cloptr253132, i64 1                ; &eptr253134[1]
  store i64 %_37take233597233773, i64* %eptr253134                                   ; *eptr253134 = %_37take233597233773
  %eptr253133 = getelementptr inbounds i64, i64* %cloptr253132, i64 0                ; &cloptr253132[0]
  %f253135 = ptrtoint void(i64,i64)* @lam241760 to i64                               ; fptr cast; i64(...)* -> i64
  store i64 %f253135, i64* %eptr253133                                               ; store fptr
  %arg235770 = ptrtoint i64* %cloptr253132 to i64                                    ; closure cast; i64* -> i64
  %sym241204 = add i64 0, 0                                                          ; quoted ()
  %x241205 = call i64 @prim_cons(i64 %arg235770, i64 %sym241204)                     ; call prim_cons
  %x241206 = call i64 @prim_cons(i64 %arg235771, i64 %x241205)                       ; call prim_cons
  %cloptr253136 = inttoptr i64 %cont234285 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr253137 = getelementptr inbounds i64, i64* %cloptr253136, i64 0               ; &cloptr253136[0]
  %f253139 = load i64, i64* %i0ptr253137, align 8                                    ; load; *i0ptr253137
  %fptr253138 = inttoptr i64 %f253139 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr253138(i64 %cont234285, i64 %x241206)               ; tail call
  ret void

else253131:
  %many241213 = call i64 @const_init_string(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @str253140, i32 0, i32 0)); quoted string
  %fail241211 = call i64 @prim_halt(i64 %many241213)                                 ; call prim_halt
  %sym241216 = add i64 0, 0                                                          ; quoted ()
  %cloptr253141 = inttoptr i64 %fail241211 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr253142 = getelementptr inbounds i64, i64* %cloptr253141, i64 0               ; &cloptr253141[0]
  %f253144 = load i64, i64* %i0ptr253142, align 8                                    ; load; *i0ptr253142
  %fptr253143 = inttoptr i64 %f253144 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr253143(i64 %fail241211, i64 %sym241216)             ; tail call
  ret void
}


define void @lam241760(i64 %env241761, i64 %rvp241195) {
  %envptr253145 = inttoptr i64 %env241761 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr253146 = getelementptr inbounds i64, i64* %envptr253145, i64 1              ; &envptr253145[1]
  %_37take233597233773 = load i64, i64* %envptr253146, align 8                       ; load; *envptr253146
  %check241196 = call i64 @prim_null_63(i64 %rvp241195)                              ; call prim_null_63
  %cmp253147 = icmp eq i64 %check241196, 15                                          ; false?
  br i1 %cmp253147, label %else253149, label %then253148                             ; if

then253148:
  %msg241200 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str253150, i32 0, i32 0)); quoted string
  %abort241198 = call i64 @prim_halt(i64 %msg241200)                                 ; call prim_halt
  %sym241203 = add i64 0, 0                                                          ; quoted ()
  %cloptr253151 = inttoptr i64 %abort241198 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr253152 = getelementptr inbounds i64, i64* %cloptr253151, i64 0               ; &cloptr253151[0]
  %f253154 = load i64, i64* %i0ptr253152, align 8                                    ; load; *i0ptr253152
  %fptr253153 = inttoptr i64 %f253154 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr253153(i64 %abort241198, i64 %sym241203)            ; tail call
  ret void

else253149:
  %cont234286 = call i64 @prim_car(i64 %rvp241195)                                   ; call prim_car
  %rvp241186 = call i64 @prim_cdr(i64 %rvp241195)                                    ; call prim_cdr
  %check241187 = call i64 @prim_null_63(i64 %rvp241186)                              ; call prim_null_63
  %cmp253155 = icmp eq i64 %check241187, 15                                          ; false?
  br i1 %cmp253155, label %else253157, label %then253156                             ; if

then253156:
  %msg241191 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str253158, i32 0, i32 0)); quoted string
  %abort241189 = call i64 @prim_halt(i64 %msg241191)                                 ; call prim_halt
  %sym241194 = add i64 0, 0                                                          ; quoted ()
  %cloptr253159 = inttoptr i64 %abort241189 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr253160 = getelementptr inbounds i64, i64* %cloptr253159, i64 0               ; &cloptr253159[0]
  %f253162 = load i64, i64* %i0ptr253160, align 8                                    ; load; *i0ptr253160
  %fptr253161 = inttoptr i64 %f253162 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr253161(i64 %abort241189, i64 %sym241194)            ; tail call
  ret void

else253157:
  %lst233598233774 = call i64 @prim_car(i64 %rvp241186)                              ; call prim_car
  %rvp241176 = call i64 @prim_cdr(i64 %rvp241186)                                    ; call prim_cdr
  %check241177 = call i64 @prim_null_63(i64 %rvp241176)                              ; call prim_null_63
  %cmp253163 = icmp eq i64 %check241177, 15                                          ; false?
  br i1 %cmp253163, label %else253165, label %then253164                             ; if

then253164:
  %msg241181 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str253166, i32 0, i32 0)); quoted string
  %abort241179 = call i64 @prim_halt(i64 %msg241181)                                 ; call prim_halt
  %sym241184 = add i64 0, 0                                                          ; quoted ()
  %cloptr253167 = inttoptr i64 %abort241179 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr253168 = getelementptr inbounds i64, i64* %cloptr253167, i64 0               ; &cloptr253167[0]
  %f253170 = load i64, i64* %i0ptr253168, align 8                                    ; load; *i0ptr253168
  %fptr253169 = inttoptr i64 %f253170 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr253169(i64 %abort241179, i64 %sym241184)            ; tail call
  ret void

else253165:
  %rest241183 = call i64 @prim_cdr(i64 %rvp241176)                                   ; call prim_cdr
  %empty241178 = call i64 @prim_null_63(i64 %rest241183)                             ; call prim_null_63
  %cmp253171 = icmp eq i64 %empty241178, 15                                          ; false?
  br i1 %cmp253171, label %else253173, label %then253172                             ; if

then253172:
  %n233599233775 = call i64 @prim_car(i64 %rvp241176)                                ; call prim_car
  %na241141 = call i64 @prim_cdr(i64 %rvp241176)                                     ; call prim_cdr
  %arg235773 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %a233947 = call i64 @prim__61(i64 %n233599233775, i64 %arg235773)                  ; call prim__61
  %cmp253174 = icmp eq i64 %a233947, 15                                              ; false?
  br i1 %cmp253174, label %else253176, label %then253175                             ; if

then253175:
  %arg235776 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %arg235775 = add i64 0, 0                                                          ; quoted ()
  %sym241142 = add i64 0, 0                                                          ; quoted ()
  %x241143 = call i64 @prim_cons(i64 %arg235775, i64 %sym241142)                     ; call prim_cons
  %x241144 = call i64 @prim_cons(i64 %arg235776, i64 %x241143)                       ; call prim_cons
  %cloptr253177 = inttoptr i64 %cont234286 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr253178 = getelementptr inbounds i64, i64* %cloptr253177, i64 0               ; &cloptr253177[0]
  %f253180 = load i64, i64* %i0ptr253178, align 8                                    ; load; *i0ptr253178
  %fptr253179 = inttoptr i64 %f253180 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr253179(i64 %cont234286, i64 %x241144)               ; tail call
  ret void

else253176:
  %a233948 = call i64 @prim_null_63(i64 %lst233598233774)                            ; call prim_null_63
  %cmp253181 = icmp eq i64 %a233948, 15                                              ; false?
  br i1 %cmp253181, label %else253183, label %then253182                             ; if

then253182:
  %arg235780 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %arg235779 = add i64 0, 0                                                          ; quoted ()
  %sym241145 = add i64 0, 0                                                          ; quoted ()
  %x241146 = call i64 @prim_cons(i64 %arg235779, i64 %sym241145)                     ; call prim_cons
  %x241147 = call i64 @prim_cons(i64 %arg235780, i64 %x241146)                       ; call prim_cons
  %cloptr253184 = inttoptr i64 %cont234286 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr253185 = getelementptr inbounds i64, i64* %cloptr253184, i64 0               ; &cloptr253184[0]
  %f253187 = load i64, i64* %i0ptr253185, align 8                                    ; load; *i0ptr253185
  %fptr253186 = inttoptr i64 %f253187 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr253186(i64 %cont234286, i64 %x241147)               ; tail call
  ret void

else253183:
  %a233949 = call i64 @prim_car(i64 %lst233598233774)                                ; call prim_car
  %a233950 = call i64 @prim_cdr(i64 %lst233598233774)                                ; call prim_cdr
  %arg235784 = call i64 @const_init_int(i64 1)                                       ; quoted int
  %a233951 = call i64 @prim__45(i64 %n233599233775, i64 %arg235784)                  ; call prim__45
  %cloptr253188 = call i64* @alloc(i64 24)                                           ; malloc
  %eptr253190 = getelementptr inbounds i64, i64* %cloptr253188, i64 1                ; &eptr253190[1]
  %eptr253191 = getelementptr inbounds i64, i64* %cloptr253188, i64 2                ; &eptr253191[2]
  store i64 %a233949, i64* %eptr253190                                               ; *eptr253190 = %a233949
  store i64 %cont234286, i64* %eptr253191                                            ; *eptr253191 = %cont234286
  %eptr253189 = getelementptr inbounds i64, i64* %cloptr253188, i64 0                ; &cloptr253188[0]
  %f253192 = ptrtoint void(i64,i64)* @lam241754 to i64                               ; fptr cast; i64(...)* -> i64
  store i64 %f253192, i64* %eptr253189                                               ; store fptr
  %arg235788 = ptrtoint i64* %cloptr253188 to i64                                    ; closure cast; i64* -> i64
  %sym241172 = add i64 0, 0                                                          ; quoted ()
  %x241173 = call i64 @prim_cons(i64 %a233951, i64 %sym241172)                       ; call prim_cons
  %x241174 = call i64 @prim_cons(i64 %a233950, i64 %x241173)                         ; call prim_cons
  %x241175 = call i64 @prim_cons(i64 %arg235788, i64 %x241174)                       ; call prim_cons
  %cloptr253193 = inttoptr i64 %_37take233597233773 to i64*                          ; closure/env cast; i64 -> i64*
  %i0ptr253194 = getelementptr inbounds i64, i64* %cloptr253193, i64 0               ; &cloptr253193[0]
  %f253196 = load i64, i64* %i0ptr253194, align 8                                    ; load; *i0ptr253194
  %fptr253195 = inttoptr i64 %f253196 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr253195(i64 %_37take233597233773, i64 %x241175)      ; tail call
  ret void

else253173:
  %many241182 = call i64 @const_init_string(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @str253197, i32 0, i32 0)); quoted string
  %fail241180 = call i64 @prim_halt(i64 %many241182)                                 ; call prim_halt
  %sym241185 = add i64 0, 0                                                          ; quoted ()
  %cloptr253198 = inttoptr i64 %fail241180 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr253199 = getelementptr inbounds i64, i64* %cloptr253198, i64 0               ; &cloptr253198[0]
  %f253201 = load i64, i64* %i0ptr253199, align 8                                    ; load; *i0ptr253199
  %fptr253200 = inttoptr i64 %f253201 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr253200(i64 %fail241180, i64 %sym241185)             ; tail call
  ret void
}


define void @lam241754(i64 %env241755, i64 %rvp241163) {
  %envptr253202 = inttoptr i64 %env241755 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr253203 = getelementptr inbounds i64, i64* %envptr253202, i64 2              ; &envptr253202[2]
  %cont234286 = load i64, i64* %envptr253203, align 8                                ; load; *envptr253203
  %envptr253204 = inttoptr i64 %env241755 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr253205 = getelementptr inbounds i64, i64* %envptr253204, i64 1              ; &envptr253204[1]
  %a233949 = load i64, i64* %envptr253205, align 8                                   ; load; *envptr253205
  %check241164 = call i64 @prim_null_63(i64 %rvp241163)                              ; call prim_null_63
  %cmp253206 = icmp eq i64 %check241164, 15                                          ; false?
  br i1 %cmp253206, label %else253208, label %then253207                             ; if

then253207:
  %msg241168 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str253209, i32 0, i32 0)); quoted string
  %abort241166 = call i64 @prim_halt(i64 %msg241168)                                 ; call prim_halt
  %sym241171 = add i64 0, 0                                                          ; quoted ()
  %cloptr253210 = inttoptr i64 %abort241166 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr253211 = getelementptr inbounds i64, i64* %cloptr253210, i64 0               ; &cloptr253210[0]
  %f253213 = load i64, i64* %i0ptr253211, align 8                                    ; load; *i0ptr253211
  %fptr253212 = inttoptr i64 %f253213 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr253212(i64 %abort241166, i64 %sym241171)            ; tail call
  ret void

else253208:
  %_95234287 = call i64 @prim_car(i64 %rvp241163)                                    ; call prim_car
  %rvp241153 = call i64 @prim_cdr(i64 %rvp241163)                                    ; call prim_cdr
  %check241154 = call i64 @prim_null_63(i64 %rvp241153)                              ; call prim_null_63
  %cmp253214 = icmp eq i64 %check241154, 15                                          ; false?
  br i1 %cmp253214, label %else253216, label %then253215                             ; if

then253215:
  %msg241158 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str253217, i32 0, i32 0)); quoted string
  %abort241156 = call i64 @prim_halt(i64 %msg241158)                                 ; call prim_halt
  %sym241161 = add i64 0, 0                                                          ; quoted ()
  %cloptr253218 = inttoptr i64 %abort241156 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr253219 = getelementptr inbounds i64, i64* %cloptr253218, i64 0               ; &cloptr253218[0]
  %f253221 = load i64, i64* %i0ptr253219, align 8                                    ; load; *i0ptr253219
  %fptr253220 = inttoptr i64 %f253221 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr253220(i64 %abort241156, i64 %sym241161)            ; tail call
  ret void

else253216:
  %rest241160 = call i64 @prim_cdr(i64 %rvp241153)                                   ; call prim_cdr
  %empty241155 = call i64 @prim_null_63(i64 %rest241160)                             ; call prim_null_63
  %cmp253222 = icmp eq i64 %empty241155, 15                                          ; false?
  br i1 %cmp253222, label %else253224, label %then253223                             ; if

then253223:
  %a233952 = call i64 @prim_car(i64 %rvp241153)                                      ; call prim_car
  %na241149 = call i64 @prim_cdr(i64 %rvp241153)                                     ; call prim_cdr
  %retprim234288 = call i64 @prim_cons(i64 %a233949, i64 %a233952)                   ; call prim_cons
  %arg235793 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %sym241150 = add i64 0, 0                                                          ; quoted ()
  %x241151 = call i64 @prim_cons(i64 %retprim234288, i64 %sym241150)                 ; call prim_cons
  %x241152 = call i64 @prim_cons(i64 %arg235793, i64 %x241151)                       ; call prim_cons
  %cloptr253225 = inttoptr i64 %cont234286 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr253226 = getelementptr inbounds i64, i64* %cloptr253225, i64 0               ; &cloptr253225[0]
  %f253228 = load i64, i64* %i0ptr253226, align 8                                    ; load; *i0ptr253226
  %fptr253227 = inttoptr i64 %f253228 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr253227(i64 %cont234286, i64 %x241152)               ; tail call
  ret void

else253224:
  %many241159 = call i64 @const_init_string(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @str253229, i32 0, i32 0)); quoted string
  %fail241157 = call i64 @prim_halt(i64 %many241159)                                 ; call prim_halt
  %sym241162 = add i64 0, 0                                                          ; quoted ()
  %cloptr253230 = inttoptr i64 %fail241157 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr253231 = getelementptr inbounds i64, i64* %cloptr253230, i64 0               ; &cloptr253230[0]
  %f253233 = load i64, i64* %i0ptr253231, align 8                                    ; load; *i0ptr253231
  %fptr253232 = inttoptr i64 %f253233 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr253232(i64 %fail241157, i64 %sym241162)             ; tail call
  ret void
}


define void @lam241721(i64 %env241722, i64 %rvp241348) {
  %check241349 = call i64 @prim_null_63(i64 %rvp241348)                              ; call prim_null_63
  %cmp253234 = icmp eq i64 %check241349, 15                                          ; false?
  br i1 %cmp253234, label %else253236, label %then253235                             ; if

then253235:
  %msg241353 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str253237, i32 0, i32 0)); quoted string
  %abort241351 = call i64 @prim_halt(i64 %msg241353)                                 ; call prim_halt
  %sym241356 = add i64 0, 0                                                          ; quoted ()
  %cloptr253238 = inttoptr i64 %abort241351 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr253239 = getelementptr inbounds i64, i64* %cloptr253238, i64 0               ; &cloptr253238[0]
  %f253241 = load i64, i64* %i0ptr253239, align 8                                    ; load; *i0ptr253239
  %fptr253240 = inttoptr i64 %f253241 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr253240(i64 %abort241351, i64 %sym241356)            ; tail call
  ret void

else253236:
  %cont234289 = call i64 @prim_car(i64 %rvp241348)                                   ; call prim_car
  %rvp241338 = call i64 @prim_cdr(i64 %rvp241348)                                    ; call prim_cdr
  %check241339 = call i64 @prim_null_63(i64 %rvp241338)                              ; call prim_null_63
  %cmp253242 = icmp eq i64 %check241339, 15                                          ; false?
  br i1 %cmp253242, label %else253244, label %then253243                             ; if

then253243:
  %msg241343 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str253245, i32 0, i32 0)); quoted string
  %abort241341 = call i64 @prim_halt(i64 %msg241343)                                 ; call prim_halt
  %sym241346 = add i64 0, 0                                                          ; quoted ()
  %cloptr253246 = inttoptr i64 %abort241341 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr253247 = getelementptr inbounds i64, i64* %cloptr253246, i64 0               ; &cloptr253246[0]
  %f253249 = load i64, i64* %i0ptr253247, align 8                                    ; load; *i0ptr253247
  %fptr253248 = inttoptr i64 %f253249 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr253248(i64 %abort241341, i64 %sym241346)            ; tail call
  ret void

else253244:
  %rest241345 = call i64 @prim_cdr(i64 %rvp241338)                                   ; call prim_cdr
  %empty241340 = call i64 @prim_null_63(i64 %rest241345)                             ; call prim_null_63
  %cmp253250 = icmp eq i64 %empty241340, 15                                          ; false?
  br i1 %cmp253250, label %else253252, label %then253251                             ; if

then253251:
  %_37map233594233770 = call i64 @prim_car(i64 %rvp241338)                           ; call prim_car
  %na241249 = call i64 @prim_cdr(i64 %rvp241338)                                     ; call prim_cdr
  %arg235796 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %cloptr253253 = call i64* @alloc(i64 16)                                           ; malloc
  %eptr253255 = getelementptr inbounds i64, i64* %cloptr253253, i64 1                ; &eptr253255[1]
  store i64 %_37map233594233770, i64* %eptr253255                                    ; *eptr253255 = %_37map233594233770
  %eptr253254 = getelementptr inbounds i64, i64* %cloptr253253, i64 0                ; &cloptr253253[0]
  %f253256 = ptrtoint void(i64,i64)* @lam241716 to i64                               ; fptr cast; i64(...)* -> i64
  store i64 %f253256, i64* %eptr253254                                               ; store fptr
  %arg235795 = ptrtoint i64* %cloptr253253 to i64                                    ; closure cast; i64* -> i64
  %sym241335 = add i64 0, 0                                                          ; quoted ()
  %x241336 = call i64 @prim_cons(i64 %arg235795, i64 %sym241335)                     ; call prim_cons
  %x241337 = call i64 @prim_cons(i64 %arg235796, i64 %x241336)                       ; call prim_cons
  %cloptr253257 = inttoptr i64 %cont234289 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr253258 = getelementptr inbounds i64, i64* %cloptr253257, i64 0               ; &cloptr253257[0]
  %f253260 = load i64, i64* %i0ptr253258, align 8                                    ; load; *i0ptr253258
  %fptr253259 = inttoptr i64 %f253260 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr253259(i64 %cont234289, i64 %x241337)               ; tail call
  ret void

else253252:
  %many241344 = call i64 @const_init_string(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @str253261, i32 0, i32 0)); quoted string
  %fail241342 = call i64 @prim_halt(i64 %many241344)                                 ; call prim_halt
  %sym241347 = add i64 0, 0                                                          ; quoted ()
  %cloptr253262 = inttoptr i64 %fail241342 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr253263 = getelementptr inbounds i64, i64* %cloptr253262, i64 0               ; &cloptr253262[0]
  %f253265 = load i64, i64* %i0ptr253263, align 8                                    ; load; *i0ptr253263
  %fptr253264 = inttoptr i64 %f253265 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr253264(i64 %fail241342, i64 %sym241347)             ; tail call
  ret void
}


define void @lam241716(i64 %env241717, i64 %rvp241326) {
  %envptr253266 = inttoptr i64 %env241717 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr253267 = getelementptr inbounds i64, i64* %envptr253266, i64 1              ; &envptr253266[1]
  %_37map233594233770 = load i64, i64* %envptr253267, align 8                        ; load; *envptr253267
  %check241327 = call i64 @prim_null_63(i64 %rvp241326)                              ; call prim_null_63
  %cmp253268 = icmp eq i64 %check241327, 15                                          ; false?
  br i1 %cmp253268, label %else253270, label %then253269                             ; if

then253269:
  %msg241331 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str253271, i32 0, i32 0)); quoted string
  %abort241329 = call i64 @prim_halt(i64 %msg241331)                                 ; call prim_halt
  %sym241334 = add i64 0, 0                                                          ; quoted ()
  %cloptr253272 = inttoptr i64 %abort241329 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr253273 = getelementptr inbounds i64, i64* %cloptr253272, i64 0               ; &cloptr253272[0]
  %f253275 = load i64, i64* %i0ptr253273, align 8                                    ; load; *i0ptr253273
  %fptr253274 = inttoptr i64 %f253275 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr253274(i64 %abort241329, i64 %sym241334)            ; tail call
  ret void

else253270:
  %cont234290 = call i64 @prim_car(i64 %rvp241326)                                   ; call prim_car
  %rvp241317 = call i64 @prim_cdr(i64 %rvp241326)                                    ; call prim_cdr
  %check241318 = call i64 @prim_null_63(i64 %rvp241317)                              ; call prim_null_63
  %cmp253276 = icmp eq i64 %check241318, 15                                          ; false?
  br i1 %cmp253276, label %else253278, label %then253277                             ; if

then253277:
  %msg241322 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str253279, i32 0, i32 0)); quoted string
  %abort241320 = call i64 @prim_halt(i64 %msg241322)                                 ; call prim_halt
  %sym241325 = add i64 0, 0                                                          ; quoted ()
  %cloptr253280 = inttoptr i64 %abort241320 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr253281 = getelementptr inbounds i64, i64* %cloptr253280, i64 0               ; &cloptr253280[0]
  %f253283 = load i64, i64* %i0ptr253281, align 8                                    ; load; *i0ptr253281
  %fptr253282 = inttoptr i64 %f253283 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr253282(i64 %abort241320, i64 %sym241325)            ; tail call
  ret void

else253278:
  %f233595233771 = call i64 @prim_car(i64 %rvp241317)                                ; call prim_car
  %rvp241307 = call i64 @prim_cdr(i64 %rvp241317)                                    ; call prim_cdr
  %check241308 = call i64 @prim_null_63(i64 %rvp241307)                              ; call prim_null_63
  %cmp253284 = icmp eq i64 %check241308, 15                                          ; false?
  br i1 %cmp253284, label %else253286, label %then253285                             ; if

then253285:
  %msg241312 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str253287, i32 0, i32 0)); quoted string
  %abort241310 = call i64 @prim_halt(i64 %msg241312)                                 ; call prim_halt
  %sym241315 = add i64 0, 0                                                          ; quoted ()
  %cloptr253288 = inttoptr i64 %abort241310 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr253289 = getelementptr inbounds i64, i64* %cloptr253288, i64 0               ; &cloptr253288[0]
  %f253291 = load i64, i64* %i0ptr253289, align 8                                    ; load; *i0ptr253289
  %fptr253290 = inttoptr i64 %f253291 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr253290(i64 %abort241310, i64 %sym241315)            ; tail call
  ret void

else253286:
  %rest241314 = call i64 @prim_cdr(i64 %rvp241307)                                   ; call prim_cdr
  %empty241309 = call i64 @prim_null_63(i64 %rest241314)                             ; call prim_null_63
  %cmp253292 = icmp eq i64 %empty241309, 15                                          ; false?
  br i1 %cmp253292, label %else253294, label %then253293                             ; if

then253293:
  %lst233596233772 = call i64 @prim_car(i64 %rvp241307)                              ; call prim_car
  %na241251 = call i64 @prim_cdr(i64 %rvp241307)                                     ; call prim_cdr
  %a233942 = call i64 @prim_null_63(i64 %lst233596233772)                            ; call prim_null_63
  %cmp253295 = icmp eq i64 %a233942, 15                                              ; false?
  br i1 %cmp253295, label %else253297, label %then253296                             ; if

then253296:
  %arg235800 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %arg235799 = add i64 0, 0                                                          ; quoted ()
  %sym241252 = add i64 0, 0                                                          ; quoted ()
  %x241253 = call i64 @prim_cons(i64 %arg235799, i64 %sym241252)                     ; call prim_cons
  %x241254 = call i64 @prim_cons(i64 %arg235800, i64 %x241253)                       ; call prim_cons
  %cloptr253298 = inttoptr i64 %cont234290 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr253299 = getelementptr inbounds i64, i64* %cloptr253298, i64 0               ; &cloptr253298[0]
  %f253301 = load i64, i64* %i0ptr253299, align 8                                    ; load; *i0ptr253299
  %fptr253300 = inttoptr i64 %f253301 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr253300(i64 %cont234290, i64 %x241254)               ; tail call
  ret void

else253297:
  %a233943 = call i64 @prim_car(i64 %lst233596233772)                                ; call prim_car
  %cloptr253302 = call i64* @alloc(i64 40)                                           ; malloc
  %eptr253304 = getelementptr inbounds i64, i64* %cloptr253302, i64 1                ; &eptr253304[1]
  %eptr253305 = getelementptr inbounds i64, i64* %cloptr253302, i64 2                ; &eptr253305[2]
  %eptr253306 = getelementptr inbounds i64, i64* %cloptr253302, i64 3                ; &eptr253306[3]
  %eptr253307 = getelementptr inbounds i64, i64* %cloptr253302, i64 4                ; &eptr253307[4]
  store i64 %lst233596233772, i64* %eptr253304                                       ; *eptr253304 = %lst233596233772
  store i64 %f233595233771, i64* %eptr253305                                         ; *eptr253305 = %f233595233771
  store i64 %_37map233594233770, i64* %eptr253306                                    ; *eptr253306 = %_37map233594233770
  store i64 %cont234290, i64* %eptr253307                                            ; *eptr253307 = %cont234290
  %eptr253303 = getelementptr inbounds i64, i64* %cloptr253302, i64 0                ; &cloptr253302[0]
  %f253308 = ptrtoint void(i64,i64)* @lam241712 to i64                               ; fptr cast; i64(...)* -> i64
  store i64 %f253308, i64* %eptr253303                                               ; store fptr
  %arg235804 = ptrtoint i64* %cloptr253302 to i64                                    ; closure cast; i64* -> i64
  %sym241304 = add i64 0, 0                                                          ; quoted ()
  %x241305 = call i64 @prim_cons(i64 %a233943, i64 %sym241304)                       ; call prim_cons
  %x241306 = call i64 @prim_cons(i64 %arg235804, i64 %x241305)                       ; call prim_cons
  %cloptr253309 = inttoptr i64 %f233595233771 to i64*                                ; closure/env cast; i64 -> i64*
  %i0ptr253310 = getelementptr inbounds i64, i64* %cloptr253309, i64 0               ; &cloptr253309[0]
  %f253312 = load i64, i64* %i0ptr253310, align 8                                    ; load; *i0ptr253310
  %fptr253311 = inttoptr i64 %f253312 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr253311(i64 %f233595233771, i64 %x241306)            ; tail call
  ret void

else253294:
  %many241313 = call i64 @const_init_string(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @str253313, i32 0, i32 0)); quoted string
  %fail241311 = call i64 @prim_halt(i64 %many241313)                                 ; call prim_halt
  %sym241316 = add i64 0, 0                                                          ; quoted ()
  %cloptr253314 = inttoptr i64 %fail241311 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr253315 = getelementptr inbounds i64, i64* %cloptr253314, i64 0               ; &cloptr253314[0]
  %f253317 = load i64, i64* %i0ptr253315, align 8                                    ; load; *i0ptr253315
  %fptr253316 = inttoptr i64 %f253317 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr253316(i64 %fail241311, i64 %sym241316)             ; tail call
  ret void
}


define void @lam241712(i64 %env241713, i64 %rvp241295) {
  %envptr253318 = inttoptr i64 %env241713 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr253319 = getelementptr inbounds i64, i64* %envptr253318, i64 4              ; &envptr253318[4]
  %cont234290 = load i64, i64* %envptr253319, align 8                                ; load; *envptr253319
  %envptr253320 = inttoptr i64 %env241713 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr253321 = getelementptr inbounds i64, i64* %envptr253320, i64 3              ; &envptr253320[3]
  %_37map233594233770 = load i64, i64* %envptr253321, align 8                        ; load; *envptr253321
  %envptr253322 = inttoptr i64 %env241713 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr253323 = getelementptr inbounds i64, i64* %envptr253322, i64 2              ; &envptr253322[2]
  %f233595233771 = load i64, i64* %envptr253323, align 8                             ; load; *envptr253323
  %envptr253324 = inttoptr i64 %env241713 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr253325 = getelementptr inbounds i64, i64* %envptr253324, i64 1              ; &envptr253324[1]
  %lst233596233772 = load i64, i64* %envptr253325, align 8                           ; load; *envptr253325
  %check241296 = call i64 @prim_null_63(i64 %rvp241295)                              ; call prim_null_63
  %cmp253326 = icmp eq i64 %check241296, 15                                          ; false?
  br i1 %cmp253326, label %else253328, label %then253327                             ; if

then253327:
  %msg241300 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str253329, i32 0, i32 0)); quoted string
  %abort241298 = call i64 @prim_halt(i64 %msg241300)                                 ; call prim_halt
  %sym241303 = add i64 0, 0                                                          ; quoted ()
  %cloptr253330 = inttoptr i64 %abort241298 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr253331 = getelementptr inbounds i64, i64* %cloptr253330, i64 0               ; &cloptr253330[0]
  %f253333 = load i64, i64* %i0ptr253331, align 8                                    ; load; *i0ptr253331
  %fptr253332 = inttoptr i64 %f253333 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr253332(i64 %abort241298, i64 %sym241303)            ; tail call
  ret void

else253328:
  %_95234291 = call i64 @prim_car(i64 %rvp241295)                                    ; call prim_car
  %rvp241285 = call i64 @prim_cdr(i64 %rvp241295)                                    ; call prim_cdr
  %check241286 = call i64 @prim_null_63(i64 %rvp241285)                              ; call prim_null_63
  %cmp253334 = icmp eq i64 %check241286, 15                                          ; false?
  br i1 %cmp253334, label %else253336, label %then253335                             ; if

then253335:
  %msg241290 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str253337, i32 0, i32 0)); quoted string
  %abort241288 = call i64 @prim_halt(i64 %msg241290)                                 ; call prim_halt
  %sym241293 = add i64 0, 0                                                          ; quoted ()
  %cloptr253338 = inttoptr i64 %abort241288 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr253339 = getelementptr inbounds i64, i64* %cloptr253338, i64 0               ; &cloptr253338[0]
  %f253341 = load i64, i64* %i0ptr253339, align 8                                    ; load; *i0ptr253339
  %fptr253340 = inttoptr i64 %f253341 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr253340(i64 %abort241288, i64 %sym241293)            ; tail call
  ret void

else253336:
  %rest241292 = call i64 @prim_cdr(i64 %rvp241285)                                   ; call prim_cdr
  %empty241287 = call i64 @prim_null_63(i64 %rest241292)                             ; call prim_null_63
  %cmp253342 = icmp eq i64 %empty241287, 15                                          ; false?
  br i1 %cmp253342, label %else253344, label %then253343                             ; if

then253343:
  %a233944 = call i64 @prim_car(i64 %rvp241285)                                      ; call prim_car
  %na241256 = call i64 @prim_cdr(i64 %rvp241285)                                     ; call prim_cdr
  %a233945 = call i64 @prim_cdr(i64 %lst233596233772)                                ; call prim_cdr
  %cloptr253345 = call i64* @alloc(i64 24)                                           ; malloc
  %eptr253347 = getelementptr inbounds i64, i64* %cloptr253345, i64 1                ; &eptr253347[1]
  %eptr253348 = getelementptr inbounds i64, i64* %cloptr253345, i64 2                ; &eptr253348[2]
  store i64 %a233944, i64* %eptr253347                                               ; *eptr253347 = %a233944
  store i64 %cont234290, i64* %eptr253348                                            ; *eptr253348 = %cont234290
  %eptr253346 = getelementptr inbounds i64, i64* %cloptr253345, i64 0                ; &cloptr253345[0]
  %f253349 = ptrtoint void(i64,i64)* @lam241708 to i64                               ; fptr cast; i64(...)* -> i64
  store i64 %f253349, i64* %eptr253346                                               ; store fptr
  %arg235809 = ptrtoint i64* %cloptr253345 to i64                                    ; closure cast; i64* -> i64
  %sym241281 = add i64 0, 0                                                          ; quoted ()
  %x241282 = call i64 @prim_cons(i64 %a233945, i64 %sym241281)                       ; call prim_cons
  %x241283 = call i64 @prim_cons(i64 %f233595233771, i64 %x241282)                   ; call prim_cons
  %x241284 = call i64 @prim_cons(i64 %arg235809, i64 %x241283)                       ; call prim_cons
  %cloptr253350 = inttoptr i64 %_37map233594233770 to i64*                           ; closure/env cast; i64 -> i64*
  %i0ptr253351 = getelementptr inbounds i64, i64* %cloptr253350, i64 0               ; &cloptr253350[0]
  %f253353 = load i64, i64* %i0ptr253351, align 8                                    ; load; *i0ptr253351
  %fptr253352 = inttoptr i64 %f253353 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr253352(i64 %_37map233594233770, i64 %x241284)       ; tail call
  ret void

else253344:
  %many241291 = call i64 @const_init_string(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @str253354, i32 0, i32 0)); quoted string
  %fail241289 = call i64 @prim_halt(i64 %many241291)                                 ; call prim_halt
  %sym241294 = add i64 0, 0                                                          ; quoted ()
  %cloptr253355 = inttoptr i64 %fail241289 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr253356 = getelementptr inbounds i64, i64* %cloptr253355, i64 0               ; &cloptr253355[0]
  %f253358 = load i64, i64* %i0ptr253356, align 8                                    ; load; *i0ptr253356
  %fptr253357 = inttoptr i64 %f253358 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr253357(i64 %fail241289, i64 %sym241294)             ; tail call
  ret void
}


define void @lam241708(i64 %env241709, i64 %rvp241272) {
  %envptr253359 = inttoptr i64 %env241709 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr253360 = getelementptr inbounds i64, i64* %envptr253359, i64 2              ; &envptr253359[2]
  %cont234290 = load i64, i64* %envptr253360, align 8                                ; load; *envptr253360
  %envptr253361 = inttoptr i64 %env241709 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr253362 = getelementptr inbounds i64, i64* %envptr253361, i64 1              ; &envptr253361[1]
  %a233944 = load i64, i64* %envptr253362, align 8                                   ; load; *envptr253362
  %check241273 = call i64 @prim_null_63(i64 %rvp241272)                              ; call prim_null_63
  %cmp253363 = icmp eq i64 %check241273, 15                                          ; false?
  br i1 %cmp253363, label %else253365, label %then253364                             ; if

then253364:
  %msg241277 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str253366, i32 0, i32 0)); quoted string
  %abort241275 = call i64 @prim_halt(i64 %msg241277)                                 ; call prim_halt
  %sym241280 = add i64 0, 0                                                          ; quoted ()
  %cloptr253367 = inttoptr i64 %abort241275 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr253368 = getelementptr inbounds i64, i64* %cloptr253367, i64 0               ; &cloptr253367[0]
  %f253370 = load i64, i64* %i0ptr253368, align 8                                    ; load; *i0ptr253368
  %fptr253369 = inttoptr i64 %f253370 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr253369(i64 %abort241275, i64 %sym241280)            ; tail call
  ret void

else253365:
  %_95234292 = call i64 @prim_car(i64 %rvp241272)                                    ; call prim_car
  %rvp241262 = call i64 @prim_cdr(i64 %rvp241272)                                    ; call prim_cdr
  %check241263 = call i64 @prim_null_63(i64 %rvp241262)                              ; call prim_null_63
  %cmp253371 = icmp eq i64 %check241263, 15                                          ; false?
  br i1 %cmp253371, label %else253373, label %then253372                             ; if

then253372:
  %msg241267 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str253374, i32 0, i32 0)); quoted string
  %abort241265 = call i64 @prim_halt(i64 %msg241267)                                 ; call prim_halt
  %sym241270 = add i64 0, 0                                                          ; quoted ()
  %cloptr253375 = inttoptr i64 %abort241265 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr253376 = getelementptr inbounds i64, i64* %cloptr253375, i64 0               ; &cloptr253375[0]
  %f253378 = load i64, i64* %i0ptr253376, align 8                                    ; load; *i0ptr253376
  %fptr253377 = inttoptr i64 %f253378 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr253377(i64 %abort241265, i64 %sym241270)            ; tail call
  ret void

else253373:
  %rest241269 = call i64 @prim_cdr(i64 %rvp241262)                                   ; call prim_cdr
  %empty241264 = call i64 @prim_null_63(i64 %rest241269)                             ; call prim_null_63
  %cmp253379 = icmp eq i64 %empty241264, 15                                          ; false?
  br i1 %cmp253379, label %else253381, label %then253380                             ; if

then253380:
  %a233946 = call i64 @prim_car(i64 %rvp241262)                                      ; call prim_car
  %na241258 = call i64 @prim_cdr(i64 %rvp241262)                                     ; call prim_cdr
  %retprim234293 = call i64 @prim_cons(i64 %a233944, i64 %a233946)                   ; call prim_cons
  %arg235814 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %sym241259 = add i64 0, 0                                                          ; quoted ()
  %x241260 = call i64 @prim_cons(i64 %retprim234293, i64 %sym241259)                 ; call prim_cons
  %x241261 = call i64 @prim_cons(i64 %arg235814, i64 %x241260)                       ; call prim_cons
  %cloptr253382 = inttoptr i64 %cont234290 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr253383 = getelementptr inbounds i64, i64* %cloptr253382, i64 0               ; &cloptr253382[0]
  %f253385 = load i64, i64* %i0ptr253383, align 8                                    ; load; *i0ptr253383
  %fptr253384 = inttoptr i64 %f253385 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr253384(i64 %cont234290, i64 %x241261)               ; tail call
  ret void

else253381:
  %many241268 = call i64 @const_init_string(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @str253386, i32 0, i32 0)); quoted string
  %fail241266 = call i64 @prim_halt(i64 %many241268)                                 ; call prim_halt
  %sym241271 = add i64 0, 0                                                          ; quoted ()
  %cloptr253387 = inttoptr i64 %fail241266 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr253388 = getelementptr inbounds i64, i64* %cloptr253387, i64 0               ; &cloptr253387[0]
  %f253390 = load i64, i64* %i0ptr253388, align 8                                    ; load; *i0ptr253388
  %fptr253389 = inttoptr i64 %f253390 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr253389(i64 %fail241266, i64 %sym241271)             ; tail call
  ret void
}


define void @lam241673(i64 %env241674, i64 %rvp241466) {
  %check241467 = call i64 @prim_null_63(i64 %rvp241466)                              ; call prim_null_63
  %cmp253391 = icmp eq i64 %check241467, 15                                          ; false?
  br i1 %cmp253391, label %else253393, label %then253392                             ; if

then253392:
  %msg241471 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str253394, i32 0, i32 0)); quoted string
  %abort241469 = call i64 @prim_halt(i64 %msg241471)                                 ; call prim_halt
  %sym241474 = add i64 0, 0                                                          ; quoted ()
  %cloptr253395 = inttoptr i64 %abort241469 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr253396 = getelementptr inbounds i64, i64* %cloptr253395, i64 0               ; &cloptr253395[0]
  %f253398 = load i64, i64* %i0ptr253396, align 8                                    ; load; *i0ptr253396
  %fptr253397 = inttoptr i64 %f253398 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr253397(i64 %abort241469, i64 %sym241474)            ; tail call
  ret void

else253393:
  %cont234294 = call i64 @prim_car(i64 %rvp241466)                                   ; call prim_car
  %rvp241456 = call i64 @prim_cdr(i64 %rvp241466)                                    ; call prim_cdr
  %check241457 = call i64 @prim_null_63(i64 %rvp241456)                              ; call prim_null_63
  %cmp253399 = icmp eq i64 %check241457, 15                                          ; false?
  br i1 %cmp253399, label %else253401, label %then253400                             ; if

then253400:
  %msg241461 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str253402, i32 0, i32 0)); quoted string
  %abort241459 = call i64 @prim_halt(i64 %msg241461)                                 ; call prim_halt
  %sym241464 = add i64 0, 0                                                          ; quoted ()
  %cloptr253403 = inttoptr i64 %abort241459 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr253404 = getelementptr inbounds i64, i64* %cloptr253403, i64 0               ; &cloptr253403[0]
  %f253406 = load i64, i64* %i0ptr253404, align 8                                    ; load; *i0ptr253404
  %fptr253405 = inttoptr i64 %f253406 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr253405(i64 %abort241459, i64 %sym241464)            ; tail call
  ret void

else253401:
  %rest241463 = call i64 @prim_cdr(i64 %rvp241456)                                   ; call prim_cdr
  %empty241458 = call i64 @prim_null_63(i64 %rest241463)                             ; call prim_null_63
  %cmp253407 = icmp eq i64 %empty241458, 15                                          ; false?
  br i1 %cmp253407, label %else253409, label %then253408                             ; if

then253408:
  %_37foldr1233590233766 = call i64 @prim_car(i64 %rvp241456)                        ; call prim_car
  %na241380 = call i64 @prim_cdr(i64 %rvp241456)                                     ; call prim_cdr
  %arg235817 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %cloptr253410 = call i64* @alloc(i64 16)                                           ; malloc
  %eptr253412 = getelementptr inbounds i64, i64* %cloptr253410, i64 1                ; &eptr253412[1]
  store i64 %_37foldr1233590233766, i64* %eptr253412                                 ; *eptr253412 = %_37foldr1233590233766
  %eptr253411 = getelementptr inbounds i64, i64* %cloptr253410, i64 0                ; &cloptr253410[0]
  %f253413 = ptrtoint void(i64,i64)* @lam241668 to i64                               ; fptr cast; i64(...)* -> i64
  store i64 %f253413, i64* %eptr253411                                               ; store fptr
  %arg235816 = ptrtoint i64* %cloptr253410 to i64                                    ; closure cast; i64* -> i64
  %sym241453 = add i64 0, 0                                                          ; quoted ()
  %x241454 = call i64 @prim_cons(i64 %arg235816, i64 %sym241453)                     ; call prim_cons
  %x241455 = call i64 @prim_cons(i64 %arg235817, i64 %x241454)                       ; call prim_cons
  %cloptr253414 = inttoptr i64 %cont234294 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr253415 = getelementptr inbounds i64, i64* %cloptr253414, i64 0               ; &cloptr253414[0]
  %f253417 = load i64, i64* %i0ptr253415, align 8                                    ; load; *i0ptr253415
  %fptr253416 = inttoptr i64 %f253417 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr253416(i64 %cont234294, i64 %x241455)               ; tail call
  ret void

else253409:
  %many241462 = call i64 @const_init_string(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @str253418, i32 0, i32 0)); quoted string
  %fail241460 = call i64 @prim_halt(i64 %many241462)                                 ; call prim_halt
  %sym241465 = add i64 0, 0                                                          ; quoted ()
  %cloptr253419 = inttoptr i64 %fail241460 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr253420 = getelementptr inbounds i64, i64* %cloptr253419, i64 0               ; &cloptr253419[0]
  %f253422 = load i64, i64* %i0ptr253420, align 8                                    ; load; *i0ptr253420
  %fptr253421 = inttoptr i64 %f253422 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr253421(i64 %fail241460, i64 %sym241465)             ; tail call
  ret void
}


define void @lam241668(i64 %env241669, i64 %rvp241444) {
  %envptr253423 = inttoptr i64 %env241669 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr253424 = getelementptr inbounds i64, i64* %envptr253423, i64 1              ; &envptr253423[1]
  %_37foldr1233590233766 = load i64, i64* %envptr253424, align 8                     ; load; *envptr253424
  %check241445 = call i64 @prim_null_63(i64 %rvp241444)                              ; call prim_null_63
  %cmp253425 = icmp eq i64 %check241445, 15                                          ; false?
  br i1 %cmp253425, label %else253427, label %then253426                             ; if

then253426:
  %msg241449 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str253428, i32 0, i32 0)); quoted string
  %abort241447 = call i64 @prim_halt(i64 %msg241449)                                 ; call prim_halt
  %sym241452 = add i64 0, 0                                                          ; quoted ()
  %cloptr253429 = inttoptr i64 %abort241447 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr253430 = getelementptr inbounds i64, i64* %cloptr253429, i64 0               ; &cloptr253429[0]
  %f253432 = load i64, i64* %i0ptr253430, align 8                                    ; load; *i0ptr253430
  %fptr253431 = inttoptr i64 %f253432 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr253431(i64 %abort241447, i64 %sym241452)            ; tail call
  ret void

else253427:
  %cont234295 = call i64 @prim_car(i64 %rvp241444)                                   ; call prim_car
  %rvp241435 = call i64 @prim_cdr(i64 %rvp241444)                                    ; call prim_cdr
  %check241436 = call i64 @prim_null_63(i64 %rvp241435)                              ; call prim_null_63
  %cmp253433 = icmp eq i64 %check241436, 15                                          ; false?
  br i1 %cmp253433, label %else253435, label %then253434                             ; if

then253434:
  %msg241440 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str253436, i32 0, i32 0)); quoted string
  %abort241438 = call i64 @prim_halt(i64 %msg241440)                                 ; call prim_halt
  %sym241443 = add i64 0, 0                                                          ; quoted ()
  %cloptr253437 = inttoptr i64 %abort241438 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr253438 = getelementptr inbounds i64, i64* %cloptr253437, i64 0               ; &cloptr253437[0]
  %f253440 = load i64, i64* %i0ptr253438, align 8                                    ; load; *i0ptr253438
  %fptr253439 = inttoptr i64 %f253440 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr253439(i64 %abort241438, i64 %sym241443)            ; tail call
  ret void

else253435:
  %f233591233767 = call i64 @prim_car(i64 %rvp241435)                                ; call prim_car
  %rvp241426 = call i64 @prim_cdr(i64 %rvp241435)                                    ; call prim_cdr
  %check241427 = call i64 @prim_null_63(i64 %rvp241426)                              ; call prim_null_63
  %cmp253441 = icmp eq i64 %check241427, 15                                          ; false?
  br i1 %cmp253441, label %else253443, label %then253442                             ; if

then253442:
  %msg241431 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str253444, i32 0, i32 0)); quoted string
  %abort241429 = call i64 @prim_halt(i64 %msg241431)                                 ; call prim_halt
  %sym241434 = add i64 0, 0                                                          ; quoted ()
  %cloptr253445 = inttoptr i64 %abort241429 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr253446 = getelementptr inbounds i64, i64* %cloptr253445, i64 0               ; &cloptr253445[0]
  %f253448 = load i64, i64* %i0ptr253446, align 8                                    ; load; *i0ptr253446
  %fptr253447 = inttoptr i64 %f253448 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr253447(i64 %abort241429, i64 %sym241434)            ; tail call
  ret void

else253443:
  %acc233592233768 = call i64 @prim_car(i64 %rvp241426)                              ; call prim_car
  %rvp241416 = call i64 @prim_cdr(i64 %rvp241426)                                    ; call prim_cdr
  %check241417 = call i64 @prim_null_63(i64 %rvp241416)                              ; call prim_null_63
  %cmp253449 = icmp eq i64 %check241417, 15                                          ; false?
  br i1 %cmp253449, label %else253451, label %then253450                             ; if

then253450:
  %msg241421 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str253452, i32 0, i32 0)); quoted string
  %abort241419 = call i64 @prim_halt(i64 %msg241421)                                 ; call prim_halt
  %sym241424 = add i64 0, 0                                                          ; quoted ()
  %cloptr253453 = inttoptr i64 %abort241419 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr253454 = getelementptr inbounds i64, i64* %cloptr253453, i64 0               ; &cloptr253453[0]
  %f253456 = load i64, i64* %i0ptr253454, align 8                                    ; load; *i0ptr253454
  %fptr253455 = inttoptr i64 %f253456 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr253455(i64 %abort241419, i64 %sym241424)            ; tail call
  ret void

else253451:
  %rest241423 = call i64 @prim_cdr(i64 %rvp241416)                                   ; call prim_cdr
  %empty241418 = call i64 @prim_null_63(i64 %rest241423)                             ; call prim_null_63
  %cmp253457 = icmp eq i64 %empty241418, 15                                          ; false?
  br i1 %cmp253457, label %else253459, label %then253458                             ; if

then253458:
  %lst233593233769 = call i64 @prim_car(i64 %rvp241416)                              ; call prim_car
  %na241382 = call i64 @prim_cdr(i64 %rvp241416)                                     ; call prim_cdr
  %a233938 = call i64 @prim_null_63(i64 %lst233593233769)                            ; call prim_null_63
  %cmp253460 = icmp eq i64 %a233938, 15                                              ; false?
  br i1 %cmp253460, label %else253462, label %then253461                             ; if

then253461:
  %arg235821 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %sym241383 = add i64 0, 0                                                          ; quoted ()
  %x241384 = call i64 @prim_cons(i64 %acc233592233768, i64 %sym241383)               ; call prim_cons
  %x241385 = call i64 @prim_cons(i64 %arg235821, i64 %x241384)                       ; call prim_cons
  %cloptr253463 = inttoptr i64 %cont234295 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr253464 = getelementptr inbounds i64, i64* %cloptr253463, i64 0               ; &cloptr253463[0]
  %f253466 = load i64, i64* %i0ptr253464, align 8                                    ; load; *i0ptr253464
  %fptr253465 = inttoptr i64 %f253466 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr253465(i64 %cont234295, i64 %x241385)               ; tail call
  ret void

else253462:
  %a233939 = call i64 @prim_car(i64 %lst233593233769)                                ; call prim_car
  %a233940 = call i64 @prim_cdr(i64 %lst233593233769)                                ; call prim_cdr
  %cloptr253467 = call i64* @alloc(i64 32)                                           ; malloc
  %eptr253469 = getelementptr inbounds i64, i64* %cloptr253467, i64 1                ; &eptr253469[1]
  %eptr253470 = getelementptr inbounds i64, i64* %cloptr253467, i64 2                ; &eptr253470[2]
  %eptr253471 = getelementptr inbounds i64, i64* %cloptr253467, i64 3                ; &eptr253471[3]
  store i64 %f233591233767, i64* %eptr253469                                         ; *eptr253469 = %f233591233767
  store i64 %cont234295, i64* %eptr253470                                            ; *eptr253470 = %cont234295
  store i64 %a233939, i64* %eptr253471                                               ; *eptr253471 = %a233939
  %eptr253468 = getelementptr inbounds i64, i64* %cloptr253467, i64 0                ; &cloptr253467[0]
  %f253472 = ptrtoint void(i64,i64)* @lam241664 to i64                               ; fptr cast; i64(...)* -> i64
  store i64 %f253472, i64* %eptr253468                                               ; store fptr
  %arg235828 = ptrtoint i64* %cloptr253467 to i64                                    ; closure cast; i64* -> i64
  %sym241411 = add i64 0, 0                                                          ; quoted ()
  %x241412 = call i64 @prim_cons(i64 %a233940, i64 %sym241411)                       ; call prim_cons
  %x241413 = call i64 @prim_cons(i64 %acc233592233768, i64 %x241412)                 ; call prim_cons
  %x241414 = call i64 @prim_cons(i64 %f233591233767, i64 %x241413)                   ; call prim_cons
  %x241415 = call i64 @prim_cons(i64 %arg235828, i64 %x241414)                       ; call prim_cons
  %cloptr253473 = inttoptr i64 %_37foldr1233590233766 to i64*                        ; closure/env cast; i64 -> i64*
  %i0ptr253474 = getelementptr inbounds i64, i64* %cloptr253473, i64 0               ; &cloptr253473[0]
  %f253476 = load i64, i64* %i0ptr253474, align 8                                    ; load; *i0ptr253474
  %fptr253475 = inttoptr i64 %f253476 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr253475(i64 %_37foldr1233590233766, i64 %x241415)    ; tail call
  ret void

else253459:
  %many241422 = call i64 @const_init_string(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @str253477, i32 0, i32 0)); quoted string
  %fail241420 = call i64 @prim_halt(i64 %many241422)                                 ; call prim_halt
  %sym241425 = add i64 0, 0                                                          ; quoted ()
  %cloptr253478 = inttoptr i64 %fail241420 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr253479 = getelementptr inbounds i64, i64* %cloptr253478, i64 0               ; &cloptr253478[0]
  %f253481 = load i64, i64* %i0ptr253479, align 8                                    ; load; *i0ptr253479
  %fptr253480 = inttoptr i64 %f253481 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr253480(i64 %fail241420, i64 %sym241425)             ; tail call
  ret void
}


define void @lam241664(i64 %env241665, i64 %rvp241402) {
  %envptr253482 = inttoptr i64 %env241665 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr253483 = getelementptr inbounds i64, i64* %envptr253482, i64 3              ; &envptr253482[3]
  %a233939 = load i64, i64* %envptr253483, align 8                                   ; load; *envptr253483
  %envptr253484 = inttoptr i64 %env241665 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr253485 = getelementptr inbounds i64, i64* %envptr253484, i64 2              ; &envptr253484[2]
  %cont234295 = load i64, i64* %envptr253485, align 8                                ; load; *envptr253485
  %envptr253486 = inttoptr i64 %env241665 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr253487 = getelementptr inbounds i64, i64* %envptr253486, i64 1              ; &envptr253486[1]
  %f233591233767 = load i64, i64* %envptr253487, align 8                             ; load; *envptr253487
  %check241403 = call i64 @prim_null_63(i64 %rvp241402)                              ; call prim_null_63
  %cmp253488 = icmp eq i64 %check241403, 15                                          ; false?
  br i1 %cmp253488, label %else253490, label %then253489                             ; if

then253489:
  %msg241407 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str253491, i32 0, i32 0)); quoted string
  %abort241405 = call i64 @prim_halt(i64 %msg241407)                                 ; call prim_halt
  %sym241410 = add i64 0, 0                                                          ; quoted ()
  %cloptr253492 = inttoptr i64 %abort241405 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr253493 = getelementptr inbounds i64, i64* %cloptr253492, i64 0               ; &cloptr253492[0]
  %f253495 = load i64, i64* %i0ptr253493, align 8                                    ; load; *i0ptr253493
  %fptr253494 = inttoptr i64 %f253495 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr253494(i64 %abort241405, i64 %sym241410)            ; tail call
  ret void

else253490:
  %_95234296 = call i64 @prim_car(i64 %rvp241402)                                    ; call prim_car
  %rvp241392 = call i64 @prim_cdr(i64 %rvp241402)                                    ; call prim_cdr
  %check241393 = call i64 @prim_null_63(i64 %rvp241392)                              ; call prim_null_63
  %cmp253496 = icmp eq i64 %check241393, 15                                          ; false?
  br i1 %cmp253496, label %else253498, label %then253497                             ; if

then253497:
  %msg241397 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str253499, i32 0, i32 0)); quoted string
  %abort241395 = call i64 @prim_halt(i64 %msg241397)                                 ; call prim_halt
  %sym241400 = add i64 0, 0                                                          ; quoted ()
  %cloptr253500 = inttoptr i64 %abort241395 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr253501 = getelementptr inbounds i64, i64* %cloptr253500, i64 0               ; &cloptr253500[0]
  %f253503 = load i64, i64* %i0ptr253501, align 8                                    ; load; *i0ptr253501
  %fptr253502 = inttoptr i64 %f253503 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr253502(i64 %abort241395, i64 %sym241400)            ; tail call
  ret void

else253498:
  %rest241399 = call i64 @prim_cdr(i64 %rvp241392)                                   ; call prim_cdr
  %empty241394 = call i64 @prim_null_63(i64 %rest241399)                             ; call prim_null_63
  %cmp253504 = icmp eq i64 %empty241394, 15                                          ; false?
  br i1 %cmp253504, label %else253506, label %then253505                             ; if

then253505:
  %a233941 = call i64 @prim_car(i64 %rvp241392)                                      ; call prim_car
  %na241387 = call i64 @prim_cdr(i64 %rvp241392)                                     ; call prim_cdr
  %sym241388 = add i64 0, 0                                                          ; quoted ()
  %x241389 = call i64 @prim_cons(i64 %a233941, i64 %sym241388)                       ; call prim_cons
  %x241390 = call i64 @prim_cons(i64 %a233939, i64 %x241389)                         ; call prim_cons
  %x241391 = call i64 @prim_cons(i64 %cont234295, i64 %x241390)                      ; call prim_cons
  %cloptr253507 = inttoptr i64 %f233591233767 to i64*                                ; closure/env cast; i64 -> i64*
  %i0ptr253508 = getelementptr inbounds i64, i64* %cloptr253507, i64 0               ; &cloptr253507[0]
  %f253510 = load i64, i64* %i0ptr253508, align 8                                    ; load; *i0ptr253508
  %fptr253509 = inttoptr i64 %f253510 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr253509(i64 %f233591233767, i64 %x241391)            ; tail call
  ret void

else253506:
  %many241398 = call i64 @const_init_string(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @str253511, i32 0, i32 0)); quoted string
  %fail241396 = call i64 @prim_halt(i64 %many241398)                                 ; call prim_halt
  %sym241401 = add i64 0, 0                                                          ; quoted ()
  %cloptr253512 = inttoptr i64 %fail241396 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr253513 = getelementptr inbounds i64, i64* %cloptr253512, i64 0               ; &cloptr253512[0]
  %f253515 = load i64, i64* %i0ptr253513, align 8                                    ; load; *i0ptr253513
  %fptr253514 = inttoptr i64 %f253515 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr253514(i64 %fail241396, i64 %sym241401)             ; tail call
  ret void
}


define void @lam241634(i64 %env241635, i64 %rvp241584) {
  %check241585 = call i64 @prim_null_63(i64 %rvp241584)                              ; call prim_null_63
  %cmp253516 = icmp eq i64 %check241585, 15                                          ; false?
  br i1 %cmp253516, label %else253518, label %then253517                             ; if

then253517:
  %msg241589 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str253519, i32 0, i32 0)); quoted string
  %abort241587 = call i64 @prim_halt(i64 %msg241589)                                 ; call prim_halt
  %sym241592 = add i64 0, 0                                                          ; quoted ()
  %cloptr253520 = inttoptr i64 %abort241587 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr253521 = getelementptr inbounds i64, i64* %cloptr253520, i64 0               ; &cloptr253520[0]
  %f253523 = load i64, i64* %i0ptr253521, align 8                                    ; load; *i0ptr253521
  %fptr253522 = inttoptr i64 %f253523 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr253522(i64 %abort241587, i64 %sym241592)            ; tail call
  ret void

else253518:
  %cont234298 = call i64 @prim_car(i64 %rvp241584)                                   ; call prim_car
  %rvp241574 = call i64 @prim_cdr(i64 %rvp241584)                                    ; call prim_cdr
  %check241575 = call i64 @prim_null_63(i64 %rvp241574)                              ; call prim_null_63
  %cmp253524 = icmp eq i64 %check241575, 15                                          ; false?
  br i1 %cmp253524, label %else253526, label %then253525                             ; if

then253525:
  %msg241579 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str253527, i32 0, i32 0)); quoted string
  %abort241577 = call i64 @prim_halt(i64 %msg241579)                                 ; call prim_halt
  %sym241582 = add i64 0, 0                                                          ; quoted ()
  %cloptr253528 = inttoptr i64 %abort241577 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr253529 = getelementptr inbounds i64, i64* %cloptr253528, i64 0               ; &cloptr253528[0]
  %f253531 = load i64, i64* %i0ptr253529, align 8                                    ; load; *i0ptr253529
  %fptr253530 = inttoptr i64 %f253531 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr253530(i64 %abort241577, i64 %sym241582)            ; tail call
  ret void

else253526:
  %rest241581 = call i64 @prim_cdr(i64 %rvp241574)                                   ; call prim_cdr
  %empty241576 = call i64 @prim_null_63(i64 %rest241581)                             ; call prim_null_63
  %cmp253532 = icmp eq i64 %empty241576, 15                                          ; false?
  br i1 %cmp253532, label %else253534, label %then253533                             ; if

then253533:
  %y233582233758 = call i64 @prim_car(i64 %rvp241574)                                ; call prim_car
  %na241498 = call i64 @prim_cdr(i64 %rvp241574)                                     ; call prim_cdr
  %arg235835 = call i64 @const_init_int(i64 0)                                       ; quoted int
  %cloptr253535 = call i64* @alloc(i64 16)                                           ; malloc
  %eptr253537 = getelementptr inbounds i64, i64* %cloptr253535, i64 1                ; &eptr253537[1]
  store i64 %y233582233758, i64* %eptr253537                                         ; *eptr253537 = %y233582233758
  %eptr253536 = getelementptr inbounds i64, i64* %cloptr253535, i64 0                ; &cloptr253535[0]
  %f253538 = ptrtoint void(i64,i64)* @lam241629 to i64                               ; fptr cast; i64(...)* -> i64
  store i64 %f253538, i64* %eptr253536                                               ; store fptr
  %arg235834 = ptrtoint i64* %cloptr253535 to i64                                    ; closure cast; i64* -> i64
  %sym241571 = add i64 0, 0                                                          ; quoted ()
  %x241572 = call i64 @prim_cons(i64 %arg235834, i64 %sym241571)                     ; call prim_cons
  %x241573 = call i64 @prim_cons(i64 %arg235835, i64 %x241572)                       ; call prim_cons
  %cloptr253539 = inttoptr i64 %cont234298 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr253540 = getelementptr inbounds i64, i64* %cloptr253539, i64 0               ; &cloptr253539[0]
  %f253542 = load i64, i64* %i0ptr253540, align 8                                    ; load; *i0ptr253540
  %fptr253541 = inttoptr i64 %f253542 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr253541(i64 %cont234298, i64 %x241573)               ; tail call
  ret void

else253534:
  %many241580 = call i64 @const_init_string(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @str253543, i32 0, i32 0)); quoted string
  %fail241578 = call i64 @prim_halt(i64 %many241580)                                 ; call prim_halt
  %sym241583 = add i64 0, 0                                                          ; quoted ()
  %cloptr253544 = inttoptr i64 %fail241578 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr253545 = getelementptr inbounds i64, i64* %cloptr253544, i64 0               ; &cloptr253544[0]
  %f253547 = load i64, i64* %i0ptr253545, align 8                                    ; load; *i0ptr253545
  %fptr253546 = inttoptr i64 %f253547 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr253546(i64 %fail241578, i64 %sym241583)             ; tail call
  ret void
}


define void @lam241629(i64 %env241630, i64 %rvp241562) {
  %envptr253548 = inttoptr i64 %env241630 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr253549 = getelementptr inbounds i64, i64* %envptr253548, i64 1              ; &envptr253548[1]
  %y233582233758 = load i64, i64* %envptr253549, align 8                             ; load; *envptr253549
  %check241563 = call i64 @prim_null_63(i64 %rvp241562)                              ; call prim_null_63
  %cmp253550 = icmp eq i64 %check241563, 15                                          ; false?
  br i1 %cmp253550, label %else253552, label %then253551                             ; if

then253551:
  %msg241567 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str253553, i32 0, i32 0)); quoted string
  %abort241565 = call i64 @prim_halt(i64 %msg241567)                                 ; call prim_halt
  %sym241570 = add i64 0, 0                                                          ; quoted ()
  %cloptr253554 = inttoptr i64 %abort241565 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr253555 = getelementptr inbounds i64, i64* %cloptr253554, i64 0               ; &cloptr253554[0]
  %f253557 = load i64, i64* %i0ptr253555, align 8                                    ; load; *i0ptr253555
  %fptr253556 = inttoptr i64 %f253557 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr253556(i64 %abort241565, i64 %sym241570)            ; tail call
  ret void

else253552:
  %cont234299 = call i64 @prim_car(i64 %rvp241562)                                   ; call prim_car
  %rvp241552 = call i64 @prim_cdr(i64 %rvp241562)                                    ; call prim_cdr
  %check241553 = call i64 @prim_null_63(i64 %rvp241552)                              ; call prim_null_63
  %cmp253558 = icmp eq i64 %check241553, 15                                          ; false?
  br i1 %cmp253558, label %else253560, label %then253559                             ; if

then253559:
  %msg241557 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str253561, i32 0, i32 0)); quoted string
  %abort241555 = call i64 @prim_halt(i64 %msg241557)                                 ; call prim_halt
  %sym241560 = add i64 0, 0                                                          ; quoted ()
  %cloptr253562 = inttoptr i64 %abort241555 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr253563 = getelementptr inbounds i64, i64* %cloptr253562, i64 0               ; &cloptr253562[0]
  %f253565 = load i64, i64* %i0ptr253563, align 8                                    ; load; *i0ptr253563
  %fptr253564 = inttoptr i64 %f253565 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr253564(i64 %abort241555, i64 %sym241560)            ; tail call
  ret void

else253560:
  %rest241559 = call i64 @prim_cdr(i64 %rvp241552)                                   ; call prim_cdr
  %empty241554 = call i64 @prim_null_63(i64 %rest241559)                             ; call prim_null_63
  %cmp253566 = icmp eq i64 %empty241554, 15                                          ; false?
  br i1 %cmp253566, label %else253568, label %then253567                             ; if

then253567:
  %f233583233759 = call i64 @prim_car(i64 %rvp241552)                                ; call prim_car
  %na241500 = call i64 @prim_cdr(i64 %rvp241552)                                     ; call prim_cdr
  %cloptr253569 = call i64* @alloc(i64 24)                                           ; malloc
  %eptr253571 = getelementptr inbounds i64, i64* %cloptr253569, i64 1                ; &eptr253571[1]
  %eptr253572 = getelementptr inbounds i64, i64* %cloptr253569, i64 2                ; &eptr253572[2]
  store i64 %f233583233759, i64* %eptr253571                                         ; *eptr253571 = %f233583233759
  store i64 %y233582233758, i64* %eptr253572                                         ; *eptr253572 = %y233582233758
  %eptr253570 = getelementptr inbounds i64, i64* %cloptr253569, i64 0                ; &cloptr253569[0]
  %f253573 = ptrtoint void(i64,i64)* @lam241625 to i64                               ; fptr cast; i64(...)* -> i64
  store i64 %f253573, i64* %eptr253570                                               ; store fptr
  %arg235837 = ptrtoint i64* %cloptr253569 to i64                                    ; closure cast; i64* -> i64
  %sym241549 = add i64 0, 0                                                          ; quoted ()
  %x241550 = call i64 @prim_cons(i64 %arg235837, i64 %sym241549)                     ; call prim_cons
  %x241551 = call i64 @prim_cons(i64 %cont234299, i64 %x241550)                      ; call prim_cons
  %cloptr253574 = inttoptr i64 %f233583233759 to i64*                                ; closure/env cast; i64 -> i64*
  %i0ptr253575 = getelementptr inbounds i64, i64* %cloptr253574, i64 0               ; &cloptr253574[0]
  %f253577 = load i64, i64* %i0ptr253575, align 8                                    ; load; *i0ptr253575
  %fptr253576 = inttoptr i64 %f253577 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr253576(i64 %f233583233759, i64 %x241551)            ; tail call
  ret void

else253568:
  %many241558 = call i64 @const_init_string(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @str253578, i32 0, i32 0)); quoted string
  %fail241556 = call i64 @prim_halt(i64 %many241558)                                 ; call prim_halt
  %sym241561 = add i64 0, 0                                                          ; quoted ()
  %cloptr253579 = inttoptr i64 %fail241556 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr253580 = getelementptr inbounds i64, i64* %cloptr253579, i64 0               ; &cloptr253579[0]
  %f253582 = load i64, i64* %i0ptr253580, align 8                                    ; load; *i0ptr253580
  %fptr253581 = inttoptr i64 %f253582 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr253581(i64 %fail241556, i64 %sym241561)             ; tail call
  ret void
}


define void @lam241625(i64 %env241626, i64 %args233584233760234301) {
  %envptr253583 = inttoptr i64 %env241626 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr253584 = getelementptr inbounds i64, i64* %envptr253583, i64 2              ; &envptr253583[2]
  %y233582233758 = load i64, i64* %envptr253584, align 8                             ; load; *envptr253584
  %envptr253585 = inttoptr i64 %env241626 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr253586 = getelementptr inbounds i64, i64* %envptr253585, i64 1              ; &envptr253585[1]
  %f233583233759 = load i64, i64* %envptr253586, align 8                             ; load; *envptr253586
  %cont234300 = call i64 @prim_car(i64 %args233584233760234301)                      ; call prim_car
  %args233584233760 = call i64 @prim_cdr(i64 %args233584233760234301)                ; call prim_cdr
  %cloptr253587 = call i64* @alloc(i64 32)                                           ; malloc
  %eptr253589 = getelementptr inbounds i64, i64* %cloptr253587, i64 1                ; &eptr253589[1]
  %eptr253590 = getelementptr inbounds i64, i64* %cloptr253587, i64 2                ; &eptr253590[2]
  %eptr253591 = getelementptr inbounds i64, i64* %cloptr253587, i64 3                ; &eptr253591[3]
  store i64 %args233584233760, i64* %eptr253589                                      ; *eptr253589 = %args233584233760
  store i64 %f233583233759, i64* %eptr253590                                         ; *eptr253590 = %f233583233759
  store i64 %cont234300, i64* %eptr253591                                            ; *eptr253591 = %cont234300
  %eptr253588 = getelementptr inbounds i64, i64* %cloptr253587, i64 0                ; &cloptr253587[0]
  %f253592 = ptrtoint void(i64,i64)* @lam241623 to i64                               ; fptr cast; i64(...)* -> i64
  store i64 %f253592, i64* %eptr253588                                               ; store fptr
  %arg235843 = ptrtoint i64* %cloptr253587 to i64                                    ; closure cast; i64* -> i64
  %sym241546 = add i64 0, 0                                                          ; quoted ()
  %x241547 = call i64 @prim_cons(i64 %y233582233758, i64 %sym241546)                 ; call prim_cons
  %x241548 = call i64 @prim_cons(i64 %arg235843, i64 %x241547)                       ; call prim_cons
  %cloptr253593 = inttoptr i64 %y233582233758 to i64*                                ; closure/env cast; i64 -> i64*
  %i0ptr253594 = getelementptr inbounds i64, i64* %cloptr253593, i64 0               ; &cloptr253593[0]
  %f253596 = load i64, i64* %i0ptr253594, align 8                                    ; load; *i0ptr253594
  %fptr253595 = inttoptr i64 %f253596 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr253595(i64 %y233582233758, i64 %x241548)            ; tail call
  ret void
}


define void @lam241623(i64 %env241624, i64 %rvp241537) {
  %envptr253597 = inttoptr i64 %env241624 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr253598 = getelementptr inbounds i64, i64* %envptr253597, i64 3              ; &envptr253597[3]
  %cont234300 = load i64, i64* %envptr253598, align 8                                ; load; *envptr253598
  %envptr253599 = inttoptr i64 %env241624 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr253600 = getelementptr inbounds i64, i64* %envptr253599, i64 2              ; &envptr253599[2]
  %f233583233759 = load i64, i64* %envptr253600, align 8                             ; load; *envptr253600
  %envptr253601 = inttoptr i64 %env241624 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr253602 = getelementptr inbounds i64, i64* %envptr253601, i64 1              ; &envptr253601[1]
  %args233584233760 = load i64, i64* %envptr253602, align 8                          ; load; *envptr253602
  %check241538 = call i64 @prim_null_63(i64 %rvp241537)                              ; call prim_null_63
  %cmp253603 = icmp eq i64 %check241538, 15                                          ; false?
  br i1 %cmp253603, label %else253605, label %then253604                             ; if

then253604:
  %msg241542 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str253606, i32 0, i32 0)); quoted string
  %abort241540 = call i64 @prim_halt(i64 %msg241542)                                 ; call prim_halt
  %sym241545 = add i64 0, 0                                                          ; quoted ()
  %cloptr253607 = inttoptr i64 %abort241540 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr253608 = getelementptr inbounds i64, i64* %cloptr253607, i64 0               ; &cloptr253607[0]
  %f253610 = load i64, i64* %i0ptr253608, align 8                                    ; load; *i0ptr253608
  %fptr253609 = inttoptr i64 %f253610 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr253609(i64 %abort241540, i64 %sym241545)            ; tail call
  ret void

else253605:
  %_95234302 = call i64 @prim_car(i64 %rvp241537)                                    ; call prim_car
  %rvp241527 = call i64 @prim_cdr(i64 %rvp241537)                                    ; call prim_cdr
  %check241528 = call i64 @prim_null_63(i64 %rvp241527)                              ; call prim_null_63
  %cmp253611 = icmp eq i64 %check241528, 15                                          ; false?
  br i1 %cmp253611, label %else253613, label %then253612                             ; if

then253612:
  %msg241532 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str253614, i32 0, i32 0)); quoted string
  %abort241530 = call i64 @prim_halt(i64 %msg241532)                                 ; call prim_halt
  %sym241535 = add i64 0, 0                                                          ; quoted ()
  %cloptr253615 = inttoptr i64 %abort241530 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr253616 = getelementptr inbounds i64, i64* %cloptr253615, i64 0               ; &cloptr253615[0]
  %f253618 = load i64, i64* %i0ptr253616, align 8                                    ; load; *i0ptr253616
  %fptr253617 = inttoptr i64 %f253618 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr253617(i64 %abort241530, i64 %sym241535)            ; tail call
  ret void

else253613:
  %rest241534 = call i64 @prim_cdr(i64 %rvp241527)                                   ; call prim_cdr
  %empty241529 = call i64 @prim_null_63(i64 %rest241534)                             ; call prim_null_63
  %cmp253619 = icmp eq i64 %empty241529, 15                                          ; false?
  br i1 %cmp253619, label %else253621, label %then253620                             ; if

then253620:
  %a233936 = call i64 @prim_car(i64 %rvp241527)                                      ; call prim_car
  %na241502 = call i64 @prim_cdr(i64 %rvp241527)                                     ; call prim_cdr
  %cloptr253622 = call i64* @alloc(i64 24)                                           ; malloc
  %eptr253624 = getelementptr inbounds i64, i64* %cloptr253622, i64 1                ; &eptr253624[1]
  %eptr253625 = getelementptr inbounds i64, i64* %cloptr253622, i64 2                ; &eptr253625[2]
  store i64 %args233584233760, i64* %eptr253624                                      ; *eptr253624 = %args233584233760
  store i64 %cont234300, i64* %eptr253625                                            ; *eptr253625 = %cont234300
  %eptr253623 = getelementptr inbounds i64, i64* %cloptr253622, i64 0                ; &cloptr253622[0]
  %f253626 = ptrtoint void(i64,i64)* @lam241619 to i64                               ; fptr cast; i64(...)* -> i64
  store i64 %f253626, i64* %eptr253623                                               ; store fptr
  %arg235846 = ptrtoint i64* %cloptr253622 to i64                                    ; closure cast; i64* -> i64
  %sym241524 = add i64 0, 0                                                          ; quoted ()
  %x241525 = call i64 @prim_cons(i64 %f233583233759, i64 %sym241524)                 ; call prim_cons
  %x241526 = call i64 @prim_cons(i64 %arg235846, i64 %x241525)                       ; call prim_cons
  %cloptr253627 = inttoptr i64 %a233936 to i64*                                      ; closure/env cast; i64 -> i64*
  %i0ptr253628 = getelementptr inbounds i64, i64* %cloptr253627, i64 0               ; &cloptr253627[0]
  %f253630 = load i64, i64* %i0ptr253628, align 8                                    ; load; *i0ptr253628
  %fptr253629 = inttoptr i64 %f253630 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr253629(i64 %a233936, i64 %x241526)                  ; tail call
  ret void

else253621:
  %many241533 = call i64 @const_init_string(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @str253631, i32 0, i32 0)); quoted string
  %fail241531 = call i64 @prim_halt(i64 %many241533)                                 ; call prim_halt
  %sym241536 = add i64 0, 0                                                          ; quoted ()
  %cloptr253632 = inttoptr i64 %fail241531 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr253633 = getelementptr inbounds i64, i64* %cloptr253632, i64 0               ; &cloptr253632[0]
  %f253635 = load i64, i64* %i0ptr253633, align 8                                    ; load; *i0ptr253633
  %fptr253634 = inttoptr i64 %f253635 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr253634(i64 %fail241531, i64 %sym241536)             ; tail call
  ret void
}


define void @lam241619(i64 %env241620, i64 %rvp241515) {
  %envptr253636 = inttoptr i64 %env241620 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr253637 = getelementptr inbounds i64, i64* %envptr253636, i64 2              ; &envptr253636[2]
  %cont234300 = load i64, i64* %envptr253637, align 8                                ; load; *envptr253637
  %envptr253638 = inttoptr i64 %env241620 to i64*                                    ; closure/env cast; i64 -> i64*
  %envptr253639 = getelementptr inbounds i64, i64* %envptr253638, i64 1              ; &envptr253638[1]
  %args233584233760 = load i64, i64* %envptr253639, align 8                          ; load; *envptr253639
  %check241516 = call i64 @prim_null_63(i64 %rvp241515)                              ; call prim_null_63
  %cmp253640 = icmp eq i64 %check241516, 15                                          ; false?
  br i1 %cmp253640, label %else253642, label %then253641                             ; if

then253641:
  %msg241520 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str253643, i32 0, i32 0)); quoted string
  %abort241518 = call i64 @prim_halt(i64 %msg241520)                                 ; call prim_halt
  %sym241523 = add i64 0, 0                                                          ; quoted ()
  %cloptr253644 = inttoptr i64 %abort241518 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr253645 = getelementptr inbounds i64, i64* %cloptr253644, i64 0               ; &cloptr253644[0]
  %f253647 = load i64, i64* %i0ptr253645, align 8                                    ; load; *i0ptr253645
  %fptr253646 = inttoptr i64 %f253647 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr253646(i64 %abort241518, i64 %sym241523)            ; tail call
  ret void

else253642:
  %_95234303 = call i64 @prim_car(i64 %rvp241515)                                    ; call prim_car
  %rvp241505 = call i64 @prim_cdr(i64 %rvp241515)                                    ; call prim_cdr
  %check241506 = call i64 @prim_null_63(i64 %rvp241505)                              ; call prim_null_63
  %cmp253648 = icmp eq i64 %check241506, 15                                          ; false?
  br i1 %cmp253648, label %else253650, label %then253649                             ; if

then253649:
  %msg241510 = call i64 @const_init_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @str253651, i32 0, i32 0)); quoted string
  %abort241508 = call i64 @prim_halt(i64 %msg241510)                                 ; call prim_halt
  %sym241513 = add i64 0, 0                                                          ; quoted ()
  %cloptr253652 = inttoptr i64 %abort241508 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr253653 = getelementptr inbounds i64, i64* %cloptr253652, i64 0               ; &cloptr253652[0]
  %f253655 = load i64, i64* %i0ptr253653, align 8                                    ; load; *i0ptr253653
  %fptr253654 = inttoptr i64 %f253655 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr253654(i64 %abort241508, i64 %sym241513)            ; tail call
  ret void

else253650:
  %rest241512 = call i64 @prim_cdr(i64 %rvp241505)                                   ; call prim_cdr
  %empty241507 = call i64 @prim_null_63(i64 %rest241512)                             ; call prim_null_63
  %cmp253656 = icmp eq i64 %empty241507, 15                                          ; false?
  br i1 %cmp253656, label %else253658, label %then253657                             ; if

then253657:
  %a233937 = call i64 @prim_car(i64 %rvp241505)                                      ; call prim_car
  %na241504 = call i64 @prim_cdr(i64 %rvp241505)                                     ; call prim_cdr
  %cps_45lst234304 = call i64 @prim_cons(i64 %cont234300, i64 %args233584233760)     ; call prim_cons
  %cloptr253659 = inttoptr i64 %a233937 to i64*                                      ; closure/env cast; i64 -> i64*
  %i0ptr253660 = getelementptr inbounds i64, i64* %cloptr253659, i64 0               ; &cloptr253659[0]
  %f253662 = load i64, i64* %i0ptr253660, align 8                                    ; load; *i0ptr253660
  %fptr253661 = inttoptr i64 %f253662 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr253661(i64 %a233937, i64 %cps_45lst234304)          ; tail call
  ret void

else253658:
  %many241511 = call i64 @const_init_string(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @str253663, i32 0, i32 0)); quoted string
  %fail241509 = call i64 @prim_halt(i64 %many241511)                                 ; call prim_halt
  %sym241514 = add i64 0, 0                                                          ; quoted ()
  %cloptr253664 = inttoptr i64 %fail241509 to i64*                                   ; closure/env cast; i64 -> i64*
  %i0ptr253665 = getelementptr inbounds i64, i64* %cloptr253664, i64 0               ; &cloptr253664[0]
  %f253667 = load i64, i64* %i0ptr253665, align 8                                    ; load; *i0ptr253665
  %fptr253666 = inttoptr i64 %f253667 to void (i64,i64)*                             ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr253666(i64 %fail241509, i64 %sym241514)             ; tail call
  ret void
}





@str244136 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 2\00", align 8
@str244144 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 1\00", align 8
@str244156 = private unnamed_addr constant [33 x i8] c"Error: Too many arguments given.\00", align 8
@str244164 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 2\00", align 8
@str244172 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 1\00", align 8
@str244191 = private unnamed_addr constant [33 x i8] c"Error: Too many arguments given.\00", align 8
@str244201 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 2\00", align 8
@str244209 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 1\00", align 8
@str244229 = private unnamed_addr constant [33 x i8] c"Error: Too many arguments given.\00", align 8
@str244241 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 2\00", align 8
@str244249 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 1\00", align 8
@str244270 = private unnamed_addr constant [33 x i8] c"Error: Too many arguments given.\00", align 8
@str244284 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 2\00", align 8
@str244292 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 1\00", align 8
@str244314 = private unnamed_addr constant [33 x i8] c"Error: Too many arguments given.\00", align 8
@str244330 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 2\00", align 8
@str244338 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 1\00", align 8
@str244361 = private unnamed_addr constant [33 x i8] c"Error: Too many arguments given.\00", align 8
@str244379 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 2\00", align 8
@str244387 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 1\00", align 8
@str244422 = private unnamed_addr constant [33 x i8] c"Error: Too many arguments given.\00", align 8
@str244432 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 2\00", align 8
@str244440 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 1\00", align 8
@str244455 = private unnamed_addr constant [33 x i8] c"Error: Too many arguments given.\00", align 8
@str244463 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 3\00", align 8
@str244471 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 2\00", align 8
@str244479 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 1\00", align 8
@str244491 = private unnamed_addr constant [33 x i8] c"Error: Too many arguments given.\00", align 8
@str244503 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 3\00", align 8
@str244511 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 2\00", align 8
@str244519 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 1\00", align 8
@str244538 = private unnamed_addr constant [33 x i8] c"Error: Too many arguments given.\00", align 8
@str244554 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 2\00", align 8
@str244562 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 1\00", align 8
@str244574 = private unnamed_addr constant [33 x i8] c"Error: Too many arguments given.\00", align 8
@str244594 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 2\00", align 8
@str244602 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 1\00", align 8
@str244635 = private unnamed_addr constant [33 x i8] c"Error: Too many arguments given.\00", align 8
@str244645 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 3\00", align 8
@str244653 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 2\00", align 8
@str244661 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 1\00", align 8
@str244677 = private unnamed_addr constant [33 x i8] c"Error: Too many arguments given.\00", align 8
@str244687 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 3\00", align 8
@str244695 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 2\00", align 8
@str244703 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 1\00", align 8
@str244720 = private unnamed_addr constant [33 x i8] c"Error: Too many arguments given.\00", align 8
@str244732 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 2\00", align 8
@str244740 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 1\00", align 8
@str244752 = private unnamed_addr constant [33 x i8] c"Error: Too many arguments given.\00", align 8
@str244801 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 2\00", align 8
@str244809 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 1\00", align 8
@str244827 = private unnamed_addr constant [33 x i8] c"Error: Too many arguments given.\00", align 8
@str244841 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 2\00", align 8
@str244849 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 1\00", align 8
@str244866 = private unnamed_addr constant [33 x i8] c"Error: Too many arguments given.\00", align 8
@str244878 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 2\00", align 8
@str244886 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 1\00", align 8
@str244898 = private unnamed_addr constant [33 x i8] c"Error: Too many arguments given.\00", align 8
@str244910 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 2\00", align 8
@str244918 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 1\00", align 8
@str244946 = private unnamed_addr constant [33 x i8] c"Error: Too many arguments given.\00", align 8
@str244954 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 3\00", align 8
@str244962 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 2\00", align 8
@str244970 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 1\00", align 8
@str244982 = private unnamed_addr constant [33 x i8] c"Error: Too many arguments given.\00", align 8
@str244990 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 3\00", align 8
@str244998 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 2\00", align 8
@str245006 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 1\00", align 8
@str245018 = private unnamed_addr constant [33 x i8] c"Error: Too many arguments given.\00", align 8
@str245028 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 3\00", align 8
@str245036 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 2\00", align 8
@str245044 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 1\00", align 8
@str245068 = private unnamed_addr constant [33 x i8] c"Error: Too many arguments given.\00", align 8
@str245080 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 2\00", align 8
@str245088 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 1\00", align 8
@str245100 = private unnamed_addr constant [33 x i8] c"Error: Too many arguments given.\00", align 8
@str245114 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 2\00", align 8
@str245122 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 1\00", align 8
@str245168 = private unnamed_addr constant [33 x i8] c"Error: Too many arguments given.\00", align 8
@str245176 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 2\00", align 8
@str245184 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 1\00", align 8
@str245209 = private unnamed_addr constant [33 x i8] c"Error: Too many arguments given.\00", align 8
@str245217 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 2\00", align 8
@str245225 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 1\00", align 8
@str245237 = private unnamed_addr constant [33 x i8] c"Error: Too many arguments given.\00", align 8
@str245249 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 2\00", align 8
@str245257 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 1\00", align 8
@str245289 = private unnamed_addr constant [33 x i8] c"Error: Too many arguments given.\00", align 8
@str245303 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 2\00", align 8
@str245311 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 1\00", align 8
@str245328 = private unnamed_addr constant [33 x i8] c"Error: Too many arguments given.\00", align 8
@str245340 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 2\00", align 8
@str245348 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 1\00", align 8
@str245360 = private unnamed_addr constant [33 x i8] c"Error: Too many arguments given.\00", align 8
@str245372 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 2\00", align 8
@str245380 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 1\00", align 8
@str245412 = private unnamed_addr constant [33 x i8] c"Error: Too many arguments given.\00", align 8
@str245426 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 2\00", align 8
@str245434 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 1\00", align 8
@str245451 = private unnamed_addr constant [33 x i8] c"Error: Too many arguments given.\00", align 8
@str245463 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 2\00", align 8
@str245471 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 1\00", align 8
@str245483 = private unnamed_addr constant [33 x i8] c"Error: Too many arguments given.\00", align 8
@str245491 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 3\00", align 8
@str245499 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 2\00", align 8
@str245507 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 1\00", align 8
@str245534 = private unnamed_addr constant [33 x i8] c"Error: Too many arguments given.\00", align 8
@str245542 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 2\00", align 8
@str245550 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 1\00", align 8
@str245562 = private unnamed_addr constant [33 x i8] c"Error: Too many arguments given.\00", align 8
@str245576 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 2\00", align 8
@str245584 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 1\00", align 8
@str245609 = private unnamed_addr constant [33 x i8] c"Error: Too many arguments given.\00", align 8
@str245623 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 2\00", align 8
@str245631 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 1\00", align 8
@str245648 = private unnamed_addr constant [33 x i8] c"Error: Too many arguments given.\00", align 8
@str245660 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 2\00", align 8
@str245668 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 1\00", align 8
@str245680 = private unnamed_addr constant [33 x i8] c"Error: Too many arguments given.\00", align 8
@str245694 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 2\00", align 8
@str245702 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 1\00", align 8
@str245727 = private unnamed_addr constant [33 x i8] c"Error: Too many arguments given.\00", align 8
@str245741 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 2\00", align 8
@str245749 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 1\00", align 8
@str245766 = private unnamed_addr constant [33 x i8] c"Error: Too many arguments given.\00", align 8
@str245778 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 2\00", align 8
@str245786 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 1\00", align 8
@str245798 = private unnamed_addr constant [33 x i8] c"Error: Too many arguments given.\00", align 8
@str245806 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 3\00", align 8
@str245814 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 2\00", align 8
@str245822 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 1\00", align 8
@str245849 = private unnamed_addr constant [33 x i8] c"Error: Too many arguments given.\00", align 8
@str245857 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 2\00", align 8
@str245865 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 1\00", align 8
@str245877 = private unnamed_addr constant [33 x i8] c"Error: Too many arguments given.\00", align 8
@str245891 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 2\00", align 8
@str245899 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 1\00", align 8
@str245930 = private unnamed_addr constant [33 x i8] c"Error: Too many arguments given.\00", align 8
@str245942 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 2\00", align 8
@str245950 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 1\00", align 8
@str245962 = private unnamed_addr constant [33 x i8] c"Error: Too many arguments given.\00", align 8
@str245976 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 2\00", align 8
@str245984 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 1\00", align 8
@str246015 = private unnamed_addr constant [33 x i8] c"Error: Too many arguments given.\00", align 8
@str246027 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 2\00", align 8
@str246035 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 1\00", align 8
@str246047 = private unnamed_addr constant [33 x i8] c"Error: Too many arguments given.\00", align 8
@str246078 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 3\00", align 8
@str246086 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 2\00", align 8
@str246094 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 1\00", align 8
@str246106 = private unnamed_addr constant [33 x i8] c"Error: Too many arguments given.\00", align 8
@str246114 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 2\00", align 8
@str246122 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 1\00", align 8
@str246134 = private unnamed_addr constant [33 x i8] c"Error: Too many arguments given.\00", align 8
@str246142 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 2\00", align 8
@str246150 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 1\00", align 8
@str246162 = private unnamed_addr constant [33 x i8] c"Error: Too many arguments given.\00", align 8
@str246170 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 2\00", align 8
@str246178 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 1\00", align 8
@str246190 = private unnamed_addr constant [33 x i8] c"Error: Too many arguments given.\00", align 8
@str246198 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 2\00", align 8
@str246206 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 1\00", align 8
@str246218 = private unnamed_addr constant [33 x i8] c"Error: Too many arguments given.\00", align 8
@str246236 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 2\00", align 8
@str246244 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 1\00", align 8
@str246262 = private unnamed_addr constant [33 x i8] c"Error: Too many arguments given.\00", align 8
@str246276 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 2\00", align 8
@str246284 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 1\00", align 8
@str246317 = private unnamed_addr constant [33 x i8] c"Error: Too many arguments given.\00", align 8
@str246331 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 3\00", align 8
@str246339 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 2\00", align 8
@str246347 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 1\00", align 8
@str246368 = private unnamed_addr constant [33 x i8] c"Error: Too many arguments given.\00", align 8
@str246388 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 2\00", align 8
@str246396 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 1\00", align 8
@str246417 = private unnamed_addr constant [33 x i8] c"Error: Too many arguments given.\00", align 8
@str246437 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 2\00", align 8
@str246445 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 1\00", align 8
@str246470 = private unnamed_addr constant [33 x i8] c"Error: Too many arguments given.\00", align 8
@str246496 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 2\00", align 8
@str246504 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 1\00", align 8
@str246526 = private unnamed_addr constant [33 x i8] c"Error: Too many arguments given.\00", align 8
@str246548 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 2\00", align 8
@str246556 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 1\00", align 8
@str246583 = private unnamed_addr constant [33 x i8] c"Error: Too many arguments given.\00", align 8
@str246593 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 3\00", align 8
@str246601 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 2\00", align 8
@str246609 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 1\00", align 8
@str246635 = private unnamed_addr constant [33 x i8] c"Error: Too many arguments given.\00", align 8
@str246651 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 2\00", align 8
@str246659 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 1\00", align 8
@str246674 = private unnamed_addr constant [78 x i8] c"Error: Non-function value is applied. Expression was '(loop (cdr x) (cdr y))'\00", align 8
@str246679 = private unnamed_addr constant [33 x i8] c"Error: Too many arguments given.\00", align 8
@str246703 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 2\00", align 8
@str246711 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 1\00", align 8
@str246737 = private unnamed_addr constant [134 x i8] c"Error: Non-function value is applied. Expression was '(loop (if (> lx ly) (drop x (- lx ly)) x) (if (> ly lx) (drop y (- ly lx)) y))'\00", align 8
@str246742 = private unnamed_addr constant [33 x i8] c"Error: Too many arguments given.\00", align 8
@str246766 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 2\00", align 8
@str246774 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 1\00", align 8
@str246813 = private unnamed_addr constant [33 x i8] c"Error: Too many arguments given.\00", align 8
@str246835 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 2\00", align 8
@str246843 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 1\00", align 8
@str246865 = private unnamed_addr constant [33 x i8] c"Error: Too many arguments given.\00", align 8
@str246887 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 2\00", align 8
@str246895 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 1\00", align 8
@str246926 = private unnamed_addr constant [33 x i8] c"Error: Too many arguments given.\00", align 8
@str246940 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 2\00", align 8
@str246948 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 1\00", align 8
@str246960 = private unnamed_addr constant [33 x i8] c"Error: Too many arguments given.\00", align 8
@str246974 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 2\00", align 8
@str246982 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 1\00", align 8
@str246994 = private unnamed_addr constant [33 x i8] c"Error: Too many arguments given.\00", align 8
@str247016 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 2\00", align 8
@str247024 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 1\00", align 8
@str247046 = private unnamed_addr constant [33 x i8] c"Error: Too many arguments given.\00", align 8
@str247068 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 2\00", align 8
@str247076 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 1\00", align 8
@str247107 = private unnamed_addr constant [33 x i8] c"Error: Too many arguments given.\00", align 8
@str247121 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 2\00", align 8
@str247129 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 1\00", align 8
@str247141 = private unnamed_addr constant [33 x i8] c"Error: Too many arguments given.\00", align 8
@str247155 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 2\00", align 8
@str247163 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 1\00", align 8
@str247175 = private unnamed_addr constant [33 x i8] c"Error: Too many arguments given.\00", align 8
@str247187 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 2\00", align 8
@str247195 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 1\00", align 8
@str247219 = private unnamed_addr constant [85 x i8] c"Error: Non-function value is applied. Expression was '(common-tail new %wind-stack)'\00", align 8
@str247234 = private unnamed_addr constant [33 x i8] c"Error: Too many arguments given.\00", align 8
@str247248 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 2\00", align 8
@str247256 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 1\00", align 8
@str247278 = private unnamed_addr constant [33 x i8] c"Error: Too many arguments given.\00", align 8
@str247298 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 2\00", align 8
@str247306 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 1\00", align 8
@str247325 = private unnamed_addr constant [33 x i8] c"Error: Too many arguments given.\00", align 8
@str247341 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 2\00", align 8
@str247349 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 1\00", align 8
@str247375 = private unnamed_addr constant [33 x i8] c"Error: Too many arguments given.\00", align 8
@str247389 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 2\00", align 8
@str247397 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 1\00", align 8
@str247422 = private unnamed_addr constant [33 x i8] c"Error: Too many arguments given.\00", align 8
@str247436 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 2\00", align 8
@str247444 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 1\00", align 8
@str247462 = private unnamed_addr constant [33 x i8] c"Error: Too many arguments given.\00", align 8
@str247476 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 2\00", align 8
@str247484 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 1\00", align 8
@str247505 = private unnamed_addr constant [71 x i8] c"Error: Non-function value is applied. Expression was '((cdr (car l)))'\00", align 8
@str247516 = private unnamed_addr constant [33 x i8] c"Error: Too many arguments given.\00", align 8
@str247530 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 2\00", align 8
@str247538 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 1\00", align 8
@str247556 = private unnamed_addr constant [33 x i8] c"Error: Too many arguments given.\00", align 8
@str247570 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 2\00", align 8
@str247578 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 1\00", align 8
@str247593 = private unnamed_addr constant [67 x i8] c"Error: Non-function value is applied. Expression was '(f (cdr l))'\00", align 8
@str247598 = private unnamed_addr constant [33 x i8] c"Error: Too many arguments given.\00", align 8
@str247612 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 2\00", align 8
@str247620 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 1\00", align 8
@str247638 = private unnamed_addr constant [33 x i8] c"Error: Too many arguments given.\00", align 8
@str247652 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 2\00", align 8
@str247660 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 1\00", align 8
@str247675 = private unnamed_addr constant [67 x i8] c"Error: Non-function value is applied. Expression was '(f (cdr l))'\00", align 8
@str247680 = private unnamed_addr constant [33 x i8] c"Error: Too many arguments given.\00", align 8
@str247698 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 2\00", align 8
@str247706 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 1\00", align 8
@str247728 = private unnamed_addr constant [71 x i8] c"Error: Non-function value is applied. Expression was '(f %wind-stack)'\00", align 8
@str247740 = private unnamed_addr constant [33 x i8] c"Error: Too many arguments given.\00", align 8
@str247756 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 2\00", align 8
@str247764 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 1\00", align 8
@str247786 = private unnamed_addr constant [33 x i8] c"Error: Too many arguments given.\00", align 8
@str247806 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 2\00", align 8
@str247814 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 1\00", align 8
@str247833 = private unnamed_addr constant [33 x i8] c"Error: Too many arguments given.\00", align 8
@str247849 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 2\00", align 8
@str247857 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 1\00", align 8
@str247881 = private unnamed_addr constant [33 x i8] c"Error: Too many arguments given.\00", align 8
@str247895 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 2\00", align 8
@str247903 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 1\00", align 8
@str247929 = private unnamed_addr constant [33 x i8] c"Error: Too many arguments given.\00", align 8
@str247945 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 2\00", align 8
@str247953 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 1\00", align 8
@str247974 = private unnamed_addr constant [67 x i8] c"Error: Non-function value is applied. Expression was '(f (cdr l))'\00", align 8
@str247985 = private unnamed_addr constant [33 x i8] c"Error: Too many arguments given.\00", align 8
@str247999 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 2\00", align 8
@str248007 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 1\00", align 8
@str248025 = private unnamed_addr constant [33 x i8] c"Error: Too many arguments given.\00", align 8
@str248039 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 2\00", align 8
@str248047 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 1\00", align 8
@str248068 = private unnamed_addr constant [71 x i8] c"Error: Non-function value is applied. Expression was '((car (car l)))'\00", align 8
@str248079 = private unnamed_addr constant [33 x i8] c"Error: Too many arguments given.\00", align 8
@str248093 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 2\00", align 8
@str248101 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 1\00", align 8
@str248113 = private unnamed_addr constant [33 x i8] c"Error: Too many arguments given.\00", align 8
@str248127 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 2\00", align 8
@str248135 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 1\00", align 8
@str248147 = private unnamed_addr constant [33 x i8] c"Error: Too many arguments given.\00", align 8
@str248161 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 2\00", align 8
@str248169 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 1\00", align 8
@str248187 = private unnamed_addr constant [33 x i8] c"Error: Too many arguments given.\00", align 8
@str248201 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 2\00", align 8
@str248209 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 1\00", align 8
@str248230 = private unnamed_addr constant [71 x i8] c"Error: Non-function value is applied. Expression was '((car (car l)))'\00", align 8
@str248241 = private unnamed_addr constant [33 x i8] c"Error: Too many arguments given.\00", align 8
@str248255 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 2\00", align 8
@str248263 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 1\00", align 8
@str248275 = private unnamed_addr constant [33 x i8] c"Error: Too many arguments given.\00", align 8
@str248289 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 2\00", align 8
@str248297 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 1\00", align 8
@str248309 = private unnamed_addr constant [33 x i8] c"Error: Too many arguments given.\00", align 8
@str248323 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 2\00", align 8
@str248331 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 1\00", align 8
@str248346 = private unnamed_addr constant [63 x i8] c"Error: Non-function value is applied. Expression was '(f new)'\00", align 8
@str248351 = private unnamed_addr constant [33 x i8] c"Error: Too many arguments given.\00", align 8
@str248367 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 2\00", align 8
@str248375 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 1\00", align 8
@str248397 = private unnamed_addr constant [33 x i8] c"Error: Too many arguments given.\00", align 8
@str248417 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 2\00", align 8
@str248425 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 1\00", align 8
@str248444 = private unnamed_addr constant [33 x i8] c"Error: Too many arguments given.\00", align 8
@str248460 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 2\00", align 8
@str248468 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 1\00", align 8
@str248492 = private unnamed_addr constant [33 x i8] c"Error: Too many arguments given.\00", align 8
@str248506 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 2\00", align 8
@str248514 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 1\00", align 8
@str248540 = private unnamed_addr constant [33 x i8] c"Error: Too many arguments given.\00", align 8
@str248556 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 2\00", align 8
@str248564 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 1\00", align 8
@str248585 = private unnamed_addr constant [67 x i8] c"Error: Non-function value is applied. Expression was '(f (cdr l))'\00", align 8
@str248596 = private unnamed_addr constant [33 x i8] c"Error: Too many arguments given.\00", align 8
@str248610 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 2\00", align 8
@str248618 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 1\00", align 8
@str248636 = private unnamed_addr constant [33 x i8] c"Error: Too many arguments given.\00", align 8
@str248650 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 2\00", align 8
@str248658 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 1\00", align 8
@str248679 = private unnamed_addr constant [71 x i8] c"Error: Non-function value is applied. Expression was '((car (car l)))'\00", align 8
@str248690 = private unnamed_addr constant [33 x i8] c"Error: Too many arguments given.\00", align 8
@str248704 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 2\00", align 8
@str248712 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 1\00", align 8
@str248724 = private unnamed_addr constant [33 x i8] c"Error: Too many arguments given.\00", align 8
@str248738 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 2\00", align 8
@str248746 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 1\00", align 8
@str248758 = private unnamed_addr constant [33 x i8] c"Error: Too many arguments given.\00", align 8
@str248772 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 2\00", align 8
@str248780 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 1\00", align 8
@str248798 = private unnamed_addr constant [33 x i8] c"Error: Too many arguments given.\00", align 8
@str248812 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 2\00", align 8
@str248820 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 1\00", align 8
@str248841 = private unnamed_addr constant [71 x i8] c"Error: Non-function value is applied. Expression was '((car (car l)))'\00", align 8
@str248852 = private unnamed_addr constant [33 x i8] c"Error: Too many arguments given.\00", align 8
@str248866 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 2\00", align 8
@str248874 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 1\00", align 8
@str248886 = private unnamed_addr constant [33 x i8] c"Error: Too many arguments given.\00", align 8
@str248900 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 2\00", align 8
@str248908 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 1\00", align 8
@str248920 = private unnamed_addr constant [33 x i8] c"Error: Too many arguments given.\00", align 8
@str248934 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 2\00", align 8
@str248942 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 1\00", align 8
@str248957 = private unnamed_addr constant [63 x i8] c"Error: Non-function value is applied. Expression was '(f new)'\00", align 8
@str248962 = private unnamed_addr constant [33 x i8] c"Error: Too many arguments given.\00", align 8
@str248976 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 2\00", align 8
@str248984 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 1\00", align 8
@str249006 = private unnamed_addr constant [33 x i8] c"Error: Too many arguments given.\00", align 8
@str249026 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 2\00", align 8
@str249034 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 1\00", align 8
@str249053 = private unnamed_addr constant [33 x i8] c"Error: Too many arguments given.\00", align 8
@str249069 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 2\00", align 8
@str249077 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 1\00", align 8
@str249103 = private unnamed_addr constant [33 x i8] c"Error: Too many arguments given.\00", align 8
@str249117 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 2\00", align 8
@str249125 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 1\00", align 8
@str249150 = private unnamed_addr constant [33 x i8] c"Error: Too many arguments given.\00", align 8
@str249164 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 2\00", align 8
@str249172 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 1\00", align 8
@str249190 = private unnamed_addr constant [33 x i8] c"Error: Too many arguments given.\00", align 8
@str249204 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 2\00", align 8
@str249212 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 1\00", align 8
@str249233 = private unnamed_addr constant [71 x i8] c"Error: Non-function value is applied. Expression was '((cdr (car l)))'\00", align 8
@str249244 = private unnamed_addr constant [33 x i8] c"Error: Too many arguments given.\00", align 8
@str249258 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 2\00", align 8
@str249266 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 1\00", align 8
@str249284 = private unnamed_addr constant [33 x i8] c"Error: Too many arguments given.\00", align 8
@str249298 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 2\00", align 8
@str249306 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 1\00", align 8
@str249321 = private unnamed_addr constant [67 x i8] c"Error: Non-function value is applied. Expression was '(f (cdr l))'\00", align 8
@str249326 = private unnamed_addr constant [33 x i8] c"Error: Too many arguments given.\00", align 8
@str249340 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 2\00", align 8
@str249348 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 1\00", align 8
@str249366 = private unnamed_addr constant [33 x i8] c"Error: Too many arguments given.\00", align 8
@str249380 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 2\00", align 8
@str249388 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 1\00", align 8
@str249403 = private unnamed_addr constant [67 x i8] c"Error: Non-function value is applied. Expression was '(f (cdr l))'\00", align 8
@str249408 = private unnamed_addr constant [33 x i8] c"Error: Too many arguments given.\00", align 8
@str249426 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 2\00", align 8
@str249434 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 1\00", align 8
@str249456 = private unnamed_addr constant [71 x i8] c"Error: Non-function value is applied. Expression was '(f %wind-stack)'\00", align 8
@str249468 = private unnamed_addr constant [33 x i8] c"Error: Too many arguments given.\00", align 8
@str249484 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 2\00", align 8
@str249492 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 1\00", align 8
@str249514 = private unnamed_addr constant [33 x i8] c"Error: Too many arguments given.\00", align 8
@str249534 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 2\00", align 8
@str249542 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 1\00", align 8
@str249561 = private unnamed_addr constant [33 x i8] c"Error: Too many arguments given.\00", align 8
@str249577 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 2\00", align 8
@str249585 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 1\00", align 8
@str249609 = private unnamed_addr constant [33 x i8] c"Error: Too many arguments given.\00", align 8
@str249623 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 2\00", align 8
@str249631 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 1\00", align 8
@str249657 = private unnamed_addr constant [33 x i8] c"Error: Too many arguments given.\00", align 8
@str249673 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 2\00", align 8
@str249681 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 1\00", align 8
@str249702 = private unnamed_addr constant [67 x i8] c"Error: Non-function value is applied. Expression was '(f (cdr l))'\00", align 8
@str249713 = private unnamed_addr constant [33 x i8] c"Error: Too many arguments given.\00", align 8
@str249727 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 2\00", align 8
@str249735 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 1\00", align 8
@str249753 = private unnamed_addr constant [33 x i8] c"Error: Too many arguments given.\00", align 8
@str249767 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 2\00", align 8
@str249775 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 1\00", align 8
@str249796 = private unnamed_addr constant [71 x i8] c"Error: Non-function value is applied. Expression was '((car (car l)))'\00", align 8
@str249807 = private unnamed_addr constant [33 x i8] c"Error: Too many arguments given.\00", align 8
@str249821 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 2\00", align 8
@str249829 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 1\00", align 8
@str249841 = private unnamed_addr constant [33 x i8] c"Error: Too many arguments given.\00", align 8
@str249855 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 2\00", align 8
@str249863 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 1\00", align 8
@str249875 = private unnamed_addr constant [33 x i8] c"Error: Too many arguments given.\00", align 8
@str249889 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 2\00", align 8
@str249897 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 1\00", align 8
@str249915 = private unnamed_addr constant [33 x i8] c"Error: Too many arguments given.\00", align 8
@str249929 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 2\00", align 8
@str249937 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 1\00", align 8
@str249958 = private unnamed_addr constant [71 x i8] c"Error: Non-function value is applied. Expression was '((car (car l)))'\00", align 8
@str249969 = private unnamed_addr constant [33 x i8] c"Error: Too many arguments given.\00", align 8
@str249983 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 2\00", align 8
@str249991 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 1\00", align 8
@str250003 = private unnamed_addr constant [33 x i8] c"Error: Too many arguments given.\00", align 8
@str250017 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 2\00", align 8
@str250025 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 1\00", align 8
@str250037 = private unnamed_addr constant [33 x i8] c"Error: Too many arguments given.\00", align 8
@str250051 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 2\00", align 8
@str250059 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 1\00", align 8
@str250074 = private unnamed_addr constant [63 x i8] c"Error: Non-function value is applied. Expression was '(f new)'\00", align 8
@str250079 = private unnamed_addr constant [33 x i8] c"Error: Too many arguments given.\00", align 8
@str250095 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 2\00", align 8
@str250103 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 1\00", align 8
@str250125 = private unnamed_addr constant [33 x i8] c"Error: Too many arguments given.\00", align 8
@str250145 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 2\00", align 8
@str250153 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 1\00", align 8
@str250172 = private unnamed_addr constant [33 x i8] c"Error: Too many arguments given.\00", align 8
@str250188 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 2\00", align 8
@str250196 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 1\00", align 8
@str250220 = private unnamed_addr constant [33 x i8] c"Error: Too many arguments given.\00", align 8
@str250234 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 2\00", align 8
@str250242 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 1\00", align 8
@str250268 = private unnamed_addr constant [33 x i8] c"Error: Too many arguments given.\00", align 8
@str250284 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 2\00", align 8
@str250292 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 1\00", align 8
@str250313 = private unnamed_addr constant [67 x i8] c"Error: Non-function value is applied. Expression was '(f (cdr l))'\00", align 8
@str250324 = private unnamed_addr constant [33 x i8] c"Error: Too many arguments given.\00", align 8
@str250338 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 2\00", align 8
@str250346 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 1\00", align 8
@str250364 = private unnamed_addr constant [33 x i8] c"Error: Too many arguments given.\00", align 8
@str250378 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 2\00", align 8
@str250386 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 1\00", align 8
@str250407 = private unnamed_addr constant [71 x i8] c"Error: Non-function value is applied. Expression was '((car (car l)))'\00", align 8
@str250418 = private unnamed_addr constant [33 x i8] c"Error: Too many arguments given.\00", align 8
@str250432 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 2\00", align 8
@str250440 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 1\00", align 8
@str250452 = private unnamed_addr constant [33 x i8] c"Error: Too many arguments given.\00", align 8
@str250466 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 2\00", align 8
@str250474 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 1\00", align 8
@str250486 = private unnamed_addr constant [33 x i8] c"Error: Too many arguments given.\00", align 8
@str250500 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 2\00", align 8
@str250508 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 1\00", align 8
@str250526 = private unnamed_addr constant [33 x i8] c"Error: Too many arguments given.\00", align 8
@str250540 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 2\00", align 8
@str250548 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 1\00", align 8
@str250569 = private unnamed_addr constant [71 x i8] c"Error: Non-function value is applied. Expression was '((car (car l)))'\00", align 8
@str250580 = private unnamed_addr constant [33 x i8] c"Error: Too many arguments given.\00", align 8
@str250594 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 2\00", align 8
@str250602 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 1\00", align 8
@str250614 = private unnamed_addr constant [33 x i8] c"Error: Too many arguments given.\00", align 8
@str250628 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 2\00", align 8
@str250636 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 1\00", align 8
@str250648 = private unnamed_addr constant [33 x i8] c"Error: Too many arguments given.\00", align 8
@str250662 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 2\00", align 8
@str250670 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 1\00", align 8
@str250685 = private unnamed_addr constant [63 x i8] c"Error: Non-function value is applied. Expression was '(f new)'\00", align 8
@str250690 = private unnamed_addr constant [33 x i8] c"Error: Too many arguments given.\00", align 8
@str250700 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 4\00", align 8
@str250708 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 3\00", align 8
@str250716 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 2\00", align 8
@str250724 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 1\00", align 8
@str250747 = private unnamed_addr constant [61 x i8] c"Error: Non-function value is applied. Expression was '(pre)'\00", align 8
@str250760 = private unnamed_addr constant [33 x i8] c"Error: Too many arguments given.\00", align 8
@str250778 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 2\00", align 8
@str250786 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 1\00", align 8
@str250805 = private unnamed_addr constant [33 x i8] c"Error: Too many arguments given.\00", align 8
@str250821 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 2\00", align 8
@str250829 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 1\00", align 8
@str250850 = private unnamed_addr constant [62 x i8] c"Error: Non-function value is applied. Expression was '(body)'\00", align 8
@str250861 = private unnamed_addr constant [33 x i8] c"Error: Too many arguments given.\00", align 8
@str250875 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 2\00", align 8
@str250883 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 1\00", align 8
@str250901 = private unnamed_addr constant [33 x i8] c"Error: Too many arguments given.\00", align 8
@str250915 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 2\00", align 8
@str250923 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 1\00", align 8
@str250943 = private unnamed_addr constant [62 x i8] c"Error: Non-function value is applied. Expression was '(post)'\00", align 8
@str250953 = private unnamed_addr constant [33 x i8] c"Error: Too many arguments given.\00", align 8
@str250965 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 2\00", align 8
@str250973 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 1\00", align 8
@str250985 = private unnamed_addr constant [33 x i8] c"Error: Too many arguments given.\00", align 8
@str250997 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 2\00", align 8
@str251005 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 1\00", align 8
@str251017 = private unnamed_addr constant [33 x i8] c"Error: Too many arguments given.\00", align 8
@str251031 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 2\00", align 8
@str251039 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 1\00", align 8
@str251057 = private unnamed_addr constant [33 x i8] c"Error: Too many arguments given.\00", align 8
@str251071 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 2\00", align 8
@str251079 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 1\00", align 8
@str251099 = private unnamed_addr constant [62 x i8] c"Error: Non-function value is applied. Expression was '(post)'\00", align 8
@str251109 = private unnamed_addr constant [33 x i8] c"Error: Too many arguments given.\00", align 8
@str251121 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 2\00", align 8
@str251129 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 1\00", align 8
@str251141 = private unnamed_addr constant [33 x i8] c"Error: Too many arguments given.\00", align 8
@str251153 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 2\00", align 8
@str251161 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 1\00", align 8
@str251173 = private unnamed_addr constant [33 x i8] c"Error: Too many arguments given.\00", align 8
@str251191 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 2\00", align 8
@str251199 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 1\00", align 8
@str251218 = private unnamed_addr constant [33 x i8] c"Error: Too many arguments given.\00", align 8
@str251234 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 2\00", align 8
@str251242 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 1\00", align 8
@str251263 = private unnamed_addr constant [62 x i8] c"Error: Non-function value is applied. Expression was '(body)'\00", align 8
@str251274 = private unnamed_addr constant [33 x i8] c"Error: Too many arguments given.\00", align 8
@str251288 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 2\00", align 8
@str251296 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 1\00", align 8
@str251314 = private unnamed_addr constant [33 x i8] c"Error: Too many arguments given.\00", align 8
@str251328 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 2\00", align 8
@str251336 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 1\00", align 8
@str251356 = private unnamed_addr constant [62 x i8] c"Error: Non-function value is applied. Expression was '(post)'\00", align 8
@str251366 = private unnamed_addr constant [33 x i8] c"Error: Too many arguments given.\00", align 8
@str251378 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 2\00", align 8
@str251386 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 1\00", align 8
@str251398 = private unnamed_addr constant [33 x i8] c"Error: Too many arguments given.\00", align 8
@str251410 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 2\00", align 8
@str251418 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 1\00", align 8
@str251430 = private unnamed_addr constant [33 x i8] c"Error: Too many arguments given.\00", align 8
@str251444 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 2\00", align 8
@str251452 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 1\00", align 8
@str251470 = private unnamed_addr constant [33 x i8] c"Error: Too many arguments given.\00", align 8
@str251484 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 2\00", align 8
@str251492 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 1\00", align 8
@str251512 = private unnamed_addr constant [62 x i8] c"Error: Non-function value is applied. Expression was '(post)'\00", align 8
@str251522 = private unnamed_addr constant [33 x i8] c"Error: Too many arguments given.\00", align 8
@str251534 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 2\00", align 8
@str251542 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 1\00", align 8
@str251554 = private unnamed_addr constant [33 x i8] c"Error: Too many arguments given.\00", align 8
@str251566 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 2\00", align 8
@str251574 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 1\00", align 8
@str251586 = private unnamed_addr constant [33 x i8] c"Error: Too many arguments given.\00", align 8
@str251598 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 2\00", align 8
@str251606 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 1\00", align 8
@str251624 = private unnamed_addr constant [33 x i8] c"Error: Too many arguments given.\00", align 8
@str251636 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 2\00", align 8
@str251644 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 1\00", align 8
@str251659 = private unnamed_addr constant [33 x i8] c"Error: Too many arguments given.\00", align 8
@str251667 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 2\00", align 8
@str251675 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 1\00", align 8
@str251694 = private unnamed_addr constant [33 x i8] c"Error: Too many arguments given.\00", align 8
@str251708 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 2\00", align 8
@str251716 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 1\00", align 8
@str251732 = private unnamed_addr constant [33 x i8] c"Error: Too many arguments given.\00", align 8
@str251742 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 2\00", align 8
@str251750 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 1\00", align 8
@str251758 = private unnamed_addr constant [110 x i8] c"Error: Variable uninitialized. Expression was '(letrec ((a (quote 4)) (b a)) (begin (letrec* () (begin b))))'\00", align 8
@str251766 = private unnamed_addr constant [33 x i8] c"Error: Too many arguments given.\00", align 8
@str251774 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 2\00", align 8
@str251782 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 1\00", align 8
@str251794 = private unnamed_addr constant [33 x i8] c"Error: Too many arguments given.\00", align 8
@str251808 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 2\00", align 8
@str251816 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 1\00", align 8
@str251835 = private unnamed_addr constant [33 x i8] c"Error: Too many arguments given.\00", align 8
@str251879 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 2\00", align 8
@str251887 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 1\00", align 8
@str251909 = private unnamed_addr constant [33 x i8] c"Error: Too many arguments given.\00", align 8
@str251931 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 2\00", align 8
@str251939 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 1\00", align 8
@str251964 = private unnamed_addr constant [33 x i8] c"Error: Too many arguments given.\00", align 8
@str251986 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 2\00", align 8
@str251994 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 1\00", align 8
@str252026 = private unnamed_addr constant [33 x i8] c"Error: Too many arguments given.\00", align 8
@str252048 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 2\00", align 8
@str252056 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 1\00", align 8
@str252080 = private unnamed_addr constant [33 x i8] c"Error: Too many arguments given.\00", align 8
@str252100 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 2\00", align 8
@str252108 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 1\00", align 8
@str252130 = private unnamed_addr constant [33 x i8] c"Error: Too many arguments given.\00", align 8
@str252146 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 2\00", align 8
@str252154 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 1\00", align 8
@str252173 = private unnamed_addr constant [33 x i8] c"Error: Too many arguments given.\00", align 8
@str252189 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 2\00", align 8
@str252197 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 1\00", align 8
@str252209 = private unnamed_addr constant [33 x i8] c"Error: Too many arguments given.\00", align 8
@str252217 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 3\00", align 8
@str252225 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 2\00", align 8
@str252233 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 1\00", align 8
@str252245 = private unnamed_addr constant [33 x i8] c"Error: Too many arguments given.\00", align 8
@str252253 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 2\00", align 8
@str252261 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 1\00", align 8
@str252273 = private unnamed_addr constant [33 x i8] c"Error: Too many arguments given.\00", align 8
@str252281 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 2\00", align 8
@str252289 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 1\00", align 8
@str252301 = private unnamed_addr constant [33 x i8] c"Error: Too many arguments given.\00", align 8
@str252309 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 3\00", align 8
@str252317 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 2\00", align 8
@str252325 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 1\00", align 8
@str252344 = private unnamed_addr constant [33 x i8] c"Error: Too many arguments given.\00", align 8
@str252356 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 2\00", align 8
@str252364 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 1\00", align 8
@str252382 = private unnamed_addr constant [33 x i8] c"Error: Too many arguments given.\00", align 8
@str252421 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 2\00", align 8
@str252429 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 1\00", align 8
@str252450 = private unnamed_addr constant [33 x i8] c"Error: Too many arguments given.\00", align 8
@str252470 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 2\00", align 8
@str252478 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 1\00", align 8
@str252503 = private unnamed_addr constant [33 x i8] c"Error: Too many arguments given.\00", align 8
@str252525 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 2\00", align 8
@str252533 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 1\00", align 8
@str252565 = private unnamed_addr constant [33 x i8] c"Error: Too many arguments given.\00", align 8
@str252587 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 2\00", align 8
@str252595 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 1\00", align 8
@str252619 = private unnamed_addr constant [33 x i8] c"Error: Too many arguments given.\00", align 8
@str252639 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 2\00", align 8
@str252647 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 1\00", align 8
@str252666 = private unnamed_addr constant [33 x i8] c"Error: Too many arguments given.\00", align 8
@str252682 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 2\00", align 8
@str252690 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 1\00", align 8
@str252710 = private unnamed_addr constant [33 x i8] c"Error: Too many arguments given.\00", align 8
@str252722 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 2\00", align 8
@str252730 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 1\00", align 8
@str252742 = private unnamed_addr constant [33 x i8] c"Error: Too many arguments given.\00", align 8
@str252750 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 3\00", align 8
@str252758 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 2\00", align 8
@str252766 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 1\00", align 8
@str252778 = private unnamed_addr constant [33 x i8] c"Error: Too many arguments given.\00", align 8
@str252786 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 2\00", align 8
@str252794 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 1\00", align 8
@str252806 = private unnamed_addr constant [33 x i8] c"Error: Too many arguments given.\00", align 8
@str252814 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 2\00", align 8
@str252822 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 1\00", align 8
@str252834 = private unnamed_addr constant [33 x i8] c"Error: Too many arguments given.\00", align 8
@str252842 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 3\00", align 8
@str252850 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 2\00", align 8
@str252858 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 1\00", align 8
@str252877 = private unnamed_addr constant [33 x i8] c"Error: Too many arguments given.\00", align 8
@str252885 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 2\00", align 8
@str252893 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 1\00", align 8
@str252909 = private unnamed_addr constant [33 x i8] c"Error: Too many arguments given.\00", align 8
@str252919 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 4\00", align 8
@str252927 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 3\00", align 8
@str252935 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 2\00", align 8
@str252943 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 1\00", align 8
@str252969 = private unnamed_addr constant [33 x i8] c"Error: Too many arguments given.\00", align 8
@str252985 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 2\00", align 8
@str252993 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 1\00", align 8
@str253005 = private unnamed_addr constant [33 x i8] c"Error: Too many arguments given.\00", align 8
@str253013 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 2\00", align 8
@str253021 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 1\00", align 8
@str253037 = private unnamed_addr constant [33 x i8] c"Error: Too many arguments given.\00", align 8
@str253047 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 2\00", align 8
@str253055 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 1\00", align 8
@str253078 = private unnamed_addr constant [33 x i8] c"Error: Too many arguments given.\00", align 8
@str253088 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 2\00", align 8
@str253096 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 1\00", align 8
@str253108 = private unnamed_addr constant [33 x i8] c"Error: Too many arguments given.\00", align 8
@str253116 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 2\00", align 8
@str253124 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 1\00", align 8
@str253140 = private unnamed_addr constant [33 x i8] c"Error: Too many arguments given.\00", align 8
@str253150 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 3\00", align 8
@str253158 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 2\00", align 8
@str253166 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 1\00", align 8
@str253197 = private unnamed_addr constant [33 x i8] c"Error: Too many arguments given.\00", align 8
@str253209 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 2\00", align 8
@str253217 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 1\00", align 8
@str253229 = private unnamed_addr constant [33 x i8] c"Error: Too many arguments given.\00", align 8
@str253237 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 2\00", align 8
@str253245 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 1\00", align 8
@str253261 = private unnamed_addr constant [33 x i8] c"Error: Too many arguments given.\00", align 8
@str253271 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 3\00", align 8
@str253279 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 2\00", align 8
@str253287 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 1\00", align 8
@str253313 = private unnamed_addr constant [33 x i8] c"Error: Too many arguments given.\00", align 8
@str253329 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 2\00", align 8
@str253337 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 1\00", align 8
@str253354 = private unnamed_addr constant [33 x i8] c"Error: Too many arguments given.\00", align 8
@str253366 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 2\00", align 8
@str253374 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 1\00", align 8
@str253386 = private unnamed_addr constant [33 x i8] c"Error: Too many arguments given.\00", align 8
@str253394 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 2\00", align 8
@str253402 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 1\00", align 8
@str253418 = private unnamed_addr constant [33 x i8] c"Error: Too many arguments given.\00", align 8
@str253428 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 4\00", align 8
@str253436 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 3\00", align 8
@str253444 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 2\00", align 8
@str253452 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 1\00", align 8
@str253477 = private unnamed_addr constant [33 x i8] c"Error: Too many arguments given.\00", align 8
@str253491 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 2\00", align 8
@str253499 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 1\00", align 8
@str253511 = private unnamed_addr constant [33 x i8] c"Error: Too many arguments given.\00", align 8
@str253519 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 2\00", align 8
@str253527 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 1\00", align 8
@str253543 = private unnamed_addr constant [33 x i8] c"Error: Too many arguments given.\00", align 8
@str253553 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 2\00", align 8
@str253561 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 1\00", align 8
@str253578 = private unnamed_addr constant [33 x i8] c"Error: Too many arguments given.\00", align 8
@str253606 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 2\00", align 8
@str253614 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 1\00", align 8
@str253631 = private unnamed_addr constant [33 x i8] c"Error: Too many arguments given.\00", align 8
@str253643 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 2\00", align 8
@str253651 = private unnamed_addr constant [43 x i8] c"Error: Too few arguments given, missing: 1\00", align 8
@str253663 = private unnamed_addr constant [33 x i8] c"Error: Too many arguments given.\00", align 8
